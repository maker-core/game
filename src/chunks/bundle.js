System.register([], function(_export, _context) { return { execute: function () {
System.register("chunks:///_virtual/aes.js", ['./cjs-loader.mjs', './core.js', './enc-base64.js', './md5.js', './evpkdf.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var BlockCipher = C_lib.BlockCipher;
            var C_algo = C.algo;

            // Lookup tables
            var SBOX = [];
            var INV_SBOX = [];
            var SUB_MIX_0 = [];
            var SUB_MIX_1 = [];
            var SUB_MIX_2 = [];
            var SUB_MIX_3 = [];
            var INV_SUB_MIX_0 = [];
            var INV_SUB_MIX_1 = [];
            var INV_SUB_MIX_2 = [];
            var INV_SUB_MIX_3 = [];

            // Compute lookup tables
            (function () {
              // Compute double table
              var d = [];
              for (var i = 0; i < 256; i++) {
                if (i < 128) {
                  d[i] = i << 1;
                } else {
                  d[i] = i << 1 ^ 0x11b;
                }
              }

              // Walk GF(2^8)
              var x = 0;
              var xi = 0;
              for (var i = 0; i < 256; i++) {
                // Compute sbox
                var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
                SBOX[x] = sx;
                INV_SBOX[sx] = x;

                // Compute multiplication
                var x2 = d[x];
                var x4 = d[x2];
                var x8 = d[x4];

                // Compute sub bytes, mix columns tables
                var t = d[sx] * 0x101 ^ sx * 0x1010100;
                SUB_MIX_0[x] = t << 24 | t >>> 8;
                SUB_MIX_1[x] = t << 16 | t >>> 16;
                SUB_MIX_2[x] = t << 8 | t >>> 24;
                SUB_MIX_3[x] = t;

                // Compute inv sub bytes, inv mix columns tables
                var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
                INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
                INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
                INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
                INV_SUB_MIX_3[sx] = t;

                // Compute next counter
                if (!x) {
                  x = xi = 1;
                } else {
                  x = x2 ^ d[d[d[x8 ^ x2]]];
                  xi ^= d[d[xi]];
                }
              }
            })();

            // Precomputed Rcon lookup
            var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

            /**
             * AES block cipher algorithm.
             */
            var AES = C_algo.AES = BlockCipher.extend({
              _doReset: function () {
                var t;

                // Skip reset of nRounds has been set before and key did not change
                if (this._nRounds && this._keyPriorReset === this._key) {
                  return;
                }

                // Shortcuts
                var key = this._keyPriorReset = this._key;
                var keyWords = key.words;
                var keySize = key.sigBytes / 4;

                // Compute number of rounds
                var nRounds = this._nRounds = keySize + 6;

                // Compute number of key schedule rows
                var ksRows = (nRounds + 1) * 4;

                // Compute key schedule
                var keySchedule = this._keySchedule = [];
                for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                  if (ksRow < keySize) {
                    keySchedule[ksRow] = keyWords[ksRow];
                  } else {
                    t = keySchedule[ksRow - 1];
                    if (!(ksRow % keySize)) {
                      // Rot word
                      t = t << 8 | t >>> 24;

                      // Sub word
                      t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];

                      // Mix Rcon
                      t ^= RCON[ksRow / keySize | 0] << 24;
                    } else if (keySize > 6 && ksRow % keySize == 4) {
                      // Sub word
                      t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
                    }
                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                  }
                }

                // Compute inv key schedule
                var invKeySchedule = this._invKeySchedule = [];
                for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                  var ksRow = ksRows - invKsRow;
                  if (invKsRow % 4) {
                    var t = keySchedule[ksRow];
                  } else {
                    var t = keySchedule[ksRow - 4];
                  }
                  if (invKsRow < 4 || ksRow <= 4) {
                    invKeySchedule[invKsRow] = t;
                  } else {
                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                  }
                }
              },
              encryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
              },
              decryptBlock: function (M, offset) {
                // Swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
                this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

                // Inv swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
              },
              _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                // Shortcut
                var nRounds = this._nRounds;

                // Get input, add round key
                var s0 = M[offset] ^ keySchedule[0];
                var s1 = M[offset + 1] ^ keySchedule[1];
                var s2 = M[offset + 2] ^ keySchedule[2];
                var s3 = M[offset + 3] ^ keySchedule[3];

                // Key schedule row counter
                var ksRow = 4;

                // Rounds
                for (var round = 1; round < nRounds; round++) {
                  // Shift rows, sub bytes, mix columns, add round key
                  var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                  var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                  var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                  var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

                  // Update state
                  s0 = t0;
                  s1 = t1;
                  s2 = t2;
                  s3 = t3;
                }

                // Shift rows, sub bytes, add round key
                var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

                // Set output
                M[offset] = t0;
                M[offset + 1] = t1;
                M[offset + 2] = t2;
                M[offset + 3] = t3;
              },
              keySize: 256 / 32
            });

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
             */
            C.AES = BlockCipher._createHelper(AES);
          })();
          return CryptoJS.AES;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './enc-base64': __cjsMetaURL$2,
        './md5': __cjsMetaURL$3,
        './evpkdf': __cjsMetaURL$4,
        './cipher-core': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/blowfish.js", ['./cjs-loader.mjs', './core.js', './enc-base64.js', './md5.js', './evpkdf.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var BlockCipher = C_lib.BlockCipher;
            var C_algo = C.algo;
            const N = 16;

            //Origin pbox and sbox, derived from PI
            const ORIG_P = [0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344, 0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89, 0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C, 0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917, 0x9216D5D9, 0x8979FB1B];
            const ORIG_S = [[0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7, 0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99, 0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16, 0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E, 0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE, 0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013, 0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF, 0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E, 0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60, 0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440, 0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE, 0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A, 0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E, 0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677, 0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193, 0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032, 0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88, 0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239, 0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E, 0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0, 0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3, 0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98, 0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88, 0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE, 0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6, 0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D, 0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B, 0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7, 0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA, 0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463, 0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F, 0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09, 0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3, 0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB, 0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279, 0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8, 0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB, 0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82, 0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB, 0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573, 0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0, 0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B, 0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790, 0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8, 0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4, 0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0, 0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7, 0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C, 0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD, 0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1, 0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299, 0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9, 0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477, 0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF, 0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49, 0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF, 0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA, 0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5, 0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41, 0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915, 0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400, 0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915, 0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664, 0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A], [0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623, 0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266, 0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1, 0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E, 0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6, 0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1, 0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E, 0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1, 0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737, 0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8, 0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF, 0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD, 0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701, 0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7, 0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41, 0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331, 0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF, 0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF, 0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E, 0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87, 0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C, 0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2, 0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16, 0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD, 0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B, 0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509, 0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E, 0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3, 0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F, 0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A, 0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4, 0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960, 0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66, 0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28, 0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802, 0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84, 0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510, 0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF, 0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14, 0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E, 0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50, 0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7, 0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8, 0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281, 0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99, 0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696, 0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128, 0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73, 0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0, 0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0, 0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105, 0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250, 0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3, 0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285, 0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00, 0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061, 0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB, 0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E, 0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735, 0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC, 0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9, 0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340, 0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20, 0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7], [0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934, 0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068, 0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF, 0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840, 0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45, 0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504, 0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A, 0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB, 0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE, 0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6, 0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42, 0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B, 0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2, 0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB, 0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527, 0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B, 0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33, 0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C, 0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3, 0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC, 0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17, 0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564, 0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B, 0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115, 0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922, 0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728, 0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0, 0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E, 0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37, 0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D, 0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804, 0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B, 0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3, 0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB, 0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D, 0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C, 0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350, 0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9, 0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A, 0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE, 0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D, 0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC, 0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F, 0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61, 0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2, 0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9, 0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2, 0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C, 0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E, 0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633, 0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10, 0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169, 0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52, 0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027, 0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5, 0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62, 0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634, 0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76, 0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24, 0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC, 0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4, 0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C, 0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837, 0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0], [0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B, 0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE, 0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B, 0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4, 0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8, 0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6, 0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304, 0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22, 0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4, 0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6, 0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9, 0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59, 0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593, 0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51, 0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28, 0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C, 0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B, 0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28, 0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C, 0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD, 0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A, 0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319, 0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB, 0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F, 0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991, 0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32, 0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680, 0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166, 0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE, 0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB, 0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5, 0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47, 0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370, 0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D, 0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84, 0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048, 0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8, 0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD, 0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9, 0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7, 0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38, 0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F, 0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C, 0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525, 0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1, 0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442, 0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964, 0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E, 0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8, 0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D, 0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F, 0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299, 0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02, 0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC, 0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614, 0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A, 0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6, 0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B, 0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0, 0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060, 0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E, 0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9, 0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F, 0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6]];
            var BLOWFISH_CTX = {
              pbox: [],
              sbox: []
            };
            function F(ctx, x) {
              let a = x >> 24 & 0xFF;
              let b = x >> 16 & 0xFF;
              let c = x >> 8 & 0xFF;
              let d = x & 0xFF;
              let y = ctx.sbox[0][a] + ctx.sbox[1][b];
              y = y ^ ctx.sbox[2][c];
              y = y + ctx.sbox[3][d];
              return y;
            }
            function BlowFish_Encrypt(ctx, left, right) {
              let Xl = left;
              let Xr = right;
              let temp;
              for (let i = 0; i < N; ++i) {
                Xl = Xl ^ ctx.pbox[i];
                Xr = F(ctx, Xl) ^ Xr;
                temp = Xl;
                Xl = Xr;
                Xr = temp;
              }
              temp = Xl;
              Xl = Xr;
              Xr = temp;
              Xr = Xr ^ ctx.pbox[N];
              Xl = Xl ^ ctx.pbox[N + 1];
              return {
                left: Xl,
                right: Xr
              };
            }
            function BlowFish_Decrypt(ctx, left, right) {
              let Xl = left;
              let Xr = right;
              let temp;
              for (let i = N + 1; i > 1; --i) {
                Xl = Xl ^ ctx.pbox[i];
                Xr = F(ctx, Xl) ^ Xr;
                temp = Xl;
                Xl = Xr;
                Xr = temp;
              }
              temp = Xl;
              Xl = Xr;
              Xr = temp;
              Xr = Xr ^ ctx.pbox[1];
              Xl = Xl ^ ctx.pbox[0];
              return {
                left: Xl,
                right: Xr
              };
            }

            /**
             * Initialization ctx's pbox and sbox.
             *
             * @param {Object} ctx The object has pbox and sbox.
             * @param {Array} key An array of 32-bit words.
             * @param {int} keysize The length of the key.
             *
             * @example
             *
             *     BlowFishInit(BLOWFISH_CTX, key, 128/32);
             */
            function BlowFishInit(ctx, key, keysize) {
              for (let Row = 0; Row < 4; Row++) {
                ctx.sbox[Row] = [];
                for (let Col = 0; Col < 256; Col++) {
                  ctx.sbox[Row][Col] = ORIG_S[Row][Col];
                }
              }
              let keyIndex = 0;
              for (let index = 0; index < N + 2; index++) {
                ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
                keyIndex++;
                if (keyIndex >= keysize) {
                  keyIndex = 0;
                }
              }
              let Data1 = 0;
              let Data2 = 0;
              let res = 0;
              for (let i = 0; i < N + 2; i += 2) {
                res = BlowFish_Encrypt(ctx, Data1, Data2);
                Data1 = res.left;
                Data2 = res.right;
                ctx.pbox[i] = Data1;
                ctx.pbox[i + 1] = Data2;
              }
              for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 256; j += 2) {
                  res = BlowFish_Encrypt(ctx, Data1, Data2);
                  Data1 = res.left;
                  Data2 = res.right;
                  ctx.sbox[i][j] = Data1;
                  ctx.sbox[i][j + 1] = Data2;
                }
              }
              return true;
            }

            /**
             * Blowfish block cipher algorithm.
             */
            var Blowfish = C_algo.Blowfish = BlockCipher.extend({
              _doReset: function () {
                // Skip reset of nRounds has been set before and key did not change
                if (this._keyPriorReset === this._key) {
                  return;
                }

                // Shortcuts
                var key = this._keyPriorReset = this._key;
                var keyWords = key.words;
                var keySize = key.sigBytes / 4;

                //Initialization pbox and sbox
                BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
              },
              encryptBlock: function (M, offset) {
                var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
                M[offset] = res.left;
                M[offset + 1] = res.right;
              },
              decryptBlock: function (M, offset) {
                var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
                M[offset] = res.left;
                M[offset + 1] = res.right;
              },
              blockSize: 64 / 32,
              keySize: 128 / 32,
              ivSize: 64 / 32
            });

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.Blowfish.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.Blowfish.decrypt(ciphertext, key, cfg);
             */
            C.Blowfish = BlockCipher._createHelper(Blowfish);
          })();
          return CryptoJS.Blowfish;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './enc-base64': __cjsMetaURL$2,
        './md5': __cjsMetaURL$3,
        './evpkdf': __cjsMetaURL$4,
        './cipher-core': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/chunk-MQXBDTVK.js", [], function (exports) {
  return {
    execute: function () {
      var __accessCheck = (obj, member, msg) => {
        if (!member.has(obj)) throw TypeError("Cannot " + msg);
      };
      var __privateGet = exports('__privateGet', (obj, member, getter) => {
        __accessCheck(obj, member, "read from private field");
        return getter ? getter.call(obj) : member.get(obj);
      });
      var __privateAdd = exports('__privateAdd', (obj, member, value) => {
        if (member.has(obj)) throw TypeError("Cannot add the same private member more than once");
        member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
      });
      var __privateSet = exports('__privateSet', (obj, member, value, setter) => {
        __accessCheck(obj, member, "write to private field");
        setter ? setter.call(obj, value) : member.set(obj, value);
        return value;
      });
      var __privateMethod = exports('__privateMethod', (obj, member, method) => {
        __accessCheck(obj, member, "access private method");
        return method;
      });
    }
  };
});

System.register("chunks:///_virtual/cipher-core.js", ['./cjs-loader.mjs', './core.js', './evpkdf.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./evpkdf"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./evpkdf"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * Cipher core components.
           */
          CryptoJS.lib.Cipher || function (undefined$1) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var Base = C_lib.Base;
            var WordArray = C_lib.WordArray;
            var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
            var C_enc = C.enc;
            var Utf8 = C_enc.Utf8;
            var Base64 = C_enc.Base64;
            var C_algo = C.algo;
            var EvpKDF = C_algo.EvpKDF;

            /**
             * Abstract base cipher template.
             *
             * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
             * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
             * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
             * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
             */
            var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
              /**
               * Configuration options.
               *
               * @property {WordArray} iv The IV to use for this operation.
               */
              cfg: Base.extend(),
              /**
               * Creates this cipher in encryption mode.
               *
               * @param {WordArray} key The key.
               * @param {Object} cfg (Optional) The configuration options to use for this operation.
               *
               * @return {Cipher} A cipher instance.
               *
               * @static
               *
               * @example
               *
               *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
               */
              createEncryptor: function (key, cfg) {
                return this.create(this._ENC_XFORM_MODE, key, cfg);
              },
              /**
               * Creates this cipher in decryption mode.
               *
               * @param {WordArray} key The key.
               * @param {Object} cfg (Optional) The configuration options to use for this operation.
               *
               * @return {Cipher} A cipher instance.
               *
               * @static
               *
               * @example
               *
               *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
               */
              createDecryptor: function (key, cfg) {
                return this.create(this._DEC_XFORM_MODE, key, cfg);
              },
              /**
               * Initializes a newly created cipher.
               *
               * @param {number} xformMode Either the encryption or decryption transormation mode constant.
               * @param {WordArray} key The key.
               * @param {Object} cfg (Optional) The configuration options to use for this operation.
               *
               * @example
               *
               *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
               */
              init: function (xformMode, key, cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);

                // Store transform mode and key
                this._xformMode = xformMode;
                this._key = key;

                // Set initial values
                this.reset();
              },
              /**
               * Resets this cipher to its initial state.
               *
               * @example
               *
               *     cipher.reset();
               */
              reset: function () {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);

                // Perform concrete-cipher logic
                this._doReset();
              },
              /**
               * Adds data to be encrypted or decrypted.
               *
               * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
               *
               * @return {WordArray} The data after processing.
               *
               * @example
               *
               *     var encrypted = cipher.process('data');
               *     var encrypted = cipher.process(wordArray);
               */
              process: function (dataUpdate) {
                // Append
                this._append(dataUpdate);

                // Process available blocks
                return this._process();
              },
              /**
               * Finalizes the encryption or decryption process.
               * Note that the finalize operation is effectively a destructive, read-once operation.
               *
               * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
               *
               * @return {WordArray} The data after final processing.
               *
               * @example
               *
               *     var encrypted = cipher.finalize();
               *     var encrypted = cipher.finalize('data');
               *     var encrypted = cipher.finalize(wordArray);
               */
              finalize: function (dataUpdate) {
                // Final data update
                if (dataUpdate) {
                  this._append(dataUpdate);
                }

                // Perform concrete-cipher logic
                var finalProcessedData = this._doFinalize();
                return finalProcessedData;
              },
              keySize: 128 / 32,
              ivSize: 128 / 32,
              _ENC_XFORM_MODE: 1,
              _DEC_XFORM_MODE: 2,
              /**
               * Creates shortcut functions to a cipher's object interface.
               *
               * @param {Cipher} cipher The cipher to create a helper for.
               *
               * @return {Object} An object with encrypt and decrypt shortcut functions.
               *
               * @static
               *
               * @example
               *
               *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
               */
              _createHelper: function () {
                function selectCipherStrategy(key) {
                  if (typeof key == 'string') {
                    return PasswordBasedCipher;
                  } else {
                    return SerializableCipher;
                  }
                }
                return function (cipher) {
                  return {
                    encrypt: function (message, key, cfg) {
                      return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                    },
                    decrypt: function (ciphertext, key, cfg) {
                      return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                    }
                  };
                };
              }()
            });

            /**
             * Abstract base stream cipher template.
             *
             * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
             */
            var StreamCipher = C_lib.StreamCipher = Cipher.extend({
              _doFinalize: function () {
                // Process partial blocks
                var finalProcessedBlocks = this._process(!!'flush');
                return finalProcessedBlocks;
              },
              blockSize: 1
            });

            /**
             * Mode namespace.
             */
            var C_mode = C.mode = {};

            /**
             * Abstract base block cipher mode template.
             */
            var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
              /**
               * Creates this mode for encryption.
               *
               * @param {Cipher} cipher A block cipher instance.
               * @param {Array} iv The IV words.
               *
               * @static
               *
               * @example
               *
               *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
               */
              createEncryptor: function (cipher, iv) {
                return this.Encryptor.create(cipher, iv);
              },
              /**
               * Creates this mode for decryption.
               *
               * @param {Cipher} cipher A block cipher instance.
               * @param {Array} iv The IV words.
               *
               * @static
               *
               * @example
               *
               *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
               */
              createDecryptor: function (cipher, iv) {
                return this.Decryptor.create(cipher, iv);
              },
              /**
               * Initializes a newly created mode.
               *
               * @param {Cipher} cipher A block cipher instance.
               * @param {Array} iv The IV words.
               *
               * @example
               *
               *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
               */
              init: function (cipher, iv) {
                this._cipher = cipher;
                this._iv = iv;
              }
            });

            /**
             * Cipher Block Chaining mode.
             */
            var CBC = C_mode.CBC = function () {
              /**
               * Abstract base CBC mode.
               */
              var CBC = BlockCipherMode.extend();

              /**
               * CBC encryptor.
               */
              CBC.Encryptor = CBC.extend({
                /**
                 * Processes the data block at offset.
                 *
                 * @param {Array} words The data words to operate on.
                 * @param {number} offset The offset where the block starts.
                 *
                 * @example
                 *
                 *     mode.processBlock(data.words, offset);
                 */
                processBlock: function (words, offset) {
                  // Shortcuts
                  var cipher = this._cipher;
                  var blockSize = cipher.blockSize;

                  // XOR and encrypt
                  xorBlock.call(this, words, offset, blockSize);
                  cipher.encryptBlock(words, offset);

                  // Remember this block to use with next block
                  this._prevBlock = words.slice(offset, offset + blockSize);
                }
              });

              /**
               * CBC decryptor.
               */
              CBC.Decryptor = CBC.extend({
                /**
                 * Processes the data block at offset.
                 *
                 * @param {Array} words The data words to operate on.
                 * @param {number} offset The offset where the block starts.
                 *
                 * @example
                 *
                 *     mode.processBlock(data.words, offset);
                 */
                processBlock: function (words, offset) {
                  // Shortcuts
                  var cipher = this._cipher;
                  var blockSize = cipher.blockSize;

                  // Remember this block to use with next block
                  var thisBlock = words.slice(offset, offset + blockSize);

                  // Decrypt and XOR
                  cipher.decryptBlock(words, offset);
                  xorBlock.call(this, words, offset, blockSize);

                  // This block becomes the previous block
                  this._prevBlock = thisBlock;
                }
              });
              function xorBlock(words, offset, blockSize) {
                var block;

                // Shortcut
                var iv = this._iv;

                // Choose mixing block
                if (iv) {
                  block = iv;

                  // Remove IV for subsequent blocks
                  this._iv = undefined$1;
                } else {
                  block = this._prevBlock;
                }

                // XOR blocks
                for (var i = 0; i < blockSize; i++) {
                  words[offset + i] ^= block[i];
                }
              }
              return CBC;
            }();

            /**
             * Padding namespace.
             */
            var C_pad = C.pad = {};

            /**
             * PKCS #5/7 padding strategy.
             */
            var Pkcs7 = C_pad.Pkcs7 = {
              /**
               * Pads data using the algorithm defined in PKCS #5/7.
               *
               * @param {WordArray} data The data to pad.
               * @param {number} blockSize The multiple that the data should be padded to.
               *
               * @static
               *
               * @example
               *
               *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
               */
              pad: function (data, blockSize) {
                // Shortcut
                var blockSizeBytes = blockSize * 4;

                // Count padding bytes
                var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

                // Create padding word
                var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;

                // Create padding
                var paddingWords = [];
                for (var i = 0; i < nPaddingBytes; i += 4) {
                  paddingWords.push(paddingWord);
                }
                var padding = WordArray.create(paddingWords, nPaddingBytes);

                // Add padding
                data.concat(padding);
              },
              /**
               * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
               *
               * @param {WordArray} data The data to unpad.
               *
               * @static
               *
               * @example
               *
               *     CryptoJS.pad.Pkcs7.unpad(wordArray);
               */
              unpad: function (data) {
                // Get number of padding bytes from last byte
                var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

                // Remove padding
                data.sigBytes -= nPaddingBytes;
              }
            };

            /**
             * Abstract base block cipher template.
             *
             * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
             */
            var BlockCipher = C_lib.BlockCipher = Cipher.extend({
              /**
               * Configuration options.
               *
               * @property {Mode} mode The block mode to use. Default: CBC
               * @property {Padding} padding The padding strategy to use. Default: Pkcs7
               */
              cfg: Cipher.cfg.extend({
                mode: CBC,
                padding: Pkcs7
              }),
              reset: function () {
                var modeCreator;

                // Reset cipher
                Cipher.reset.call(this);

                // Shortcuts
                var cfg = this.cfg;
                var iv = cfg.iv;
                var mode = cfg.mode;

                // Reset block mode
                if (this._xformMode == this._ENC_XFORM_MODE) {
                  modeCreator = mode.createEncryptor;
                } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
                    modeCreator = mode.createDecryptor;
                    // Keep at least one block in the buffer for unpadding
                    this._minBufferSize = 1;
                  }
                if (this._mode && this._mode.__creator == modeCreator) {
                  this._mode.init(this, iv && iv.words);
                } else {
                  this._mode = modeCreator.call(mode, this, iv && iv.words);
                  this._mode.__creator = modeCreator;
                }
              },
              _doProcessBlock: function (words, offset) {
                this._mode.processBlock(words, offset);
              },
              _doFinalize: function () {
                var finalProcessedBlocks;

                // Shortcut
                var padding = this.cfg.padding;

                // Finalize
                if (this._xformMode == this._ENC_XFORM_MODE) {
                  // Pad data
                  padding.pad(this._data, this.blockSize);

                  // Process final blocks
                  finalProcessedBlocks = this._process(!!'flush');
                } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
                    // Process final blocks
                    finalProcessedBlocks = this._process(!!'flush');

                    // Unpad data
                    padding.unpad(finalProcessedBlocks);
                  }
                return finalProcessedBlocks;
              },
              blockSize: 128 / 32
            });

            /**
             * A collection of cipher parameters.
             *
             * @property {WordArray} ciphertext The raw ciphertext.
             * @property {WordArray} key The key to this ciphertext.
             * @property {WordArray} iv The IV used in the ciphering operation.
             * @property {WordArray} salt The salt used with a key derivation function.
             * @property {Cipher} algorithm The cipher algorithm.
             * @property {Mode} mode The block mode used in the ciphering operation.
             * @property {Padding} padding The padding scheme used in the ciphering operation.
             * @property {number} blockSize The block size of the cipher.
             * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
             */
            var CipherParams = C_lib.CipherParams = Base.extend({
              /**
               * Initializes a newly created cipher params object.
               *
               * @param {Object} cipherParams An object with any of the possible cipher parameters.
               *
               * @example
               *
               *     var cipherParams = CryptoJS.lib.CipherParams.create({
               *         ciphertext: ciphertextWordArray,
               *         key: keyWordArray,
               *         iv: ivWordArray,
               *         salt: saltWordArray,
               *         algorithm: CryptoJS.algo.AES,
               *         mode: CryptoJS.mode.CBC,
               *         padding: CryptoJS.pad.PKCS7,
               *         blockSize: 4,
               *         formatter: CryptoJS.format.OpenSSL
               *     });
               */
              init: function (cipherParams) {
                this.mixIn(cipherParams);
              },
              /**
               * Converts this cipher params object to a string.
               *
               * @param {Format} formatter (Optional) The formatting strategy to use.
               *
               * @return {string} The stringified cipher params.
               *
               * @throws Error If neither the formatter nor the default formatter is set.
               *
               * @example
               *
               *     var string = cipherParams + '';
               *     var string = cipherParams.toString();
               *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
               */
              toString: function (formatter) {
                return (formatter || this.formatter).stringify(this);
              }
            });

            /**
             * Format namespace.
             */
            var C_format = C.format = {};

            /**
             * OpenSSL formatting strategy.
             */
            var OpenSSLFormatter = C_format.OpenSSL = {
              /**
               * Converts a cipher params object to an OpenSSL-compatible string.
               *
               * @param {CipherParams} cipherParams The cipher params object.
               *
               * @return {string} The OpenSSL-compatible string.
               *
               * @static
               *
               * @example
               *
               *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
               */
              stringify: function (cipherParams) {
                var wordArray;

                // Shortcuts
                var ciphertext = cipherParams.ciphertext;
                var salt = cipherParams.salt;

                // Format
                if (salt) {
                  wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
                } else {
                  wordArray = ciphertext;
                }
                return wordArray.toString(Base64);
              },
              /**
               * Converts an OpenSSL-compatible string to a cipher params object.
               *
               * @param {string} openSSLStr The OpenSSL-compatible string.
               *
               * @return {CipherParams} The cipher params object.
               *
               * @static
               *
               * @example
               *
               *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
               */
              parse: function (openSSLStr) {
                var salt;

                // Parse base64
                var ciphertext = Base64.parse(openSSLStr);

                // Shortcut
                var ciphertextWords = ciphertext.words;

                // Test for salt
                if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                  // Extract salt
                  salt = WordArray.create(ciphertextWords.slice(2, 4));

                  // Remove salt from ciphertext
                  ciphertextWords.splice(0, 4);
                  ciphertext.sigBytes -= 16;
                }
                return CipherParams.create({
                  ciphertext: ciphertext,
                  salt: salt
                });
              }
            };

            /**
             * A cipher wrapper that returns ciphertext as a serializable cipher params object.
             */
            var SerializableCipher = C_lib.SerializableCipher = Base.extend({
              /**
               * Configuration options.
               *
               * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
               */
              cfg: Base.extend({
                format: OpenSSLFormatter
              }),
              /**
               * Encrypts a message.
               *
               * @param {Cipher} cipher The cipher algorithm to use.
               * @param {WordArray|string} message The message to encrypt.
               * @param {WordArray} key The key.
               * @param {Object} cfg (Optional) The configuration options to use for this operation.
               *
               * @return {CipherParams} A cipher params object.
               *
               * @static
               *
               * @example
               *
               *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
               *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
               *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
               */
              encrypt: function (cipher, message, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);

                // Encrypt
                var encryptor = cipher.createEncryptor(key, cfg);
                var ciphertext = encryptor.finalize(message);

                // Shortcut
                var cipherCfg = encryptor.cfg;

                // Create and return serializable cipher params
                return CipherParams.create({
                  ciphertext: ciphertext,
                  key: key,
                  iv: cipherCfg.iv,
                  algorithm: cipher,
                  mode: cipherCfg.mode,
                  padding: cipherCfg.padding,
                  blockSize: cipher.blockSize,
                  formatter: cfg.format
                });
              },
              /**
               * Decrypts serialized ciphertext.
               *
               * @param {Cipher} cipher The cipher algorithm to use.
               * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
               * @param {WordArray} key The key.
               * @param {Object} cfg (Optional) The configuration options to use for this operation.
               *
               * @return {WordArray} The plaintext.
               *
               * @static
               *
               * @example
               *
               *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
               *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
               */
              decrypt: function (cipher, ciphertext, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);

                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);

                // Decrypt
                var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
                return plaintext;
              },
              /**
               * Converts serialized ciphertext to CipherParams,
               * else assumed CipherParams already and returns ciphertext unchanged.
               *
               * @param {CipherParams|string} ciphertext The ciphertext.
               * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
               *
               * @return {CipherParams} The unserialized ciphertext.
               *
               * @static
               *
               * @example
               *
               *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
               */
              _parse: function (ciphertext, format) {
                if (typeof ciphertext == 'string') {
                  return format.parse(ciphertext, this);
                } else {
                  return ciphertext;
                }
              }
            });

            /**
             * Key derivation function namespace.
             */
            var C_kdf = C.kdf = {};

            /**
             * OpenSSL key derivation function.
             */
            var OpenSSLKdf = C_kdf.OpenSSL = {
              /**
               * Derives a key and IV from a password.
               *
               * @param {string} password The password to derive from.
               * @param {number} keySize The size in words of the key to generate.
               * @param {number} ivSize The size in words of the IV to generate.
               * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
               *
               * @return {CipherParams} A cipher params object with the key, IV, and salt.
               *
               * @static
               *
               * @example
               *
               *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
               *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
               */
              execute: function (password, keySize, ivSize, salt, hasher) {
                // Generate random salt
                if (!salt) {
                  salt = WordArray.random(64 / 8);
                }

                // Derive key and IV
                if (!hasher) {
                  var key = EvpKDF.create({
                    keySize: keySize + ivSize
                  }).compute(password, salt);
                } else {
                  var key = EvpKDF.create({
                    keySize: keySize + ivSize,
                    hasher: hasher
                  }).compute(password, salt);
                }

                // Separate key and IV
                var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                key.sigBytes = keySize * 4;

                // Return params
                return CipherParams.create({
                  key: key,
                  iv: iv,
                  salt: salt
                });
              }
            };

            /**
             * A serializable cipher wrapper that derives the key from a password,
             * and returns ciphertext as a serializable cipher params object.
             */
            var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
              /**
               * Configuration options.
               *
               * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
               */
              cfg: SerializableCipher.cfg.extend({
                kdf: OpenSSLKdf
              }),
              /**
               * Encrypts a message using a password.
               *
               * @param {Cipher} cipher The cipher algorithm to use.
               * @param {WordArray|string} message The message to encrypt.
               * @param {string} password The password.
               * @param {Object} cfg (Optional) The configuration options to use for this operation.
               *
               * @return {CipherParams} A cipher params object.
               *
               * @static
               *
               * @example
               *
               *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
               *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
               */
              encrypt: function (cipher, message, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);

                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);

                // Add IV to config
                cfg.iv = derivedParams.iv;

                // Encrypt
                var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

                // Mix in derived params
                ciphertext.mixIn(derivedParams);
                return ciphertext;
              },
              /**
               * Decrypts serialized ciphertext using a password.
               *
               * @param {Cipher} cipher The cipher algorithm to use.
               * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
               * @param {string} password The password.
               * @param {Object} cfg (Optional) The configuration options to use for this operation.
               *
               * @return {WordArray} The plaintext.
               *
               * @static
               *
               * @example
               *
               *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
               *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
               */
              decrypt: function (cipher, ciphertext, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);

                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);

                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);

                // Add IV to config
                cfg.iv = derivedParams.iv;

                // Decrypt
                var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
                return plaintext;
              }
            });
          }();
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './evpkdf': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/cjs-loader.mjs", [], function (exports) {
  return {
    execute: function () {
      class CjsLoader {
        constructor() {
          this._registry = {};
          this._moduleCache = {};
        }

        /**
         * Defines a CommonJS module.
         * @param id Module ID.
         * @param factory The factory.
         * @param resolveMap An object or a function returning object which records the module specifier resolve result.
         * The later is called as "deferred resolve map" and would be invocated right before CommonJS code execution.
         */
        define(id, factory, resolveMap) {
          this._registry[id] = {
            factory,
            resolveMap
          };
        }

        /**
         * Requires a CommonJS module.
         * @param id Module ID.
         * @returns The module's `module.exports`.
         */
        require(id) {
          return this._require(id);
        }
        throwInvalidWrapper(requestTarget, from) {
          throw new Error(`Module '${requestTarget}' imported from '${from}' is expected be an ESM-wrapped CommonJS module but it doesn't.`);
        }
        _require(id, parent) {
          const cachedModule = this._moduleCache[id];
          if (cachedModule) {
            return cachedModule.exports;
          }
          const module = {
            id,
            exports: {}
          };
          this._moduleCache[id] = module;
          this._tryModuleLoad(module, id);
          return module.exports;
        }
        _resolve(specifier, parent) {
          return this._resolveFromInfos(specifier, parent) || this._throwUnresolved(specifier, parent);
        }
        _resolveFromInfos(specifier, parent) {
          if (specifier in cjsInfos) {
            return specifier;
          }
          if (!parent) {
            return;
          }
          return cjsInfos[parent]?.resolveCache[specifier] ?? undefined;
        }
        _tryModuleLoad(module, id) {
          let threw = true;
          try {
            this._load(module, id);
            threw = false;
          } finally {
            if (threw) {
              delete this._moduleCache[id];
            }
          }
        }
        _load(module, id) {
          const {
            factory,
            resolveMap
          } = this._loadWrapper(id);
          const vendorRequire = this._createRequire(module);
          const require = resolveMap ? this._createRequireWithResolveMap(typeof resolveMap === 'function' ? resolveMap() : resolveMap, vendorRequire) : vendorRequire;
          factory(module.exports, require, module);
        }
        _loadWrapper(id) {
          if (id in this._registry) {
            return this._registry[id];
          } else {
            return this._loadHostProvidedModules(id);
          }
        }
        _loadHostProvidedModules(id) {
          return {
            factory: (_exports, _require, module) => {
              if (typeof require === 'undefined') {
                throw new Error(`Current environment does not provide a require() for requiring '${id}'.`);
              }
              try {
                module.exports = require(id);
              } catch (err) {
                throw new Error(`Exception thrown when calling host defined require('${id}').`, {
                  cause: err
                });
              }
            }
          };
        }
        _createRequire(module) {
          return specifier => this._require(specifier, module);
        }
        _createRequireWithResolveMap(requireMap, originalRequire) {
          return specifier => {
            const resolved = requireMap[specifier];
            if (resolved) {
              return originalRequire(resolved);
            } else {
              throw new Error('Unresolved specifier ' + specifier);
            }
          };
        }
        _throwUnresolved(specifier, parentUrl) {
          throw new Error(`Unable to resolve ${specifier} from ${parent}.`);
        }
      }
      var loader = exports('default', new CjsLoader());
    }
  };
});

System.register("chunks:///_virtual/core.js", ['./cjs-loader.mjs', './javascript,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20export%20const%20__cjsMetaURL%20%3D%20\'crypto\'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory();
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define([], factory);
          } else {
            // Global (browser)
            root.CryptoJS = factory();
          }
        })(this, function () {
          /*globals window, global, require*/

          /**
           * CryptoJS core components.
           */
          var CryptoJS = CryptoJS || function (Math, undefined$1) {
            var crypto;

            // Native crypto from window (Browser)
            if (typeof window !== 'undefined' && window.crypto) {
              crypto = window.crypto;
            }

            // Native crypto in web worker (Browser)
            if (typeof self !== 'undefined' && self.crypto) {
              crypto = self.crypto;
            }

            // Native crypto from worker
            if (typeof globalThis !== 'undefined' && globalThis.crypto) {
              crypto = globalThis.crypto;
            }

            // Native (experimental IE 11) crypto from window (Browser)
            if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
              crypto = window.msCrypto;
            }

            // Native crypto from global (NodeJS)
            if (!crypto && typeof global !== 'undefined' && global.crypto) {
              crypto = global.crypto;
            }

            // Native crypto import via require (NodeJS)
            if (!crypto && typeof require === 'function') {
              try {
                crypto = require('crypto');
              } catch (err) {}
            }

            /*
             * Cryptographically secure pseudorandom number generator
             *
             * As Math.random() is cryptographically not safe to use
             */
            var cryptoSecureRandomInt = function () {
              if (crypto) {
                // Use getRandomValues method (Browser)
                if (typeof crypto.getRandomValues === 'function') {
                  try {
                    return crypto.getRandomValues(new Uint32Array(1))[0];
                  } catch (err) {}
                }

                // Use randomBytes method (NodeJS)
                if (typeof crypto.randomBytes === 'function') {
                  try {
                    return crypto.randomBytes(4).readInt32LE();
                  } catch (err) {}
                }
              }
              throw new Error('Native crypto module could not be used to get secure random number.');
            };

            /*
             * Local polyfill of Object.create
              */
            var create = Object.create || function () {
              function F() {}
              return function (obj) {
                var subtype;
                F.prototype = obj;
                subtype = new F();
                F.prototype = null;
                return subtype;
              };
            }();

            /**
             * CryptoJS namespace.
             */
            var C = {};

            /**
             * Library namespace.
             */
            var C_lib = C.lib = {};

            /**
             * Base object for prototypal inheritance.
             */
            var Base = C_lib.Base = function () {
              return {
                /**
                 * Creates a new object that inherits from this object.
                 *
                 * @param {Object} overrides Properties to copy into the new object.
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         field: 'value',
                 *
                 *         method: function () {
                 *         }
                 *     });
                 */
                extend: function (overrides) {
                  // Spawn
                  var subtype = create(this);

                  // Augment
                  if (overrides) {
                    subtype.mixIn(overrides);
                  }

                  // Create default initializer
                  if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                    subtype.init = function () {
                      subtype.$super.init.apply(this, arguments);
                    };
                  }

                  // Initializer's prototype is the subtype object
                  subtype.init.prototype = subtype;

                  // Reference supertype
                  subtype.$super = this;
                  return subtype;
                },
                /**
                 * Extends this object and runs the init method.
                 * Arguments to create() will be passed to init().
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var instance = MyType.create();
                 */
                create: function () {
                  var instance = this.extend();
                  instance.init.apply(instance, arguments);
                  return instance;
                },
                /**
                 * Initializes a newly created object.
                 * Override this method to add some logic when your objects are created.
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         init: function () {
                 *             // ...
                 *         }
                 *     });
                 */
                init: function () {},
                /**
                 * Copies properties into this object.
                 *
                 * @param {Object} properties The properties to mix in.
                 *
                 * @example
                 *
                 *     MyType.mixIn({
                 *         field: 'value'
                 *     });
                 */
                mixIn: function (properties) {
                  for (var propertyName in properties) {
                    if (properties.hasOwnProperty(propertyName)) {
                      this[propertyName] = properties[propertyName];
                    }
                  }

                  // IE won't copy toString using the loop above
                  if (properties.hasOwnProperty('toString')) {
                    this.toString = properties.toString;
                  }
                },
                /**
                 * Creates a copy of this object.
                 *
                 * @return {Object} The clone.
                 *
                 * @example
                 *
                 *     var clone = instance.clone();
                 */
                clone: function () {
                  return this.init.prototype.extend(this);
                }
              };
            }();

            /**
             * An array of 32-bit words.
             *
             * @property {Array} words The array of 32-bit words.
             * @property {number} sigBytes The number of significant bytes in this word array.
             */
            var WordArray = C_lib.WordArray = Base.extend({
              /**
               * Initializes a newly created word array.
               *
               * @param {Array} words (Optional) An array of 32-bit words.
               * @param {number} sigBytes (Optional) The number of significant bytes in the words.
               *
               * @example
               *
               *     var wordArray = CryptoJS.lib.WordArray.create();
               *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
               *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
               */
              init: function (words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined$1) {
                  this.sigBytes = sigBytes;
                } else {
                  this.sigBytes = words.length * 4;
                }
              },
              /**
               * Converts this word array to a string.
               *
               * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
               *
               * @return {string} The stringified word array.
               *
               * @example
               *
               *     var string = wordArray + '';
               *     var string = wordArray.toString();
               *     var string = wordArray.toString(CryptoJS.enc.Utf8);
               */
              toString: function (encoder) {
                return (encoder || Hex).stringify(this);
              },
              /**
               * Concatenates a word array to this word array.
               *
               * @param {WordArray} wordArray The word array to append.
               *
               * @return {WordArray} This word array.
               *
               * @example
               *
               *     wordArray1.concat(wordArray2);
               */
              concat: function (wordArray) {
                // Shortcuts
                var thisWords = this.words;
                var thatWords = wordArray.words;
                var thisSigBytes = this.sigBytes;
                var thatSigBytes = wordArray.sigBytes;

                // Clamp excess bits
                this.clamp();

                // Concat
                if (thisSigBytes % 4) {
                  // Copy one byte at a time
                  for (var i = 0; i < thatSigBytes; i++) {
                    var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                  }
                } else {
                  // Copy one word at a time
                  for (var j = 0; j < thatSigBytes; j += 4) {
                    thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
                  }
                }
                this.sigBytes += thatSigBytes;

                // Chainable
                return this;
              },
              /**
               * Removes insignificant bits.
               *
               * @example
               *
               *     wordArray.clamp();
               */
              clamp: function () {
                // Shortcuts
                var words = this.words;
                var sigBytes = this.sigBytes;

                // Clamp
                words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
                words.length = Math.ceil(sigBytes / 4);
              },
              /**
               * Creates a copy of this word array.
               *
               * @return {WordArray} The clone.
               *
               * @example
               *
               *     var clone = wordArray.clone();
               */
              clone: function () {
                var clone = Base.clone.call(this);
                clone.words = this.words.slice(0);
                return clone;
              },
              /**
               * Creates a word array filled with random bytes.
               *
               * @param {number} nBytes The number of random bytes to generate.
               *
               * @return {WordArray} The random word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.lib.WordArray.random(16);
               */
              random: function (nBytes) {
                var words = [];
                for (var i = 0; i < nBytes; i += 4) {
                  words.push(cryptoSecureRandomInt());
                }
                return new WordArray.init(words, nBytes);
              }
            });

            /**
             * Encoder namespace.
             */
            var C_enc = C.enc = {};

            /**
             * Hex encoding strategy.
             */
            var Hex = C_enc.Hex = {
              /**
               * Converts a word array to a hex string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The hex string.
               *
               * @static
               *
               * @example
               *
               *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
               */
              stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;

                // Convert
                var hexChars = [];
                for (var i = 0; i < sigBytes; i++) {
                  var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                  hexChars.push((bite >>> 4).toString(16));
                  hexChars.push((bite & 0x0f).toString(16));
                }
                return hexChars.join('');
              },
              /**
               * Converts a hex string to a word array.
               *
               * @param {string} hexStr The hex string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
               */
              parse: function (hexStr) {
                // Shortcut
                var hexStrLength = hexStr.length;

                // Convert
                var words = [];
                for (var i = 0; i < hexStrLength; i += 2) {
                  words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
                }
                return new WordArray.init(words, hexStrLength / 2);
              }
            };

            /**
             * Latin1 encoding strategy.
             */
            var Latin1 = C_enc.Latin1 = {
              /**
               * Converts a word array to a Latin1 string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The Latin1 string.
               *
               * @static
               *
               * @example
               *
               *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
               */
              stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;

                // Convert
                var latin1Chars = [];
                for (var i = 0; i < sigBytes; i++) {
                  var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                  latin1Chars.push(String.fromCharCode(bite));
                }
                return latin1Chars.join('');
              },
              /**
               * Converts a Latin1 string to a word array.
               *
               * @param {string} latin1Str The Latin1 string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
               */
              parse: function (latin1Str) {
                // Shortcut
                var latin1StrLength = latin1Str.length;

                // Convert
                var words = [];
                for (var i = 0; i < latin1StrLength; i++) {
                  words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
                }
                return new WordArray.init(words, latin1StrLength);
              }
            };

            /**
             * UTF-8 encoding strategy.
             */
            var Utf8 = C_enc.Utf8 = {
              /**
               * Converts a word array to a UTF-8 string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The UTF-8 string.
               *
               * @static
               *
               * @example
               *
               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
               */
              stringify: function (wordArray) {
                try {
                  return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                } catch (e) {
                  throw new Error('Malformed UTF-8 data');
                }
              },
              /**
               * Converts a UTF-8 string to a word array.
               *
               * @param {string} utf8Str The UTF-8 string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
               */
              parse: function (utf8Str) {
                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
              }
            };

            /**
             * Abstract buffered block algorithm template.
             *
             * The property blockSize must be implemented in a concrete subtype.
             *
             * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
             */
            var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
              /**
               * Resets this block algorithm's data buffer to its initial state.
               *
               * @example
               *
               *     bufferedBlockAlgorithm.reset();
               */
              reset: function () {
                // Initial values
                this._data = new WordArray.init();
                this._nDataBytes = 0;
              },
              /**
               * Adds new data to this block algorithm's buffer.
               *
               * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
               *
               * @example
               *
               *     bufferedBlockAlgorithm._append('data');
               *     bufferedBlockAlgorithm._append(wordArray);
               */
              _append: function (data) {
                // Convert string to WordArray, else assume WordArray already
                if (typeof data == 'string') {
                  data = Utf8.parse(data);
                }

                // Append
                this._data.concat(data);
                this._nDataBytes += data.sigBytes;
              },
              /**
               * Processes available data blocks.
               *
               * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
               *
               * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
               *
               * @return {WordArray} The processed data.
               *
               * @example
               *
               *     var processedData = bufferedBlockAlgorithm._process();
               *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
               */
              _process: function (doFlush) {
                var processedWords;

                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var dataSigBytes = data.sigBytes;
                var blockSize = this.blockSize;
                var blockSizeBytes = blockSize * 4;

                // Count blocks ready
                var nBlocksReady = dataSigBytes / blockSizeBytes;
                if (doFlush) {
                  // Round up to include partial blocks
                  nBlocksReady = Math.ceil(nBlocksReady);
                } else {
                  // Round down to include only full blocks,
                  // less the number of blocks that must remain in the buffer
                  nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                }

                // Count words ready
                var nWordsReady = nBlocksReady * blockSize;

                // Count bytes ready
                var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

                // Process blocks
                if (nWordsReady) {
                  for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                    // Perform concrete-algorithm logic
                    this._doProcessBlock(dataWords, offset);
                  }

                  // Remove processed words
                  processedWords = dataWords.splice(0, nWordsReady);
                  data.sigBytes -= nBytesReady;
                }

                // Return processed words
                return new WordArray.init(processedWords, nBytesReady);
              },
              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = bufferedBlockAlgorithm.clone();
               */
              clone: function () {
                var clone = Base.clone.call(this);
                clone._data = this._data.clone();
                return clone;
              },
              _minBufferSize: 0
            });

            /**
             * Abstract hasher template.
             *
             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
             */
            var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
              /**
               * Configuration options.
               */
              cfg: Base.extend(),
              /**
               * Initializes a newly created hasher.
               *
               * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
               *
               * @example
               *
               *     var hasher = CryptoJS.algo.SHA256.create();
               */
              init: function (cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);

                // Set initial values
                this.reset();
              },
              /**
               * Resets this hasher to its initial state.
               *
               * @example
               *
               *     hasher.reset();
               */
              reset: function () {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);

                // Perform concrete-hasher logic
                this._doReset();
              },
              /**
               * Updates this hasher with a message.
               *
               * @param {WordArray|string} messageUpdate The message to append.
               *
               * @return {Hasher} This hasher.
               *
               * @example
               *
               *     hasher.update('message');
               *     hasher.update(wordArray);
               */
              update: function (messageUpdate) {
                // Append
                this._append(messageUpdate);

                // Update the hash
                this._process();

                // Chainable
                return this;
              },
              /**
               * Finalizes the hash computation.
               * Note that the finalize operation is effectively a destructive, read-once operation.
               *
               * @param {WordArray|string} messageUpdate (Optional) A final message update.
               *
               * @return {WordArray} The hash.
               *
               * @example
               *
               *     var hash = hasher.finalize();
               *     var hash = hasher.finalize('message');
               *     var hash = hasher.finalize(wordArray);
               */
              finalize: function (messageUpdate) {
                // Final message update
                if (messageUpdate) {
                  this._append(messageUpdate);
                }

                // Perform concrete-hasher logic
                var hash = this._doFinalize();
                return hash;
              },
              blockSize: 512 / 32,
              /**
               * Creates a shortcut function to a hasher's object interface.
               *
               * @param {Hasher} hasher The hasher to create a helper for.
               *
               * @return {Function} The shortcut function.
               *
               * @static
               *
               * @example
               *
               *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
               */
              _createHelper: function (hasher) {
                return function (message, cfg) {
                  return new hasher.init(cfg).finalize(message);
                };
              },
              /**
               * Creates a shortcut function to the HMAC's object interface.
               *
               * @param {Hasher} hasher The hasher to use in this HMAC helper.
               *
               * @return {Function} The shortcut function.
               *
               * @static
               *
               * @example
               *
               *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
               */
              _createHmacHelper: function (hasher) {
                return function (message, key) {
                  return new C_algo.HMAC.init(hasher, key).finalize(message);
                };
              }
            });

            /**
             * Algorithm namespace.
             */
            var C_algo = C.algo = {};
            return C;
          }(Math);
          return CryptoJS;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        'crypto': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/enc-base64.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var C_enc = C.enc;

            /**
             * Base64 encoding strategy.
             */
            var Base64 = C_enc.Base64 = {
              /**
               * Converts a word array to a Base64 string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The Base64 string.
               *
               * @static
               *
               * @example
               *
               *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
               */
              stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                var map = this._map;

                // Clamp excess bits
                wordArray.clamp();

                // Convert
                var base64Chars = [];
                for (var i = 0; i < sigBytes; i += 3) {
                  var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                  var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
                  var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
                  var triplet = byte1 << 16 | byte2 << 8 | byte3;
                  for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                    base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
                  }
                }

                // Add padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                  while (base64Chars.length % 4) {
                    base64Chars.push(paddingChar);
                  }
                }
                return base64Chars.join('');
              },
              /**
               * Converts a Base64 string to a word array.
               *
               * @param {string} base64Str The Base64 string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
               */
              parse: function (base64Str) {
                // Shortcuts
                var base64StrLength = base64Str.length;
                var map = this._map;
                var reverseMap = this._reverseMap;
                if (!reverseMap) {
                  reverseMap = this._reverseMap = [];
                  for (var j = 0; j < map.length; j++) {
                    reverseMap[map.charCodeAt(j)] = j;
                  }
                }

                // Ignore padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                  var paddingIndex = base64Str.indexOf(paddingChar);
                  if (paddingIndex !== -1) {
                    base64StrLength = paddingIndex;
                  }
                }

                // Convert
                return parseLoop(base64Str, base64StrLength, reverseMap);
              },
              _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
            };
            function parseLoop(base64Str, base64StrLength, reverseMap) {
              var words = [];
              var nBytes = 0;
              for (var i = 0; i < base64StrLength; i++) {
                if (i % 4) {
                  var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                  var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                  var bitsCombined = bits1 | bits2;
                  words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                  nBytes++;
                }
              }
              return WordArray.create(words, nBytes);
            }
          })();
          return CryptoJS.enc.Base64;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/enc-base64url.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var C_enc = C.enc;

            /**
             * Base64url encoding strategy.
             */
            var Base64url = C_enc.Base64url = {
              /**
               * Converts a word array to a Base64url string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @param {boolean} urlSafe Whether to use url safe
               *
               * @return {string} The Base64url string.
               *
               * @static
               *
               * @example
               *
               *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
               */
              stringify: function (wordArray, urlSafe) {
                if (urlSafe === undefined) {
                  urlSafe = true;
                }
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                var map = urlSafe ? this._safe_map : this._map;

                // Clamp excess bits
                wordArray.clamp();

                // Convert
                var base64Chars = [];
                for (var i = 0; i < sigBytes; i += 3) {
                  var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                  var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
                  var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
                  var triplet = byte1 << 16 | byte2 << 8 | byte3;
                  for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                    base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
                  }
                }

                // Add padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                  while (base64Chars.length % 4) {
                    base64Chars.push(paddingChar);
                  }
                }
                return base64Chars.join('');
              },
              /**
               * Converts a Base64url string to a word array.
               *
               * @param {string} base64Str The Base64url string.
               *
               * @param {boolean} urlSafe Whether to use url safe
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
               */
              parse: function (base64Str, urlSafe) {
                if (urlSafe === undefined) {
                  urlSafe = true;
                }

                // Shortcuts
                var base64StrLength = base64Str.length;
                var map = urlSafe ? this._safe_map : this._map;
                var reverseMap = this._reverseMap;
                if (!reverseMap) {
                  reverseMap = this._reverseMap = [];
                  for (var j = 0; j < map.length; j++) {
                    reverseMap[map.charCodeAt(j)] = j;
                  }
                }

                // Ignore padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                  var paddingIndex = base64Str.indexOf(paddingChar);
                  if (paddingIndex !== -1) {
                    base64StrLength = paddingIndex;
                  }
                }

                // Convert
                return parseLoop(base64Str, base64StrLength, reverseMap);
              },
              _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
              _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
            };
            function parseLoop(base64Str, base64StrLength, reverseMap) {
              var words = [];
              var nBytes = 0;
              for (var i = 0; i < base64StrLength; i++) {
                if (i % 4) {
                  var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                  var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                  var bitsCombined = bits1 | bits2;
                  words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                  nBytes++;
                }
              }
              return WordArray.create(words, nBytes);
            }
          })();
          return CryptoJS.enc.Base64url;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/enc-utf16.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var C_enc = C.enc;

            /**
             * UTF-16 BE encoding strategy.
             */
            var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
              /**
               * Converts a word array to a UTF-16 BE string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The UTF-16 BE string.
               *
               * @static
               *
               * @example
               *
               *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
               */
              stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;

                // Convert
                var utf16Chars = [];
                for (var i = 0; i < sigBytes; i += 2) {
                  var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
                  utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join('');
              },
              /**
               * Converts a UTF-16 BE string to a word array.
               *
               * @param {string} utf16Str The UTF-16 BE string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
               */
              parse: function (utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;

                // Convert
                var words = [];
                for (var i = 0; i < utf16StrLength; i++) {
                  words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
                }
                return WordArray.create(words, utf16StrLength * 2);
              }
            };

            /**
             * UTF-16 LE encoding strategy.
             */
            C_enc.Utf16LE = {
              /**
               * Converts a word array to a UTF-16 LE string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The UTF-16 LE string.
               *
               * @static
               *
               * @example
               *
               *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
               */
              stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;

                // Convert
                var utf16Chars = [];
                for (var i = 0; i < sigBytes; i += 2) {
                  var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
                  utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join('');
              },
              /**
               * Converts a UTF-16 LE string to a word array.
               *
               * @param {string} utf16Str The UTF-16 LE string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
               */
              parse: function (utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;

                // Convert
                var words = [];
                for (var i = 0; i < utf16StrLength; i++) {
                  words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
                }
                return WordArray.create(words, utf16StrLength * 2);
              }
            };
            function swapEndian(word) {
              return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
            }
          })();
          return CryptoJS.enc.Utf16;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/evpkdf.js", ['./cjs-loader.mjs', './core.js', './sha1.js', './hmac.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./sha1", "./hmac"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var Base = C_lib.Base;
            var WordArray = C_lib.WordArray;
            var C_algo = C.algo;
            var MD5 = C_algo.MD5;

            /**
             * This key derivation function is meant to conform with EVP_BytesToKey.
             * www.openssl.org/docs/crypto/EVP_BytesToKey.html
             */
            var EvpKDF = C_algo.EvpKDF = Base.extend({
              /**
               * Configuration options.
               *
               * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
               * @property {Hasher} hasher The hash algorithm to use. Default: MD5
               * @property {number} iterations The number of iterations to perform. Default: 1
               */
              cfg: Base.extend({
                keySize: 128 / 32,
                hasher: MD5,
                iterations: 1
              }),
              /**
               * Initializes a newly created key derivation function.
               *
               * @param {Object} cfg (Optional) The configuration options to use for the derivation.
               *
               * @example
               *
               *     var kdf = CryptoJS.algo.EvpKDF.create();
               *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
               *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
               */
              init: function (cfg) {
                this.cfg = this.cfg.extend(cfg);
              },
              /**
               * Derives a key from a password.
               *
               * @param {WordArray|string} password The password.
               * @param {WordArray|string} salt A salt.
               *
               * @return {WordArray} The derived key.
               *
               * @example
               *
               *     var key = kdf.compute(password, salt);
               */
              compute: function (password, salt) {
                var block;

                // Shortcut
                var cfg = this.cfg;

                // Init hasher
                var hasher = cfg.hasher.create();

                // Initial values
                var derivedKey = WordArray.create();

                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;

                // Generate key
                while (derivedKeyWords.length < keySize) {
                  if (block) {
                    hasher.update(block);
                  }
                  block = hasher.update(password).finalize(salt);
                  hasher.reset();

                  // Iterations
                  for (var i = 1; i < iterations; i++) {
                    block = hasher.finalize(block);
                    hasher.reset();
                  }
                  derivedKey.concat(block);
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
              }
            });

            /**
             * Derives a key from a password.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             * @param {Object} cfg (Optional) The configuration options to use for this computation.
             *
             * @return {WordArray} The derived key.
             *
             * @static
             *
             * @example
             *
             *     var key = CryptoJS.EvpKDF(password, salt);
             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
             */
            C.EvpKDF = function (password, salt, cfg) {
              return EvpKDF.create(cfg).compute(password, salt);
            };
          })();
          return CryptoJS.EvpKDF;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './sha1': __cjsMetaURL$2,
        './hmac': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/format-hex.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function (undefined$1) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var CipherParams = C_lib.CipherParams;
            var C_enc = C.enc;
            var Hex = C_enc.Hex;
            var C_format = C.format;
            var HexFormatter = C_format.Hex = {
              /**
               * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
               *
               * @param {CipherParams} cipherParams The cipher params object.
               *
               * @return {string} The hexadecimally encoded string.
               *
               * @static
               *
               * @example
               *
               *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
               */
              stringify: function (cipherParams) {
                return cipherParams.ciphertext.toString(Hex);
              },
              /**
               * Converts a hexadecimally encoded ciphertext string to a cipher params object.
               *
               * @param {string} input The hexadecimally encoded string.
               *
               * @return {CipherParams} The cipher params object.
               *
               * @static
               *
               * @example
               *
               *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
               */
              parse: function (input) {
                var ciphertext = Hex.parse(input);
                return CipherParams.create({
                  ciphertext: ciphertext
                });
              }
            };
          })();
          return CryptoJS.format.Hex;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/hmac.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var Base = C_lib.Base;
            var C_enc = C.enc;
            var Utf8 = C_enc.Utf8;
            var C_algo = C.algo;

            /**
             * HMAC algorithm.
             */
            var HMAC = C_algo.HMAC = Base.extend({
              /**
               * Initializes a newly created HMAC.
               *
               * @param {Hasher} hasher The hash algorithm to use.
               * @param {WordArray|string} key The secret key.
               *
               * @example
               *
               *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
               */
              init: function (hasher, key) {
                // Init hasher
                hasher = this._hasher = new hasher.init();

                // Convert string to WordArray, else assume WordArray already
                if (typeof key == 'string') {
                  key = Utf8.parse(key);
                }

                // Shortcuts
                var hasherBlockSize = hasher.blockSize;
                var hasherBlockSizeBytes = hasherBlockSize * 4;

                // Allow arbitrary length keys
                if (key.sigBytes > hasherBlockSizeBytes) {
                  key = hasher.finalize(key);
                }

                // Clamp excess bits
                key.clamp();

                // Clone key for inner and outer pads
                var oKey = this._oKey = key.clone();
                var iKey = this._iKey = key.clone();

                // Shortcuts
                var oKeyWords = oKey.words;
                var iKeyWords = iKey.words;

                // XOR keys with pad constants
                for (var i = 0; i < hasherBlockSize; i++) {
                  oKeyWords[i] ^= 0x5c5c5c5c;
                  iKeyWords[i] ^= 0x36363636;
                }
                oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

                // Set initial values
                this.reset();
              },
              /**
               * Resets this HMAC to its initial state.
               *
               * @example
               *
               *     hmacHasher.reset();
               */
              reset: function () {
                // Shortcut
                var hasher = this._hasher;

                // Reset
                hasher.reset();
                hasher.update(this._iKey);
              },
              /**
               * Updates this HMAC with a message.
               *
               * @param {WordArray|string} messageUpdate The message to append.
               *
               * @return {HMAC} This HMAC instance.
               *
               * @example
               *
               *     hmacHasher.update('message');
               *     hmacHasher.update(wordArray);
               */
              update: function (messageUpdate) {
                this._hasher.update(messageUpdate);

                // Chainable
                return this;
              },
              /**
               * Finalizes the HMAC computation.
               * Note that the finalize operation is effectively a destructive, read-once operation.
               *
               * @param {WordArray|string} messageUpdate (Optional) A final message update.
               *
               * @return {WordArray} The HMAC.
               *
               * @example
               *
               *     var hmac = hmacHasher.finalize();
               *     var hmac = hmacHasher.finalize('message');
               *     var hmac = hmacHasher.finalize(wordArray);
               */
              finalize: function (messageUpdate) {
                // Shortcut
                var hasher = this._hasher;

                // Compute HMAC
                var innerHash = hasher.finalize(messageUpdate);
                hasher.reset();
                var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
                return hmac;
              }
            });
          })();
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/index.js", ['./chunk-MQXBDTVK.js'], function (exports) {
  var __privateAdd, __privateGet, __privateSet, __privateMethod;
  return {
    setters: [function (module) {
      __privateAdd = module.__privateAdd;
      __privateGet = module.__privateGet;
      __privateSet = module.__privateSet;
      __privateMethod = module.__privateMethod;
    }],
    execute: function () {
      // ../../node_modules/.pnpm/tslib@2.5.0/node_modules/tslib/tslib.es6.js
      function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
          return f;
        }
        var kind = contextIn.kind,
          key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _,
          done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access) context.access[p] = contextIn.access[p];
          context.addInitializer = function (f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
          } : descriptor[key], context);
          if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.push(_);
          } else if (_ = accept(result)) {
            if (kind === "field") initializers.push(_);else descriptor[key] = _;
          }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      }
      function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      }
      function __setFunctionName(f, name, prefix) {
        if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", {
          configurable: true,
          value: prefix ? "".concat(prefix, " ", name) : name
        });
      }
      function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      }
      function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      }

      // src/utils/byteLength/byteLength.ts
      var MAX_BYTE = 127;
      var TWO_KB_THRESHOLD = 2047;
      var MAX_UNSIGNED_16_BIT = 65535;
      var MAGIC_NUMBER_1 = 56320;
      var MAGIC_NUMBER_2 = 57343;
      var byteLength = data => {
        if (window.Blob) {
          try {
            return new window.Blob([data]).size;
          } catch {}
        }
        let size = data.length;
        for (let i = data.length - 1; i >= 0; i--) {
          const code = data.charCodeAt(i);
          if (code > MAX_BYTE && code <= TWO_KB_THRESHOLD) {
            size++;
          } else if (code > TWO_KB_THRESHOLD && code <= MAX_UNSIGNED_16_BIT) {
            size += 2;
          }
          if (code >= MAGIC_NUMBER_1 && code <= MAGIC_NUMBER_2) {
            i--;
          }
        }
        return size;
      };

      // src/utils/EventEmitter.ts
      var _events, _addEventListener, addEventListener_fn, _createEventListenersSet, createEventListenersSet_fn;
      var EventBus = class {
        constructor() {
          __privateAdd(this, _addEventListener);
          __privateAdd(this, _createEventListenersSet);
          __privateAdd(this, _events, /* @__PURE__ */new Map());
        }
        emit(event) {
          for (var _len = arguments.length, value = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            value[_key - 1] = arguments[_key];
          }
          const listener = __privateGet(this, _events).get(event);
          if (!listener) {
            return;
          }
          const evaluateListener = listener2 => listener2(...value);
          listener.forEach(evaluateListener);
        }
        subscribe(event, listener) {
          if (!__privateGet(this, _events).has(event)) {
            __privateMethod(this, _createEventListenersSet, createEventListenersSet_fn).call(this, event);
          }
          __privateMethod(this, _addEventListener, addEventListener_fn).call(this, event, listener);
          return () => this.unsubscribe(event, listener);
        }
        unsubscribe(event, listener) {
          if (!__privateGet(this, _events).has(event)) {
            return;
          }
          const listenersSet = __privateGet(this, _events).get(event);
          listenersSet.delete(listener);
        }
        hasEvent(event) {
          return __privateGet(this, _events).has(event);
        }
      };
      _events = new WeakMap();
      _addEventListener = new WeakSet();
      addEventListener_fn = function (event, listener) {
        const listenersSet = __privateGet(this, _events).get(event);
        listenersSet.add(listener);
      };
      _createEventListenersSet = new WeakSet();
      createEventListenersSet_fn = function (event) {
        const listenersSet = /* @__PURE__ */new Set();
        __privateGet(this, _events).set(event, listenersSet);
      };

      // src/utils/generateId/generateId.ts
      var generateId = length => {
        const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        const charsLength = chars.length;
        let id = "";
        for (let i = 0; i < length; i++) {
          const randomIndex = Math.floor(Math.random() * charsLength);
          id += chars[randomIndex];
        }
        return id;
      };

      // src/utils/sessionStorage.ts
      var _SessionStorage = class {};
      var SessionStorage = _SessionStorage;
      SessionStorage.BASE_KEY = "__telegram__";
      SessionStorage.get = key => {
        try {
          return JSON.parse(window.sessionStorage.getItem(_SessionStorage.BASE_KEY + key));
        } catch {
          return null;
        }
      };
      SessionStorage.set = (key, value) => {
        try {
          window.sessionStorage.setItem(_SessionStorage.BASE_KEY + key, JSON.stringify(value));
          return true;
        } catch {
          return false;
        }
      };

      // src/utils/isNullable/isNullable.ts
      var isNullable = value => {
        return value === void 0 || value === null;
      };

      // src/utils/url.ts
      var urlSafeDecode = urlencoded => {
        try {
          urlencoded = urlencoded.replace(/\+/g, "%20");
          return decodeURIComponent(urlencoded);
        } catch {
          return urlencoded;
        }
      };
      var urlParseHashParams = locationHash => {
        locationHash = locationHash.replace(/^#/, "");
        if (!locationHash.length) {
          return {};
        }
        if (!locationHash.includes("=") && !locationHash.includes("?")) {
          return {
            _path: urlSafeDecode(locationHash)
          };
        }
        const params = {};
        const queryStringIndex = locationHash.indexOf("?");
        if (queryStringIndex >= 0) {
          const pathParam = locationHash.slice(0, queryStringIndex);
          params._path = urlSafeDecode(pathParam);
          locationHash = locationHash.slice(queryStringIndex + 1);
        }
        const queryParams = urlParseQueryString(locationHash);
        for (const [key, value] of Object.entries(queryParams)) {
          params[key] = value;
        }
        return params;
      };
      var urlParseQueryString = queryString => {
        if (!queryString.length) {
          return {};
        }
        const queryStringParams = queryString.split("&");
        const params = queryStringParams.reduce((acc, param) => {
          const [name, value] = param.split("=");
          const paramName = urlSafeDecode(name);
          const paramValue = isNullable(value) ? null : urlSafeDecode(value);
          return {
            ...acc,
            [paramName]: paramValue
          };
        }, {});
        return params;
      };
      var urlAppendHashParams = (url, addHash) => {
        const hashIndex = url.indexOf("#");
        if (hashIndex < 0) {
          return url + "#" + addHash;
        }
        const curHash = url.substr(hashIndex + 1);
        if (curHash.indexOf("=") >= 0 || curHash.indexOf("?") >= 0) {
          return url + "&" + addHash;
        }
        if (curHash.length > 0) {
          return url + "?" + addHash;
        }
        return url + addHash;
      };

      // src/utils/getWebViewInitParams.ts
      var INIT_PARAMS = "initParams";
      var getWebViewInitParams = locationHash => {
        const initParams = urlParseHashParams(locationHash);
        const storedParams = SessionStorage.get(INIT_PARAMS);
        if (storedParams) {
          for (const [key, value] of Object.entries(storedParams)) {
            if (typeof initParams[key] === "undefined") {
              initParams[key] = value;
            }
          }
        }
        SessionStorage.set(INIT_PARAMS, initParams);
        return initParams;
      };

      // src/utils/isColorDark/isColorDark.ts
      var isColorDark = rgb => {
        rgb = rgb.replace(/[\s#]/g, "");
        if (rgb.length === 3) {
          rgb = rgb[0] + rgb[0] + rgb[1] + rgb[1] + rgb[2] + rgb[2];
        }
        const r = parseInt(rgb.slice(0, 2), 16);
        const g = parseInt(rgb.slice(2, 4), 16);
        const b = parseInt(rgb.slice(4, 6), 16);
        const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));
        return hsp < 120;
      };

      // src/utils/isHTTPTypeProtocol/isHTTPTypeProtocol.ts
      var isHTTPTypeProtocol = protocol => {
        return protocol === "http:" || protocol === "https:";
      };

      // src/utils/isTelegramHostname/isTelegramHostname.ts
      var VALID_TELEGRAM_HOSTNAMES = ["t.me", "telegram.me", "telegram.dog"];
      var isHostnameWithUsername = hostname => {
        return hostname.split(".").length > 2;
      };
      var isTelegramHostname = hostname => {
        let lowerCaseHostname = hostname.toLowerCase();
        if (isHostnameWithUsername(lowerCaseHostname)) {
          const [domain, subdomain] = hostname.split(".").reverse();
          lowerCaseHostname = `${subdomain}.${domain}`;
        }
        return VALID_TELEGRAM_HOSTNAMES.includes(lowerCaseHostname);
      };

      // src/utils/parseColorToHex.ts
      var HEX_REGEXP = /^\s*#([0-9a-f]{6})\s*$/i;
      var SHORT_HEX_REGEXP = /^\s*#([0-9a-f])([0-9a-f])([0-9a-f])\s*$/i;
      var RGB_OR_RGBA_REGEXP = /^\s*rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+\.{0,1}\d*))?\)\s*$/;
      var toHex = value => (value < 16 ? "0" : "") + value.toString(16);
      var parseColorToHex = color => {
        if (typeof color !== "string" && typeof color !== "number") {
          return false;
        }
        const stringifiedColor = color.toString();
        const hexColorMatch = HEX_REGEXP.exec(stringifiedColor);
        if (hexColorMatch) {
          const hexColorWithoutHash = hexColorMatch[1].toLowerCase();
          return "#" + hexColorWithoutHash;
        }
        const shortHexColorMatch = SHORT_HEX_REGEXP.exec(stringifiedColor);
        if (shortHexColorMatch) {
          const [, r, g, b] = shortHexColorMatch;
          return ("#" + r + r + g + g + b + b).toLowerCase();
        }
        const rgbOrRgbaColorMatch = RGB_OR_RGBA_REGEXP.exec(stringifiedColor);
        if (rgbOrRgbaColorMatch) {
          const r = toHex(parseInt(rgbOrRgbaColorMatch[1]));
          const g = toHex(parseInt(rgbOrRgbaColorMatch[2]));
          const b = toHex(parseInt(rgbOrRgbaColorMatch[3]));
          return "#" + r + g + b;
        }
        return false;
      };

      // src/decorators/Initializers.ts
      var _initizlizers;
      var Initializers = class {
        constructor() {
          __privateAdd(this, _initizlizers, /* @__PURE__ */new Set());
        }
        add(initializer) {
          __privateGet(this, _initizlizers).add(initializer);
        }
        invoke(instance) {
          __privateGet(this, _initizlizers).forEach(initializer => initializer.call(instance));
        }
      };
      _initizlizers = new WeakMap();

      // src/decorators/bind.ts
      function bindMethod(_, context) {
        if (!(context.kind === "method")) {
          throw new TypeError(`'bindMethod' cannot decorate kinds different from 'method'. Passed kind: ${context.kind}.`);
        }
        if (context.private) {
          const name = String(context.name);
          throw new Error(`'bindMethod' cannot decorate private properties like ${name}.`);
        }
        context.addInitializer(function () {
          this[context.name] = this[context.name].bind(this);
        });
      }
      function bindMethods(classArg, context) {
        if (!(context.kind === "class")) {
          throw new TypeError(`'bindMethods' cannot decorate kinds different from 'class'. Passed kind: ${context.kind}.`);
        }
        const initizlizers = new Initializers();
        const addInitializer = initializer => {
          initizlizers.add(initializer);
        };
        const wrapper = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          const instance = new classArg(...args);
          initizlizers.invoke(instance);
          return instance;
        };
        wrapper.prototype = classArg.prototype;
        Object.getOwnPropertyNames(classArg).filter(name => name !== "length" && name !== "constructor" && name !== "prototype" && name !== "name").forEach(name => {
          const descr = Object.getOwnPropertyDescriptor(classArg, name);
          Object.defineProperty(wrapper, name, descr);
        });
        const methods = Object.getOwnPropertyNames(classArg.prototype).filter(name => name !== "constructor");
        methods.forEach(methodName => {
          const descriptor = Object.getOwnPropertyDescriptor(classArg.prototype, methodName);
          if (descriptor?.value) {
            bindMethod(descriptor.value, {
              kind: "method",
              name: methodName,
              private: false,
              addInitializer
            });
          }
        });
        return wrapper;
      }

      // src/Errors/HapticFeedback/WebAppHapticFeedbackTypeInvalid.ts
      var WebAppHapticFeedbackTypeInvalidError = class extends Error {
        constructor(type) {
          super(`[Telegram.WebApp] Haptic feedback type is invalid ${type}`);
        }
      };

      // src/Errors/HapticFeedback/WebAppHapticImpactStyleInvalid.ts
      var WebAppHapticImpactStyleInvalidError = class extends Error {
        constructor(style) {
          super(`[Telegram.WebApp] Haptic impact style is invalid ${style}`);
        }
      };

      // src/Errors/HapticFeedback/WebAppHapticNotificationTypeInvalid.ts
      var WebAppHapticNotificationTypeInvalidError = class extends Error {
        constructor(notification) {
          super(`[Telegram.WebApp] Haptic notification type is invalid ${notification}`);
        }
      };

      // src/Errors/Invoice/WebAppInvoiceOpened.ts
      var WebAppInvoiceOpenedError = class extends Error {
        constructor() {
          super("[Telegram.WebApp] Invoice is already opened");
        }
      };

      // src/Errors/Invoice/WebAppInvoiceUrlInvalid.ts
      var WebAppInvoiceUrlInvalidError = class extends Error {
        constructor(url) {
          super(`[Telegram.WebApp] Invoice url is invalid ${url}`);
        }
      };

      // src/Errors/Popup/WebAppPopupOpened.ts
      var WebAppPopupOpenedError = class extends Error {
        constructor() {
          super("[Telegram.WebApp] Popup is already opened");
        }
      };

      // src/Errors/Popup/WebAppPopupParamInvalid.ts
      var WebAppPopupParamInvalidError = class extends Error {
        constructor(invalidParamMessage) {
          super(`[Telegram.WebApp] Popup ${invalidParamMessage}`);
        }
      };

      // src/Errors/ScanQrPopup/WebAppScanQrPopupOpened.ts
      var WebAppScanQrPopupOpenedError = class extends Error {
        constructor() {
          super("[Telegram.WebApp] Popup is already opened");
        }
      };

      // src/Errors/ScanQrPopup/WebAppScanQrPopupParamInvalid.ts
      var WebAppScanQrPopupParamInvalidError = class extends Error {
        constructor(invalidParamMessage) {
          super(`[Telegram.WebApp] Scan QR popup ${invalidParamMessage}`);
        }
      };

      // src/Errors/UnsupportedVersion.ts
      var UnsupportedVersionError = class extends RangeError {
        constructor(feature, method, version) {
          const message = `[Telegram.WebApp] ${method} from feature ${feature} is unavailable in version ${version}`;
          super(message);
        }
      };

      // src/Errors/WebAppBackgroundColorInvalid.ts
      var WebAppBackgroundColorInvalidError = class extends Error {
        constructor(color) {
          super(`[Telegram.WebApp] Background color format is invalid ${color}`);
        }
      };

      // src/Errors/WebAppDataInvalid.ts
      var WebAppDataInvalidError = class extends Error {
        constructor(invalidDataMessage) {
          super(`[Telegram.WebApp] Data ${invalidDataMessage}`);
        }
      };

      // src/Errors/WebAppHeaderColorKeyInvalid.ts
      var WebAppHeaderColorKeyInvalidError = class extends Error {
        constructor(colorKeyOrColor) {
          super(`[Telegram.WebApp] Header color key should be one of Telegram.WebApp.themeParams.bg_color, Telegram.WebApp.themeParams.secondary_bg_color, 'bg_color', 'secondary_bg_color' ${colorKeyOrColor}`);
        }
      };

      // src/Errors/WebAppInlineChooseChatTypeInvalid.ts
      var WebAppInlineChooseChatTypeInvalidError = class extends Error {
        constructor(invalidTypeMessage) {
          super(`[Telegram.WebApp] Choose chat ${invalidTypeMessage}`);
        }
      };

      // src/Errors/WebAppInlineModeDisabled.ts
      var WebAppInlineModeDisabledError = class extends Error {
        constructor() {
          super("[Telegram.WebApp] Inline mode is disabled for this bot. Read more about inline mode: https://core.telegram.org/bots/inline");
        }
      };

      // src/Errors/WebAppInlineQueryInvalid.ts
      var WebAppInlineQueryInvalidError = class extends Error {
        constructor(invalidQueryMessage) {
          super(`[Telegram.WebApp] Inline query ${invalidQueryMessage}`);
        }
      };

      // src/Errors/WebAppMainButtonParamInvalid.ts
      var WebAppMainButtonParamInvalidError = class extends Error {
        constructor(invalidParamMessage) {
          super(`[Telegram.WebApp] Main button ${invalidParamMessage}`);
        }
      };

      // src/Errors/WebAppMethodUnsupported.ts
      var WebAppMethodUnsupportedError = class extends Error {
        constructor(method, version) {
          super(`[Telegram.WebApp] Method ${method} is not supported in version ${version}`);
        }
      };

      // src/Errors/WebAppTelegramUrlInvalid.ts
      var WebAppTelegramUrlInvalidError = class extends Error {
        constructor(invalidUrlMessage) {
          super(`[Telegram.WebApp] Url ${invalidUrlMessage}`);
        }
      };

      // src/decorators/wrapper.ts
      var isStaticProperty = name => {
        return name !== "length" && name !== "constructor" && name !== "prototype" && name !== "name";
      };
      var copyPrototype = (from, to) => {
        const fromPrototype = Object.getPrototypeOf(from);
        Object.setPrototypeOf(to, fromPrototype);
      };
      var createWrapper = wrappedClass => {
        const initizlizers = new Initializers();
        const addInitializer = initializer => {
          initizlizers.add(initializer);
        };
        const wrapper = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          const instance = new wrappedClass(...args);
          initizlizers.invoke(instance);
          return instance;
        };
        copyPrototype(wrappedClass, wrapper);
        Object.getOwnPropertyNames(wrappedClass).filter(isStaticProperty).forEach(name => {
          const descriptor = Object.getOwnPropertyDescriptor(wrappedClass, name);
          Object.defineProperty(wrapper, name, descriptor);
        });
        return {
          wrapper,
          addInitializer
        };
      };

      // src/decorators/FeatureSupport/FeatureSupport.ts
      var _version, _getMethodsNames, getMethodsNames_fn, _mapMethodNameWithDescriptor, mapMethodNameWithDescriptor_fn, _isMethod, isMethod_fn, _decorateWhenFunc, decorateWhenFunc_fn;
      var FeatureSupport = class {
        static set version(version) {
          __privateGet(this, _version) ?? __privateSet(this, _version, version);
        }
        static inVersion(versionOrConfig) {
          return (feature, context) => {
            if (!(context.kind === "class")) {
              throw new TypeError(`'FeatureSupport' cannot decorate kinds different from 'class'. Passed kind: ${context.kind}.`);
            }
            const {
              wrapper,
              addInitializer
            } = createWrapper(feature);
            const methods = __privateMethod(this, _getMethodsNames, getMethodsNames_fn).call(this, feature);
            methods.map(__privateMethod(this, _mapMethodNameWithDescriptor, mapMethodNameWithDescriptor_fn).call(this, feature)).filter(__privateMethod(this, _isMethod, isMethod_fn)).forEach(_ref => {
              let {
                methodName,
                descriptor
              } = _ref;
              const originalMethod = descriptor.value;
              const decorateWhenString = _ref2 => {
                let {
                  feature: feature2,
                  method,
                  supportedVersion
                } = _ref2;
                console.log("deorate when string");
                if (!__privateGet(this, _version).isSuitableTo(supportedVersion)) {
                  throw new UnsupportedVersionError(feature2, method, __privateGet(this, _version).value);
                }
              };
              const decorateWhenFunc = config => __privateMethod(this, _decorateWhenFunc, decorateWhenFunc_fn).call(this, config);
              addInitializer(function () {
                const thisArg = this;
                descriptor.value = function () {
                  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = arguments[_key4];
                  }
                  if (typeof versionOrConfig === "string") {
                    return decorateWhenString({
                      feature: feature.name,
                      method: methodName,
                      supportedVersion: versionOrConfig
                    });
                  }
                  const executeOriginalMethod = () => originalMethod.apply(this, args);
                  if (typeof versionOrConfig.methodsConfig === "function") {
                    if (!versionOrConfig.availableInVersion) {
                      throw new TypeError(`Property 'availableInVersion' required in config`);
                    }
                    const config = decorateWhenFunc({
                      availableInVersion: versionOrConfig.availableInVersion,
                      executeOriginalMethod,
                      name: methodName,
                      thisArg
                    });
                    return versionOrConfig.methodsConfig(config);
                  }
                  if (versionOrConfig.methodsConfig[methodName]) {
                    const {
                      availableInVersion,
                      decorate
                    } = versionOrConfig.methodsConfig[methodName];
                    if (!versionOrConfig.availableInVersion && !availableInVersion) {
                      throw new TypeError(`Property 'availableInVersion' required either in top level config or in method ${methodName} config`);
                    }
                    const supportedVersion = availableInVersion ?? versionOrConfig.availableInVersion;
                    if (!decorate) {
                      return decorateWhenString({
                        feature: feature.name,
                        method: methodName,
                        supportedVersion
                      });
                    }
                    const config = decorateWhenFunc({
                      availableInVersion: supportedVersion,
                      executeOriginalMethod,
                      name: methodName,
                      thisArg
                    });
                    return decorate(config);
                  }
                  return originalMethod.apply(this, args);
                };
                Object.defineProperty(feature.prototype, methodName, descriptor);
              });
            });
            return wrapper;
          };
        }
      };
      _version = new WeakMap();
      _getMethodsNames = new WeakSet();
      getMethodsNames_fn = function (obj) {
        const prototype = Object.getPrototypeOf(obj);
        return Object.getOwnPropertyNames(prototype).filter(name => name !== "constructor");
      };
      _mapMethodNameWithDescriptor = new WeakSet();
      mapMethodNameWithDescriptor_fn = function (obj) {
        const prototype = Object.getPrototypeOf(obj);
        return methodName => {
          const descriptor = Object.getOwnPropertyDescriptor(prototype, methodName);
          if (!descriptor) {
            throw new Error(`Cannot find descriptor for ${methodName}`);
          }
          return {
            methodName,
            descriptor
          };
        };
      };
      _isMethod = new WeakSet();
      isMethod_fn = function (_ref3) {
        let {
          descriptor
        } = _ref3;
        return Boolean(descriptor?.value);
      };
      _decorateWhenFunc = new WeakSet();
      decorateWhenFunc_fn = function (config) {
        const isSupported = __privateGet(this, _version).isSuitableTo(config.availableInVersion);
        return {
          appVersion: __privateGet(this, _version).value,
          isSupported,
          ...config
        };
      };
      __privateAdd(FeatureSupport, _getMethodsNames);
      __privateAdd(FeatureSupport, _mapMethodNameWithDescriptor);
      __privateAdd(FeatureSupport, _isMethod);
      __privateAdd(FeatureSupport, _decorateWhenFunc);
      __privateAdd(FeatureSupport, _version, void 0);

      // temp/esm/WebView.js
      var _TelegramWebView_instances;
      var _TelegramWebView_initParams;
      var _TelegramWebView_eventHandlers;
      var _TelegramWebView_isIframe;
      var _TelegramWebView_iframeStyleEl;
      var _TelegramWebView_subscribeToMessageFromParent;
      var TELEGRAM_WEB_VIEW = exports('TELEGRAM_WEB_VIEW', {
        EVENTS: {
          SEND: {
            WEB_APP_READY: "web_app_ready",
            WEB_APP_EXPAND: "web_app_expand",
            WEB_APP_CLOSE: "web_app_close",
            WEB_APP_OPEN_POPUP: "web_app_open_popup",
            WEB_APP_SETUP_CLOSING_BEHAVIOR: "web_app_setup_closing_behavior",
            WEB_APP_SET_BACKGROUND_COLOR: "web_app_set_background_color",
            WEB_APP_SET_HEADER_COLOR: "web_app_set_header_color",
            WEB_APP_DATA_SEND: "web_app_data_send",
            WEB_APP_TRIGGER_HAPTIC_FEEDBACK: "web_app_trigger_haptic_feedback",
            WEB_APP_OPEN_LINK: "web_app_open_link",
            WEB_APP_OPEN_TG_LINK: "web_app_open_tg_link",
            WEB_APP_OPEN_INVOICE: "web_app_open_invoice",
            WEB_APP_REQUEST_VIEWPORT: "web_app_request_viewport",
            WEB_APP_REQUEST_THEME: "web_app_request_theme",
            WEB_APP_SETUP_MAIN_BUTTON: "web_app_setup_main_button",
            WEB_APP_SETUP_BACK_BUTTON: "web_app_setup_back_button",
            WEB_APP_OPEN_SCAN_QR_POPUP: "web_app_open_scan_qr_popup",
            WEB_APP_CLOSE_SCAN_QR_POPUP: "web_app_close_scan_qr_popup",
            WEB_APP_READ_TEXT_FROM_CLIPBOARD: "web_app_read_text_from_clipboard",
            WEB_APP_SWITCH_INLINE_QUERY: "web_app_switch_inline_query",
            PAYMENT_FORM_SUBMIT: "payment_form_submit",
            SHARE_SCORE: "share_score",
            SHARE_GAME: "share_game",
            GAME_OVER: "game_over",
            GAME_LOADED: "game_loaded",
            RESIZE_FRAME: "resize_frame"
          },
          RECEIVE: {
            MAIN_BUTTON_PRESSED: "main_button_pressed",
            SETTINGS_BUTTON_PRESSED: "settings_button_pressed",
            BACK_BUTTON_PRESSED: "back_button_pressed",
            INVOICE_CLOSED: "invoice_closed",
            VIEWPORT_CHANGED: "viewport_changed",
            THEME_CHANGED: "theme_changed",
            POPUP_CLOSED: "popup_closed",
            QR_TEXT_RECEIVED: "qr_text_received",
            SCAN_QR_POPUP_CLOSED: "scan_qr_popup_closed",
            CLIPBOARD_TEXT_RECEIVED: "clipboard_text_received"
          }
        }
      });
      var TelegramWebView = class {
        constructor(initParams) {
          var _this = this;
          _TelegramWebView_instances.add(this);
          _TelegramWebView_initParams.set(this, void 0);
          _TelegramWebView_eventHandlers.set(this, /* @__PURE__ */new Map());
          _TelegramWebView_isIframe.set(this, window.parent != null && window != window.parent);
          _TelegramWebView_iframeStyleEl.set(this, null);
          Object.defineProperty(this, "postEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: function (eventType, callback, eventData) {
              if (eventData === void 0) {
                eventData = "";
              }
              if (window.TelegramWebviewProxy) {
                window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));
                callback?.();
                return;
              }
              if (window.external && "notify" in window.external) {
                window.external.notify(JSON.stringify({
                  eventType,
                  eventData
                }));
                callback?.();
                return;
              }
              if (__classPrivateFieldGet(_this, _TelegramWebView_isIframe, "f")) {
                try {
                  const trustedTarget = "*";
                  window.parent.postMessage(JSON.stringify({
                    eventType,
                    eventData
                  }), trustedTarget);
                  if (__classPrivateFieldGet(_this, _TelegramWebView_initParams, "f").tgWebAppDebug) {
                    console.log("[Telegram.WebView] postEvent via postMessage", eventType, eventData);
                  }
                  callback?.();
                } catch (e) {
                  callback?.(e);
                }
              }
              if (__classPrivateFieldGet(_this, _TelegramWebView_initParams, "f").tgWebAppDebug) {
                console.log("[Telegram.WebView] postEvent", eventType, eventData);
              }
              callback?.({
                notAvailable: true
              });
            }
          });
          Object.defineProperty(this, "onEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (eventType, callback) => {
              if (!__classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").has(eventType)) {
                __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").set(eventType, /* @__PURE__ */new Set());
              }
              __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").get(eventType).add(callback);
            }
          });
          Object.defineProperty(this, "offEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (eventType, callback) => {
              if (!__classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").has(eventType)) {
                return;
              }
              __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").get(eventType).delete(callback);
            }
          });
          Object.defineProperty(this, "callEventCallbacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (eventType, func) => {
              const eventHandlers = __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").get(eventType);
              eventHandlers?.forEach(handler => {
                try {
                  func(handler);
                } catch {}
              });
            }
          });
          Object.defineProperty(this, "receiveEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (eventType, eventData) => {
              this.callEventCallbacks(eventType, callback => callback(eventType, eventData));
            }
          });
          __classPrivateFieldSet(this, _TelegramWebView_initParams, initParams, "f");
          if (__classPrivateFieldGet(this, _TelegramWebView_isIframe, "f")) {
            __classPrivateFieldSet(this, _TelegramWebView_iframeStyleEl, document.createElement("style"), "f");
            document.head.appendChild(__classPrivateFieldGet(this, _TelegramWebView_iframeStyleEl, "f"));
            __classPrivateFieldGet(this, _TelegramWebView_instances, "m", _TelegramWebView_subscribeToMessageFromParent).call(this);
            try {
              window.parent.postMessage(JSON.stringify({
                eventType: "iframe_ready"
              }), "*");
            } catch {}
          }
        }
        get initParams() {
          return __classPrivateFieldGet(this, _TelegramWebView_initParams, "f");
        }
        get isIframe() {
          return __classPrivateFieldGet(this, _TelegramWebView_isIframe, "f");
        }
      };
      _TelegramWebView_initParams = /* @__PURE__ */new WeakMap(), _TelegramWebView_eventHandlers = /* @__PURE__ */new WeakMap(), _TelegramWebView_isIframe = /* @__PURE__ */new WeakMap(), _TelegramWebView_iframeStyleEl = /* @__PURE__ */new WeakMap(), _TelegramWebView_instances = /* @__PURE__ */new WeakSet(), _TelegramWebView_subscribeToMessageFromParent = function _TelegramWebView_subscribeToMessageFromParent2() {
        window.addEventListener("message", event => {
          if (event.source !== window.parent) {
            return;
          }
          try {
            const dataParsed = JSON.parse(event.data);
            if (!dataParsed.eventType) {
              return;
            }
            if (dataParsed.eventType === "set_custom_style" && __classPrivateFieldGet(this, _TelegramWebView_iframeStyleEl, "f")) {
              __classPrivateFieldGet(this, _TelegramWebView_iframeStyleEl, "f").innerHTML = dataParsed.eventData;
              return;
            }
            this.receiveEvent(dataParsed.eventType, dataParsed.eventData);
          } catch {}
        });
      };

      // temp/esm/WebApp/BackButton/BackButton.js
      var BACK_BUTTON_EVENTS = {
        UPDATED: "updated",
        CLICKED: "clicked",
        OFF_CLICKED: "off_clicked"
      };
      var BACK_BUTTON_ON_EVENT_KEY = Symbol("on_event");
      var WebAppBackButton = (() => {
        var _instances, _eventEmitter, _isVisible, _prevButtonState, _update, _setParams;
        let _classDecorators = [FeatureSupport.inVersion({
          availableInVersion: "6.1",
          methodsConfig: _ref4 => {
            let {
              appVersion,
              executeOriginalMethod,
              isSupported,
              thisArg
            } = _ref4;
            if (!isSupported) {
              console.warn(`[Telegram.WebApp] BackButton is not supported in version ${appVersion}`);
              return thisArg;
            }
            return executeOriginalMethod();
          }
        }), bindMethods];
        let _classDescriptor;
        let _classExtraInitializers = [];
        let _classThis;
        var WebAppBackButton2 = _classThis = class {
          constructor(_ref5) {
            let {
              eventEmitter
            } = _ref5;
            _instances.add(this);
            _eventEmitter.set(this, void 0);
            _isVisible.set(this, false);
            _prevButtonState.set(this, __classPrivateFieldGet(this, _isVisible, "f"));
            __classPrivateFieldSet(this, _eventEmitter, eventEmitter, "f");
          }
          [(_eventEmitter = /* @__PURE__ */new WeakMap(), _isVisible = /* @__PURE__ */new WeakMap(), _prevButtonState = /* @__PURE__ */new WeakMap(), _instances = /* @__PURE__ */new WeakSet(), _update = function _update2() {
            const newState = __classPrivateFieldGet(this, _isVisible, "f");
            if (__classPrivateFieldGet(this, _prevButtonState, "f") === newState) {
              return;
            }
            __classPrivateFieldSet(this, _prevButtonState, newState, "f");
            __classPrivateFieldGet(this, _eventEmitter, "f").emit(BACK_BUTTON_EVENTS.UPDATED, {
              is_visible: __classPrivateFieldGet(this, _isVisible, "f")
            });
          }, _setParams = function _setParams2(params) {
            if (typeof params.is_visible !== "undefined") {
              __classPrivateFieldSet(this, _isVisible, Boolean(params.is_visible), "f");
            }
            __classPrivateFieldGet(this, _instances, "m", _update).call(this);
            return this;
          }, BACK_BUTTON_ON_EVENT_KEY)](event, listener) {
            return __classPrivateFieldGet(this, _eventEmitter, "f").subscribe(event, listener);
          }
          onClick(callback) {
            __classPrivateFieldGet(this, _eventEmitter, "f").emit(BACK_BUTTON_EVENTS.CLICKED, callback);
            return this;
          }
          offClick(callback) {
            __classPrivateFieldGet(this, _eventEmitter, "f").emit(BACK_BUTTON_EVENTS.OFF_CLICKED, callback);
            return this;
          }
          show() {
            return __classPrivateFieldGet(this, _instances, "m", _setParams).call(this, {
              is_visible: true
            });
          }
          hide() {
            return __classPrivateFieldGet(this, _instances, "m", _setParams).call(this, {
              is_visible: false
            });
          }
          get isVisible() {
            return __classPrivateFieldGet(this, _isVisible, "f");
          }
          set isVisible(visible) {
            __classPrivateFieldGet(this, _instances, "m", _setParams).call(this, {
              is_visible: visible
            });
          }
        };
        __setFunctionName(_classThis, "WebAppBackButton");
        (() => {
          __esDecorate(null, _classDescriptor = {
            value: _classThis
          }, _classDecorators, {
            kind: "class",
            name: _classThis.name
          }, null, _classExtraInitializers);
          WebAppBackButton2 = _classThis = _classDescriptor.value;
          __runInitializers(_classThis, _classExtraInitializers);
        })();
        return WebAppBackButton2 = _classThis;
      })();

      // temp/esm/WebApp/Theme.js
      var _Theme_instances;
      var _Theme_eventEmitter;
      var _Theme_themeParams;
      var _Theme_colorScheme;
      var _Theme_toJSON;
      var _Theme_defineColorScheme;
      var _Theme_setColorScheme;
      var THEME_EVENTS = {
        COLOR_SCHEME_CHANGED: "color_scheme_changed",
        THEME_PARAM_SET: "theme_param_set",
        THEME_PARAMS_CHANGED: "theme_params_changed"
      };
      var TELEGRAM_THEME = exports('TELEGRAM_THEME', {
        COLOR_SCHEMES: {
          LIGHT: "light",
          DARK: "dark"
        },
        PARAMS: {
          BG_COLOR: "bg_color",
          TEXT_COLOR: "text_color",
          HINT_COLOR: "hint_color",
          LINK_COLOR: "link_color",
          BUTTON_COLOR: "button_color",
          BUTTON_TEXT_COLOR: "button_text_color",
          SECONDARY_BG_COLOR: "secondary_bg_color"
        },
        HEADER_COLOR: {
          BG_COLOR: "bg_color",
          SECONDARY_BG_COLOR: "secondary_bg_color"
        }
      });
      var Theme = class {
        static get EVENTS() {
          return THEME_EVENTS;
        }
        constructor(eventEmitter) {
          _Theme_instances.add(this);
          _Theme_eventEmitter.set(this, void 0);
          _Theme_themeParams.set(this, /* @__PURE__ */new Map());
          _Theme_colorScheme.set(this, TELEGRAM_THEME.COLOR_SCHEMES.LIGHT);
          _Theme_toJSON.set(this, () => Object.fromEntries(__classPrivateFieldGet(this, _Theme_themeParams, "f")));
          Object.defineProperty(this, "setParams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: params => {
              if (params.bg_color === "#1c1c1d" && params.bg_color === params.secondary_bg_color) {
                params.secondary_bg_color = "#2c2c2e";
              }
              for (const key in params) {
                const color = parseColorToHex(params[key]);
                if (color) {
                  this.setParam(key, color);
                  if (key === "bg_color") {
                    const colorScheme = __classPrivateFieldGet(this, _Theme_instances, "m", _Theme_defineColorScheme).call(this, color);
                    __classPrivateFieldGet(this, _Theme_instances, "m", _Theme_setColorScheme).call(this, colorScheme);
                  }
                  __classPrivateFieldGet(this, _Theme_eventEmitter, "f").emit(Theme.EVENTS.THEME_PARAM_SET, key, color);
                }
              }
              __classPrivateFieldGet(this, _Theme_eventEmitter, "f").emit(Theme.EVENTS.THEME_PARAMS_CHANGED, this.params);
            }
          });
          __classPrivateFieldSet(this, _Theme_eventEmitter, eventEmitter, "f");
        }
        on(event, listener) {
          return __classPrivateFieldGet(this, _Theme_eventEmitter, "f").subscribe(event, listener);
        }
        getParam(key) {
          return __classPrivateFieldGet(this, _Theme_themeParams, "f").get(key) ?? null;
        }
        setParam(key, value) {
          __classPrivateFieldGet(this, _Theme_themeParams, "f").set(key, value);
        }
        get params() {
          return __classPrivateFieldGet(this, _Theme_toJSON, "f").call(this);
        }
        get colorScheme() {
          return __classPrivateFieldGet(this, _Theme_colorScheme, "f");
        }
      };
      _Theme_eventEmitter = /* @__PURE__ */new WeakMap(), _Theme_themeParams = /* @__PURE__ */new WeakMap(), _Theme_colorScheme = /* @__PURE__ */new WeakMap(), _Theme_toJSON = /* @__PURE__ */new WeakMap(), _Theme_instances = /* @__PURE__ */new WeakSet(), _Theme_defineColorScheme = function _Theme_defineColorScheme2(color) {
        return isColorDark(color) ? TELEGRAM_THEME.COLOR_SCHEMES.DARK : TELEGRAM_THEME.COLOR_SCHEMES.LIGHT;
      }, _Theme_setColorScheme = function _Theme_setColorScheme2(colorScheme) {
        __classPrivateFieldSet(this, _Theme_colorScheme, colorScheme, "f");
        __classPrivateFieldGet(this, _Theme_eventEmitter, "f").emit(Theme.EVENTS.COLOR_SCHEME_CHANGED, colorScheme);
      };

      // temp/esm/WebApp/BackgroundColor.js
      var _BackgroundColor_instances;
      var _BackgroundColor_eventEmitter;
      var _BackgroundColor_themeParams;
      var _BackgroundColor_backgroundColorKeyOrColor;
      var _BackgroundColor_appBackgroundColor;
      var _BackgroundColor_getBgColor;
      var BackgroundColor = class {
        static get EVENTS() {
          return {
            UPDATED: "updated"
          };
        }
        constructor(_ref6) {
          let {
            eventEmitter,
            themeParams
          } = _ref6;
          _BackgroundColor_instances.add(this);
          _BackgroundColor_eventEmitter.set(this, void 0);
          _BackgroundColor_themeParams.set(this, void 0);
          _BackgroundColor_backgroundColorKeyOrColor.set(this, TELEGRAM_THEME.HEADER_COLOR.BG_COLOR);
          _BackgroundColor_appBackgroundColor.set(this, null);
          Object.defineProperty(this, "get", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
              if (__classPrivateFieldGet(this, _BackgroundColor_backgroundColorKeyOrColor, "f") === TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
                return __classPrivateFieldGet(this, _BackgroundColor_themeParams, "f").call(this).secondary_bg_color;
              }
              if (__classPrivateFieldGet(this, _BackgroundColor_backgroundColorKeyOrColor, "f") === TELEGRAM_THEME.HEADER_COLOR.BG_COLOR) {
                return __classPrivateFieldGet(this, _BackgroundColor_themeParams, "f").call(this).bg_color;
              }
              return __classPrivateFieldGet(this, _BackgroundColor_backgroundColorKeyOrColor, "f");
            }
          });
          Object.defineProperty(this, "update", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
              const color = this.get();
              if (__classPrivateFieldGet(this, _BackgroundColor_appBackgroundColor, "f") != color) {
                __classPrivateFieldSet(this, _BackgroundColor_appBackgroundColor, color, "f");
                __classPrivateFieldGet(this, _BackgroundColor_eventEmitter, "f").emit(BackgroundColor.EVENTS.UPDATED, color);
              }
            }
          });
          Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: color => {
              __classPrivateFieldSet(this, _BackgroundColor_backgroundColorKeyOrColor, __classPrivateFieldGet(this, _BackgroundColor_instances, "m", _BackgroundColor_getBgColor).call(this, color), "f");
              this.update();
            }
          });
          __classPrivateFieldSet(this, _BackgroundColor_eventEmitter, eventEmitter, "f");
          __classPrivateFieldSet(this, _BackgroundColor_themeParams, themeParams, "f");
        }
        on(event, listener) {
          return __classPrivateFieldGet(this, _BackgroundColor_eventEmitter, "f").subscribe(event, listener);
        }
      };
      _BackgroundColor_eventEmitter = /* @__PURE__ */new WeakMap(), _BackgroundColor_themeParams = /* @__PURE__ */new WeakMap(), _BackgroundColor_backgroundColorKeyOrColor = /* @__PURE__ */new WeakMap(), _BackgroundColor_appBackgroundColor = /* @__PURE__ */new WeakMap(), _BackgroundColor_instances = /* @__PURE__ */new WeakSet(), _BackgroundColor_getBgColor = function _BackgroundColor_getBgColor2(color) {
        if (color === TELEGRAM_THEME.HEADER_COLOR.BG_COLOR || color === TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
          return color;
        }
        const bgColor = parseColorToHex(color);
        if (!bgColor) {
          throw new WebAppBackgroundColorInvalidError(color);
        }
        return bgColor;
      };

      // temp/esm/WebApp/Clipboard.js
      var _WebAppClipboard_requests;
      var WebAppClipboard = class {
        constructor() {
          _WebAppClipboard_requests.set(this, /* @__PURE__ */new Map());
        }
        setRequest(id, callback) {
          __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").set(id, callback ?? null);
        }
        getRequest(id) {
          return __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").get(id) ?? null;
        }
        removeRequest(id) {
          __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").delete(id);
        }
        hasRequest(id) {
          return __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").has(id);
        }
      };
      _WebAppClipboard_requests = /* @__PURE__ */new WeakMap();

      // temp/esm/WebApp/HapticFeedback.js
      var TELEGRAM_HAPTIC_FEEDBACK = exports('TELEGRAM_HAPTIC_FEEDBACK', {
        IMPACT_STYLES: {
          LIGHT: "light",
          MEDIUM: "medium",
          HEAVY: "heavy",
          RIGID: "rigid",
          SOFT: "soft"
        },
        FEEDBACK_TYPES: {
          IMPACT: "impact",
          NOTIFICATION: "notification",
          SELECTION_CHANGE: "selection_change"
        },
        NOTIFICATION_TYPES: {
          ERROR: "error",
          SUCCESS: "success",
          WARNING: "warning"
        }
      });
      var VALID_IMPACT_STYLES = Object.values(TELEGRAM_HAPTIC_FEEDBACK.IMPACT_STYLES);
      var VALID_FEEDBACK_TYPES = Object.values(TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES);
      var VALID_NOTIFICATION_TYPES = Object.values(TELEGRAM_HAPTIC_FEEDBACK.NOTIFICATION_TYPES);
      var HAPTIC_FEEDBACK_EVENTS = {
        FEEDBACK_TRIGGERED: "feedback_triggered"
      };
      var ON_EVENT = Symbol("on_event");
      var WebAppHapticFeedback = (() => {
        var _instances, _eventEmitter, _isValidImpactStyle, _isValidFeedbackType, _isValidNotificationType, _triggerFeedback;
        let _classDecorators = [FeatureSupport.inVersion({
          availableInVersion: "6.1",
          methodsConfig: _ref7 => {
            let {
              appVersion,
              executeOriginalMethod,
              isSupported,
              thisArg
            } = _ref7;
            if (!isSupported) {
              console.warn(`[Telegram.WebApp] HapticFeedback is not supported in version ${appVersion}`);
              return thisArg;
            }
            return executeOriginalMethod();
          }
        }), bindMethods];
        let _classDescriptor;
        let _classExtraInitializers = [];
        let _classThis;
        var WebAppHapticFeedback2 = _classThis = class {
          static get EVENTS() {
            return HAPTIC_FEEDBACK_EVENTS;
          }
          static get PRIVATE_KEYS() {
            return {
              ON_EVENT
            };
          }
          constructor(eventEmitter) {
            _instances.add(this);
            _eventEmitter.set(this, void 0);
            __classPrivateFieldSet(this, _eventEmitter, eventEmitter, "f");
          }
          [(_eventEmitter = /* @__PURE__ */new WeakMap(), _instances = /* @__PURE__ */new WeakSet(), _isValidImpactStyle = function _isValidImpactStyle2(style) {
            if (!style) {
              return false;
            }
            return VALID_IMPACT_STYLES.includes(style);
          }, _isValidFeedbackType = function _isValidFeedbackType2(type) {
            return VALID_FEEDBACK_TYPES.includes(type);
          }, _isValidNotificationType = function _isValidNotificationType2(type) {
            if (!type) {
              return false;
            }
            return VALID_NOTIFICATION_TYPES.includes(type);
          }, _triggerFeedback = function _triggerFeedback2(params) {
            if (!__classPrivateFieldGet(this, _instances, "m", _isValidFeedbackType).call(this, params.type)) {
              throw new WebAppHapticFeedbackTypeInvalidError(params.type);
            }
            if (params.type === TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.IMPACT) {
              if (!__classPrivateFieldGet(this, _instances, "m", _isValidImpactStyle).call(this, params.impact_style)) {
                throw new WebAppHapticImpactStyleInvalidError(params.impact_style);
              }
            }
            if (params.type === TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.NOTIFICATION) {
              if (!__classPrivateFieldGet(this, _instances, "m", _isValidNotificationType).call(this, params.notification_type)) {
                throw new WebAppHapticNotificationTypeInvalidError(params.notification_type);
              }
            }
            if (params.type === TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.SELECTION_CHANGE) ;
            __classPrivateFieldGet(this, _eventEmitter, "f").emit(WebAppHapticFeedback2.EVENTS.FEEDBACK_TRIGGERED, params);
            return this;
          }, ON_EVENT)](event, listener) {
            return __classPrivateFieldGet(this, _eventEmitter, "f").subscribe(event, listener);
          }
          impactOccurred(style) {
            return __classPrivateFieldGet(this, _instances, "m", _triggerFeedback).call(this, {
              type: TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.IMPACT,
              impact_style: style
            });
          }
          notificationOccurred(type) {
            return __classPrivateFieldGet(this, _instances, "m", _triggerFeedback).call(this, {
              type: TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.NOTIFICATION,
              notification_type: type
            });
          }
          selectionChanged() {
            return __classPrivateFieldGet(this, _instances, "m", _triggerFeedback).call(this, {
              type: TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.SELECTION_CHANGE
            });
          }
        };
        __setFunctionName(_classThis, "WebAppHapticFeedback");
        (() => {
          __esDecorate(null, _classDescriptor = {
            value: _classThis
          }, _classDecorators, {
            kind: "class",
            name: _classThis.name
          }, null, _classExtraInitializers);
          WebAppHapticFeedback2 = _classThis = _classDescriptor.value;
          __runInitializers(_classThis, _classExtraInitializers);
        })();
        return WebAppHapticFeedback2 = _classThis;
      })();

      // temp/esm/WebApp/InitData.js
      var _InitData_initDataRaw;
      var _InitData_initDataUnsafeParsed;
      var isWrappedInCurlyBrackets = value => {
        return value[0] === "{" && value.at(-1) === "}";
      };
      var isWrappedInSquareBrackets = value => {
        return value[0] === "[" && value.at(-1) === "]";
      };
      var isWrappedInBrackets = value => {
        return isWrappedInCurlyBrackets(value) || isWrappedInSquareBrackets(value);
      };
      var InitData = class {
        constructor(initData) {
          _InitData_initDataRaw.set(this, "");
          _InitData_initDataUnsafeParsed.set(this, /* @__PURE__ */new Map());
          if (!initData) {
            return;
          }
          __classPrivateFieldSet(this, _InitData_initDataRaw, initData, "f");
          const initDataUnsafeParsed = urlParseQueryString(__classPrivateFieldGet(this, _InitData_initDataRaw, "f"));
          for (const [key, value] of Object.entries(initDataUnsafeParsed)) {
            if (!isWrappedInBrackets(value)) {
              continue;
            }
            try {
              __classPrivateFieldGet(this, _InitData_initDataUnsafeParsed, "f").set(key, JSON.parse(value));
            } catch {}
          }
        }
        get rawData() {
          return __classPrivateFieldGet(this, _InitData_initDataRaw, "f");
        }
        get unsafeData() {
          return Object.fromEntries(__classPrivateFieldGet(this, _InitData_initDataUnsafeParsed, "f"));
        }
      };
      _InitData_initDataRaw = /* @__PURE__ */new WeakMap(), _InitData_initDataUnsafeParsed = /* @__PURE__ */new WeakMap();

      // temp/esm/WebApp/Invoices.js
      var _Invoices_store;
      var INVOICE_REGEX = /^\/(\$|invoice\/)([A-Za-z0-9\-_=]+)$/;
      var Invoices = class {
        constructor() {
          _Invoices_store.set(this, /* @__PURE__ */new Map());
        }
        create(url) {
          const {
            hostname,
            pathname,
            protocol
          } = new URL(url);
          const match = pathname.match(INVOICE_REGEX) ?? [];
          const slug = match[2];
          if (!isHTTPTypeProtocol(protocol) || !isTelegramHostname(hostname) || !slug) {
            throw new WebAppInvoiceUrlInvalidError(url);
          }
          if (__classPrivateFieldGet(this, _Invoices_store, "f").has(slug)) {
            throw new WebAppInvoiceOpenedError();
          }
          return slug;
        }
        save(slug, data) {
          __classPrivateFieldGet(this, _Invoices_store, "f").set(slug, data);
        }
        remove(slug) {
          const invoiceData = __classPrivateFieldGet(this, _Invoices_store, "f").get(slug);
          __classPrivateFieldGet(this, _Invoices_store, "f").delete(slug);
          return invoiceData ?? null;
        }
        has(slug) {
          return __classPrivateFieldGet(this, _Invoices_store, "f").has(slug);
        }
      };
      _Invoices_store = /* @__PURE__ */new WeakMap();

      // temp/esm/WebApp/MainButtonDebug.js
      var _MainButtonDebug_btn;
      var _MainButtonDebug_height;
      var _MainButtonDebug_onUpdate;
      var BACKGROUND_IMAGE = "url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20viewport%3D%220%200%2048%2048%22%20width%3D%2248px%22%20height%3D%2248px%22%3E%3Ccircle%20cx%3D%2250%25%22%20cy%3D%2250%25%22%20stroke%3D%22%23fff%22%20stroke-width%3D%222.25%22%20stroke-linecap%3D%22round%22%20fill%3D%22none%22%20stroke-dashoffset%3D%22106%22%20r%3D%229%22%20stroke-dasharray%3D%2256.52%22%20rotate%3D%22-90%22%3E%3Canimate%20attributeName%3D%22stroke-dashoffset%22%20attributeType%3D%22XML%22%20dur%3D%22360s%22%20from%3D%220%22%20to%3D%2212500%22%20repeatCount%3D%22indefinite%22%3E%3C%2Fanimate%3E%3CanimateTransform%20attributeName%3D%22transform%22%20attributeType%3D%22XML%22%20type%3D%22rotate%22%20dur%3D%221s%22%20from%3D%22-90%2024%2024%22%20to%3D%22630%2024%2024%22%20repeatCount%3D%22indefinite%22%3E%3C%2FanimateTransform%3E%3C%2Fcircle%3E%3C%2Fsvg%3E')";
      var MainButtonDebug = class {
        constructor(_ref8) {
          let {
            onClick,
            onUpdate
          } = _ref8;
          _MainButtonDebug_btn.set(this, void 0);
          _MainButtonDebug_height.set(this, 0);
          _MainButtonDebug_onUpdate.set(this, void 0);
          Object.defineProperty(this, "update", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: params => {
              if (params.is_visible) {
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.display = "block";
                __classPrivateFieldSet(this, _MainButtonDebug_height, 48, "f");
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.opacity = params.is_active ? "1" : "0.8";
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.cursor = params.is_active ? "pointer" : "auto";
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").disabled = !params.is_active;
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").innerText = params.text;
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.backgroundImage = params.is_progress_visible ? BACKGROUND_IMAGE : "none";
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.backgroundColor = params.color;
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.color = params.text_color;
              } else {
                __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.display = "none";
                __classPrivateFieldSet(this, _MainButtonDebug_height, 0, "f");
              }
              if (document.documentElement) {
                document.documentElement.style.boxSizing = "border-box";
                document.documentElement.style.paddingBottom = __classPrivateFieldGet(this, _MainButtonDebug_height, "f") + "px";
              }
              __classPrivateFieldGet(this, _MainButtonDebug_onUpdate, "f").call(this);
            }
          });
          __classPrivateFieldSet(this, _MainButtonDebug_onUpdate, onUpdate, "f");
          __classPrivateFieldSet(this, _MainButtonDebug_btn, document.createElement("tg-main-button"), "f");
          const styles = {
            font: "600 14px/18px sans-serif",
            display: "none",
            width: "100%",
            height: "48px",
            borderRadius: "0",
            background: "no-repeat right center",
            position: "fixed",
            left: "0",
            right: "0",
            bottom: "0",
            margin: "0",
            padding: "15px 20px",
            textAlign: "center",
            boxSizing: "border-box",
            zIndex: "10000"
          };
          for (const [key, value] of Object.entries(styles)) {
            __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style[key] = value;
          }
          const onDomLoaded = () => {
            document.removeEventListener("DOMContentLoaded", onDomLoaded);
            document.body.appendChild(__classPrivateFieldGet(this, _MainButtonDebug_btn, "f"));
            __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").addEventListener("click", onClick, false);
          };
          document.addEventListener("DOMContentLoaded", onDomLoaded);
        }
      };
      _MainButtonDebug_btn = /* @__PURE__ */new WeakMap(), _MainButtonDebug_height = /* @__PURE__ */new WeakMap(), _MainButtonDebug_onUpdate = /* @__PURE__ */new WeakMap();

      // temp/esm/WebApp/MainButton.js
      var _WebAppMainButton_instances;
      var _WebAppMainButton_eventEmitter;
      var _WebAppMainButton_theme;
      var _WebAppMainButton_isVisible;
      var _WebAppMainButton_isActive;
      var _WebAppMainButton_isProgressVisible;
      var _WebAppMainButton_buttonText;
      var _WebAppMainButton_buttonColor;
      var _WebAppMainButton_buttonTextColor;
      var _WebAppMainButton_isDebug;
      var _WebAppMainButton_prevButtonState;
      var _WebAppMainButton_debugBtn;
      var _WebAppMainButton_buttonParams;
      var _WebAppMainButton_update;
      var _WebAppMainButton_isResettedValue;
      var _WebAppMainButton_setText;
      var _WebAppMainButton_setButtonColor;
      var _WebAppMainButton_setTextColor;
      var _WebAppMainButton_setIsVisible;
      var _WebAppMainButton_setIsActive;
      var BUTTON_EVENTS = {
        DEBUG_BUTTON_CLICKED: "debug_button_clicked",
        DEBUG_BUTTON_UPDATED: "debug_button_updated",
        UPDATED: "updated",
        CLICKED: "clicked",
        OFF_CLICKED: "off_clicked"
      };
      var TELEGRAM_MAIN_BUTTON = exports('TELEGRAM_MAIN_BUTTON', {
        MAX_TEXT_LENGTH: 64,
        DEFAULT_COLOR: "#2481cc",
        DEFAULT_TEXT_COLOR: "#ffffff"
      });
      var WebAppMainButton = class {
        static get EVENTS() {
          return BUTTON_EVENTS;
        }
        constructor(_ref9) {
          let {
            eventEmitter,
            theme,
            isDebug = false
          } = _ref9;
          _WebAppMainButton_instances.add(this);
          _WebAppMainButton_eventEmitter.set(this, void 0);
          _WebAppMainButton_theme.set(this, void 0);
          _WebAppMainButton_isVisible.set(this, false);
          _WebAppMainButton_isActive.set(this, true);
          _WebAppMainButton_isProgressVisible.set(this, false);
          _WebAppMainButton_buttonText.set(this, "CONTINUE");
          _WebAppMainButton_buttonColor.set(this, false);
          _WebAppMainButton_buttonTextColor.set(this, false);
          _WebAppMainButton_isDebug.set(this, void 0);
          _WebAppMainButton_prevButtonState.set(this, null);
          _WebAppMainButton_debugBtn.set(this, null);
          Object.defineProperty(this, "setParams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: params => {
              var _a, _b, _c, _d, _e;
              __classPrivateFieldGet(_a = __classPrivateFieldGet(_b = __classPrivateFieldGet(_c = __classPrivateFieldGet(_d = __classPrivateFieldGet(_e = __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_setText).call(this, params.text), _WebAppMainButton_instances, "m", _WebAppMainButton_setButtonColor).call(_e, params.color), _WebAppMainButton_instances, "m", _WebAppMainButton_setTextColor).call(_d, params.text_color), _WebAppMainButton_instances, "m", _WebAppMainButton_setIsVisible).call(_c, params.is_visible), _WebAppMainButton_instances, "m", _WebAppMainButton_setIsActive).call(_b, params.is_active), _WebAppMainButton_instances, "m", _WebAppMainButton_update).call(_a);
              return this;
            }
          });
          Object.defineProperty(this, "setText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: text => this.setParams({
              text
            })
          });
          Object.defineProperty(this, "onClick", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: callback => {
              __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.CLICKED, callback);
              return this;
            }
          });
          Object.defineProperty(this, "offClick", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: callback => {
              __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.OFF_CLICKED, callback);
              return this;
            }
          });
          Object.defineProperty(this, "show", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => this.setParams({
              is_visible: true
            })
          });
          Object.defineProperty(this, "hide", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => this.setParams({
              is_visible: false
            })
          });
          Object.defineProperty(this, "enable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => this.setParams({
              is_active: true
            })
          });
          Object.defineProperty(this, "disable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => this.setParams({
              is_active: false
            })
          });
          Object.defineProperty(this, "showProgress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: leaveActive => {
              this.isActive = Boolean(leaveActive);
              __classPrivateFieldSet(this, _WebAppMainButton_isProgressVisible, true, "f");
              __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_update).call(this);
              return this;
            }
          });
          Object.defineProperty(this, "hideProgress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
              if (!this.isActive) {
                this.isActive = true;
              }
              __classPrivateFieldSet(this, _WebAppMainButton_isProgressVisible, false, "f");
              __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_update).call(this);
              return this;
            }
          });
          __classPrivateFieldSet(this, _WebAppMainButton_eventEmitter, eventEmitter, "f");
          __classPrivateFieldSet(this, _WebAppMainButton_theme, theme, "f");
          __classPrivateFieldSet(this, _WebAppMainButton_isDebug, isDebug, "f");
          if (isDebug) {
            __classPrivateFieldSet(this, _WebAppMainButton_debugBtn, new MainButtonDebug({
              onClick: () => {
                __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.DEBUG_BUTTON_CLICKED, this.isActive);
              },
              onUpdate: () => {
                __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.DEBUG_BUTTON_UPDATED);
              }
            }), "f");
          }
        }
        on(event, listener) {
          return __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").subscribe(event, listener);
        }
        set text(text) {
          this.setParams({
            text
          });
        }
        get text() {
          return __classPrivateFieldGet(this, _WebAppMainButton_buttonText, "f");
        }
        set color(color) {
          this.setParams({
            color
          });
        }
        get color() {
          return __classPrivateFieldGet(this, _WebAppMainButton_buttonColor, "f") || __classPrivateFieldGet(this, _WebAppMainButton_theme, "f").getParam(TELEGRAM_THEME.PARAMS.BUTTON_COLOR) || TELEGRAM_MAIN_BUTTON.DEFAULT_COLOR;
        }
        set textColor(value) {
          this.setParams({
            text_color: value
          });
        }
        get textColor() {
          return __classPrivateFieldGet(this, _WebAppMainButton_buttonTextColor, "f") || __classPrivateFieldGet(this, _WebAppMainButton_theme, "f").getParam(TELEGRAM_THEME.PARAMS.BUTTON_TEXT_COLOR) || TELEGRAM_MAIN_BUTTON.DEFAULT_TEXT_COLOR;
        }
        set isVisible(visible) {
          this.setParams({
            is_visible: visible
          });
        }
        get isVisible() {
          return __classPrivateFieldGet(this, _WebAppMainButton_isVisible, "f");
        }
        get isProgressVisible() {
          return __classPrivateFieldGet(this, _WebAppMainButton_isProgressVisible, "f");
        }
        set isActive(active) {
          this.setParams({
            is_active: active
          });
        }
        get isActive() {
          return __classPrivateFieldGet(this, _WebAppMainButton_isActive, "f");
        }
      };
      _WebAppMainButton_eventEmitter = /* @__PURE__ */new WeakMap(), _WebAppMainButton_theme = /* @__PURE__ */new WeakMap(), _WebAppMainButton_isVisible = /* @__PURE__ */new WeakMap(), _WebAppMainButton_isActive = /* @__PURE__ */new WeakMap(), _WebAppMainButton_isProgressVisible = /* @__PURE__ */new WeakMap(), _WebAppMainButton_buttonText = /* @__PURE__ */new WeakMap(), _WebAppMainButton_buttonColor = /* @__PURE__ */new WeakMap(), _WebAppMainButton_buttonTextColor = /* @__PURE__ */new WeakMap(), _WebAppMainButton_isDebug = /* @__PURE__ */new WeakMap(), _WebAppMainButton_prevButtonState = /* @__PURE__ */new WeakMap(), _WebAppMainButton_debugBtn = /* @__PURE__ */new WeakMap(), _WebAppMainButton_instances = /* @__PURE__ */new WeakSet(), _WebAppMainButton_buttonParams = function _WebAppMainButton_buttonParams2() {
        return {
          is_visible: __classPrivateFieldGet(this, _WebAppMainButton_isVisible, "f"),
          is_active: __classPrivateFieldGet(this, _WebAppMainButton_isActive, "f"),
          is_progress_visible: __classPrivateFieldGet(this, _WebAppMainButton_isProgressVisible, "f"),
          text: __classPrivateFieldGet(this, _WebAppMainButton_buttonText, "f"),
          color: this.color,
          text_color: this.textColor
        };
      }, _WebAppMainButton_update = function _WebAppMainButton_update2() {
        const btnParams = __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_buttonParams).call(this);
        const newState = JSON.stringify(btnParams);
        if (__classPrivateFieldGet(this, _WebAppMainButton_prevButtonState, "f") === newState) {
          return;
        }
        __classPrivateFieldSet(this, _WebAppMainButton_prevButtonState, newState, "f");
        __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.UPDATED, btnParams);
        if (__classPrivateFieldGet(this, _WebAppMainButton_isDebug, "f")) {
          __classPrivateFieldGet(this, _WebAppMainButton_debugBtn, "f").update(btnParams);
        }
      }, _WebAppMainButton_isResettedValue = function _WebAppMainButton_isResettedValue2(value) {
        return value === false || value === null;
      }, _WebAppMainButton_setText = function _WebAppMainButton_setText2(value) {
        if (typeof value === "undefined") {
          return this;
        }
        const text = value.trim();
        if (!text.length) {
          throw new WebAppMainButtonParamInvalidError(`text is required ${value}`);
        }
        if (text.length > TELEGRAM_MAIN_BUTTON.MAX_TEXT_LENGTH) {
          throw new WebAppMainButtonParamInvalidError(`text is too long ${text}`);
        }
        __classPrivateFieldSet(this, _WebAppMainButton_buttonText, text, "f");
        return this;
      }, _WebAppMainButton_setButtonColor = function _WebAppMainButton_setButtonColor2(value) {
        if (typeof value === "undefined") {
          return this;
        }
        if (__classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_isResettedValue).call(this, value)) {
          __classPrivateFieldSet(this, _WebAppMainButton_buttonColor, false, "f");
          return this;
        }
        const color = parseColorToHex(value);
        if (!color) {
          throw new WebAppMainButtonParamInvalidError(`color format is invalid ${value}`);
        }
        __classPrivateFieldSet(this, _WebAppMainButton_buttonColor, color, "f");
        return this;
      }, _WebAppMainButton_setTextColor = function _WebAppMainButton_setTextColor2(value) {
        if (typeof value === "undefined") {
          return this;
        }
        if (__classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_isResettedValue).call(this, value)) {
          __classPrivateFieldSet(this, _WebAppMainButton_buttonTextColor, false, "f");
          return this;
        }
        const textColor = parseColorToHex(value);
        if (!textColor) {
          throw new WebAppMainButtonParamInvalidError(`text color format is invalid ${value}`);
        }
        __classPrivateFieldSet(this, _WebAppMainButton_buttonTextColor, textColor, "f");
        return this;
      }, _WebAppMainButton_setIsVisible = function _WebAppMainButton_setIsVisible2(visible) {
        if (typeof visible === "undefined") {
          return this;
        }
        if (visible && !this.text.length) {
          throw new WebAppMainButtonParamInvalidError("text is required");
        }
        __classPrivateFieldSet(this, _WebAppMainButton_isVisible, visible, "f");
        return this;
      }, _WebAppMainButton_setIsActive = function _WebAppMainButton_setIsActive2(active) {
        if (typeof active === "undefined") {
          return this;
        }
        __classPrivateFieldSet(this, _WebAppMainButton_isActive, active, "f");
        return this;
      };

      // temp/esm/WebApp/PopupButton/PopupButton.js
      var _WebAppPopupButton_instances;
      var _WebAppPopupButton_button;
      var _WebAppPopupButton_setID;
      var _WebAppPopupButton_setType;
      var _WebAppPopupButton_setText;
      var TELEGRAM_POPUP_BUTTON = exports('TELEGRAM_POPUP_BUTTON', {
        TYPES: {
          DEFAULT: "default",
          OK: "ok",
          CLOSE: "close",
          CANCEL: "cancel",
          DESTRUCTIVE: "destructive"
        },
        MAX_ID_LENGTH: 64,
        MAX_TEXT_LENGTH: 64
      });
      var VALID_BUTTON_TYPES = Object.values(TELEGRAM_POPUP_BUTTON.TYPES);
      var TYPES_WITH_REQUIRED_TEXT = [TELEGRAM_POPUP_BUTTON.TYPES.DEFAULT, TELEGRAM_POPUP_BUTTON.TYPES.DESTRUCTIVE];
      var WebAppPopupButton = class {
        constructor(config) {
          var _a, _b;
          _WebAppPopupButton_instances.add(this);
          _WebAppPopupButton_button.set(this, {});
          const {
            id,
            type,
            text
          } = config instanceof WebAppPopupButton ? config.data : config;
          __classPrivateFieldGet(_a = __classPrivateFieldGet(_b = __classPrivateFieldGet(this, _WebAppPopupButton_instances, "m", _WebAppPopupButton_setID).call(this, id), _WebAppPopupButton_instances, "m", _WebAppPopupButton_setType).call(_b, type), _WebAppPopupButton_instances, "m", _WebAppPopupButton_setText).call(_a, text);
        }
        get data() {
          return __classPrivateFieldGet(this, _WebAppPopupButton_button, "f");
        }
      };
      _WebAppPopupButton_button = /* @__PURE__ */new WeakMap(), _WebAppPopupButton_instances = /* @__PURE__ */new WeakSet(), _WebAppPopupButton_setID = function _WebAppPopupButton_setID2(id) {
        const stringifiedID = (id ?? "").toString();
        if (stringifiedID.length > TELEGRAM_POPUP_BUTTON.MAX_ID_LENGTH) {
          throw new WebAppPopupParamInvalidError(`button id is too long ${id}`);
        }
        __classPrivateFieldGet(this, _WebAppPopupButton_button, "f").id = stringifiedID;
        return this;
      }, _WebAppPopupButton_setType = function _WebAppPopupButton_setType2(type) {
        const isValidType = VALID_BUTTON_TYPES.includes(type);
        if (!isValidType) {
          throw new WebAppPopupParamInvalidError(`button type is invalid ${type}`);
        }
        __classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type = type;
        return this;
      }, _WebAppPopupButton_setText = function _WebAppPopupButton_setText2(text) {
        if (!__classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type) {
          throw new WebAppPopupParamInvalidError("You should set type for `WebAppPopupButton` before setting the text");
        }
        const isTextRequired = TYPES_WITH_REQUIRED_TEXT.includes(__classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type);
        if (!isTextRequired) {
          return;
        }
        const normalizedText = (text ?? "").toString().trim();
        if (!normalizedText) {
          throw new WebAppPopupParamInvalidError(`button text is required for type ${__classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type} ${text}`);
        }
        if (normalizedText.length > TELEGRAM_POPUP_BUTTON.MAX_TEXT_LENGTH) {
          throw new WebAppPopupParamInvalidError(`button text is too long ${normalizedText}`);
        }
        __classPrivateFieldGet(this, _WebAppPopupButton_button, "f").text = normalizedText;
      };

      // temp/esm/WebApp/Popup/Popup.js
      var _Popup_instances;
      var _Popup_isOpened;
      var _Popup_data;
      var _Popup_setCallback;
      var _Popup_setTitle;
      var _Popup_setMessage;
      var _Popup_setButtons;
      var TELEGRAM_POPUP = exports('TELEGRAM_POPUP', {
        MAX_TITLE_LENGTH: 64,
        MAX_MESSAGE_LENGTH: 256,
        MIN_BUTTONS: 1,
        MAX_BUTTONS: 3
      });
      var createInitialState = () => ({
        params: {},
        callback: null
      });
      var Popup = class {
        constructor() {
          _Popup_instances.add(this);
          _Popup_isOpened.set(this, false);
          _Popup_data.set(this, createInitialState());
        }
        open(_ref10) {
          let {
            params: {
              title,
              message,
              buttons
            },
            callback
          } = _ref10;
          var _a, _b, _c;
          if (__classPrivateFieldGet(this, _Popup_isOpened, "f")) {
            return;
          }
          __classPrivateFieldGet(_a = __classPrivateFieldGet(_b = __classPrivateFieldGet(_c = __classPrivateFieldGet(this, _Popup_instances, "m", _Popup_setTitle).call(this, title), _Popup_instances, "m", _Popup_setMessage).call(_c, message), _Popup_instances, "m", _Popup_setButtons).call(_b, buttons), _Popup_instances, "m", _Popup_setCallback).call(_a, callback);
          __classPrivateFieldSet(this, _Popup_isOpened, true, "f");
        }
        close() {
          __classPrivateFieldSet(this, _Popup_isOpened, false, "f");
          __classPrivateFieldSet(this, _Popup_data, createInitialState(), "f");
        }
        get isOpened() {
          return __classPrivateFieldGet(this, _Popup_isOpened, "f");
        }
        get params() {
          const hasData = Object.keys(__classPrivateFieldGet(this, _Popup_data, "f").params).length > 0;
          return hasData ? __classPrivateFieldGet(this, _Popup_data, "f").params : null;
        }
        get callback() {
          return __classPrivateFieldGet(this, _Popup_data, "f").callback;
        }
      };
      _Popup_isOpened = /* @__PURE__ */new WeakMap(), _Popup_data = /* @__PURE__ */new WeakMap(), _Popup_instances = /* @__PURE__ */new WeakSet(), _Popup_setCallback = function _Popup_setCallback2(callback) {
        if (callback) {
          __classPrivateFieldGet(this, _Popup_data, "f").callback = callback;
        }
        return this;
      }, _Popup_setTitle = function _Popup_setTitle2(title) {
        if (!title) {
          return this;
        }
        const trimmedTitle = title.trim();
        if (!trimmedTitle.length) {
          return this;
        }
        if (title.length > TELEGRAM_POPUP.MAX_TITLE_LENGTH) {
          throw new WebAppPopupParamInvalidError(`title is too long ${title}`);
        }
        __classPrivateFieldGet(this, _Popup_data, "f").params.title = trimmedTitle;
        return this;
      }, _Popup_setMessage = function _Popup_setMessage2(message) {
        const trimmedMessage = (message ?? "").trim();
        if (!trimmedMessage) {
          throw new WebAppPopupParamInvalidError(`message is required ${message}`);
        }
        if (trimmedMessage.length > TELEGRAM_POPUP.MAX_MESSAGE_LENGTH) {
          console.error("[Telegram.WebApp] Popup message is too long", trimmedMessage);
          throw new WebAppPopupParamInvalidError(`message is too long ${trimmedMessage}`);
        }
        __classPrivateFieldGet(this, _Popup_data, "f").params.message = trimmedMessage;
        return this;
      }, _Popup_setButtons = function _Popup_setButtons2(buttons) {
        if (!buttons) {
          const buttons2 = [new WebAppPopupButton({
            type: TELEGRAM_POPUP_BUTTON.TYPES.CLOSE,
            id: generateId(5)
          }).data];
          __classPrivateFieldGet(this, _Popup_data, "f").params.buttons = buttons2;
          return this;
        }
        if (!Array.isArray(buttons)) {
          throw new WebAppPopupParamInvalidError(`buttons should be an array ${buttons}`);
        }
        if (buttons.length < TELEGRAM_POPUP.MIN_BUTTONS) {
          throw new WebAppPopupParamInvalidError(`should have at least ${TELEGRAM_POPUP.MIN_BUTTONS} button`);
        }
        if (buttons.length > TELEGRAM_POPUP.MAX_BUTTONS) {
          throw new WebAppPopupParamInvalidError(`should not have more than ${TELEGRAM_POPUP.MAX_BUTTONS} buttons`);
        }
        const popupButtons = buttons.map(button => new WebAppPopupButton(button).data);
        __classPrivateFieldGet(this, _Popup_data, "f").params.buttons = popupButtons;
        return this;
      };

      // temp/esm/WebApp/QrPopup.js
      var _QrPopup_isOpened;
      var _QrPopup_data;
      var INITIAL_DATA = {
        params: {},
        callback: null
      };
      var TELEGRAM_SCAN_QR_POPUP = exports('TELEGRAM_SCAN_QR_POPUP', {
        MAX_TEXT_LENGTH: 64
      });
      var QrPopup = class {
        constructor() {
          _QrPopup_isOpened.set(this, false);
          _QrPopup_data.set(this, INITIAL_DATA);
        }
        open(_ref11) {
          let {
            params: {
              text
            },
            callback
          } = _ref11;
          if (__classPrivateFieldGet(this, _QrPopup_isOpened, "f")) {
            throw new WebAppScanQrPopupOpenedError();
          }
          const trimmedText = (text ?? "").trim();
          if (trimmedText.length > TELEGRAM_SCAN_QR_POPUP.MAX_TEXT_LENGTH) {
            throw new WebAppScanQrPopupParamInvalidError(`text is too long ${text}`);
          }
          if (trimmedText) {
            __classPrivateFieldGet(this, _QrPopup_data, "f").params.text = trimmedText;
          }
          __classPrivateFieldGet(this, _QrPopup_data, "f").callback = callback;
          __classPrivateFieldSet(this, _QrPopup_isOpened, true, "f");
        }
        close() {
          __classPrivateFieldSet(this, _QrPopup_isOpened, false, "f");
          __classPrivateFieldSet(this, _QrPopup_data, INITIAL_DATA, "f");
        }
        get isOpened() {
          return __classPrivateFieldGet(this, _QrPopup_isOpened, "f");
        }
        get params() {
          return __classPrivateFieldGet(this, _QrPopup_data, "f").params;
        }
        get callback() {
          return __classPrivateFieldGet(this, _QrPopup_data, "f").callback ?? null;
        }
      };
      _QrPopup_isOpened = /* @__PURE__ */new WeakMap(), _QrPopup_data = /* @__PURE__ */new WeakMap();

      // temp/esm/WebApp/Version.js
      var _Version_instances;
      var _Version_version;
      var _Version_makeVersionRanksArray;
      var _Version_convertToNumber;
      var _Version_compareVersions;
      var VERSION_DIFFERENCE = {
        LESS: -1,
        EQUAL: 0,
        GREATER: 1
      };
      var Version = class {
        constructor(version) {
          _Version_instances.add(this);
          _Version_version.set(this, void 0);
          __classPrivateFieldSet(this, _Version_version, version, "f");
        }
        get value() {
          return __classPrivateFieldGet(this, _Version_version, "f");
        }
        set(version) {
          __classPrivateFieldSet(this, _Version_version, version, "f");
        }
        isSuitableTo(suitableVersion) {
          return __classPrivateFieldGet(this, _Version_instances, "m", _Version_compareVersions).call(this, __classPrivateFieldGet(this, _Version_version, "f"), suitableVersion) >= VERSION_DIFFERENCE.EQUAL;
        }
      };
      _Version_version = /* @__PURE__ */new WeakMap(), _Version_instances = /* @__PURE__ */new WeakSet(), _Version_makeVersionRanksArray = function _Version_makeVersionRanksArray2(version) {
        return version.replace(/^\s+|\s+$/g, "").split(".");
      }, _Version_convertToNumber = function _Version_convertToNumber2(stringifiedNumberOrNullable) {
        if (typeof stringifiedNumberOrNullable === "undefined" || stringifiedNumberOrNullable === null) {
          return 0;
        }
        const parsedInt = parseInt(stringifiedNumberOrNullable);
        if (isNaN(parsedInt)) {
          return 0;
        }
        return parsedInt;
      }, _Version_compareVersions = function _Version_compareVersions2(v1, v2) {
        if (v1 === void 0) {
          v1 = "";
        }
        if (v2 === void 0) {
          v2 = "";
        }
        if (typeof v1 !== "string") {
          v1 = "";
        }
        if (typeof v2 !== "string") {
          v2 = "";
        }
        const v1Units = __classPrivateFieldGet(this, _Version_instances, "m", _Version_makeVersionRanksArray).call(this, v1);
        const v2Units = __classPrivateFieldGet(this, _Version_instances, "m", _Version_makeVersionRanksArray).call(this, v2);
        const longestVersionLength = Math.max(v1Units.length, v2Units.length);
        for (let i = 0; i < longestVersionLength; i++) {
          const version1Rank = __classPrivateFieldGet(this, _Version_instances, "m", _Version_convertToNumber).call(this, v1Units[i]);
          const version2Rank = __classPrivateFieldGet(this, _Version_instances, "m", _Version_convertToNumber).call(this, v2Units[i]);
          if (version1Rank === version2Rank) {
            continue;
          }
          if (version1Rank > version2Rank) {
            return VERSION_DIFFERENCE.GREATER;
          }
          return VERSION_DIFFERENCE.LESS;
        }
        return VERSION_DIFFERENCE.EQUAL;
      };

      // temp/esm/WebApp/Viewport.js
      var _Viewport_instances;
      var _Viewport_eventEmitter;
      var _Viewport_viewportHeight;
      var _Viewport_viewportStableHeight;
      var _Viewport_isExpanded;
      var _Viewport_mainButtonHeight;
      var _Viewport_calculateHeight;
      var _Viewport_calculateViewportHeight;
      var Viewport = class {
        static get EVENTS() {
          return {
            VIEWPORT_CHANGED: "viewport_changed",
            HEIGHT_CALCULATED: "height_calculated"
          };
        }
        constructor(_ref12) {
          let {
            eventEmitter,
            mainButtonHeight
          } = _ref12;
          _Viewport_instances.add(this);
          _Viewport_eventEmitter.set(this, void 0);
          _Viewport_viewportHeight.set(this, false);
          _Viewport_viewportStableHeight.set(this, false);
          _Viewport_isExpanded.set(this, true);
          _Viewport_mainButtonHeight.set(this, void 0);
          Object.defineProperty(this, "setHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: data => {
              if (typeof data !== "undefined") {
                __classPrivateFieldSet(this, _Viewport_isExpanded, Boolean(data.is_expanded), "f");
                __classPrivateFieldSet(this, _Viewport_viewportHeight, data.height, "f");
                if (data.is_state_stable) {
                  __classPrivateFieldSet(this, _Viewport_viewportStableHeight, data.height, "f");
                }
                __classPrivateFieldGet(this, _Viewport_eventEmitter, "f").emit(Viewport.EVENTS.VIEWPORT_CHANGED, Boolean(data.is_state_stable));
              }
              const height = __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportHeight, "f"));
              const stableHeight = __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportStableHeight, "f"));
              __classPrivateFieldGet(this, _Viewport_eventEmitter, "f").emit(Viewport.EVENTS.HEIGHT_CALCULATED, {
                height,
                stableHeight
              });
            }
          });
          __classPrivateFieldSet(this, _Viewport_eventEmitter, eventEmitter, "f");
          __classPrivateFieldSet(this, _Viewport_mainButtonHeight, mainButtonHeight, "f");
        }
        on(event, listener) {
          return __classPrivateFieldGet(this, _Viewport_eventEmitter, "f").subscribe(event, listener);
        }
        get isExpanded() {
          return __classPrivateFieldGet(this, _Viewport_isExpanded, "f");
        }
        get height() {
          return __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateViewportHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportHeight, "f"));
        }
        get stableHeight() {
          return __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateViewportHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportStableHeight, "f"));
        }
      };
      _Viewport_eventEmitter = /* @__PURE__ */new WeakMap(), _Viewport_viewportHeight = /* @__PURE__ */new WeakMap(), _Viewport_viewportStableHeight = /* @__PURE__ */new WeakMap(), _Viewport_isExpanded = /* @__PURE__ */new WeakMap(), _Viewport_mainButtonHeight = /* @__PURE__ */new WeakMap(), _Viewport_instances = /* @__PURE__ */new WeakSet(), _Viewport_calculateHeight = function _Viewport_calculateHeight2(viewportHeight) {
        if (viewportHeight !== false) {
          return viewportHeight - __classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f") + "px";
        }
        return __classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f") ? `calc(100vh - ${__classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f")}px)` : "100vh";
      }, _Viewport_calculateViewportHeight = function _Viewport_calculateViewportHeight2(viewportHeight) {
        const height = viewportHeight === false ? window.innerHeight : viewportHeight;
        return height - __classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f");
      };

      // temp/esm/WebApp/WebApp.js
      var TELEGRAM_WEB_APP = exports('TELEGRAM_WEB_APP', {
        MAX_BYTES_TO_SEND: 4096,
        MAX_INLINE_QUERY_LENGTH: 256,
        CHAT_TYPES: {
          USERS: "users",
          BOTS: "bots",
          GROUPS: "groups",
          CHANNELS: "channels"
        },
        EVENTS: {
          THEME_CHANGED: "themeChanged",
          VIEWPORT_CHANGED: "viewportChanged",
          MAIN_BUTTON_CLICKED: "mainButtonClicked",
          BACK_BUTTON_CLICKED: "backButtonClicked",
          SETTINGS_BUTTON_CLICKED: "settingsButtonClicked",
          INVOICE_CLOSED: "invoiceClosed",
          POPUP_CLOSED: "popupClosed",
          QR_TEXT_RECEIVED: "qrTextReceived",
          CLIPBOARD_TEXT_RECEIVED: "clipboardTextReceived"
        }
      });
      var VALID_CHAT_TYPES = Object.values(TELEGRAM_WEB_APP.CHAT_TYPES);
      var TelegramWebApp = (() => {
        var _instances, _platform, _headerColorKey, _lastWindowHeight, _isClosingConfirmationEnabled, _initData, _version2, _theme, _hapticFeedback, _webView, _bgColor, _viewport, _backButton, _mainButton, _invoices, _popup, _clipboard, _qrPopup, _initMainButton, _initBackButton, _initTheme, _initViewport, _initBgColor, _initHapticFeedback, _linkHandler, _setCssVar, _receiveWebViewEvent, _onWebViewEvent, _offWebViewEvent, _onWindowResize, _onInvoiceClosed, _onThemeChanged, _onViewportChanged, _onSettingsButtonPressed, _onPopupClosed, _onClipboardTextReceived, _onQrTextReceived, _onScanQrPopupClosed, _setClosingConfirmation, _getHeaderColorKey;
        let _classDecorators = [FeatureSupport.inVersion({
          methodsConfig: {
            setHeaderColor: {
              availableInVersion: "6.1",
              decorate: _ref13 => {
                let {
                  appVersion,
                  isSupported,
                  executeOriginalMethod
                } = _ref13;
                if (!isSupported) {
                  console.warn(`[Telegram.WebApp] Header color is not supported in version ${appVersion}`);
                  return;
                }
                executeOriginalMethod();
              }
            },
            setBackgroundColor: {
              availableInVersion: "6.1",
              decorate: _ref14 => {
                let {
                  appVersion,
                  isSupported,
                  executeOriginalMethod
                } = _ref14;
                if (!isSupported) {
                  console.warn(`[Telegram.WebApp] Background color is not supported in version ${appVersion}`);
                  return;
                }
                executeOriginalMethod();
              }
            },
            enableClosingConfirmation: {
              availableInVersion: "6.2",
              decorate: _ref15 => {
                let {
                  appVersion,
                  isSupported,
                  executeOriginalMethod
                } = _ref15;
                if (!isSupported) {
                  console.warn(`[Telegram.WebApp] Closing confirmation is not supported in version ${appVersion}`);
                  return;
                }
                executeOriginalMethod();
              }
            },
            disableClosingConfirmation: {
              availableInVersion: "6.2",
              decorate: _ref16 => {
                let {
                  appVersion,
                  isSupported,
                  executeOriginalMethod
                } = _ref16;
                if (!isSupported) {
                  console.warn(`[Telegram.WebApp] Closing confirmation is not supported in version ${appVersion}`);
                  return;
                }
                executeOriginalMethod();
              }
            },
            switchInlineQuery: {
              availableInVersion: "6.7",
              decorate: _ref17 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref17;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            },
            openInvoice: {
              availableInVersion: "6.1",
              decorate: _ref18 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref18;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            },
            showPopup: {
              availableInVersion: "6.2",
              decorate: _ref19 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref19;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            },
            showAlert: {
              availableInVersion: "6.2",
              decorate: _ref20 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref20;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            },
            showConfirm: {
              availableInVersion: "6.2",
              decorate: _ref21 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref21;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            },
            showScanQrPopup: {
              availableInVersion: "6.4",
              decorate: _ref22 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref22;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            },
            closeScanQrPopup: {
              availableInVersion: "6.4",
              decorate: _ref23 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref23;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            },
            readTextFromClipboard: {
              availableInVersion: "6.4",
              decorate: _ref24 => {
                let {
                  appVersion,
                  name,
                  isSupported,
                  executeOriginalMethod
                } = _ref24;
                if (!isSupported) {
                  throw new WebAppMethodUnsupportedError(name, appVersion);
                }
                executeOriginalMethod();
              }
            }
          }
        }), bindMethods];
        let _classDescriptor;
        let _classExtraInitializers = [];
        let _classThis;
        var TelegramWebApp2 = _classThis = class {
          constructor(_ref25) {
            let {
              initData,
              version,
              webView,
              bgColor,
              viewport,
              theme,
              backButton,
              mainButton,
              invoices,
              popup,
              clipboard,
              qrPopup,
              hapticFeedback
            } = _ref25;
            _instances.add(this);
            _platform.set(this, "unknown");
            _headerColorKey.set(this, TELEGRAM_THEME.HEADER_COLOR.BG_COLOR);
            _lastWindowHeight.set(this, window.innerHeight);
            _isClosingConfirmationEnabled.set(this, false);
            _initData.set(this, void 0);
            _version2.set(this, void 0);
            _theme.set(this, void 0);
            _hapticFeedback.set(this, void 0);
            _webView.set(this, void 0);
            _bgColor.set(this, void 0);
            _viewport.set(this, void 0);
            _backButton.set(this, void 0);
            _mainButton.set(this, void 0);
            _invoices.set(this, void 0);
            _popup.set(this, void 0);
            _clipboard.set(this, void 0);
            _qrPopup.set(this, void 0);
            _linkHandler.set(this, e => {
              if (e.metaKey || e.ctrlKey || !e.target) {
                return;
              }
              const isAnchroEl = el2 => el2.tagName === "A";
              let el = e.target;
              while (!isAnchroEl(el) && el.parentNode) {
                el = el.parentNode;
              }
              const shouldOpenLink = isAnchroEl(el) && el.target !== "_blank" && isHTTPTypeProtocol(el.protocol) && isTelegramHostname(el.hostname);
              if (shouldOpenLink) {
                e.preventDefault();
                this.openTelegramLink(el.href);
              }
            });
            _onWindowResize.set(this, () => {
              if (__classPrivateFieldGet(this, _lastWindowHeight, "f") !== window.innerHeight) {
                __classPrivateFieldSet(this, _lastWindowHeight, window.innerHeight, "f");
                __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.VIEWPORT_CHANGED, {
                  isStateStable: true
                });
              }
            });
            _onInvoiceClosed.set(this, (_, _ref26) => {
              let {
                slug,
                status
              } = _ref26;
              if (!slug) {
                return;
              }
              if (!__classPrivateFieldGet(this, _invoices, "f").has(slug)) {
                return;
              }
              const {
                url,
                callback
              } = __classPrivateFieldGet(this, _invoices, "f").remove(slug);
              callback?.(status);
              __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.INVOICE_CLOSED, {
                url,
                status
              });
            });
            _onThemeChanged.set(this, (_, eventData) => {
              if (!eventData.theme_params) {
                return;
              }
              __classPrivateFieldGet(this, _theme, "f").setParams(eventData.theme_params);
              __classPrivateFieldGet(this, _mainButton, "f").setParams({});
              __classPrivateFieldGet(this, _bgColor, "f").update();
              __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.THEME_CHANGED);
            });
            _onViewportChanged.set(this, (_, eventData) => {
              if (!eventData.height) {
                return;
              }
              window.removeEventListener("resize", __classPrivateFieldGet(this, _onWindowResize, "f"));
              __classPrivateFieldGet(this, _viewport, "f").setHeight(eventData);
            });
            _onSettingsButtonPressed.set(this, () => {
              __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.SETTINGS_BUTTON_CLICKED);
            });
            _onPopupClosed.set(this, (_, eventData) => {
              if (!__classPrivateFieldGet(this, _popup, "f").isOpened) {
                return;
              }
              const callback = __classPrivateFieldGet(this, _popup, "f").callback;
              __classPrivateFieldGet(this, _popup, "f").close();
              const buttonID = eventData.button_id ?? null;
              if (buttonID) {
                callback?.(buttonID);
              }
              __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.POPUP_CLOSED, {
                button_id: buttonID
              });
            });
            _onClipboardTextReceived.set(this, (_, _ref27) => {
              let {
                req_id: id,
                data = null
              } = _ref27;
              if (!id || !__classPrivateFieldGet(this, _clipboard, "f").hasRequest(id)) {
                return;
              }
              const callback = __classPrivateFieldGet(this, _clipboard, "f").getRequest(id);
              __classPrivateFieldGet(this, _clipboard, "f").removeRequest(id);
              callback?.(data);
              __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.CLIPBOARD_TEXT_RECEIVED, {
                data
              });
            });
            _onQrTextReceived.set(this, (_, eventData) => {
              if (!__classPrivateFieldGet(this, _qrPopup, "f").isOpened) {
                return;
              }
              const {
                callback
              } = __classPrivateFieldGet(this, _qrPopup, "f");
              const data = eventData.data ?? null;
              if (callback?.(data)) {
                __classPrivateFieldGet(this, _qrPopup, "f").close();
                __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_CLOSE_SCAN_QR_POPUP);
              }
              __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.QR_TEXT_RECEIVED, {
                data
              });
            });
            _onScanQrPopupClosed.set(this, () => __classPrivateFieldGet(this, _qrPopup, "f").close());
            __classPrivateFieldSet(this, _initData, initData, "f");
            __classPrivateFieldSet(this, _version2, version, "f");
            __classPrivateFieldSet(this, _webView, webView, "f");
            __classPrivateFieldSet(this, _bgColor, bgColor, "f");
            __classPrivateFieldGet(this, _instances, "m", _initBgColor).call(this);
            __classPrivateFieldSet(this, _viewport, viewport, "f");
            __classPrivateFieldGet(this, _instances, "m", _initViewport).call(this);
            __classPrivateFieldSet(this, _hapticFeedback, hapticFeedback, "f");
            __classPrivateFieldGet(this, _instances, "m", _initHapticFeedback).call(this);
            __classPrivateFieldSet(this, _backButton, backButton, "f");
            __classPrivateFieldGet(this, _instances, "m", _initBackButton).call(this);
            __classPrivateFieldSet(this, _mainButton, mainButton, "f");
            __classPrivateFieldGet(this, _instances, "m", _initMainButton).call(this);
            const {
              initParams
            } = __classPrivateFieldGet(this, _webView, "f");
            __classPrivateFieldSet(this, _theme, theme, "f");
            __classPrivateFieldGet(this, _instances, "m", _initTheme).call(this, initParams.tgWebAppThemeParams);
            __classPrivateFieldSet(this, _popup, popup, "f");
            if (initParams.tgWebAppVersion) {
              __classPrivateFieldGet(this, _version2, "f").set(initParams.tgWebAppVersion);
            }
            if (initParams.tgWebAppPlatform) {
              __classPrivateFieldSet(this, _platform, initParams.tgWebAppPlatform, "f");
            }
            __classPrivateFieldSet(this, _invoices, invoices, "f");
            __classPrivateFieldSet(this, _clipboard, clipboard, "f");
            __classPrivateFieldSet(this, _qrPopup, qrPopup, "f");
            __classPrivateFieldGet(this, _bgColor, "f").update();
            __classPrivateFieldGet(this, _viewport, "f").setHeight();
            window.addEventListener("resize", __classPrivateFieldGet(this, _onWindowResize, "f"));
            if (__classPrivateFieldGet(this, _webView, "f").isIframe) {
              document.addEventListener("click", __classPrivateFieldGet(this, _linkHandler, "f"));
            }
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.THEME_CHANGED, __classPrivateFieldGet(this, _onThemeChanged, "f"));
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.VIEWPORT_CHANGED, __classPrivateFieldGet(this, _onViewportChanged, "f"));
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.INVOICE_CLOSED, __classPrivateFieldGet(this, _onInvoiceClosed, "f"));
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.SETTINGS_BUTTON_PRESSED, __classPrivateFieldGet(this, _onSettingsButtonPressed, "f"));
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.POPUP_CLOSED, __classPrivateFieldGet(this, _onPopupClosed, "f"));
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.QR_TEXT_RECEIVED, __classPrivateFieldGet(this, _onQrTextReceived, "f"));
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.SCAN_QR_POPUP_CLOSED, __classPrivateFieldGet(this, _onScanQrPopupClosed, "f"));
            __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.CLIPBOARD_TEXT_RECEIVED, __classPrivateFieldGet(this, _onClipboardTextReceived, "f"));
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_REQUEST_THEME);
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_REQUEST_VIEWPORT);
          }
          get initData() {
            return __classPrivateFieldGet(this, _initData, "f").rawData;
          }
          get initDataUnsafe() {
            return __classPrivateFieldGet(this, _initData, "f").unsafeData;
          }
          get themeParams() {
            return __classPrivateFieldGet(this, _theme, "f").params;
          }
          get colorScheme() {
            return __classPrivateFieldGet(this, _theme, "f").colorScheme;
          }
          get version() {
            return __classPrivateFieldGet(this, _version2, "f").value;
          }
          get platform() {
            return __classPrivateFieldGet(this, _platform, "f");
          }
          set headerColor(value) {
            this.setHeaderColor(value);
          }
          get headerColor() {
            return __classPrivateFieldGet(this, _theme, "f").getParam(__classPrivateFieldGet(this, _headerColorKey, "f")) ?? "";
          }
          set backgroundColor(color) {
            __classPrivateFieldGet(this, _bgColor, "f").set(color);
          }
          get backgroundColor() {
            return __classPrivateFieldGet(this, _bgColor, "f").get() ?? "";
          }
          get HapticFeedback() {
            return __classPrivateFieldGet(this, _hapticFeedback, "f");
          }
          get BackButton() {
            return __classPrivateFieldGet(this, _backButton, "f");
          }
          get MainButton() {
            return __classPrivateFieldGet(this, _mainButton, "f");
          }
          get viewportHeight() {
            return __classPrivateFieldGet(this, _viewport, "f").height;
          }
          get viewportStableHeight() {
            return __classPrivateFieldGet(this, _viewport, "f").stableHeight;
          }
          get isExpanded() {
            return __classPrivateFieldGet(this, _viewport, "f").isExpanded;
          }
          // FIXME: add `FeatureSupport`
          set isClosingConfirmationEnabled(isEnabled) {
            __classPrivateFieldGet(this, _instances, "m", _setClosingConfirmation).call(this, isEnabled);
          }
          get isClosingConfirmationEnabled() {
            return __classPrivateFieldGet(this, _isClosingConfirmationEnabled, "f");
          }
          setHeaderColor(colorKeyOrColor) {
            const colorKey = __classPrivateFieldGet(this, _instances, "m", _getHeaderColorKey).call(this, colorKeyOrColor);
            if (colorKey !== TELEGRAM_THEME.HEADER_COLOR.BG_COLOR && colorKey !== TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
              throw new WebAppHeaderColorKeyInvalidError(colorKeyOrColor);
            }
            __classPrivateFieldSet(this, _headerColorKey, colorKey, "f");
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SET_HEADER_COLOR, void 0, {
              color_key: colorKey
            });
          }
          setBackgroundColor(color) {
            this.backgroundColor = color;
          }
          sendData(data) {
            if (!data || !data.length) {
              throw new WebAppDataInvalidError(`is required ${data}`);
            }
            if (byteLength(data) > TELEGRAM_WEB_APP.MAX_BYTES_TO_SEND) {
              throw new WebAppDataInvalidError(`is too long ${data}`);
            }
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_DATA_SEND, void 0, {
              data
            });
          }
          isVersionAtLeast(version) {
            return __classPrivateFieldGet(this, _version2, "f").isSuitableTo(version);
          }
          openLink(url, options) {
            const {
              protocol
            } = new URL(url);
            if (!isHTTPTypeProtocol(protocol)) {
              throw new WebAppTelegramUrlInvalidError(`protocol is not supported ${url}`);
            }
            if (!__classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.1")) {
              window.open(url, "_blank");
              return;
            }
            const linkOptions = options ?? {
              try_instant_view: false
            };
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_LINK, void 0, {
              url,
              try_instant_view: __classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.4") && linkOptions.try_instant_view
            });
          }
          openInvoice(url, callback) {
            const slug = __classPrivateFieldGet(this, _invoices, "f").create(url);
            __classPrivateFieldGet(this, _invoices, "f").save(slug, {
              url,
              callback
            });
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_INVOICE, void 0, {
              slug
            });
          }
          openTelegramLink(url) {
            if (!__classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.1")) {
              return;
            }
            const {
              protocol,
              hostname,
              pathname,
              search
            } = new URL(url);
            if (!isHTTPTypeProtocol(protocol)) {
              throw new WebAppTelegramUrlInvalidError(`protocol is not supported ${url}`);
            }
            if (!isTelegramHostname(hostname)) {
              throw new WebAppTelegramUrlInvalidError(`host is not supported ${url}`);
            }
            const fullPath = pathname + search;
            if (__classPrivateFieldGet(this, _webView, "f").isIframe) {
              __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_TG_LINK, void 0, {
                path_full: fullPath
              });
              return;
            }
            location.href = "https://t.me" + fullPath;
          }
          readTextFromClipboard(callback) {
            const id = generateId(16);
            __classPrivateFieldGet(this, _clipboard, "f").setRequest(id, callback);
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_READ_TEXT_FROM_CLIPBOARD, void 0, {
              req_id: id
            });
          }
          enableClosingConfirmation() {
            __classPrivateFieldSet(this, _isClosingConfirmationEnabled, true, "f");
          }
          disableClosingConfirmation() {
            __classPrivateFieldSet(this, _isClosingConfirmationEnabled, false, "f");
          }
          showPopup(params, callback) {
            if (__classPrivateFieldGet(this, _popup, "f").isOpened) {
              throw new WebAppPopupOpenedError();
            }
            if (typeof params !== "object" && params === null) {
              throw new WebAppPopupParamInvalidError(`params must be an object ${params}`);
            }
            __classPrivateFieldGet(this, _popup, "f").open({
              params,
              callback
            });
            const data = __classPrivateFieldGet(this, _popup, "f").params ?? {};
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_POPUP, void 0, data);
          }
          showAlert(message, callback) {
            const callbackWithoutID = () => callback?.();
            this.showPopup({
              message
            }, callbackWithoutID);
          }
          showConfirm(message, callback) {
            const OK_BTN_ID = "ok";
            const popupCallback = pressedBtnID => callback?.(pressedBtnID === OK_BTN_ID);
            this.showPopup({
              message,
              buttons: [new WebAppPopupButton({
                type: TELEGRAM_POPUP_BUTTON.TYPES.OK,
                id: OK_BTN_ID
              }).data, new WebAppPopupButton({
                type: TELEGRAM_POPUP_BUTTON.TYPES.CANCEL,
                id: ""
              }).data]
            }, popupCallback);
          }
          switchInlineQuery(query, chatTypesToChoose) {
            if (!__classPrivateFieldGet(this, _webView, "f").initParams.tgWebAppBotInline) {
              throw new WebAppInlineModeDisabledError();
            }
            const queryToSend = (query || "").trim();
            if (queryToSend.length > TELEGRAM_WEB_APP.MAX_INLINE_QUERY_LENGTH) {
              throw new WebAppInlineQueryInvalidError(`is too long ${query}`);
            }
            const chatTypes = chatTypesToChoose ? chatTypesToChoose : [];
            if (!Array.isArray(chatTypesToChoose)) {
              throw new WebAppInlineChooseChatTypeInvalidError(`types should be an array ${chatTypesToChoose}`);
            }
            const chats = [...new Set(chatTypes)];
            chats.forEach(chat => {
              if (!VALID_CHAT_TYPES.includes(chat)) {
                throw new WebAppInlineChooseChatTypeInvalidError(`type is invalid ${chat}`);
              }
            });
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SWITCH_INLINE_QUERY, void 0, {
              query: queryToSend,
              chat_types: chats
            });
          }
          showScanQrPopup(params, callback) {
            __classPrivateFieldGet(this, _qrPopup, "f").open({
              params,
              callback
            });
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_SCAN_QR_POPUP, void 0, __classPrivateFieldGet(this, _qrPopup, "f").params);
          }
          closeScanQrPopup() {
            __classPrivateFieldGet(this, _qrPopup, "f").close();
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_CLOSE_SCAN_QR_POPUP);
          }
          onEvent(eventType, callback) {
            __classPrivateFieldGet(this, _instances, "m", _onWebViewEvent).call(this, eventType, callback);
          }
          offEvent(eventType, callback) {
            __classPrivateFieldGet(this, _instances, "m", _offWebViewEvent).call(this, eventType, callback);
          }
          ready() {
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_READY);
          }
          expand() {
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_EXPAND);
          }
          close() {
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_CLOSE);
          }
        };
        _platform = /* @__PURE__ */new WeakMap();
        _headerColorKey = /* @__PURE__ */new WeakMap();
        _lastWindowHeight = /* @__PURE__ */new WeakMap();
        _isClosingConfirmationEnabled = /* @__PURE__ */new WeakMap();
        _initData = /* @__PURE__ */new WeakMap();
        _version2 = /* @__PURE__ */new WeakMap();
        _theme = /* @__PURE__ */new WeakMap();
        _hapticFeedback = /* @__PURE__ */new WeakMap();
        _webView = /* @__PURE__ */new WeakMap();
        _bgColor = /* @__PURE__ */new WeakMap();
        _viewport = /* @__PURE__ */new WeakMap();
        _backButton = /* @__PURE__ */new WeakMap();
        _mainButton = /* @__PURE__ */new WeakMap();
        _invoices = /* @__PURE__ */new WeakMap();
        _popup = /* @__PURE__ */new WeakMap();
        _clipboard = /* @__PURE__ */new WeakMap();
        _qrPopup = /* @__PURE__ */new WeakMap();
        _linkHandler = /* @__PURE__ */new WeakMap();
        _onWindowResize = /* @__PURE__ */new WeakMap();
        _onInvoiceClosed = /* @__PURE__ */new WeakMap();
        _onThemeChanged = /* @__PURE__ */new WeakMap();
        _onViewportChanged = /* @__PURE__ */new WeakMap();
        _onSettingsButtonPressed = /* @__PURE__ */new WeakMap();
        _onPopupClosed = /* @__PURE__ */new WeakMap();
        _onClipboardTextReceived = /* @__PURE__ */new WeakMap();
        _onQrTextReceived = /* @__PURE__ */new WeakMap();
        _onScanQrPopupClosed = /* @__PURE__ */new WeakMap();
        _instances = /* @__PURE__ */new WeakSet();
        _initMainButton = function _initMainButton2() {
          const onMainButtonClick = isActive => {
            if (isActive) {
              __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.MAIN_BUTTON_CLICKED);
            }
          };
          __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.MAIN_BUTTON_PRESSED, () => {
            onMainButtonClick(__classPrivateFieldGet(this, _mainButton, "f").isActive);
          });
          __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.DEBUG_BUTTON_CLICKED, onMainButtonClick);
          __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.DEBUG_BUTTON_UPDATED, __classPrivateFieldGet(this, _viewport, "f").setHeight);
          __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.UPDATED, params => {
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SETUP_MAIN_BUTTON, void 0, params);
          });
          __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.CLICKED, callback => {
            __classPrivateFieldGet(this, _instances, "m", _onWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.MAIN_BUTTON_CLICKED, callback);
          });
          __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.OFF_CLICKED, callback => {
            __classPrivateFieldGet(this, _instances, "m", _offWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.MAIN_BUTTON_CLICKED, callback);
          });
        };
        _initBackButton = function _initBackButton2() {
          __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.BACK_BUTTON_PRESSED, () => {
            __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.BACK_BUTTON_CLICKED);
          });
          __classPrivateFieldGet(this, _backButton, "f")[BACK_BUTTON_ON_EVENT_KEY](BACK_BUTTON_EVENTS.UPDATED, params => {
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SETUP_BACK_BUTTON, void 0, params);
          });
          __classPrivateFieldGet(this, _backButton, "f")[BACK_BUTTON_ON_EVENT_KEY](BACK_BUTTON_EVENTS.CLICKED, callback => {
            __classPrivateFieldGet(this, _instances, "m", _onWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.BACK_BUTTON_CLICKED, callback);
          });
          __classPrivateFieldGet(this, _backButton, "f")[BACK_BUTTON_ON_EVENT_KEY](BACK_BUTTON_EVENTS.OFF_CLICKED, callback => {
            __classPrivateFieldGet(this, _instances, "m", _offWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.BACK_BUTTON_CLICKED, callback);
          });
        };
        _initTheme = function _initTheme2(rawTheme) {
          __classPrivateFieldGet(this, _theme, "f").on(Theme.EVENTS.COLOR_SCHEME_CHANGED, colorScheme => __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, "color-scheme", colorScheme));
          __classPrivateFieldGet(this, _theme, "f").on(Theme.EVENTS.THEME_PARAMS_CHANGED, themeParams2 => SessionStorage.set("themeParams", themeParams2));
          __classPrivateFieldGet(this, _theme, "f").on(Theme.EVENTS.THEME_PARAM_SET, (param, value) => {
            const cssVar = "theme-" + param.split("_").join("-");
            __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, cssVar, value);
          });
          if (rawTheme) {
            try {
              const parsedThemeParams = JSON.parse(rawTheme);
              if (parsedThemeParams) {
                __classPrivateFieldGet(this, _theme, "f").setParams(parsedThemeParams);
              }
            } catch {}
          }
          const themeParams = SessionStorage.get("themeParams");
          if (themeParams) {
            __classPrivateFieldGet(this, _theme, "f").setParams(themeParams);
          }
        };
        _initViewport = function _initViewport2() {
          __classPrivateFieldGet(this, _viewport, "f").on(Viewport.EVENTS.VIEWPORT_CHANGED, isStateStable => {
            __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.VIEWPORT_CHANGED, {
              isStateStable
            });
          });
          __classPrivateFieldGet(this, _viewport, "f").on(Viewport.EVENTS.HEIGHT_CALCULATED, _ref28 => {
            let {
              height,
              stableHeight
            } = _ref28;
            __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, "viewport-height", height);
            __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, "viewport-stable-height", stableHeight);
          });
        };
        _initBgColor = function _initBgColor2() {
          __classPrivateFieldGet(this, _bgColor, "f").on(BackgroundColor.EVENTS.UPDATED, maybeColor => {
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SET_BACKGROUND_COLOR, void 0, {
              color: maybeColor ?? ""
            });
          });
        };
        _initHapticFeedback = function _initHapticFeedback2() {
          __classPrivateFieldGet(this, _hapticFeedback, "f")[WebAppHapticFeedback.PRIVATE_KEYS.ON_EVENT](WebAppHapticFeedback.EVENTS.FEEDBACK_TRIGGERED, feedback => {
            __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_TRIGGER_HAPTIC_FEEDBACK, void 0, feedback);
          });
        };
        _setCssVar = function _setCssVar2(name, value) {
          const root = document.documentElement;
          root?.style?.setProperty("--tg-" + name, value);
        };
        _receiveWebViewEvent = function _receiveWebViewEvent2(eventType, params) {
          const callbackArgs = params ? [params] : [];
          __classPrivateFieldGet(this, _webView, "f").callEventCallbacks("webview:" + eventType, callback => {
            callback.apply(this, callbackArgs);
          });
        };
        _onWebViewEvent = function _onWebViewEvent2(eventType, callback) {
          __classPrivateFieldGet(this, _webView, "f").onEvent("webview:" + eventType, callback);
        };
        _offWebViewEvent = function _offWebViewEvent2(eventType, callback) {
          __classPrivateFieldGet(this, _webView, "f").offEvent("webview:" + eventType, callback);
        };
        _setClosingConfirmation = function _setClosingConfirmation2(isEnabled) {
          if (!__classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.2")) {
            console.warn("[Telegram.WebApp] Closing confirmation is not supported in version " + __classPrivateFieldGet(this, _version2, "f").value);
            return;
          }
          __classPrivateFieldSet(this, _isClosingConfirmationEnabled, Boolean(isEnabled), "f");
          __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SETUP_CLOSING_BEHAVIOR, void 0, {
            need_confirmation: __classPrivateFieldGet(this, _isClosingConfirmationEnabled, "f")
          });
        };
        _getHeaderColorKey = function _getHeaderColorKey2(colorKeyOrColor) {
          if (colorKeyOrColor === TELEGRAM_THEME.HEADER_COLOR.BG_COLOR || colorKeyOrColor === TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
            return colorKeyOrColor;
          }
          const parsedColor = parseColorToHex(colorKeyOrColor);
          const themeParams = __classPrivateFieldGet(this, _theme, "f").params;
          if (themeParams.bg_color && themeParams.bg_color === parsedColor) {
            return TELEGRAM_THEME.HEADER_COLOR.BG_COLOR;
          }
          if (themeParams.secondary_bg_color && themeParams.secondary_bg_color === parsedColor) {
            return TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR;
          }
          return false;
        };
        __setFunctionName(_classThis, "TelegramWebApp");
        (() => {
          __esDecorate(null, _classDescriptor = {
            value: _classThis
          }, _classDecorators, {
            kind: "class",
            name: _classThis.name
          }, null, _classExtraInitializers);
          TelegramWebApp2 = _classThis = _classDescriptor.value;
          __runInitializers(_classThis, _classExtraInitializers);
        })();
        return TelegramWebApp2 = _classThis;
      })();

      // temp/esm/Telegram/Telegram.js
      var _TelegramWebAppContainer_webApp;
      var _TelegramWebAppContainer_webView;
      var DEFAULT_VERSION = "6.0";
      var TelegramWebAppContainer = exports('TelegramWebAppContainer', class {
        constructor(_temp) {
          let {
            exposeInMainWorld = false
          } = _temp === void 0 ? {} : _temp;
          _TelegramWebAppContainer_webApp.set(this, void 0);
          _TelegramWebAppContainer_webView.set(this, void 0);
          if (typeof window === "undefined") {
            throw new Error("Telegram web app can only be launched in browser");
          }
          const initParams = getWebViewInitParams(location.hash);
          let isDebug = false;
          try {
            isDebug = Boolean(JSON.parse(initParams.tgWebAppDebug));
          } catch {}
          const eventEmitter = new EventBus();
          const webView = new TelegramWebView(initParams);
          const version = new Version(initParams.tgWebAppVersion ?? DEFAULT_VERSION);
          FeatureSupport.version = version;
          const initData = new InitData(initParams.tgWebAppData);
          const viewport = new Viewport({
            eventEmitter,
            mainButtonHeight: 0
          });
          const theme = new Theme(eventEmitter);
          const bgColor = new BackgroundColor({
            eventEmitter,
            themeParams: () => theme.params
          });
          const backButton = new WebAppBackButton({
            eventEmitter
          });
          const clipboard = new WebAppClipboard();
          const hapticFeedback = new WebAppHapticFeedback(eventEmitter);
          const invoices = new Invoices();
          const mainButton = new WebAppMainButton({
            eventEmitter,
            theme,
            isDebug
          });
          const popup = new Popup();
          const qrPopup = new QrPopup();
          const webApp = new TelegramWebApp({
            backButton,
            bgColor,
            clipboard,
            hapticFeedback,
            initData,
            invoices,
            mainButton,
            popup,
            qrPopup,
            theme,
            version,
            viewport,
            webView
          });
          if (exposeInMainWorld) {
            window.Telegram = {
              WebView: webView,
              WebApp: webApp,
              Utils: {
                urlSafeDecode,
                urlParseQueryString,
                urlParseHashParams,
                urlAppendHashParams,
                sessionStorageSet: SessionStorage.set,
                sessionStorageGet: SessionStorage.get
              },
              // For Windows Phone app
              TelegramGameProxy_receiveEvent: webView.receiveEvent,
              // App backward compatibility
              TelegramGameProxy: {
                receiveEvent: webView.receiveEvent
              }
            };
          }
          __classPrivateFieldSet(this, _TelegramWebAppContainer_webApp, webApp, "f");
          __classPrivateFieldSet(this, _TelegramWebAppContainer_webView, webView, "f");
        }
        get WebApp() {
          return __classPrivateFieldGet(this, _TelegramWebAppContainer_webApp, "f");
        }
        get WebView() {
          return __classPrivateFieldGet(this, _TelegramWebAppContainer_webView, "f");
        }
      });
      _TelegramWebAppContainer_webApp = /* @__PURE__ */new WeakMap(), _TelegramWebAppContainer_webView = /* @__PURE__ */new WeakMap();
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=.js", ['./index2.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;
  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }
      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index2.js", ['./cjs-loader.mjs', './core.js', './x64-core.js', './lib-typedarrays.js', './enc-utf16.js', './enc-base64.js', './enc-base64url.js', './md5.js', './sha1.js', './sha256.js', './sha224.js', './sha512.js', './sha384.js', './sha3.js', './ripemd160.js', './hmac.js', './pbkdf2.js', './evpkdf.js', './cipher-core.js', './mode-cfb.js', './mode-ctr.js', './mode-ctr-gladman.js', './mode-ofb.js', './mode-ecb.js', './pad-ansix923.js', './pad-iso10126.js', './pad-iso97971.js', './pad-zeropadding.js', './pad-nopadding.js', './format-hex.js', './aes.js', './tripledes.js', './rc4.js', './rabbit.js', './rabbit-legacy.js', './blowfish.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y, __cjsMetaURL$z;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$z = module.__cjsMetaURL;
    }],
    execute: function () {
      exports('default', void 0);
      let _cjsExports;
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports$1 === "object") {
            // CommonJS
            module.exports = exports$1 = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./enc-base64url"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"), require("./blowfish"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
          } else {
            // Global (browser)
            root.CryptoJS = factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          return CryptoJS;
        });

        // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, () => ({
        './core': __cjsMetaURL$1,
        './x64-core': __cjsMetaURL$2,
        './lib-typedarrays': __cjsMetaURL$3,
        './enc-utf16': __cjsMetaURL$4,
        './enc-base64': __cjsMetaURL$5,
        './enc-base64url': __cjsMetaURL$6,
        './md5': __cjsMetaURL$7,
        './sha1': __cjsMetaURL$8,
        './sha256': __cjsMetaURL$9,
        './sha224': __cjsMetaURL$a,
        './sha512': __cjsMetaURL$b,
        './sha384': __cjsMetaURL$c,
        './sha3': __cjsMetaURL$d,
        './ripemd160': __cjsMetaURL$e,
        './hmac': __cjsMetaURL$f,
        './pbkdf2': __cjsMetaURL$g,
        './evpkdf': __cjsMetaURL$h,
        './cipher-core': __cjsMetaURL$i,
        './mode-cfb': __cjsMetaURL$j,
        './mode-ctr': __cjsMetaURL$k,
        './mode-ctr-gladman': __cjsMetaURL$l,
        './mode-ofb': __cjsMetaURL$m,
        './mode-ecb': __cjsMetaURL$n,
        './pad-ansix923': __cjsMetaURL$o,
        './pad-iso10126': __cjsMetaURL$p,
        './pad-iso97971': __cjsMetaURL$q,
        './pad-zeropadding': __cjsMetaURL$r,
        './pad-nopadding': __cjsMetaURL$s,
        './format-hex': __cjsMetaURL$t,
        './aes': __cjsMetaURL$u,
        './tripledes': __cjsMetaURL$v,
        './rc4': __cjsMetaURL$w,
        './rabbit': __cjsMetaURL$x,
        './rabbit-legacy': __cjsMetaURL$y,
        './blowfish': __cjsMetaURL$z
      }));
    }
  };
});

System.register("chunks:///_virtual/index4.ts", [], function (exports) {
  return {
    execute: function () {
      /******/var __webpack_modules__ = {
        /***/9726: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }
              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getHttpV4Endpoint = exports.getHttpV4Endpoints = exports.getHttpEndpoint = exports.getHttpEndpoints = exports.Access = void 0;
          const nodes_1 = __webpack_require__(1771);
          class Access {
            //////////////////////////////////
            constructor() {
              // default
              this.host = "ton.access.orbs.network";
              this.urlVersion = 1;
              this.nodes = new nodes_1.Nodes();
            } //////////////////////////////////
            init() {
              return __awaiter(this, void 0, void 0, function* () {
                const pjson = __webpack_require__(9965);
                yield this.nodes.init(`https://${this.host}/mngr/nodes?npm_version=${pjson.version}`); // pass host when backend endpoint is ready
              });
            } //////////////////////////////////
            makeProtonet(edgeProtocol, network) {
              let res = "";
              switch (edgeProtocol) {
                case "toncenter-api-v2":
                  res += "v2-";
                  break;
                case "ton-api-v4":
                  res += "v4-";
                  break;
              }
              res += network;
              return res;
            } //////////////////////////////////
            weightedRandom(nodes) {
              let sumWeights = 0;
              for (const node of nodes) {
                sumWeights += node.Weight;
              }
              const rnd = Math.floor(Math.random() * sumWeights);
              let cur = 0;
              for (const node of nodes) {
                if (rnd >= cur && rnd < cur + node.Weight) return node;
                cur += node.Weight;
              }
            } //////////////////////////////////
            buildUrls(network, edgeProtocol, suffix, single) {
              // default params
              if (!suffix) suffix = "";
              if (!edgeProtocol) edgeProtocol = "toncenter-api-v2";
              if (!network) network = "mainnet"; // remove leading slash
              if (suffix.length) suffix = suffix.replace(/^\/+/, "");
              const res = [];
              const protonet = this.makeProtonet(edgeProtocol, network);
              let healthyNodes = this.nodes.getHealthyFor(protonet);
              if (!(healthyNodes === null || healthyNodes === void 0 ? void 0 : healthyNodes.length)) throw new Error(`no healthy nodes for ${protonet}`); // if count < healthNodes length - weighted random
              if (single && healthyNodes.length) {
                const chosen = this.weightedRandom(healthyNodes);
                if (chosen) healthyNodes = [chosen];else throw new Error("weightedRandom return empty");
              }
              for (const node of healthyNodes) {
                let url = `https://${this.host}/${node.NodeId}/${this.urlVersion}/${network}/${edgeProtocol}`; // append /suffix only if needed
                if (suffix.length) url += `/${suffix}`;
                res.push(url);
              }
              return res;
            }
          }
          exports.Access = Access; //////////////////////////////
          // private get multi endpoints
          function getEndpoints(network, edgeProtocol, suffix, single) {
            return __awaiter(this, void 0, void 0, function* () {
              const access = new Access();
              yield access.init();
              const res = access.buildUrls(network, edgeProtocol, suffix, single);
              return res;
            });
          } /////////////////////////////////////
          // global exported explicit functions
          // toncenter multi
          function getHttpEndpoints(config, single) {
            return __awaiter(this, void 0, void 0, function* () {
              // default params
              const network = (config === null || config === void 0 ? void 0 : config.network) ? config.network : "mainnet";
              let suffix = "jsonRPC";
              if ((config === null || config === void 0 ? void 0 : config.protocol) === "rest") {
                suffix = "";
              }
              return yield getEndpoints(network, "toncenter-api-v2", suffix, single);
            });
          }
          exports.getHttpEndpoints = getHttpEndpoints; // toncenter single
          function getHttpEndpoint(config) {
            return __awaiter(this, void 0, void 0, function* () {
              // waited random a single endpoint
              const endpoints = yield getHttpEndpoints(config, true);
              return endpoints[0];
            });
          }
          exports.getHttpEndpoint = getHttpEndpoint; // // API V4 - multi
          function getHttpV4Endpoints(config, single) {
            return __awaiter(this, void 0, void 0, function* () {
              // default params
              const network = (config === null || config === void 0 ? void 0 : config.network) ? config.network : "mainnet";
              if ((config === null || config === void 0 ? void 0 : config.protocol) === "json-rpc") {
                throw Error("config.protocol json-rpc is not supported for getTonApiV4Endpoints");
              } // any other case suffix should be empty
              const suffix = ""; // this is like rest - default
              // other networks than mainnet are not supported
              return yield getEndpoints(network, "ton-api-v4", suffix, single);
            });
          }
          exports.getHttpV4Endpoints = getHttpV4Endpoints; // API V4 - single
          function getHttpV4Endpoint(config) {
            return __awaiter(this, void 0, void 0, function* () {
              const endpoints = yield getHttpV4Endpoints(config, true);
              return endpoints[0];
            });
          }
          exports.getHttpV4Endpoint = getHttpV4Endpoint; // // WS ADNL PROXY
          // export async function getAdnlProxyEndpoints(): Promise<string[]> {
          //   return [
          //     //"ws://ton-http-2:30001"
          //     "ws://18.221.31.187:30001",
          //     //"ws://3.140.253.61:30001",
          //   ];
          // }
          // export async function getAdnlProxyEndpoint(): Promise<string> {
          //   const endpoints = await getAdnlProxyEndpoints();
          //   const index = Math.floor(Math.random() * endpoints.length);
          //   return endpoints[index];
          // }
          // import { initLiteClient } from "./debug";
          // async function dbg() {
          //   // const eps = await getHttpEndpoint();
          //   // console.log(eps);
          //   const SUM = 100;
          //   const config: Config = {
          //     network: 'mainnet'
          //   }
          //   const counter: any = {};
          //   for (let i = 0; i < SUM; ++i) {
          //     const res = await getHttpEndpoint(config);
          //     if (!counter[res])
          //       counter[res] = 0;
          //     counter[res] += 1;
          //   }
          // }
          /***/
        },
        /***/1771: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }
              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Nodes = void 0;
          __webpack_require__(3493); ///////////////////////////////////
          class Nodes {
            ///////////////////////////////////
            constructor() {
              this.nodeIndex = -1;
              this.committee = new Set();
              this.topology = [];
              this.initTime = 0;
            } ///////////////////////////////////
            init(nodesUrl) {
              return __awaiter(this, void 0, void 0, function* () {
                // cleanup
                this.nodeIndex = -1;
                this.committee.clear();
                this.topology = [];
                this.initTime = Date.now();
                let topology = [];
                try {
                  const response = yield fetch(nodesUrl);
                  const data = yield response.json();
                  topology = data;
                } catch (e) {
                  throw new Error(`exception in fetch(${nodesUrl}): ${e}`);
                } // remove unhealthy nodes
                for (const node of topology) {
                  if (node.Healthy === "1") {
                    this.topology.push(node);
                  }
                }
                if (this.topology.length === 0) throw new Error(`no healthy nodes in ${nodesUrl}`);
              });
            }
            getHealthyFor(protonet) {
              var _a;
              const res = [];
              for (const node of this.topology) {
                // not stale (10 min)
                if (node.Weight > 0 && ((_a = node.Mngr) === null || _a === void 0 ? void 0 : _a.health[protonet])) {
                  res.push(node);
                }
              }
              return res;
            }
          }
          exports.Nodes = Nodes; /***/
        },
        /***/9274: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"];
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TonAPI = void 0;
          const core_1 = __webpack_require__(6900);
          const zod_1 = __importDefault(__webpack_require__(5995));
          const axios_1 = __importDefault(__webpack_require__(2964));
          const Address = zod_1.default.string().transform(v => core_1.Address.parseRaw(v));
          const HexBuffer = zod_1.default.string().transform(v => Buffer.from(v, 'hex'));
          const zBigint = zod_1.default.union([zod_1.default.number(), zod_1.default.string()]).transform(v => BigInt(v));
          const zStrnum = zod_1.default.union([zod_1.default.number(), zod_1.default.string()]).transform(v => Number(v));
          const ImagePreview = zod_1.default.object({
            resolution: zod_1.default.string(),
            url: zod_1.default.string()
          });
          const AccountAddress = zod_1.default.object({
            address: Address,
            name: zod_1.default.optional(zod_1.default.string()),
            is_scam: zod_1.default.boolean(),
            icon: zod_1.default.optional(zod_1.default.string()),
            is_wallet: zod_1.default.boolean()
          });
          const NftCollection = zod_1.default.object({
            address: Address,
            next_item_index: zBigint,
            owner: zod_1.default.optional(AccountAddress),
            metadata: zod_1.default.optional(zod_1.default.record(zod_1.default.any())),
            raw_collection_content: HexBuffer,
            previews: zod_1.default.optional(zod_1.default.array(ImagePreview)),
            approved_by: zod_1.default.array(zod_1.default.string())
          });
          const NftCollections = zod_1.default.object({
            nft_collections: zod_1.default.array(NftCollection)
          });
          const Price = zod_1.default.object({
            value: zBigint,
            token_name: zod_1.default.string()
          });
          const Sale = zod_1.default.object({
            address: Address,
            market: AccountAddress,
            owner: zod_1.default.optional(AccountAddress),
            price: Price
          });
          const NftItem = zod_1.default.object({
            address: Address,
            index: zBigint,
            owner: zod_1.default.optional(AccountAddress),
            collection: zod_1.default.optional(zod_1.default.object({
              address: Address,
              name: zod_1.default.string(),
              description: zod_1.default.string()
            })),
            verified: zod_1.default.boolean(),
            metadata: zod_1.default.record(zod_1.default.any()),
            sale: zod_1.default.optional(Sale),
            previews: zod_1.default.optional(zod_1.default.array(ImagePreview)),
            dns: zod_1.default.optional(zod_1.default.string()),
            approved_by: zod_1.default.array(zod_1.default.string())
          });
          const NftItems = zod_1.default.object({
            nft_items: zod_1.default.array(NftItem)
          });
          const JettonVerificationType = zod_1.default.union([zod_1.default.literal('whitelist'), zod_1.default.literal('blacklist'), zod_1.default.literal('none')]);
          const JettonMetadata = zod_1.default.object({
            address: Address,
            name: zod_1.default.string(),
            symbol: zod_1.default.string(),
            decimals: zStrnum,
            image: zod_1.default.optional(zod_1.default.string()),
            description: zod_1.default.optional(zod_1.default.string()),
            social: zod_1.default.optional(zod_1.default.array(zod_1.default.string())),
            websites: zod_1.default.optional(zod_1.default.array(zod_1.default.string())),
            catalogs: zod_1.default.optional(zod_1.default.array(zod_1.default.string()))
          });
          const JettonInfo = zod_1.default.object({
            mintable: zod_1.default.boolean(),
            total_supply: zBigint,
            metadata: JettonMetadata,
            verification: JettonVerificationType,
            holders_count: zod_1.default.number()
          });
          const Jettons = zod_1.default.object({
            jettons: zod_1.default.array(JettonInfo)
          });
          const JettonHolder = zod_1.default.object({
            address: Address,
            owner: AccountAddress,
            balance: zBigint
          });
          const JettonHolders = zod_1.default.object({
            addresses: zod_1.default.array(JettonHolder)
          });
          const EncryptedComment = zod_1.default.object({
            encryption_type: zod_1.default.string(),
            cipher_text: HexBuffer
          });
          const Refund = zod_1.default.object({
            type: zod_1.default.string(),
            origin: Address
          });
          const NftItemTransferAction = zod_1.default.object({
            sender: zod_1.default.optional(AccountAddress),
            recipient: zod_1.default.optional(AccountAddress),
            nft: Address,
            comment: zod_1.default.optional(zod_1.default.string()),
            encrypted_comment: zod_1.default.optional(EncryptedComment),
            payload: zod_1.default.optional(HexBuffer),
            refund: zod_1.default.optional(Refund)
          });
          const ActionStatus = zod_1.default.union([zod_1.default.literal('ok'), zod_1.default.literal('failed')]);
          const ActionSpecificNftItemTransfer = zod_1.default.object({
            type: zod_1.default.literal('NftItemTransfer'),
            status: ActionStatus,
            NftItemTransfer: NftItemTransferAction
          }).transform(v => ({
            status: v.status,
            ...v.NftItemTransfer
          }));
          const AccountEventGeneric = t => zod_1.default.object({
            event_id: zod_1.default.string(),
            account: AccountAddress,
            timestamp: zod_1.default.number(),
            actions: zod_1.default.array(t),
            is_scam: zod_1.default.boolean(),
            lt: zBigint,
            in_progress: zod_1.default.boolean()
          });
          const AccountEventNftItemTransfer = AccountEventGeneric(ActionSpecificNftItemTransfer);
          const AccountEventsGeneric = t => zod_1.default.object({
            events: zod_1.default.array(t),
            next_from: zBigint
          });
          const AccountEventsNftItemTransfer = AccountEventsGeneric(AccountEventNftItemTransfer);
          const TokenRates = zod_1.default.object({
            prices: zod_1.default.optional(zod_1.default.record(zod_1.default.number())),
            diff_24h: zod_1.default.optional(zod_1.default.record(zod_1.default.string())),
            diff_7d: zod_1.default.optional(zod_1.default.record(zod_1.default.string())),
            diff_30d: zod_1.default.optional(zod_1.default.record(zod_1.default.string()))
          });
          const JettonPreview = zod_1.default.object({
            address: Address,
            name: zod_1.default.string(),
            symbol: zod_1.default.string(),
            decimals: zStrnum,
            image: zod_1.default.string(),
            verification: JettonVerificationType
          });
          const JettonBalance = zod_1.default.object({
            balance: zBigint,
            price: zod_1.default.optional(TokenRates),
            wallet_address: AccountAddress,
            jetton: JettonPreview
          });
          const JettonBalances = zod_1.default.object({
            balances: zod_1.default.array(JettonBalance)
          });
          const rawAddress = address => {
            return typeof address === 'string' ? address : address.toRawString();
          };
          class TonAPI {
            constructor(params) {
              this.instance = axios_1.default.create({
                baseURL: params?.baseURL ?? 'https://tonapi.io',
                headers: params?.token === undefined ? {} : {
                  'Authorization': 'Bearer ' + params.token
                }
              });
            }
            async getNftCollections(params) {
              return NftCollections.parse((await this.instance.get('/v2/nfts/collections', {
                params
              })).data).nft_collections;
            }
            async getNftCollection(collection) {
              return NftCollection.parse((await this.instance.get(`/v2/nfts/collections/${rawAddress(collection)}`)).data);
            }
            async getNftCollectionItems(collection, params) {
              return NftItems.parse((await this.instance.get(`/v2/nfts/collections/${rawAddress(collection)}/items`, {
                params
              })).data).nft_items;
            }
            async getNftItems(items) {
              return NftItems.parse((await this.instance.post(`/v2/nfts/_bulk`, {
                account_ids: items.map(rawAddress)
              })).data).nft_items;
            }
            async getNftItem(item) {
              return NftItem.parse((await this.instance.get(`/v2/nfts/${rawAddress(item)}`)).data);
            }
            async getJettons(params) {
              return Jettons.parse((await this.instance.get('/v2/jettons', {
                params
              })).data).jettons;
            }
            async getJetton(jettonMaster) {
              return JettonInfo.parse((await this.instance.get(`/v2/jettons/${rawAddress(jettonMaster)}`)).data);
            }
            async getJettonHolders(jettonMaster, params) {
              return JettonHolders.parse((await this.instance.get(`/v2/jettons/${rawAddress(jettonMaster)}/holders`, {
                params
              })).data).addresses;
            }
            async getNftItemTransferHistory(item, params) {
              return AccountEventsNftItemTransfer.parse((await this.instance.get(`/v2/nfts/${rawAddress(item)}/history`, {
                params: {
                  limit: 100,
                  ...params
                }
              })).data);
            }
            async getAccountNfts(account, params) {
              return NftItems.parse((await this.instance.get(`/v2/accounts/${rawAddress(account)}/nfts`, {
                params: {
                  ...params,
                  collection: params?.collection === undefined ? undefined : rawAddress(params.collection)
                }
              })).data).nft_items;
            }
            async getAccountJettons(account, params) {
              return JettonBalances.parse((await this.instance.get(`/v2/accounts/${rawAddress(account)}/jettons`, {
                params: {
                  currencies: params?.currencies === undefined ? undefined : params.currencies.join(',')
                }
              })).data).balances;
            }
          }
          exports.TonAPI = TonAPI; /***/
        },
        /***/6814: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ExtendedTonClient4 = void 0;
          const ton_1 = __webpack_require__(6330); /**
                                                   * Extended contract provider
                                                   * @deprecated use `TonClient4` instead, will be removed when @ton/ton will be updated
                                                   */
          class ExtendedTonClient4 extends ton_1.TonClient4 {
            openExtended(contract) {
              return (0, ton_1.openContract)(contract, args => this.provider(args.address, args.init));
            }
            provider(address, init) {
              return {
                ...super.provider(address, init),
                reopen: contract => {
                  return this.openExtended(contract);
                }
              };
            }
          }
          exports.ExtendedTonClient4 = ExtendedTonClient4; /***/
        },
        /***/4913: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.createApi = void 0;
          const ton_access_1 = __webpack_require__(9726);
          const ExtendedTonClient4_1 = __webpack_require__(6814);
          async function createApi(network) {
            const endpoint = await (0, ton_access_1.getHttpV4Endpoint)({
              network: network
            });
            return new ExtendedTonClient4_1.ExtendedTonClient4({
              endpoint: endpoint,
              timeout: 15000
            });
          }
          exports.createApi = createApi; /***/
        },
        /***/9544: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"];
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.bufferToStr = exports.decodeImage = exports.decodeSimpleFields = exports.loadFullContent = exports.DefaultContentResolver = void 0;
          const core_1 = __webpack_require__(6900);
          const crypto_1 = __webpack_require__(3022);
          class DefaultContentResolver {
            constructor(ipfsGateway) {
              this.ipfsGateway = ipfsGateway ?? (id => `https://ipfs.io/ipfs/${id}`);
            }
            async resolve(url) {
              if (url.startsWith('ipfs://')) {
                url = this.ipfsGateway(url.slice(7));
              }
              if (!(url.startsWith('https://') || url.startsWith('http://'))) {
                throw new Error('Unknown URL: ' + url);
              }
              return Buffer.from(await (await fetch(url)).arrayBuffer());
            }
          }
          exports.DefaultContentResolver = DefaultContentResolver;
          function loadSnake(s) {
            const b = [];
            while (s.remainingBits > 0 || s.remainingRefs > 0) {
              if (s.remainingBits % 8 !== 0) {
                throw new Error('Slice must contain an integer number of bytes');
              }
              b.push(s.loadBuffer(s.remainingBits / 8));
              if (s.remainingRefs === 1) {
                s = s.loadRef().beginParse();
              } else if (s.remainingRefs > 1) {
                throw new Error('Slice must contain at most 1 ref');
              }
            }
            return Buffer.concat(b);
          }
          const BufferValue = {
            serialize: () => {
              throw new Error('Buffer serialization is not supported');
            },
            parse: src => {
              const r = src.loadRef().beginParse();
              if (r.remainingBits % 8 !== 0) {
                throw new Error('Slice must contain an integer number of bytes');
              }
              if (r.remainingRefs !== 0) {
                throw new Error('Slice must not contain refs');
              }
              return r.loadBuffer(r.remainingBits / 8);
            }
          };
          function loadChunked(s) {
            const d = s.loadDict(core_1.Dictionary.Keys.Uint(32), BufferValue);
            const b = [];
            for (let i = 0; i < d.size; i++) {
              const cb = d.get(i);
              if (cb === undefined) {
                throw new Error('Dict must contain sequential keys');
              }
              b.push(cb);
            }
            return Buffer.concat(b);
          }
          const ContentDataValue = {
            serialize: () => {
              throw new Error('ContentData serialization is not supported');
            },
            parse: src => {
              const r = src.loadRef().beginParse();
              const type = r.loadUint(8);
              if (type === 0x00) {
                return loadSnake(r);
              } else if (type === 0x01) {
                return loadChunked(r);
              } else {
                throw new Error('Unknown ContentData type: ' + type);
              }
            }
          };
          function bufferToObj(b) {
            const parsed = JSON.parse(b.toString('utf-8'));
            if (typeof parsed !== 'object') {
              throw new Error('Data must be an object');
            }
            return parsed;
          }
          function hashKey(key) {
            return BigInt('0x' + (0, crypto_1.sha256_sync)(key).toString('hex'));
          }
          async function loadFullContent(data, contentResolver) {
            const ds = data.beginParse();
            const type = ds.loadUint(8);
            if (type === 0x00) {
              const data = ds.loadDict(core_1.Dictionary.Keys.BigUint(256), ContentDataValue);
              const uri = data.get(hashKey('uri'));
              if (uri !== undefined) {
                const uriStr = uri.toString('utf-8');
                const offchain = await contentResolver.resolve(uriStr);
                return {
                  type: 'semichain',
                  offchainFields: bufferToObj(offchain),
                  onchainFields: data,
                  offchainUrl: uriStr
                };
              }
              return {
                type: 'onchain',
                onchainFields: data
              };
            } else if (type === 0x01) {
              const uri = ds.loadStringTail();
              const data = await contentResolver.resolve(uri);
              return {
                type: 'offchain',
                offchainFields: bufferToObj(data),
                offchainUrl: uri
              };
            } else {
              throw new Error('Unknown FullContent type: ' + type);
            }
          }
          exports.loadFullContent = loadFullContent;
          function decodeSimpleFields(dc, parsers) {
            const out = {};
            for (const k in parsers) {
              if (dc.onchainFields !== undefined) {
                const h = hashKey(k);
                const v = dc.onchainFields.get(h);
                if (v !== undefined) {
                  out[k] = parsers[k].onchain(v);
                  dc.onchainFields.delete(h);
                  continue;
                }
              }
              if (dc.offchainFields !== undefined) {
                if (k in dc.offchainFields) {
                  out[k] = parsers[k].offchain(dc.offchainFields[k]);
                  delete dc.offchainFields[k];
                }
              }
            }
            return out;
          }
          exports.decodeSimpleFields = decodeSimpleFields;
          function decodeImage(dc) {
            if (dc.onchainFields !== undefined && dc.onchainFields.has(hashKey('image')) && dc.onchainFields.has(hashKey('image_data'))) {
              throw new Error('Onchain fields contain both image and image_data');
            }
            if (dc.offchainFields !== undefined && 'image' in dc.offchainFields && 'image_data' in dc.offchainFields) {
              throw new Error('Offchain fields contain both image and image_data');
            }
            if (dc.onchainFields !== undefined) {
              const image = dc.onchainFields.get(hashKey('image'));
              if (image !== undefined) {
                dc.onchainFields.delete(hashKey('image'));
                return image.toString('utf-8');
              }
              const imageData = dc.onchainFields.get(hashKey('image_data'));
              if (imageData !== undefined) {
                dc.onchainFields.delete(hashKey('image_data'));
                return imageData;
              }
            }
            if (dc.offchainFields !== undefined) {
              if ('image' in dc.offchainFields) {
                const image = dc.offchainFields.image;
                if (typeof image !== 'string') {
                  throw new Error('Image URI must be a string');
                }
                delete dc.offchainFields.image;
                return image;
              }
              if ('image_data' in dc.offchainFields) {
                const imageData = dc.offchainFields.image_data;
                if (typeof imageData !== 'string') {
                  throw new Error('Offchain image data must be a string');
                }
                delete dc.offchainFields.image_data;
                return Buffer.from(imageData, 'base64');
              }
            }
            return undefined;
          }
          exports.decodeImage = decodeImage;
          const bufferToStr = b => b.toString('utf-8');
          exports.bufferToStr = bufferToStr; /***/
        },
        /***/4371: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.NoSenderError = void 0;
          class NoSenderError extends Error {
            constructor() {
              super('Sender is not set');
            }
          }
          exports.NoSenderError = NoSenderError; /***/
        },
        /***/4977: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          exports.Ec = exports.sJ = void 0;
          var sdk_1 = __webpack_require__(9117);
          Object.defineProperty(exports, "sJ", {
            enumerable: true,
            get: function () {
              return sdk_1.AssetsSDK;
            }
          });
          var pinata_1 = __webpack_require__(2714);
          var s3_1 = __webpack_require__(7161);
          var noop_1 = __webpack_require__(4023);
          var ExtendedTonClient4_1 = __webpack_require__(6814);
          Object.defineProperty(exports, "Ec", {
            enumerable: true,
            get: function () {
              return ExtendedTonClient4_1.ExtendedTonClient4;
            }
          });
          var key_1 = __webpack_require__(4434);
          var wallets_1 = __webpack_require__(9550);
          var HighloadWalletContractV2_1 = __webpack_require__(9661);
          var NftCollection_1 = __webpack_require__(9130);
          var SbtCollection_1 = __webpack_require__(6121);
          var NftItem_1 = __webpack_require__(1697);
          var NftSale_1 = __webpack_require__(7121);
          var JettonMinter_1 = __webpack_require__(4595);
          var JettonWallet_1 = __webpack_require__(4405);
          var error_1 = __webpack_require__(4371);
          var TonAPI_1 = __webpack_require__(9274); /***/
        },
        /***/4595: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.JettonMinter = exports.storeJettonChangeContentMessage = exports.loadJettonChangeAdminMessage = exports.storeJettonChangeAdminMessage = exports.loadJettonMinterContent = exports.storeJettonMinterContent = exports.loadJettonInternalTransferMessage = exports.storeJettonInternalTransferMessage = exports.loadJettonMintMessage = exports.storeJettonMintMessage = void 0;
          const core_1 = __webpack_require__(6900);
          const JettonWallet_1 = __webpack_require__(4405);
          const error_1 = __webpack_require__(4371);
          const content_1 = __webpack_require__(9544);
          const content_2 = __webpack_require__(2863);
          const jetton_minter_1 = __webpack_require__(7037);
          function storeJettonMintMessage(src) {
            return builder => {
              const mintOpcode = 21;
              const queryId = src.queryId ?? 0;
              const walletForwardValue = src.walletForwardValue ?? (0, core_1.toNano)('0.02');
              builder.storeUint(mintOpcode, 32);
              builder.storeUint(queryId, 64);
              builder.storeAddress(src.to);
              builder.storeCoins(walletForwardValue);
              builder.storeRef((0, core_1.beginCell)().store(storeJettonInternalTransferMessage(src)).endCell());
            };
          }
          exports.storeJettonMintMessage = storeJettonMintMessage;
          function loadJettonMintMessage(slice) {
            const mintOpcode = 21;
            if (slice.loadUint(32) !== mintOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const to = slice.loadAddress();
            const walletForwardValue = slice.loadCoins();
            const internalTransfer = loadJettonInternalTransferMessage(slice.loadRef().beginParse());
            return {
              queryId,
              amount: internalTransfer.amount,
              from: internalTransfer.from,
              to,
              responseAddress: internalTransfer.responseAddress,
              forwardTonAmount: internalTransfer.forwardTonAmount,
              forwardPayload: internalTransfer.forwardPayload,
              walletForwardValue
            };
          }
          exports.loadJettonMintMessage = loadJettonMintMessage;
          function storeJettonInternalTransferMessage(src) {
            return builder => {
              const internalTransferOpcode = 0x178d4519;
              const queryId = src.queryId ?? 0;
              const forwardTonAmount = src.forwardTonAmount ?? 0;
              const forwardPayload = src.forwardPayload ?? null;
              builder.storeUint(internalTransferOpcode, 32);
              builder.storeUint(queryId, 64);
              builder.storeCoins(src.amount);
              builder.storeAddress(src.from);
              builder.storeAddress(src.responseAddress);
              builder.storeCoins(forwardTonAmount);
              builder.storeMaybeRef(forwardPayload);
            };
          }
          exports.storeJettonInternalTransferMessage = storeJettonInternalTransferMessage;
          function loadJettonInternalTransferMessage(slice) {
            const internalTransferOpcode = 0x178d4519;
            if (slice.loadUint(32) !== internalTransferOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const amount = slice.loadCoins();
            const from = slice.loadAddress();
            const responseAddress = slice.loadAddress();
            const forwardTonAmount = slice.loadCoins();
            const forwardPayload = slice.loadMaybeRef();
            return {
              queryId,
              amount,
              from,
              responseAddress,
              forwardTonAmount,
              forwardPayload
            };
          }
          exports.loadJettonInternalTransferMessage = loadJettonInternalTransferMessage;
          function storeJettonMinterContent(src) {
            return builder => {
              builder.storeCoins(0);
              builder.storeAddress(src.admin);
              builder.storeRef(src.content);
              builder.storeRef(src.jettonWalletCode);
            };
          }
          exports.storeJettonMinterContent = storeJettonMinterContent;
          function loadJettonMinterContent(slice) {
            const totalSupply = slice.loadCoins();
            const adminAddress = slice.loadAddress();
            const jettonContent = slice.loadRef();
            const jettonWalletCode = slice.loadRef();
            return {
              admin: adminAddress,
              content: jettonContent,
              jettonWalletCode
            };
          }
          exports.loadJettonMinterContent = loadJettonMinterContent;
          function storeJettonChangeAdminMessage(src) {
            return builder => {
              const changeAdminOpcode = 3;
              const queryId = src.queryId ?? 0;
              builder.storeUint(changeAdminOpcode, 32);
              builder.storeUint(queryId, 64);
              builder.storeAddress(src.newAdmin);
            };
          }
          exports.storeJettonChangeAdminMessage = storeJettonChangeAdminMessage;
          function loadJettonChangeAdminMessage(slice) {
            const changeAdminOpcode = 3;
            if (slice.loadUint(32) !== changeAdminOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const newAdmin = slice.loadAddress();
            return {
              queryId,
              newAdmin
            };
          }
          exports.loadJettonChangeAdminMessage = loadJettonChangeAdminMessage;
          function storeJettonChangeContentMessage(src) {
            return builder => {
              const changeContentOpcode = 4;
              const queryId = src.queryId ?? 0;
              builder.storeUint(changeContentOpcode, 32);
              builder.storeUint(queryId, 64);
              builder.storeRef(src.newContent);
            };
          }
          exports.storeJettonChangeContentMessage = storeJettonChangeContentMessage;
          class JettonMinter {
            constructor(address, sender, init, contentResolver) {
              this.address = address;
              this.sender = sender;
              this.init = init;
              this.contentResolver = contentResolver;
            }
            static create(params, sender, contentResolver) {
              const jettonWalletCode = params.jettonWalletCode ?? JettonWallet_1.JettonWallet.code;
              const data = (0, core_1.beginCell)().store(storeJettonMinterContent({
                admin: params.admin,
                content: params.content,
                jettonWalletCode
              })).endCell();
              const init = {
                data,
                code: JettonMinter.code
              };
              return new JettonMinter((0, core_1.contractAddress)(0, init), sender, init, contentResolver);
            }
            static open(address, sender, contentResolver) {
              return new JettonMinter(address, sender, undefined, contentResolver);
            }
            async sendDeploy(provider, args) {
              if (!this.sender) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true
              });
            }
            async sendMint(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                body: (0, core_1.beginCell)().store(storeJettonMintMessage(message)).endCell()
              });
            }
            async sendChangeAdmin(provider, message, args) {
              if (!this.sender) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                body: (0, core_1.beginCell)().store(storeJettonChangeAdminMessage(message)).endCell()
              });
            }
            async sendChangeContent(provider, message, args) {
              if (!this.sender) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                body: (0, core_1.beginCell)().store(storeJettonChangeContentMessage(message)).endCell()
              });
            }
            async getData(provider) {
              const builder = new core_1.TupleBuilder();
              const {
                stack
              } = await provider.get('get_jetton_data', builder.build());
              return {
                totalSupply: stack.readBigNumber(),
                mintable: stack.readBigNumber() !== 0n,
                adminAddress: stack.readAddressOpt(),
                jettonContent: stack.readCell(),
                jettonWalletCode: stack.readCell()
              };
            }
            async getWalletAddress(provider, owner) {
              const builder = new core_1.TupleBuilder();
              builder.writeAddress(owner);
              const {
                stack
              } = await provider.get('get_wallet_address', builder.build());
              return stack.readAddress();
            }
            async getWallet(provider, owner) {
              const jettonWalletAddress = await this.getWalletAddress(provider, owner);
              return provider.reopen(new JettonWallet_1.JettonWallet(jettonWalletAddress, this.sender));
            }
            async getContent(provider) {
              if (!this.contentResolver) {
                throw new Error('No content resolver');
              }
              const data = await this.getData(provider);
              return (0, content_2.parseJettonContent)(await (0, content_1.loadFullContent)(data.jettonContent, this.contentResolver));
            }
          }
          exports.JettonMinter = JettonMinter;
          JettonMinter.code = core_1.Cell.fromBase64(jetton_minter_1.jettonMinterCode.codeBoc); /***/
        },
        /***/4405: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.JettonWallet = exports.loadJettonBurnMessage = exports.storeJettonBurnMessage = exports.loadJettonTransferMessage = exports.storeJettonTransferMessage = void 0;
          const core_1 = __webpack_require__(6900);
          const error_1 = __webpack_require__(4371);
          const jetton_wallet_1 = __webpack_require__(6355);
          function storeJettonTransferMessage(src) {
            return builder => {
              const transferOpcode = 0x0f8a7ea5;
              const queryId = src.queryId ?? 0;
              builder.storeUint(transferOpcode, 32);
              builder.storeUint(queryId, 64);
              builder.storeCoins(src.amount);
              builder.storeAddress(src.to);
              builder.storeAddress(src.responseDestination);
              builder.storeMaybeRef(src.customPayload);
              builder.storeCoins(src.forwardAmount ?? 0);
              builder.storeMaybeRef(src.forwardPayload);
            };
          }
          exports.storeJettonTransferMessage = storeJettonTransferMessage;
          function loadJettonTransferMessage(slice) {
            const transferOpcode = 0x0f8a7ea5;
            if (slice.loadUint(32) !== transferOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const amount = slice.loadCoins();
            const to = slice.loadAddress();
            const responseDestination = slice.loadMaybeAddress();
            const customPayload = slice.loadMaybeRef();
            const forwardAmount = slice.loadCoins();
            const forwardPayloadIsRight = slice.loadBoolean();
            const forwardPayload = forwardPayloadIsRight ? slice.loadRef() : slice.asCell();
            return {
              queryId,
              amount,
              to,
              responseDestination,
              customPayload,
              forwardAmount,
              forwardPayload
            };
          }
          exports.loadJettonTransferMessage = loadJettonTransferMessage;
          function storeJettonBurnMessage(src) {
            return builder => {
              const burnOpcode = 0x595f07bc;
              const queryId = src.queryId ?? 0;
              builder.storeUint(burnOpcode, 32);
              builder.storeUint(queryId, 64);
              builder.storeCoins(src.amount);
              builder.storeAddress(src.responseDestination);
              builder.storeMaybeRef(src.customPayload);
            };
          }
          exports.storeJettonBurnMessage = storeJettonBurnMessage;
          function loadJettonBurnMessage(slice) {
            const burnOpcode = 0x595f07bc;
            if (slice.loadUint(32) !== burnOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const amount = slice.loadCoins();
            const responseDestination = slice.loadMaybeAddress();
            const customPayload = slice.loadMaybeRef();
            return {
              queryId,
              amount,
              responseDestination,
              customPayload
            };
          }
          exports.loadJettonBurnMessage = loadJettonBurnMessage;
          class JettonWallet {
            constructor(address, sender) {
              this.address = address;
              this.sender = sender;
            }
            async sendTransfer(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: (0, core_1.beginCell)().store(storeJettonTransferMessage({
                  queryId: message.queryId,
                  amount: message.amount,
                  to: message.to,
                  responseDestination: message.responseDestination ?? this.sender.address,
                  customPayload: message.customPayload,
                  forwardAmount: message.forwardAmount,
                  forwardPayload: message.forwardPayload
                })).endCell()
              });
            }
            async sendBurn(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.02'),
                bounce: args?.bounce ?? true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: (0, core_1.beginCell)().store(storeJettonBurnMessage({
                  queryId: message.queryId,
                  amount: message.amount,
                  responseDestination: message.responseDestination ?? this.sender.address,
                  customPayload: message.customPayload
                })).endCell()
              });
            }
            async getData(provider) {
              const {
                stack
              } = await provider.get('get_wallet_data', []);
              return {
                balance: stack.readBigNumber(),
                owner: stack.readAddress(),
                jetton: stack.readAddress(),
                code: stack.readCell()
              };
            }
          }
          exports.JettonWallet = JettonWallet;
          JettonWallet.code = core_1.Cell.fromBase64(jetton_wallet_1.jettonWalletCode.codeBoc); /***/
        },
        /***/2863: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.parseJettonContent = exports.jettonContentToInternal = void 0;
          const core_1 = __webpack_require__(6900);
          const zod_1 = __importDefault(__webpack_require__(5995));
          const content_1 = __webpack_require__(9544);
          function jettonContentToInternal(content) {
            return {
              uri: content.uri,
              name: content.name,
              description: content.description,
              image: content.image,
              image_data: content.imageData?.toString('base64'),
              symbol: content.symbol,
              decimals: content.decimals?.toString(),
              amount_style: content.amountStyle,
              render_type: content.renderType
            };
          }
          exports.jettonContentToInternal = jettonContentToInternal;
          function parseJettonContent(dc) {
            const decoded = (0, content_1.decodeSimpleFields)(dc, {
              name: {
                onchain: content_1.bufferToStr,
                offchain: v => zod_1.default.string().parse(v)
              },
              description: {
                onchain: content_1.bufferToStr,
                offchain: v => zod_1.default.string().parse(v)
              },
              symbol: {
                onchain: content_1.bufferToStr,
                offchain: v => zod_1.default.string().parse(v)
              },
              decimals: {
                onchain: v => parseInt((0, content_1.bufferToStr)(v)),
                offchain: v => zod_1.default.union([zod_1.default.string(), zod_1.default.number()]).transform(v => Number(v)).parse(v)
              },
              amount_style: {
                onchain: v => {
                  const s = (0, content_1.bufferToStr)(v);
                  if (!['n', 'n-of-total', '%'].includes(s)) {
                    throw new Error('Unknown amount_style: ' + s);
                  }
                  return s;
                },
                offchain: v => zod_1.default.union([zod_1.default.literal('n'), zod_1.default.literal('n-of-total'), zod_1.default.literal('%')]).parse(v)
              },
              render_type: {
                onchain: v => {
                  const s = (0, content_1.bufferToStr)(v);
                  if (!['currency', 'game'].includes(s)) {
                    throw new Error('Unknown render_type: ' + s);
                  }
                  return s;
                },
                offchain: v => zod_1.default.union([zod_1.default.literal('currency'), zod_1.default.literal('game')]).parse(v)
              }
            });
            decoded.image = (0, content_1.decodeImage)(dc);
            const out = {
              ...decoded,
              type: dc.type,
              unknownOffchainFields: dc.offchainFields ?? {},
              unknownOnchainFields: dc.onchainFields ?? core_1.Dictionary.empty(),
              offchainUrl: dc.offchainUrl
            };
            return out;
          }
          exports.parseJettonContent = parseJettonContent; /***/
        },
        /***/7037: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.jettonMinterCode = void 0;
          exports.jettonMinterCode = {
            codeBoc: 'te6ccgECDgEAAqMAART/APSkE/S88sgLAQIBYgIDAgLMBAUCA3pgDA0B9dkGOASS+B8ADoaYGAuNhJL4HwfSB9IBj9ABi465D9ABj9ABg51NoAAWmP6Z/2omh9AH0gamoYQAqpOF1HGZqamxsommOC+XAkgX0gfQBqGBBoQDBrkP0AGBKIGigheASKUCgZ5CgCfQEsZ4tmZmT2qnBBCD3uy+8pOF1AYAk7PwUIgG4KhAJqgoB5CgCfQEsZ4sA54tmZJFkZYCJegB6AGWAZJB8gDg6ZGWBZQPl/+ToO8AMZGWCrGeLKAJ9AQnltYlmZmS4/YBBPSO4DY3NwH6APpA+ChUEgZwVCATVBQDyFAE+gJYzxYBzxbMySLIywES9AD0AMsAyfkAcHTIywLKB8v/ydBQBscF8uBKoQNFRchQBPoCWM8WzMzJ7VQB+kAwINcLAcMAkVvjDeCCECx2uXNScLrjAjU3NyPAA+MCNQLABAcICQoAPoIQ1TJ223CAEMjLBVADzxYi+gISy2rLH8s/yYBC+wAB/jZfA4IImJaAFaAVvPLgSwL6QNMAMJXIIc8WyZFt4oIQ0XNUAHCAGMjLBVAFzxYk+gIUy2oTyx8Uyz8j+kQwcLqOM/goRANwVCATVBQDyFAE+gJYzxYBzxbMySLIywES9AD0AMsAyfkAcHTIywLKB8v/ydDPFpZsInABywHi9AALADQzUDXHBfLgSQP6QDBZyFAE+gJYzxbMzMntVABCjhhRJMcF8uBJ1DBDAMhQBPoCWM8WzMzJ7VTgXwWED/LwAArJgED7AAB9rbz2omh9AH0gamoYNhj8FAC4KhAJqgoB5CgCfQEsZ4sA54tmZJFkZYCJegB6AGWAZPyAODpkZYFlA+X/5OhAAB+vFvaiaH0AfSBqahg/qpBA'
          }; /***/
        },
        /***/6355: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.jettonWalletCode = void 0;
          exports.jettonWalletCode = {
            codeBoc: 'te6ccgECEgEAAzQAART/APSkE/S88sgLAQIBYgIDAgLMBAUAG6D2BdqJofQB9IH0gahhAgHUBgcCAUgICQDDCDHAJJfBOAB0NMDAXGwlRNfA/AL4PpA+kAx+gAxcdch+gAx+gAwc6m0AALTH4IQD4p+pVIgupUxNFnwCOCCEBeNRRlSILqWMUREA/AJ4DWCEFlfB7y6k1nwCuBfBIQP8vCAAET6RDBwuvLhTYAIBIAoLAgEgEBEB8QD0z/6APpAIfAB7UTQ+gD6QPpA1DBRNqFSKscF8uLBKML/8uLCVDRCcFQgE1QUA8hQBPoCWM8WAc8WzMkiyMsBEvQA9ADLAMkg+QBwdMjLAsoHy//J0AT6QPQEMfoAINdJwgDy4sR3gBjIywVQCM8WcPoCF8trE8yAMA/c7UTQ+gD6QPpA1DAI0z/6AFFRoAX6QPpAU1vHBVRzbXBUIBNUFAPIUAT6AljPFgHPFszJIsjLARL0APQAywDJ+QBwdMjLAsoHy//J0FANxwUcsfLiwwr6AFGooYIImJaAggiYloAStgihggjk4cCgGKEn4w8l1wsBwwAjgDQ4PAK6CEBeNRRnIyx8Zyz9QB/oCIs8WUAbPFiX6AlADzxbJUAXMI5FykXHiUAioE6CCCOThwKoAggiYloCgoBS88uLFBMmAQPsAECPIUAT6AljPFgHPFszJ7VQAcFJ5oBihghBzYtCcyMsfUjDLP1j6AlAHzxZQB88WyXGAEMjLBSTPFlAG+gIVy2oUzMlx+wAQJBAjAA4QSRA4N18EAHbCALCOIYIQ1TJ223CAEMjLBVAIzxZQBPoCFstqEssfEss/yXL7AJM1bCHiA8hQBPoCWM8WAc8WzMntVADbO1E0PoA+kD6QNQwB9M/+gD6QDBRUaFSSccF8uLBJ8L/8uLCggjk4cCqABagFrzy4sOCEHvdl97Iyx8Vyz9QA/oCIs8WAc8WyXGAGMjLBSTPFnD6AstqzMmAQPsAQBPIUAT6AljPFgHPFszJ7VSAAgyAINch7UTQ+gD6QPpA1DAE0x+CEBeNRRlSILqCEHvdl94TuhKx8uLF0z8x+gAwE6BQI8hQBPoCWM8WAc8WzMntVIA=='
          }; /***/
        },
        /***/4434: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.importKey = void 0;
          const crypto_1 = __webpack_require__(3022);
          async function importKey(key) {
            if (typeof key === 'string') {
              return await (0, crypto_1.mnemonicToWalletKey)(key.split(' '));
            } else if (Array.isArray(key)) {
              return await (0, crypto_1.mnemonicToWalletKey)(key);
            } else {
              return (0, crypto_1.keyPairFromSecretKey)(key);
            }
          }
          exports.importKey = importKey; /***/
        },
        /***/9130: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.NftCollection = exports.loadNftItemCellParams = exports.storeNftItemCellParams = exports.loadNftItemStringParams = exports.storeNftItemStringParams = exports.loadNftCollectionData = exports.storeNftCollectionData = exports.loadNftRoyaltyParams = exports.storeNftRoyaltyParams = void 0;
          const core_1 = __webpack_require__(6900);
          const NftCollectionBase_1 = __webpack_require__(5291);
          const NftItem_1 = __webpack_require__(1697);
          function storeNftRoyaltyParams(src) {
            return builder => {
              builder.storeUint(src.numerator, 16);
              builder.storeUint(src.denominator, 16);
              builder.storeAddress(src.recipient);
            };
          }
          exports.storeNftRoyaltyParams = storeNftRoyaltyParams;
          function loadNftRoyaltyParams(slice) {
            return {
              numerator: slice.loadUintBig(16),
              denominator: slice.loadUintBig(16),
              recipient: slice.loadAddress()
            };
          }
          exports.loadNftRoyaltyParams = loadNftRoyaltyParams;
          function storeNftCollectionData(src) {
            return builder => {
              builder.storeAddress(src.admin);
              builder.storeUint(0, 64);
              builder.storeRef(src.content);
              builder.storeRef(src.itemCode);
              builder.storeRef((0, core_1.beginCell)().store(storeNftRoyaltyParams(src.royalty)).endCell());
            };
          }
          exports.storeNftCollectionData = storeNftCollectionData;
          function loadNftCollectionData(slice) {
            return {
              admin: slice.loadAddress(),
              content: slice.loadRef(),
              itemCode: slice.loadRef(),
              royalty: loadNftRoyaltyParams(slice)
            };
          }
          exports.loadNftCollectionData = loadNftCollectionData;
          function storeNftItemStringParams(src) {
            return builder => {
              builder.storeAddress(src.owner);
              builder.storeRef((0, core_1.beginCell)().storeStringTail(src.individualContent).endCell());
            };
          }
          exports.storeNftItemStringParams = storeNftItemStringParams;
          function loadNftItemStringParams(slice) {
            const owner = slice.loadAddress();
            const content = slice.loadRef().beginParse().loadStringRefTail();
            return {
              owner,
              individualContent: content
            };
          }
          exports.loadNftItemStringParams = loadNftItemStringParams;
          function storeNftItemCellParams(src) {
            return builder => {
              builder.storeAddress(src.owner);
              builder.storeRef(src.individualContent);
            };
          }
          exports.storeNftItemCellParams = storeNftItemCellParams;
          function loadNftItemCellParams(slice) {
            return {
              owner: slice.loadAddress(),
              individualContent: slice.loadRef()
            };
          }
          exports.loadNftItemCellParams = loadNftItemCellParams;
          class NftCollection extends NftCollectionBase_1.NftCollectionBase {
            static create(params, sender, contentResolver) {
              const data = (0, core_1.beginCell)().store(storeNftCollectionData({
                admin: params.admin,
                content: params.content,
                itemCode: NftItem_1.NftItem.nftCode,
                royalty: {
                  numerator: params.royalty?.numerator ?? 0n,
                  denominator: params.royalty?.denominator ?? 1n,
                  recipient: params.royalty?.recipient ?? params.admin
                }
              })).endCell();
              const init = {
                data,
                code: NftCollection.code
              };
              const storeNftItemParams = params.storeNftItemParams || storeNftItemStringParams;
              const loadNftItemParams = params.loadNftItemParams || loadNftItemStringParams;
              return new NftCollection((0, core_1.contractAddress)(0, init), sender, init, contentResolver, storeNftItemParams, loadNftItemParams);
            }
            static open(address, sender, contentResolver, storeNftItemParams, loadNftItemParams) {
              storeNftItemParams || (storeNftItemParams = storeNftItemStringParams);
              loadNftItemParams || (loadNftItemParams = loadNftItemStringParams);
              return new NftCollection(address, sender, undefined, contentResolver, storeNftItemParams, loadNftItemParams);
            }
            async getItem(provider, index) {
              const nftItemAddress = await this.getItemAddress(provider, index);
              return provider.reopen(new NftItem_1.NftItem(nftItemAddress, this.sender, this.contentResolver));
            }
            async getRoyaltyParams(provider) {
              const {
                stack
              } = await provider.get('royalty_params', []);
              return {
                numerator: stack.readBigNumber(),
                denominator: stack.readBigNumber(),
                recipient: stack.readAddress()
              };
            }
          }
          exports.NftCollection = NftCollection; /***/
        },
        /***/5291: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.NftCollectionBase = exports.loadNftChangeContentMessage = exports.storeNftChangeContentMessage = exports.loadNftChangeAdminMessage = exports.storeNftChangeAdminMessage = exports.loadNftBatchMintMessage = exports.storeNftBatchMintMessage = exports.createNftMintItemValue = exports.loadNftBatchMintItem = exports.storeNftBatchMintItem = exports.loadNftMintMessage = exports.storeNftMintMessage = void 0;
          const core_1 = __webpack_require__(6900);
          const error_1 = __webpack_require__(4371);
          const content_1 = __webpack_require__(9544);
          const content_2 = __webpack_require__(6139);
          const nft_collection_editable_1 = __webpack_require__(7743);
          function storeNftMintMessage(src, storeParams) {
            return builder => {
              const mintOpcode = 1;
              builder.storeUint(mintOpcode, 32);
              builder.storeUint(src.queryId ?? 0, 64);
              builder.storeUint(src.itemIndex, 64);
              builder.storeCoins(src.value ?? (0, core_1.toNano)('0.03'));
              builder.storeRef((0, core_1.beginCell)().store(storeParams(src.itemParams)).endCell());
            };
          }
          exports.storeNftMintMessage = storeNftMintMessage;
          function loadNftMintMessage(slice, loadParams) {
            const mintOpcode = 1;
            if (slice.loadUint(32) !== mintOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const itemIndex = slice.loadUintBig(64);
            const value = slice.loadCoins();
            const itemParams = slice.loadRef();
            return {
              itemIndex,
              value,
              itemParams: loadParams(itemParams.beginParse()),
              queryId
            };
          }
          exports.loadNftMintMessage = loadNftMintMessage;
          function storeNftBatchMintItem(request, storeParams) {
            return builder => {
              builder.storeCoins(request.value ?? (0, core_1.toNano)('0.03'));
              builder.storeRef((0, core_1.beginCell)().store(storeParams(request.itemParams)).endCell());
            };
          }
          exports.storeNftBatchMintItem = storeNftBatchMintItem;
          function loadNftBatchMintItem(slice, loadParams) {
            const itemIndex = slice.loadUintBig(64);
            const value = slice.loadCoins();
            const itemParams = slice.loadRef();
            return {
              itemIndex,
              value,
              itemParams: loadParams(itemParams.beginParse())
            };
          }
          exports.loadNftBatchMintItem = loadNftBatchMintItem;
          function createNftMintItemValue(storeParams, loadParams) {
            return {
              serialize(src, builder) {
                if (!storeParams) {
                  throw new Error('storeParams is not defined');
                }
                builder.store(storeNftBatchMintItem(src, storeParams));
              },
              parse(src) {
                if (!loadParams) {
                  throw new Error('loadParams is not defined');
                }
                return loadNftBatchMintItem(src, loadParams);
              }
            };
          }
          exports.createNftMintItemValue = createNftMintItemValue;
          function storeNftBatchMintMessage(src, storeParams) {
            return builder => {
              const mintOpcode = 2;
              const dict = core_1.Dictionary.empty(core_1.Dictionary.Keys.BigUint(64), createNftMintItemValue(storeParams));
              for (const r of src.requests) {
                if (dict.has(r.itemIndex)) {
                  throw new Error('Duplicate items');
                }
                dict.set(r.itemIndex, r);
              }
              builder.storeUint(mintOpcode, 32);
              builder.storeUint(src.queryId ?? 0, 64);
              builder.storeRef((0, core_1.beginCell)().storeDictDirect(dict));
            };
          }
          exports.storeNftBatchMintMessage = storeNftBatchMintMessage;
          function loadNftBatchMintMessage(slice, loadParams) {
            const mintOpcode = 2;
            if (slice.loadUint(32) !== mintOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const requests = slice.loadDictDirect(core_1.Dictionary.Keys.BigUint(64), createNftMintItemValue(undefined, loadParams));
            return {
              queryId: queryId,
              requests: requests.values()
            };
          }
          exports.loadNftBatchMintMessage = loadNftBatchMintMessage;
          function storeNftChangeAdminMessage(src) {
            return builder => {
              const changeAdminOpcode = 3;
              builder.storeUint(changeAdminOpcode, 32);
              builder.storeUint(src.queryId ?? 0, 64);
              builder.storeAddress(src.newAdmin);
            };
          }
          exports.storeNftChangeAdminMessage = storeNftChangeAdminMessage;
          function loadNftChangeAdminMessage(slice) {
            const changeAdminOpcode = 3;
            if (slice.loadUint(32) !== changeAdminOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const newAdmin = slice.loadAddress();
            return {
              queryId,
              newAdmin
            };
          }
          exports.loadNftChangeAdminMessage = loadNftChangeAdminMessage;
          function storeNftChangeContentMessage(src) {
            return builder => {
              const changeContentOpcode = 4;
              builder.storeUint(changeContentOpcode, 32);
              builder.storeUint(src.queryId ?? 0, 64);
              builder.storeRef(src.newContent);
              builder.storeRef(src.newRoyaltyParams);
            };
          }
          exports.storeNftChangeContentMessage = storeNftChangeContentMessage;
          function loadNftChangeContentMessage(slice) {
            const changeContentOpcode = 4;
            if (slice.loadUint(32) !== changeContentOpcode) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const newContent = slice.loadRef();
            const newRoyaltyParams = slice.loadRef();
            return {
              queryId,
              newContent,
              newRoyaltyParams
            };
          }
          exports.loadNftChangeContentMessage = loadNftChangeContentMessage;
          class NftCollectionBase {
            constructor(address, sender, init, contentResolver, storeNftItemParams, loadNftItemParams) {
              this.address = address;
              this.sender = sender;
              this.init = init;
              this.contentResolver = contentResolver;
              this.storeNftItemParams = storeNftItemParams;
              this.loadNftItemParams = loadNftItemParams;
            }
            async sendMint(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              if (!this.storeNftItemParams) {
                throw new Error('storeNftItemParams is not defined');
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: (0, core_1.beginCell)().store(storeNftMintMessage(message, this.storeNftItemParams)).endCell()
              });
            }
            async sendBatchMint(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              if (!this.storeNftItemParams) {
                throw new Error('storeNftItemParams is not defined');
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                body: (0, core_1.beginCell)().store(storeNftBatchMintMessage(message, this.storeNftItemParams)).endCell()
              });
            }
            async sendDeploy(provider, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true
              });
            }
            async sendChangeAdmin(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                body: (0, core_1.beginCell)().store(storeNftChangeAdminMessage(message)).endCell()
              });
            }
            async sendChangeContent(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.05'),
                bounce: args?.bounce ?? true,
                body: (0, core_1.beginCell)().store(storeNftChangeContentMessage(message)).endCell()
              });
            }
            async getItemAddress(provider, index) {
              return (await provider.get('get_nft_address_by_index', [{
                type: 'int',
                value: index
              }])).stack.readAddress();
            }
            async getData(provider) {
              const ret = await provider.get('get_collection_data', []);
              return {
                nextItemIndex: ret.stack.readBigNumber(),
                content: ret.stack.readCell(),
                owner: ret.stack.readAddressOpt()
              };
            }
            async getContent(provider) {
              if (this.contentResolver === undefined) {
                throw new Error('No content resolver');
              }
              const data = await this.getData(provider);
              return (0, content_2.parseNftContent)(await (0, content_1.loadFullContent)(data.content, this.contentResolver));
            }
            async getItemContent(provider, index, individualContent) {
              return (await provider.get('get_nft_content', [{
                type: 'int',
                value: index
              }, {
                type: 'cell',
                cell: individualContent
              }])).stack.readCell();
            }
          }
          exports.NftCollectionBase = NftCollectionBase;
          NftCollectionBase.code = core_1.Cell.fromBase64(nft_collection_editable_1.nftCollectionEditableCode.codeBoc); /***/
        },
        /***/1697: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.NftItem = exports.loadNftTransferMessage = exports.storeNftTransferMessage = void 0;
          const core_1 = __webpack_require__(6900);
          const error_1 = __webpack_require__(4371);
          const content_1 = __webpack_require__(9544);
          const NftCollection_1 = __webpack_require__(9130);
          const content_2 = __webpack_require__(6139);
          const nft_item_1 = __webpack_require__(4961);
          function storeNftTransferMessage(message) {
            return builder => {
              const {
                queryId,
                newOwner,
                responseDestination,
                customPayload,
                forwardAmount,
                forwardPayload
              } = message;
              const OPCODE_TRANSFER = 0x5fcc3d14;
              builder.storeUint(OPCODE_TRANSFER, 32).storeUint(queryId ?? 0, 64).storeAddress(newOwner).storeAddress(responseDestination).storeMaybeRef(customPayload).storeCoins(forwardAmount ?? 0).storeMaybeRef(forwardPayload);
            };
          }
          exports.storeNftTransferMessage = storeNftTransferMessage;
          function loadNftTransferMessage(slice) {
            const OPCODE_TRANSFER = 0x5fcc3d14;
            if (slice.loadUint(32) !== OPCODE_TRANSFER) {
              throw new Error('Wrong opcode');
            }
            const queryId = slice.loadUintBig(64);
            const newOwner = slice.loadAddress();
            const responseDestination = slice.loadMaybeAddress();
            const customPayload = slice.loadMaybeRef();
            const forwardAmount = slice.loadCoins();
            const forwardPayload = slice.loadMaybeRef();
            return {
              queryId,
              newOwner,
              responseDestination,
              customPayload,
              forwardAmount,
              forwardPayload
            };
          }
          exports.loadNftTransferMessage = loadNftTransferMessage;
          class NftItem {
            constructor(address, sender, contentResolver) {
              this.address = address;
              this.sender = sender;
              this.contentResolver = contentResolver;
            }
            async sendTransfer(provider, message, args) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value: args?.value ?? (0, core_1.toNano)('0.03'),
                bounce: args?.bounce ?? true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: (0, core_1.beginCell)().store(storeNftTransferMessage({
                  queryId: message.queryId,
                  newOwner: message.newOwner,
                  responseDestination: message.responseDestination ?? this.sender.address,
                  customPayload: message.customPayload,
                  forwardAmount: message.forwardAmount,
                  forwardPayload: message.forwardPayload
                })).endCell()
              });
            }
            async getData(provider) {
              const {
                stack
              } = await provider.get('get_nft_data', []);
              return {
                initialized: stack.readBoolean(),
                index: stack.readBigNumber(),
                collection: stack.readAddressOpt(),
                owner: stack.readAddressOpt(),
                individualContent: stack.readCellOpt()
              };
            }
            async getContent(provider) {
              if (this.contentResolver === undefined) {
                throw new Error('No content resolver');
              }
              const {
                collection,
                individualContent,
                index
              } = await this.getData(provider);
              if (individualContent === null) {
                throw new Error('Individual content is null');
              }
              let content;
              if (collection === null) {
                content = individualContent;
              } else {
                const collectionContract = provider.reopen(NftCollection_1.NftCollection.open(collection, this.sender, this.contentResolver));
                content = await collectionContract.getItemContent(index, individualContent);
              }
              return (0, content_2.parseNftContent)(await (0, content_1.loadFullContent)(content, this.contentResolver));
            }
            async getRoyaltyParams(provider) {
              const {
                collection
              } = await this.getData(provider);
              if (collection === null) {
                // it's means that royalty stored in nft item
                return this.getNftItemRoyaltyParams(provider);
              }
              const collectionContract = provider.reopen(NftCollection_1.NftCollection.open(collection, this.sender, this.contentResolver));
              return collectionContract.getRoyaltyParams();
            }
            async getNftItemRoyaltyParams(provider) {
              const {
                stack
              } = await provider.get('get_royalty_params', []);
              return {
                numerator: stack.readBigNumber(),
                denominator: stack.readBigNumber(),
                recipient: stack.readAddress()
              };
            }
          }
          exports.NftItem = NftItem;
          NftItem.nftCode = core_1.Cell.fromBase64(nft_item_1.nftItemCode.codeBoc); /***/
        },
        /***/7121: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.NftSale = void 0;
          const core_1 = __webpack_require__(6900);
          const error_1 = __webpack_require__(4371);
          class NftSale {
            constructor(address, sender, init) {
              this.address = address;
              this.sender = sender;
              this.init = init;
            }
            static create(params, sender) {
              const data = (0, core_1.beginCell)().storeBit(false).storeUint(params.createdAt, 32).storeAddress(params.marketplace).storeAddress(params.nft).storeAddress(null).storeCoins(params.fullPrice).storeRef((0, core_1.beginCell)().storeAddress(params.marketplaceFeeTo).storeCoins(params.marketplaceFee).storeAddress(params.royaltyTo).storeCoins(params.royalty)).storeBit(params.canDeployByExternal).endCell();
              const init = {
                data,
                code: NftSale.code
              };
              return new NftSale((0, core_1.contractAddress)(0, init), sender, init);
            }
            static open(address, sender) {
              return new NftSale(address, sender);
            }
            async sendTopup(provider, value, queryId) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value,
                bounce: true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: (0, core_1.beginCell)().storeUint(1, 32).storeUint(queryId ?? 0, 64).endCell()
              });
            }
            async sendAdminMessage(provider, params) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              const builder = (0, core_1.beginCell)().storeUint(555, 32).storeUint(params.queryId ?? 0, 64);
              if (params.message instanceof core_1.Cell) {
                builder.storeRef(builder);
              } else {
                builder.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(params.message)));
              }
              await provider.internal(this.sender, {
                value: params.value,
                bounce: true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: builder.storeUint(params.sendMode, 8).endCell()
              });
            }
            async sendCancel(provider, value, queryId) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value,
                bounce: true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: (0, core_1.beginCell)().storeUint(3, 32).storeUint(queryId ?? 0, 64).endCell()
              });
            }
            async sendBuy(provider, value, queryId) {
              if (this.sender === undefined) {
                throw new error_1.NoSenderError();
              }
              await provider.internal(this.sender, {
                value,
                bounce: true,
                sendMode: core_1.SendMode.PAY_GAS_SEPARATELY,
                body: (0, core_1.beginCell)().storeUint(2, 32).storeUint(queryId ?? 0, 64).endCell()
              });
            }
            async sendDeployExternal(provider) {
              await provider.external(new core_1.Cell());
            }
            async getData(provider) {
              const {
                stack
              } = await provider.get('get_sale_data', []);
              return {
                type: stack.readNumber(),
                isComplete: stack.readBoolean(),
                createdAt: stack.readNumber(),
                marketplace: stack.readAddress(),
                nft: stack.readAddress(),
                nftOwner: stack.readAddressOpt(),
                fullPrice: stack.readBigNumber(),
                marketplaceFeeTo: stack.readAddress(),
                marketplaceFee: stack.readBigNumber(),
                royaltyTo: stack.readAddressOpt(),
                royalty: stack.readBigNumber()
              };
            }
          }
          exports.NftSale = NftSale;
          NftSale.code = core_1.Cell.fromBase64('te6cckECCwEAArkAART/APSkE/S88sgLAQIBIAMCAH7yMO1E0NMA0x/6QPpA+kD6ANTTADDAAY4d+ABwB8jLABbLH1AEzxZYzxYBzxYB+gLMywDJ7VTgXweCAP/+8vACAUgFBABXoDhZ2omhpgGmP/SB9IH0gfQBqaYAYGGh9IH0AfSB9ABhBCCMkrCgFYACqwECAs0IBgH3ZghA7msoAUmCgUjC+8uHCJND6QPoA+kD6ADBTkqEhoVCHoRagUpBwgBDIywVQA88WAfoCy2rJcfsAJcIAJddJwgKwjhdQRXCAEMjLBVADzxYB+gLLaslx+wAQI5I0NOJacIAQyMsFUAPPFgH6AstqyXH7AHAgghBfzD0UgcAlsjLHxPLPyPPFlADzxbKAIIJycOA+gLKAMlxgBjIywUmzxZw+gLLaszJgwb7AHFVUHAHyMsAFssfUATPFljPFgHPFgH6AszLAMntVAH30A6GmBgLjYSS+CcH0gGHaiaGmAaY/9IH0gfSB9AGppgBgYOCmE44BgAEqYhOmPhW8Q4YBKGATpn8cIxbMbC3MbK2QV44LJOZlvKAVxFWAAyS+G8BJrpOEBFcCBFd0VYACRWdjYKdxjgthOjq+G6hhoaYPqGAD9gHAU4ADAkB6PLRlLOOQjEzOTlTUscFkl8J4FFRxwXy4fSCEAUTjZEWuvLh9QP6QDBGUBA0WXAHyMsAFssfUATPFljPFgHPFgH6AszLAMntVOAwNyjAA+MCKMAAnDY3EDhHZRRDMHDwBeAIwAKYVUQQJBAj8AXgXwqED/LwCgDUODmCEDuaygAYvvLhyVNGxwVRUscFFbHy4cpwIIIQX8w9FCGAEMjLBSjPFiH6Astqyx8Vyz8nzxYnzxYUygAj+gITygDJgwb7AHFQZkUVBHAHyMsAFssfUATPFljPFgHPFgH6AszLAMntVOBqUYM='); /***/
        },
        /***/6121: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SbtCollection = exports.loadSbtItemCellParams = exports.storeSbtItemCellParams = exports.loadSbtItemStringParams = exports.storeSbtItemStringParams = void 0;
          const core_1 = __webpack_require__(6900);
          const NftCollectionBase_1 = __webpack_require__(5291);
          const NftCollection_1 = __webpack_require__(9130);
          const SbtItem_1 = __webpack_require__(8214);
          function storeSbtItemStringParams(src) {
            return builder => {
              builder.storeAddress(src.owner);
              builder.storeRef((0, core_1.beginCell)().storeStringTail(src.individualContent).endCell());
              builder.storeAddress(src.authority);
            };
          }
          exports.storeSbtItemStringParams = storeSbtItemStringParams;
          function loadSbtItemStringParams(slice) {
            const owner = slice.loadAddress();
            const content = slice.loadRef().beginParse().loadStringRefTail();
            const authority = slice.loadAddress();
            return {
              owner,
              individualContent: content,
              authority
            };
          }
          exports.loadSbtItemStringParams = loadSbtItemStringParams;
          function storeSbtItemCellParams(src) {
            return builder => {
              builder.storeAddress(src.owner);
              builder.storeRef(src.individualContent);
              builder.storeAddress(src.authority);
            };
          }
          exports.storeSbtItemCellParams = storeSbtItemCellParams;
          function loadSbtItemCellParams(slice) {
            const owner = slice.loadAddress();
            const content = slice.loadRef();
            const authority = slice.loadAddress();
            return {
              owner,
              individualContent: content,
              authority
            };
          }
          exports.loadSbtItemCellParams = loadSbtItemCellParams;
          class SbtCollection extends NftCollectionBase_1.NftCollectionBase {
            static create(params, sender, contentResolver) {
              const data = (0, core_1.beginCell)().store((0, NftCollection_1.storeNftCollectionData)({
                admin: params.admin,
                content: params.content,
                itemCode: SbtItem_1.SbtItem.sbtCode,
                royalty: {
                  numerator: params.royalty?.numerator ?? 0n,
                  denominator: params.royalty?.denominator ?? 1n,
                  recipient: params.royalty?.recipient ?? params.admin
                }
              })).endCell();
              const init = {
                data,
                code: SbtCollection.code
              };
              const storeSbtItemParams = params.storeSbtItemParams ?? storeSbtItemStringParams;
              const loadSbtItemParams = params.loadSbtItemParams ?? loadSbtItemStringParams;
              return new SbtCollection((0, core_1.contractAddress)(0, init), sender, init, contentResolver, storeSbtItemParams, loadSbtItemParams);
            }
            static open(address, sender, contentResolver, storeSbtItemParams, loadSbtItemParams) {
              storeSbtItemParams ?? (storeSbtItemParams = storeSbtItemStringParams);
              loadSbtItemParams ?? (loadSbtItemParams = loadSbtItemStringParams);
              return new SbtCollection(address, sender, undefined, contentResolver, storeSbtItemParams, loadSbtItemParams);
            }
            async getItem(provider, index) {
              const nftItemAddress = await this.getItemAddress(provider, index);
              return provider.reopen(new SbtItem_1.SbtItem(nftItemAddress, this.sender, this.contentResolver));
            }
          }
          exports.SbtCollection = SbtCollection; /***/
        },
        /***/8214: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SbtItem = void 0;
          const core_1 = __webpack_require__(6900);
          const content_1 = __webpack_require__(9544);
          const NftCollection_1 = __webpack_require__(9130);
          const content_2 = __webpack_require__(6139);
          const sbt_item_1 = __webpack_require__(9720);
          class SbtItem {
            constructor(address, sender, contentResolver) {
              this.address = address;
              this.sender = sender;
              this.contentResolver = contentResolver;
            }
            async getData(provider) {
              const {
                stack
              } = await provider.get('get_nft_data', []);
              return {
                initialized: stack.readBoolean(),
                index: stack.readBigNumber(),
                collection: stack.readAddressOpt(),
                owner: stack.readAddressOpt(),
                individualContent: stack.readCellOpt()
              };
            }
            async getContent(provider) {
              if (this.contentResolver === undefined) {
                throw new Error('No content resolver');
              }
              const {
                collection,
                individualContent,
                index
              } = await this.getData(provider);
              if (individualContent === null) {
                throw new Error('Individual content is null');
              }
              let content;
              if (collection === null) {
                content = individualContent;
              } else {
                const collectionContract = provider.reopen(NftCollection_1.NftCollection.open(collection, this.sender, this.contentResolver));
                content = await collectionContract.getItemContent(index, individualContent);
              }
              return (0, content_2.parseNftContent)(await (0, content_1.loadFullContent)(content, this.contentResolver));
            }
            async getRoyaltyParams(provider) {
              const {
                collection
              } = await this.getData(provider);
              if (collection === null) {
                // it's means that royalty stored in nft item
                return this.getNftItemRoyaltyParams(provider);
              }
              const collectionContract = provider.reopen(NftCollection_1.NftCollection.open(collection, this.sender, this.contentResolver));
              return collectionContract.getRoyaltyParams();
            }
            async getNftItemRoyaltyParams(provider) {
              const {
                stack
              } = await provider.get('get_royalty_params', []);
              return {
                numerator: stack.readBigNumber(),
                denominator: stack.readBigNumber(),
                recipient: stack.readAddress()
              };
            }
          }
          exports.SbtItem = SbtItem;
          SbtItem.sbtCode = core_1.Cell.fromBase64(sbt_item_1.sbtItemCode.codeBoc); /***/
        },
        /***/6139: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.parseNftContent = exports.nftContentToInternal = void 0;
          const core_1 = __webpack_require__(6900);
          const zod_1 = __importDefault(__webpack_require__(5995));
          const content_1 = __webpack_require__(9544);
          function nftContentToInternal(content) {
            return {
              uri: content.uri,
              name: content.name,
              description: content.description,
              image: content.image,
              image_data: content.imageData?.toString('base64')
            };
          }
          exports.nftContentToInternal = nftContentToInternal;
          function parseNftContent(dc) {
            const decoded = (0, content_1.decodeSimpleFields)(dc, {
              name: {
                onchain: content_1.bufferToStr,
                offchain: v => zod_1.default.string().parse(v)
              },
              description: {
                onchain: content_1.bufferToStr,
                offchain: v => zod_1.default.string().parse(v)
              }
            });
            decoded.image = (0, content_1.decodeImage)(dc);
            const out = {
              ...decoded,
              type: dc.type,
              unknownOffchainFields: dc.offchainFields ?? {},
              unknownOnchainFields: dc.onchainFields ?? core_1.Dictionary.empty(),
              offchainUrl: dc.offchainUrl
            };
            return out;
          }
          exports.parseNftContent = parseNftContent; /***/
        },
        /***/7743: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.nftCollectionEditableCode = void 0;
          exports.nftCollectionEditableCode = {
            codeBoc: 'te6ccgECFAEAAh8AART/APSkE/S88sgLAQIBYgIDAgLNBAUCASAODwTn0QY4BIrfAA6GmBgLjYSK3wfSAYAOmP6Z/2omh9IGmf6mpqGEEINJ6cqClAXUcUG6+CgOhBCFRlgFa4QAhkZYKoAueLEn0BCmW1CeWP5Z+A54tkwCB9gHAbKLnjgvlwyJLgAPGBEuABcYES4AHxgRgZgeACQGBwgJAgEgCgsAYDUC0z9TE7vy4ZJTE7oB+gDUMCgQNFnwBo4SAaRDQ8hQBc8WE8s/zMzMye1Ukl8F4gCmNXAD1DCON4BA9JZvpSCOKQakIIEA+r6T8sGP3oEBkyGgUyW78vQC+gDUMCJUSzDwBiO6kwKkAt4Ekmwh4rPmMDJQREMTyFAFzxYTyz/MzMzJ7VQALDI0AfpAMEFEyFAFzxYTyz/MzMzJ7VQAPI4V1NQwEDRBMMhQBc8WE8s/zMzMye1U4F8EhA/y8AIBIAwNAD1FrwBHAh8AV3gBjIywVYzxZQBPoCE8trEszMyXH7AIAC0AcjLP/gozxbJcCDIywET9AD0AMsAyYAAbPkAdMjLAhLKB8v/ydCACASAQEQAlvILfaiaH0gaZ/qamoYLehqGCxABDuLXTHtRND6QNM/1NTUMBAkXwTQ1DHUMNBxyMsHAc8WzMmAIBIBITAC+12v2omh9IGmf6mpqGDYg6GmH6Yf9IBhAALbT0faiaH0gaZ/qamoYCi+CeAI4APgCw'
          }; /***/
        },
        /***/4961: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.nftItemCode = void 0;
          exports.nftItemCode = {
            codeBoc: 'te6ccgECDgEAAdwAART/APSkE/S88sgLAQIBYgIDAgLOBAUACaEfn+AFAgEgBgcCASAMDQLPDIhxwCSXwPg0NMDAXGwkl8D4PpA+kAx+gAxcdch+gAx+gAwc6m0APACBLOOFDBsIjRSMscF8uGVAfpA1DAQI/AD4AbTH9M/ghBfzD0UUjC64wIwNDQ1NYIQL8smohK64wJfBIQP8vCAICQARPpEMHC68uFNgAqwyEDdeMkATUTXHBfLhkfpAIfAB+kDSADH6ACDXScIA8uLEggr68IAboSGUUxWgod4i1wsBwwAgkgahkTbiIML/8uGSIZQQKjdb4w0CkzAyNOMNVQLwAwoLAHJwghCLdxc1BcjL/1AEzxYQJIBAcIAQyMsFUAfPFlAF+gIVy2oSyx/LPyJus5RYzxcBkTLiAckB+wAAfIIQBRONkchQCc8WUAvPFnEkSRRURqBwgBDIywVQB88WUAX6AhXLahLLH8s/Im6zlFjPFwGRMuIByQH7ABBHAGom8AGCENUydtsQN0QAbXFwgBDIywVQB88WUAX6AhXLahLLH8s/Im6zlFjPFwGRMuIByQH7AAA7O1E0NM/+kAg10nCAJp/AfpA1DAQJBAj4DBwWW1tgAB0A8jLP1jPFgHPFszJ7VSA='
          }; /***/
        },
        /***/9720: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sbtItemCode = void 0;
          exports.sbtItemCode = {
            codeBoc: 'te6ccgECEwEAAzsAART/APSkE/S88sgLAQIBYgIDAgLOBAUCASAPEAS9RsIiDHAJFb4AHQ0wP6QDDwAvhCs44cMfhDAccF8uGV+kAB+GTUAfhm+kAw+GVw+GfwA+AC0x8CcbDjAgHTP4IQ0MO/6lIwuuMCghAE3tFIUjC64wIwghAvyyaiUiC6gGBwgJAgEgDQ4AlDAx0x+CEAUkx64Suo450z8wgBD4RHCCEMGOhtJVA22AQAPIyx8Syz8hbrOTAc8XkTHiyXEFyMsFUATPFlj6AhPLaszJAfsAkTDiAMJsEvpA1NMAMPhH+EHIy/9QBs8W+ETPFhLMFMs/UjDLAAPDAJb4RlADzALegBB4sXCCEA3WB+NANRSAQAPIyx8Syz8hbrOTAc8XkTHiyXEFyMsFUATPFlj6AhPLaszJAfsAAMYy+ERQA8cF8uGR+kDU0wAw+Ef4QcjL//hEzxYTzBLLP1IQywABwwCU+EYBzN6AEHixcIIQBSTHrkBVA4BAA8jLHxLLPyFus5MBzxeRMeLJcQXIywVQBM8WWPoCE8tqzMkB+wAD+o5AMfhByMv/+EPPFoAQcIIQi3cXNUAVUEQDgEADyMsfEss/IW6zkwHPF5Ex4slxBcjLBVAEzxZY+gITy2rMyQH7AOCCEB8EU3pSILrjAoIQb4n141Iguo4WW/hFAccF8uGR+EfAAPLhk/gj+GfwA+CCENE207NSILrjAjAxCgsMAJIx+EQixwXy4ZGAEHCCENUydtsQJFUCbYMGA8jLHxLLPyFus5MBzxeRMeLJcQXIywVQBM8WWPoCE8tqzMkB+wCLAvhkiwL4ZfADAI4x+EQixwXy4ZGCCvrwgHD7AoAQcIIQ1TJ22xAkVQJtgwYDyMsfEss/IW6zkwHPF5Ex4slxBcjLBVAEzxZY+gITy2rMyQH7AAAgghBfzD0UupPywZ3ehA/y8ABhO1E0NM/Afhh+kAB+GNw+GIg10nCAI4Wf/hi+kAB+GTUAfhm+kAB+GXTPzD4Z5Ew4oAA3PhH+Eb4QcjLP/hDzxb4RM8WzPhFzxbLP8ntVIAIBWBESAB28fn+AF8IXwg/CH8InwjQADbVjHgBfCLAADbewfgBfCPA='
          }; /***/
        },
        /***/9117: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"];
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.AssetsSDK = void 0;
          const core_1 = __webpack_require__(6900);
          const pinata_1 = __webpack_require__(2714);
          const s3_1 = __webpack_require__(7161);
          const content_1 = __webpack_require__(2863);
          const content_2 = __webpack_require__(6139);
          const utils_1 = __webpack_require__(7308);
          const JettonWallet_1 = __webpack_require__(4405);
          const JettonMinter_1 = __webpack_require__(4595);
          const NftCollection_1 = __webpack_require__(9130);
          const NftItem_1 = __webpack_require__(1697);
          const SbtCollection_1 = __webpack_require__(6121);
          const content_3 = __webpack_require__(9544);
          const NftSale_1 = __webpack_require__(7121);
          const noop_1 = __webpack_require__(4023);
          class AssetsSDK {
            static create(params) {
              let {
                api,
                storage,
                sender: sender,
                contentResolver
              } = params;
              if (!storage) {
                storage = new noop_1.NoopStorage();
              } else if ('pinataApiKey' in storage) {
                storage = pinata_1.PinataStorage.create(storage);
              } else if ('s3AccessKeyId' in storage) {
                storage = s3_1.S3Storage.create(storage);
              }
              contentResolver ?? (contentResolver = new content_3.DefaultContentResolver());
              return new AssetsSDK(storage, api, sender, contentResolver);
            }
            constructor(storage, api, sender, contentResolver) {
              this.storage = storage;
              this.api = api;
              this.sender = sender;
              this.contentResolver = contentResolver;
            }
            async deployJetton(content, options) {
              const adminAddress = options?.adminAddress ?? this.sender?.address;
              if (adminAddress === undefined) {
                throw new Error('Admin address must be defined in options or be available in Sender');
              }
              const jetton = this.api.openExtended(JettonMinter_1.JettonMinter.create({
                admin: adminAddress,
                content: await this.contentToCell((0, content_1.jettonContentToInternal)(content), options?.onchainContent ?? false)
              }, this.sender, this.contentResolver));
              const value = options?.value ?? (0, core_1.toNano)('0.05');
              if (options?.premint === undefined) {
                await jetton.sendDeploy({
                  value
                });
              } else {
                await jetton.sendMint(options.premint, {
                  value: value
                });
              }
              return jetton;
            }
            openJetton(address) {
              return this.api.openExtended(JettonMinter_1.JettonMinter.open(address, this.sender, this.contentResolver));
            }
            async deployNftCollection(content, options) {
              const adminAddress = options?.adminAddress ?? this.sender?.address;
              if (adminAddress === undefined) {
                throw new Error('Admin address must be defined in options or be available in Sender');
              }
              const collection = this.api.openExtended(NftCollection_1.NftCollection.create({
                admin: adminAddress,
                content: (0, core_1.beginCell)().storeRef(await this.contentToCell((0, content_2.nftContentToInternal)(content.collectionContent), options?.onchainContent ?? false)).storeRef((0, core_1.beginCell)().storeStringTail(content.commonContent)).endCell(),
                royalty: options?.royaltyParams
              }, this.sender, this.contentResolver));
              const value = options?.value ?? (0, core_1.toNano)('0.05');
              if (options?.premint === undefined) {
                await collection.sendDeploy({
                  value: value
                });
              } else {
                await collection.sendMint(options.premint, {
                  value: value
                });
              }
              return collection;
            }
            openNftCollection(address) {
              return this.api.openExtended(NftCollection_1.NftCollection.open(address, this.sender, this.contentResolver));
            }
            async deploySbtCollection(content, options) {
              const adminAddress = options?.adminAddress ?? this.sender?.address;
              if (adminAddress === undefined) {
                throw new Error('Admin address must be defined in options or be available in Sender');
              }
              const collection = this.api.openExtended(SbtCollection_1.SbtCollection.create({
                admin: adminAddress,
                content: (0, core_1.beginCell)().storeRef(await this.contentToCell((0, content_2.nftContentToInternal)(content.collectionContent), options?.onchainContent ?? false)).storeRef((0, core_1.beginCell)().storeStringTail(content.commonContent)).endCell()
              }, this.sender, this.contentResolver));
              const value = options?.value ?? (0, core_1.toNano)('0.05');
              if (options?.premint === undefined) {
                await collection.sendDeploy({
                  value: value
                });
              } else {
                await collection.sendMint(options.premint, {
                  value: value
                });
              }
              return collection;
            }
            openSbtCollection(address) {
              return this.api.openExtended(SbtCollection_1.SbtCollection.open(address, this.sender, this.contentResolver));
            }
            openJettonWallet(address) {
              return this.api.openExtended(new JettonWallet_1.JettonWallet(address, this.sender));
            }
            openNftItem(address) {
              return this.api.openExtended(new NftItem_1.NftItem(address, this.sender, this.contentResolver));
            }
            async deployNftSale(params) {
              const marketplaceAddress = params.marketplace ?? this.sender?.address;
              if (marketplaceAddress === undefined) {
                throw new Error('Marketplace address must be defined in options or be available in Sender');
              }
              const sale = this.api.openExtended(NftSale_1.NftSale.create({
                createdAt: params.createdAt ?? Math.floor(Date.now() / 1000),
                marketplace: params.marketplace ?? null,
                nft: params.nft,
                fullPrice: params.fullPrice,
                marketplaceFeeTo: params.marketplaceFeeTo ?? null,
                marketplaceFee: params.marketplaceFee ?? 0n,
                royaltyTo: params.royaltyTo ?? null,
                royalty: params.royalty ?? 0n,
                canDeployByExternal: params.canDeployByExternal ?? true
              }, this.sender));
              const value = params.value ?? (0, core_1.toNano)('0.05');
              await sale.sendTopup(value, params.queryId);
              return sale;
            }
            openNftSale(address) {
              return this.api.openExtended(NftSale_1.NftSale.open(address, this.sender));
            }
            async internalOffchainContentToCell(internal) {
              const contentUrl = await this.storage.uploadFile(Buffer.from(JSON.stringify(internal), 'utf-8'));
              return (0, core_1.beginCell)().storeUint(0x01, 8).storeStringTail(contentUrl).endCell();
            }
            async contentToCell(internal, onchain) {
              return onchain ? (0, utils_1.internalOnchainContentToCell)(internal) : await this.internalOffchainContentToCell(internal);
            }
          }
          exports.AssetsSDK = AssetsSDK; /***/
        },
        /***/4023: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.NoopStorage = void 0;
          class NoopStorage {
            async uploadFile(contents) {
              throw new Error(`No storage provider configured`);
            }
          }
          exports.NoopStorage = NoopStorage; /***/
        },
        /***/2714: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }
            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          });
          var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          });
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
            __setModuleDefault(result, mod);
            return result;
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.PinataStorage = void 0;
          const utils_1 = __webpack_require__(7308);
          class PinataStorage {
            static create(params) {
              return new PinataStorage(params.pinataApiKey, params.pinataSecretKey);
            }
            constructor(apiKey, secretApiKey) {
              this.client = (0, utils_1.defer)(async () => {
                const ctor = await Promise.resolve().then(() => __importStar(__webpack_require__(2965))).then(m => m.default);
                return new ctor(this.apiKey, this.secretApiKey);
              });
              this.stream = (0, utils_1.defer)(async contents => {
                const stream = await Promise.resolve().then(() => __importStar(__webpack_require__(5041))).then(m => m.Readable);
                return stream.from(contents);
              });
              this.apiKey = apiKey;
              this.secretApiKey = secretApiKey;
            }
            async uploadFile(contents) {
              const client = await this.client();
              const stream = await this.stream(contents);
              return 'ipfs://' + (await client.pinFileToIPFS(stream, {
                pinataMetadata: {
                  name: 'Assets SDK Jetton'
                }
              })).IpfsHash;
            }
          }
          exports.PinataStorage = PinataStorage; /***/
        },
        /***/7161: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }
            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          });
          var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          });
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
            __setModuleDefault(result, mod);
            return result;
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.S3Storage = void 0;
          const utils_1 = __webpack_require__(7308);
          class S3Storage {
            static create(params) {
              return new S3Storage(params.s3AccessKeyId, params.s3SecretAccessKey, params.s3Bucket);
            }
            constructor(accessKeyId, secretAccessKey, bucket) {
              this.s3 = (0, utils_1.defer)(async () => {
                const ctor = await Promise.resolve().then(() => __importStar(__webpack_require__(7616))).then(m => m.S3);
                return new ctor({
                  credentials: {
                    accessKeyId: this.accessKeyId,
                    secretAccessKey: this.secretAccessKey
                  }
                });
              });
              this.accessKeyId = accessKeyId;
              this.secretAccessKey = secretAccessKey;
              this.bucket = bucket;
            }
            async uploadFile(contents) {
              const s3 = await this.s3();
              const key = 'jetton/' + Math.random().toString(36).substring(2);
              await s3.putObject({
                Bucket: this.bucket,
                Key: key,
                Body: contents
              });
              return 'https://' + this.bucket + '.s3.amazonaws.com/' + key;
            }
          }
          exports.S3Storage = S3Storage; /***/
        },
        /***/7308: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"];
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.defer = exports.internalOnchainContentToCell = exports.sleep = void 0;
          const core_1 = __webpack_require__(6900);
          const crypto_1 = __webpack_require__(3022);
          function sleep(timeout) {
            return new Promise(res => {
              setTimeout(() => res(), timeout);
            });
          }
          exports.sleep = sleep;
          function internalOnchainContentToCell(internal) {
            const dict = core_1.Dictionary.empty(core_1.Dictionary.Keys.Buffer(32), core_1.Dictionary.Values.Cell());
            for (const k in internal) {
              if (internal[k] === undefined) {
                continue;
              }
              const b = (0, core_1.beginCell)();
              if (k === 'image_data') {
                const chunks = core_1.Dictionary.empty(core_1.Dictionary.Keys.Uint(32), core_1.Dictionary.Values.Cell());
                const buf = Buffer.from(internal[k], 'base64');
                for (let i = 0; i * 127 < buf.length; i++) {
                  chunks.set(i, (0, core_1.beginCell)().storeBuffer(buf.subarray(i * 127, (i + 1) * 127)).endCell());
                }
                b.storeUint(1, 8).storeDict(chunks).endCell();
              } else {
                b.storeUint(0, 8).storeStringTail(internal[k].toString());
              }
              dict.set((0, crypto_1.sha256_sync)(k), b.endCell());
            }
            return (0, core_1.beginCell)().storeUint(0, 8).storeDict(dict).endCell();
          }
          exports.internalOnchainContentToCell = internalOnchainContentToCell;
          function defer(factory) {
            let promise = null;
            return function () {
              if (!promise) {
                promise = Promise.resolve(factory(...arguments));
              }
              return promise;
            };
          }
          exports.defer = defer; /***/
        },
        /***/9661: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.HighloadWalletContractV2 = void 0;
          const core_1 = __webpack_require__(6900);
          const crypto_1 = __webpack_require__(3022);
          const utils_1 = __webpack_require__(7308);
          class HighloadWalletContractV2 {
            static create(args) {
              return new HighloadWalletContractV2(args.workchain, args.publicKey, args.walletId);
            }
            constructor(workchain, publicKey, walletId) {
              this.workchain = workchain;
              this.publicKey = publicKey;
              if (walletId !== null && walletId !== undefined) {
                this.walletId = walletId;
              } else {
                this.walletId = 698983191 + workchain;
              } // Reference: https://github.com/ton-blockchain/ton/blob/master/crypto/smartcont/highload-wallet-v2-code.fc
              const code = core_1.Cell.fromBase64('te6cckEBCQEA5QABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQHq8oMI1xgg0x/TP/gjqh9TILnyY+1E0NMf0z/T//QE0VNggED0Dm+hMfJgUXO68qIH+QFUEIf5EPKjAvQE0fgAf44WIYAQ9HhvpSCYAtMH1DAB+wCRMuIBs+ZbgyWhyEA0gED0Q4rmMQHIyx8Tyz/L//QAye1UCAAE0DACASAGBwAXvZznaiaGmvmOuF/8AEG+X5dqJoaY+Y6Z/p/5j6AmipEEAgegc30JjJLb/JXdHxQANCCAQPSWb6VsEiCUMFMDud4gkzM2AZJsIeKzn55UWg==');
              const data = (0, core_1.beginCell)().storeUint(this.walletId, 32).storeUint(0, 64).storeBuffer(this.publicKey, 32).storeDict(null).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(this.workchain, this.init);
            } /**
              * Get wallet balance.
              */
            async getBalance(provider) {
              const state = await provider.getState();
              return state.balance;
            } /**
              * Send signed message.
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send message.
              */
            async sendTransfer(provider, args) {
              const message = this.createTransfer(args);
              await this.send(provider, message);
            } /**
              * Create signed message.
              */
            createTransfer(args) {
              let seqno = Math.floor(Math.random() * (1 << 32));
              if (args.seqno !== null && args.seqno !== undefined) {
                seqno = args.seqno;
              }
              let timeout = 5 * 60; // 15 minutes
              if (args.timeout !== null && args.timeout !== undefined && args.timeout < timeout) {
                timeout = args.timeout;
              }
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY | core_1.SendMode.IGNORE_ERRORS;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              let now = Date.now();
              if (args.now !== null && args.now !== undefined) {
                now = args.now;
              }
              return (0, core_1.beginCell)().store(storeSignedTransferHighloadWalletV2({
                secretKey: args.secretKey,
                messages: args.messages,
                seqno: seqno,
                sendMode: sendMode,
                timeout: timeout,
                walletId: this.walletId,
                now: now
              })).endCell();
            } /**
              * Load signed message.
              */
            loadTransfer(src) {
              return loadSignedTransferHighloadWalletV2(src);
            } /**
              * Send signed message and wait for processing.
              */
            async sendTransferAndWait(provider, args, sleepInterval) {
              if (sleepInterval === void 0) {
                sleepInterval = 3000;
              }
              const transfer = this.createTransfer(args);
              const {
                queryId
              } = this.loadTransfer(transfer.beginParse());
              while (true) {
                try {
                  await provider.external(transfer);
                } catch (e) {}
                await (0, utils_1.sleep)(sleepInterval);
                const state = await provider.getState();
                if (state.state.type === 'uninit') {
                  continue;
                }
                const status = await this.getProcessedStatus(provider, queryId);
                if (status === 'processed') {
                  return;
                } else if (status === 'forgotten') {
                  throw new Error('The transfer was forgotten');
                }
              }
            } /**
              * Get processed status of message.
              */
            async getProcessedStatus(provider, queryId) {
              const {
                stack
              } = await provider.get('processed?', [{
                type: 'int',
                value: queryId
              }]);
              const processedStatus = stack.readBigNumber();
              switch (processedStatus) {
                case -1n:
                  return 'processed';
                case 0n:
                  return 'unprocessed';
                case 1n:
                  return 'forgotten';
                default:
                  throw new Error('Unknown processed status ' + processedStatus);
              }
            } /**
              * Create sender.
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  await this.sendTransferAndWait(provider, {
                    secretKey: secretKey,
                    sendMode: args.sendMode,
                    messages: [(0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      bounce: args.bounce,
                      init: args.init,
                      body: args.body
                    })]
                  });
                },
                address: this.address
              };
            }
          }
          exports.HighloadWalletContractV2 = HighloadWalletContractV2;
          function createMessageRelaxedValue() {
            return {
              serialize: (args, builder) => {
                const {
                  sendMode,
                  message
                } = args;
                const messageRelaxed = (0, core_1.beginCell)().storeWritable((0, core_1.storeMessageRelaxed)(message));
                builder.storeUint(sendMode, 8);
                builder.storeRef(messageRelaxed);
              },
              parse: src => {
                const sendMode = src.loadUint(8);
                const message = (0, core_1.loadMessageRelaxed)(src.loadRef().beginParse());
                return {
                  sendMode,
                  message
                };
              }
            };
          }
          function getQueryId(now, timeout, seqno) {
            const validUntil = Math.floor(now / 1000) + timeout;
            return (BigInt(validUntil) << 32n) + BigInt(seqno);
          }
          function storeSignedTransferHighloadWalletV2(args) {
            return builder => {
              const {
                secretKey,
                messages,
                seqno,
                sendMode,
                now,
                timeout,
                walletId
              } = args;
              const queryId = getQueryId(now, timeout, seqno);
              const dict = core_1.Dictionary.empty(core_1.Dictionary.Keys.Int(16), createMessageRelaxedValue());
              for (const [i, message] of messages.entries()) {
                dict.set(i, {
                  sendMode,
                  message
                });
              }
              const signedMessage = (0, core_1.beginCell)().storeUint(walletId, 32).storeUint(queryId, 64).storeDict(dict).endCell();
              const hash = signedMessage.hash();
              const signature = (0, crypto_1.sign)(hash, secretKey);
              builder.storeBuffer(signature);
              builder.storeSlice(signedMessage.beginParse());
            };
          }
          function loadSignedTransferHighloadWalletV2(src) {
            const signature = src.loadBuffer(64);
            const walletId = src.loadUint(32);
            const queryId = src.loadUintBig(64);
            const dict = src.loadDict(core_1.Dictionary.Keys.Int(16), createMessageRelaxedValue());
            const messages = dict.values();
            return {
              signature: signature,
              walletId: walletId,
              queryId: queryId,
              messages: messages
            };
          } /***/
        },
        /***/9550: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.createSender = exports.createWallet = exports.createHighloadV2 = void 0;
          const HighloadWalletContractV2_1 = __webpack_require__(9661);
          const api_1 = __webpack_require__(4913);
          const WORKCHAIN = 0;
          function createHighloadV2(publicKey) {
            return HighloadWalletContractV2_1.HighloadWalletContractV2.create({
              workchain: WORKCHAIN,
              publicKey: publicKey
            });
          }
          exports.createHighloadV2 = createHighloadV2;
          function createWallet(walletType, publicKey) {
            switch (walletType) {
              case 'highload-v2':
                return createHighloadV2(publicKey);
              default:
                throw new Error('Unsupported wallet type');
            }
          }
          exports.createWallet = createWallet;
          async function createSender(walletType, keypair, clientOrNetwork) {
            const isNetwork = clientOrNetwork === 'testnet' || clientOrNetwork === 'mainnet';
            const client = isNetwork ? await (0, api_1.createApi)(clientOrNetwork) : clientOrNetwork;
            const wallet = createWallet(walletType, keypair.publicKey);
            return client.openExtended(wallet).sender(keypair.secretKey);
          }
          exports.createSender = createSender; /***/
        },
        /***/1470: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          var _a;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ADNLAddress = void 0;
          const symbol_inspect_1 = __importDefault(__webpack_require__(4700));
          const base32_1 = __webpack_require__(7040);
          const crc16_1 = __webpack_require__(431);
          class ADNLAddress {
            static parseFriendly(src) {
              if (src.length !== 55) {
                throw Error('Invalid address');
              } // Decoding
              src = 'f' + src;
              let decoded = (0, base32_1.base32Decode)(src);
              if (decoded[0] !== 0x2d) {
                throw Error('Invalid address');
              }
              let gotHash = decoded.slice(33);
              let hash = (0, crc16_1.crc16)(decoded.slice(0, 33));
              if (!hash.equals(gotHash)) {
                throw Error('Invalid address');
              }
              return new ADNLAddress(decoded.slice(1, 33));
            }
            static parseRaw(src) {
              const data = Buffer.from(src, 'base64');
              return new ADNLAddress(data);
            }
            constructor(address) {
              this.toRaw = () => {
                return this.address.toString('hex').toUpperCase();
              };
              this.toString = () => {
                let data = Buffer.concat([Buffer.from([0x2D]), this.address]);
                let hash = (0, crc16_1.crc16)(data);
                data = Buffer.concat([data, hash]);
                return (0, base32_1.base32Encode)(data).slice(1);
              };
              this[_a] = () => this.toString();
              if (address.length !== 32) {
                throw Error('Invalid address');
              }
              this.address = address;
            }
            equals(b) {
              return this.address.equals(b.address);
            }
          }
          exports.ADNLAddress = ADNLAddress;
          _a = symbol_inspect_1.default; /***/
        },
        /***/6575: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          var _a;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.address = exports.Address = void 0;
          const symbol_inspect_1 = __importDefault(__webpack_require__(4700));
          const crc16_1 = __webpack_require__(431);
          const bounceable_tag = 0x11;
          const non_bounceable_tag = 0x51;
          const test_flag = 0x80;
          function parseFriendlyAddress(src) {
            if (typeof src === 'string' && !Address.isFriendly(src)) {
              throw new Error('Unknown address type');
            }
            const data = Buffer.isBuffer(src) ? src : Buffer.from(src, 'base64'); // 1byte tag + 1byte workchain + 32 bytes hash + 2 byte crc
            if (data.length !== 36) {
              throw new Error('Unknown address type: byte length is not equal to 36');
            } // Prepare data
            const addr = data.subarray(0, 34);
            const crc = data.subarray(34, 36);
            const calcedCrc = (0, crc16_1.crc16)(addr);
            if (!(calcedCrc[0] === crc[0] && calcedCrc[1] === crc[1])) {
              throw new Error('Invalid checksum: ' + src);
            } // Parse tag
            let tag = addr[0];
            let isTestOnly = false;
            let isBounceable = false;
            if (tag & test_flag) {
              isTestOnly = true;
              tag = tag ^ test_flag;
            }
            if (tag !== bounceable_tag && tag !== non_bounceable_tag) throw "Unknown address tag";
            isBounceable = tag === bounceable_tag;
            let workchain = null;
            if (addr[1] === 0xff) {
              // TODO we should read signed integer here
              workchain = -1;
            } else {
              workchain = addr[1];
            }
            const hashPart = addr.subarray(2, 34);
            return {
              isTestOnly,
              isBounceable,
              workchain,
              hashPart
            };
          }
          class Address {
            static isAddress(src) {
              return src instanceof Address;
            }
            static isFriendly(source) {
              // Check length
              if (source.length !== 48) {
                return false;
              } // Check if address is valid base64
              if (!/[A-Za-z0-9+/_-]+/.test(source)) {
                return false;
              }
              return true;
            }
            static isRaw(source) {
              // Check if has delimiter
              if (source.indexOf(':') === -1) {
                return false;
              }
              let [wc, hash] = source.split(':'); // wc is not valid
              if (!Number.isInteger(parseFloat(wc))) {
                return false;
              } // hash is not valid
              if (!/[a-f0-9]+/.test(hash.toLowerCase())) {
                return false;
              } // has is not correct
              if (hash.length !== 64) {
                return false;
              }
              return true;
            }
            static normalize(source) {
              if (typeof source === 'string') {
                return Address.parse(source).toString();
              } else {
                return source.toString();
              }
            }
            static parse(source) {
              if (Address.isFriendly(source)) {
                return this.parseFriendly(source).address;
              } else if (Address.isRaw(source)) {
                return this.parseRaw(source);
              } else {
                throw new Error('Unknown address type: ' + source);
              }
            }
            static parseRaw(source) {
              let workChain = parseInt(source.split(":")[0]);
              let hash = Buffer.from(source.split(":")[1], 'hex');
              return new Address(workChain, hash);
            }
            static parseFriendly(source) {
              if (Buffer.isBuffer(source)) {
                let r = parseFriendlyAddress(source);
                return {
                  isBounceable: r.isBounceable,
                  isTestOnly: r.isTestOnly,
                  address: new Address(r.workchain, r.hashPart)
                };
              } else {
                let addr = source.replace(/\-/g, '+').replace(/_/g, '\/'); // Convert from url-friendly to true base64
                let r = parseFriendlyAddress(addr);
                return {
                  isBounceable: r.isBounceable,
                  isTestOnly: r.isTestOnly,
                  address: new Address(r.workchain, r.hashPart)
                };
              }
            }
            constructor(workChain, hash) {
              this.toRawString = () => {
                return this.workChain + ':' + this.hash.toString('hex');
              };
              this.toRaw = () => {
                const addressWithChecksum = Buffer.alloc(36);
                addressWithChecksum.set(this.hash);
                addressWithChecksum.set([this.workChain, this.workChain, this.workChain, this.workChain], 32);
                return addressWithChecksum;
              };
              this.toStringBuffer = args => {
                let testOnly = args && args.testOnly !== undefined ? args.testOnly : false;
                let bounceable = args && args.bounceable !== undefined ? args.bounceable : true;
                let tag = bounceable ? bounceable_tag : non_bounceable_tag;
                if (testOnly) {
                  tag |= test_flag;
                }
                const addr = Buffer.alloc(34);
                addr[0] = tag;
                addr[1] = this.workChain;
                addr.set(this.hash, 2);
                const addressWithChecksum = Buffer.alloc(36);
                addressWithChecksum.set(addr);
                addressWithChecksum.set((0, crc16_1.crc16)(addr), 34);
                return addressWithChecksum;
              };
              this.toString = args => {
                let urlSafe = args && args.urlSafe !== undefined ? args.urlSafe : true;
                let buffer = this.toStringBuffer(args);
                if (urlSafe) {
                  return buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_');
                } else {
                  return buffer.toString('base64');
                }
              };
              this[_a] = () => this.toString();
              if (hash.length !== 32) {
                throw new Error('Invalid address hash length: ' + hash.length);
              }
              this.workChain = workChain;
              this.hash = hash;
              Object.freeze(this);
            }
            equals(src) {
              if (src.workChain !== this.workChain) {
                return false;
              }
              return src.hash.equals(this.hash);
            }
          }
          exports.Address = Address;
          _a = symbol_inspect_1.default;
          function address(src) {
            return Address.parse(src);
          }
          exports.address = address; /***/
        },
        /***/8366: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          var _a;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ExternalAddress = void 0;
          const symbol_inspect_1 = __importDefault(__webpack_require__(4700));
          class ExternalAddress {
            static isAddress(src) {
              return src instanceof ExternalAddress;
            }
            constructor(value, bits) {
              this[_a] = () => this.toString();
              this.value = value;
              this.bits = bits;
            }
            toString() {
              return `External<${this.bits}:${this.value}>`;
            }
          }
          exports.ExternalAddress = ExternalAddress;
          _a = symbol_inspect_1.default; /***/
        },
        /***/1837: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.contractAddress = void 0;
          const Builder_1 = __webpack_require__(7856);
          const StateInit_1 = __webpack_require__(3545);
          const Address_1 = __webpack_require__(6575);
          function contractAddress(workchain, init) {
            let hash = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(init)).endCell().hash();
            return new Address_1.Address(workchain, hash);
          }
          exports.contractAddress = contractAddress; /***/
        },
        /***/8889: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.BitBuilder = void 0;
          const Address_1 = __webpack_require__(6575);
          const ExternalAddress_1 = __webpack_require__(8366);
          const BitString_1 = __webpack_require__(8261); /**
                                                         * Class for building bit strings
                                                         */
          class BitBuilder {
            constructor(size) {
              if (size === void 0) {
                size = 1023;
              }
              this._buffer = Buffer.alloc(Math.ceil(size / 8));
              this._length = 0;
            } /**
              * Current number of bits written
              */
            get length() {
              return this._length;
            } /**
              * Write a single bit
              * @param value bit to write, true or positive number for 1, false or zero or negative for 0
              */
            writeBit(value) {
              // Check overflow
              let n = this._length;
              if (n > this._buffer.length * 8) {
                throw new Error("BitBuilder overflow");
              } // Set bit
              if (value === true || value > 0) {
                this._buffer[n / 8 | 0] |= 1 << 7 - n % 8;
              } // Advance
              this._length++;
            } /**
              * Copy bits from BitString
              * @param src source bits
              */
            writeBits(src) {
              for (let i = 0; i < src.length; i++) {
                this.writeBit(src.at(i));
              }
            } /**
              * Write bits from buffer
              * @param src source buffer
              */
            writeBuffer(src) {
              // Special case for aligned offsets
              if (this._length % 8 === 0) {
                if (this._length + src.length * 8 > this._buffer.length * 8) {
                  throw new Error("BitBuilder overflow");
                }
                src.copy(this._buffer, this._length / 8);
                this._length += src.length * 8;
              } else {
                for (let i = 0; i < src.length; i++) {
                  this.writeUint(src[i], 8);
                }
              }
            } /**
              * Write uint value
              * @param value value as bigint or number
              * @param bits number of bits to write
              */
            writeUint(value, bits) {
              // Special case for 8 bits
              if (bits === 8 && this._length % 8 === 0) {
                let v = Number(value);
                if (v < 0 || v > 255 || !Number.isSafeInteger(v)) {
                  throw Error(`value is out of range for ${bits} bits. Got ${value}`);
                }
                this._buffer[this._length / 8] = Number(value);
                this._length += 8;
                return;
              } // Special case for 16 bits
              if (bits === 16 && this._length % 8 === 0) {
                let v = Number(value);
                if (v < 0 || v > 65536 || !Number.isSafeInteger(v)) {
                  throw Error(`value is out of range for ${bits} bits. Got ${value}`);
                }
                this._buffer[this._length / 8] = v >> 8;
                this._buffer[this._length / 8 + 1] = v & 0xff;
                this._length += 16;
                return;
              } // Generic case
              let v = BigInt(value);
              if (bits < 0 || !Number.isSafeInteger(bits)) {
                throw Error(`invalid bit length. Got ${bits}`);
              } // Corner case for zero bits
              if (bits === 0) {
                if (value !== 0n) {
                  throw Error(`value is not zero for ${bits} bits. Got ${value}`);
                } else {
                  return;
                }
              } // Check input
              let vBits = 1n << BigInt(bits);
              if (v < 0 || v >= vBits) {
                throw Error(`bitLength is too small for a value ${value}. Got ${bits}`);
              } // Convert number to bits
              let b = [];
              while (v > 0) {
                b.push(v % 2n === 1n);
                v /= 2n;
              } // Write bits
              for (let i = 0; i < bits; i++) {
                let off = bits - i - 1;
                if (off < b.length) {
                  this.writeBit(b[off]);
                } else {
                  this.writeBit(false);
                }
              }
            } /**
              * Write int value
              * @param value value as bigint or number
              * @param bits number of bits to write
              */
            writeInt(value, bits) {
              let v = BigInt(value);
              if (bits < 0 || !Number.isSafeInteger(bits)) {
                throw Error(`invalid bit length. Got ${bits}`);
              } // Corner case for zero bits
              if (bits === 0) {
                if (value !== 0n) {
                  throw Error(`value is not zero for ${bits} bits. Got ${value}`);
                } else {
                  return;
                }
              } // Corner case for one bit
              if (bits === 1) {
                if (value !== -1n && value !== 0n) {
                  throw Error(`value is not zero or -1 for ${bits} bits. Got ${value}`);
                } else {
                  this.writeBit(value === -1n);
                  return;
                }
              } // Check input
              let vBits = 1n << BigInt(bits) - 1n;
              if (v < -vBits || v >= vBits) {
                throw Error(`value is out of range for ${bits} bits. Got ${value}`);
              } // Write sign
              if (v < 0) {
                this.writeBit(true);
                v = vBits + v;
              } else {
                this.writeBit(false);
              } // Write value
              this.writeUint(v, bits - 1);
            } /**
              * Wrtie var uint value, used for serializing coins
              * @param value value to write as bigint or number
              * @param bits header bits to write size
              */
            writeVarUint(value, bits) {
              let v = BigInt(value);
              if (bits < 0 || !Number.isSafeInteger(bits)) {
                throw Error(`invalid bit length. Got ${bits}`);
              }
              if (v < 0) {
                throw Error(`value is negative. Got ${value}`);
              } // Corner case for zero
              if (v === 0n) {
                // Write zero size
                this.writeUint(0, bits);
                return;
              } // Calculate size
              const sizeBytes = Math.ceil(v.toString(2).length / 8); // Fastest way in most environments
              const sizeBits = sizeBytes * 8; // Write size
              this.writeUint(sizeBytes, bits); // Write number
              this.writeUint(v, sizeBits);
            } /**
              * Wrtie var int value, used for serializing coins
              * @param value value to write as bigint or number
              * @param bits header bits to write size
              */
            writeVarInt(value, bits) {
              let v = BigInt(value);
              if (bits < 0 || !Number.isSafeInteger(bits)) {
                throw Error(`invalid bit length. Got ${bits}`);
              } // Corner case for zero
              if (v === 0n) {
                // Write zero size
                this.writeUint(0, bits);
                return;
              } // Calculate size
              let v2 = v > 0 ? v : -v;
              const sizeBytes = 1 + Math.ceil(v2.toString(2).length / 8); // Fastest way in most environments
              const sizeBits = sizeBytes * 8; // Write size
              this.writeUint(sizeBytes, bits); // Write number
              this.writeInt(v, sizeBits);
            } /**
              * Write coins in var uint format
              * @param amount amount to write
              */
            writeCoins(amount) {
              this.writeVarUint(amount, 4);
            } /**
              * Write address
              * @param address write address or address external
              */
            writeAddress(address) {
              // Is empty address
              if (address === null || address === undefined) {
                this.writeUint(0, 2); // Empty address
                return;
              } // Is Internal Address
              if (Address_1.Address.isAddress(address)) {
                this.writeUint(2, 2); // Internal address
                this.writeUint(0, 1); // No anycast
                this.writeInt(address.workChain, 8);
                this.writeBuffer(address.hash);
                return;
              } // Is External Address
              if (ExternalAddress_1.ExternalAddress.isAddress(address)) {
                this.writeUint(1, 2); // External address
                this.writeUint(address.bits, 9);
                this.writeUint(address.value, address.bits);
                return;
              } // Invalid address
              throw Error(`Invalid address. Got ${address}`);
            } /**
              * Build BitString
              * @returns result bit string
              */
            build() {
              return new BitString_1.BitString(this._buffer, 0, this._length);
            } /**
              * Build into Buffer
              * @returns result buffer
              */
            buffer() {
              if (this._length % 8 !== 0) {
                throw new Error("BitBuilder buffer is not byte aligned");
              }
              return this._buffer.subarray(0, this._length / 8);
            }
          }
          exports.BitBuilder = BitBuilder; /***/
        },
        /***/2391: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.BitReader = void 0;
          const Address_1 = __webpack_require__(6575);
          const ExternalAddress_1 = __webpack_require__(8366); /**
                                                               * Class for reading bit strings
                                                               */
          class BitReader {
            constructor(bits, offset) {
              if (offset === void 0) {
                offset = 0;
              }
              this._checkpoints = [];
              this._bits = bits;
              this._offset = offset;
            } /**
              * Offset in source bit string
              */
            get offset() {
              return this._offset;
            } /**
              * Number of bits remaining
              */
            get remaining() {
              return this._bits.length - this._offset;
            } /**
              * Skip bits
              * @param bits number of bits to skip
              */
            skip(bits) {
              if (bits < 0 || this._offset + bits > this._bits.length) {
                throw new Error(`Index ${this._offset + bits} is out of bounds`);
              }
              this._offset += bits;
            } /**
              * Reset to the beginning or latest checkpoint
              */
            reset() {
              if (this._checkpoints.length > 0) {
                this._offset = this._checkpoints.pop();
              } else {
                this._offset = 0;
              }
            } /**
              * Save checkpoint
              */
            save() {
              this._checkpoints.push(this._offset);
            } /**
              * Load a single bit
              * @returns true if the bit is set, false otherwise
              */
            loadBit() {
              let r = this._bits.at(this._offset);
              this._offset++;
              return r;
            } /**
              * Preload bit
              * @returns true if the bit is set, false otherwise
              */
            preloadBit() {
              return this._bits.at(this._offset);
            } /**
              * Load bit string
              * @param bits number of bits to read
              * @returns new bitstring
              */
            loadBits(bits) {
              let r = this._bits.substring(this._offset, bits);
              this._offset += bits;
              return r;
            } /**
              * Preload bit string
              * @param bits number of bits to read
              * @returns new bitstring
              */
            preloadBits(bits) {
              return this._bits.substring(this._offset, bits);
            } /**
              * Load buffer
              * @param bytes number of bytes
              * @returns new buffer
              */
            loadBuffer(bytes) {
              let buf = this._preloadBuffer(bytes, this._offset);
              this._offset += bytes * 8;
              return buf;
            } /**
              * Preload buffer
              * @param bytes number of bytes
              * @returns new buffer
              */
            preloadBuffer(bytes) {
              return this._preloadBuffer(bytes, this._offset);
            } /**
              * Load uint value
              * @param bits uint bits
              * @returns read value as number
              */
            loadUint(bits) {
              return Number(this.loadUintBig(bits));
            } /**
              * Load uint value as bigint
              * @param bits uint bits
              * @returns read value as bigint
              */
            loadUintBig(bits) {
              let loaded = this.preloadUintBig(bits);
              this._offset += bits;
              return loaded;
            } /**
              * Preload uint value
              * @param bits uint bits
              * @returns read value as number
              */
            preloadUint(bits) {
              return Number(this._preloadUint(bits, this._offset));
            } /**
              * Preload uint value as bigint
              * @param bits uint bits
              * @returns read value as bigint
              */
            preloadUintBig(bits) {
              return this._preloadUint(bits, this._offset);
            } /**
              * Load int value
              * @param bits int bits
              * @returns read value as bigint
              */
            loadInt(bits) {
              let res = this._preloadInt(bits, this._offset);
              this._offset += bits;
              return Number(res);
            } /**
              * Load int value as bigint
              * @param bits int bits
              * @returns read value as bigint
              */
            loadIntBig(bits) {
              let res = this._preloadInt(bits, this._offset);
              this._offset += bits;
              return res;
            } /**
              * Preload int value
              * @param bits int bits
              * @returns read value as bigint
              */
            preloadInt(bits) {
              return Number(this._preloadInt(bits, this._offset));
            } /**
              * Preload int value
              * @param bits int bits
              * @returns read value as bigint
              */
            preloadIntBig(bits) {
              return this._preloadInt(bits, this._offset);
            } /**
              * Load varuint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            loadVarUint(bits) {
              let size = Number(this.loadUint(bits));
              return Number(this.loadUintBig(size * 8));
            } /**
              * Load varuint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            loadVarUintBig(bits) {
              let size = Number(this.loadUint(bits));
              return this.loadUintBig(size * 8);
            } /**
              * Preload varuint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            preloadVarUint(bits) {
              let size = Number(this._preloadUint(bits, this._offset));
              return Number(this._preloadUint(size * 8, this._offset + bits));
            } /**
              * Preload varuint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            preloadVarUintBig(bits) {
              let size = Number(this._preloadUint(bits, this._offset));
              return this._preloadUint(size * 8, this._offset + bits);
            } /**
              * Load varint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            loadVarInt(bits) {
              let size = Number(this.loadUint(bits));
              return Number(this.loadIntBig(size * 8));
            } /**
              * Load varint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            loadVarIntBig(bits) {
              let size = Number(this.loadUint(bits));
              return this.loadIntBig(size * 8);
            } /**
              * Preload varint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            preloadVarInt(bits) {
              let size = Number(this._preloadUint(bits, this._offset));
              return Number(this._preloadInt(size * 8, this._offset + bits));
            } /**
              * Preload varint value
              * @param bits number of bits to read the size
              * @returns read value as bigint
              */
            preloadVarIntBig(bits) {
              let size = Number(this._preloadUint(bits, this._offset));
              return this._preloadInt(size * 8, this._offset + bits);
            } /**
              * Load coins value
              * @returns read value as bigint
              */
            loadCoins() {
              return this.loadVarUintBig(4);
            } /**
              * Preload coins value
              * @returns read value as bigint
              */
            preloadCoins() {
              return this.preloadVarUintBig(4);
            } /**
              * Load Address
              * @returns Address
              */
            loadAddress() {
              let type = Number(this._preloadUint(2, this._offset));
              if (type === 2) {
                return this._loadInternalAddress();
              } else {
                throw new Error("Invalid address: " + type);
              }
            } /**
              * Load internal address
              * @returns Address or null
              */
            loadMaybeAddress() {
              let type = Number(this._preloadUint(2, this._offset));
              if (type === 0) {
                this._offset += 2;
                return null;
              } else if (type === 2) {
                return this._loadInternalAddress();
              } else {
                throw new Error("Invalid address");
              }
            } /**
              * Load external address
              * @returns ExternalAddress
              */
            loadExternalAddress() {
              let type = Number(this._preloadUint(2, this._offset));
              if (type === 1) {
                return this._loadExternalAddress();
              } else {
                throw new Error("Invalid address");
              }
            } /**
              * Load external address
              * @returns ExternalAddress or null
              */
            loadMaybeExternalAddress() {
              let type = Number(this._preloadUint(2, this._offset));
              if (type === 0) {
                this._offset += 2;
                return null;
              } else if (type === 1) {
                return this._loadExternalAddress();
              } else {
                throw new Error("Invalid address");
              }
            } /**
              * Read address of any type
              * @returns Address or ExternalAddress or null
              */
            loadAddressAny() {
              let type = Number(this._preloadUint(2, this._offset));
              if (type === 0) {
                this._offset += 2;
                return null;
              } else if (type === 2) {
                return this._loadInternalAddress();
              } else if (type === 1) {
                return this._loadExternalAddress();
              } else if (type === 3) {
                throw Error('Unsupported');
              } else {
                throw Error('Unreachable');
              }
            } /**
              * Load bit string that was padded to make it byte alligned. Used in BOC serialization
              * @param bytes number of bytes to read
              */
            loadPaddedBits(bits) {
              // Check that number of bits is byte alligned
              if (bits % 8 !== 0) {
                throw new Error("Invalid number of bits");
              } // Skip padding
              let length = bits;
              while (true) {
                if (this._bits.at(this._offset + length - 1)) {
                  length--;
                  break;
                } else {
                  length--;
                }
              } // Read substring
              let r = this._bits.substring(this._offset, length);
              this._offset += bits;
              return r;
            } /**
              * Clone BitReader
              */
            clone() {
              return new BitReader(this._bits, this._offset);
            } /**
              * Preload int from specific offset
              * @param bits bits to preload
              * @param offset offset to start from
              * @returns read value as bigint
              */
            _preloadInt(bits, offset) {
              if (bits == 0) {
                return 0n;
              }
              let sign = this._bits.at(offset);
              let res = 0n;
              for (let i = 0; i < bits - 1; i++) {
                if (this._bits.at(offset + 1 + i)) {
                  res += 1n << BigInt(bits - i - 1 - 1);
                }
              }
              if (sign) {
                res = res - (1n << BigInt(bits - 1));
              }
              return res;
            } /**
              * Preload uint from specific offset
              * @param bits bits to preload
              * @param offset offset to start from
              * @returns read value as bigint
              */
            _preloadUint(bits, offset) {
              if (bits == 0) {
                return 0n;
              }
              let res = 0n;
              for (let i = 0; i < bits; i++) {
                if (this._bits.at(offset + i)) {
                  res += 1n << BigInt(bits - i - 1);
                }
              }
              return res;
            }
            _preloadBuffer(bytes, offset) {
              // Try to load fast
              let fastBuffer = this._bits.subbuffer(offset, bytes * 8);
              if (fastBuffer) {
                return fastBuffer;
              } // Load slow
              let buf = Buffer.alloc(bytes);
              for (let i = 0; i < bytes; i++) {
                buf[i] = Number(this._preloadUint(8, offset + i * 8));
              }
              return buf;
            }
            _loadInternalAddress() {
              let type = Number(this._preloadUint(2, this._offset));
              if (type !== 2) {
                throw Error('Invalid address');
              } // No Anycast supported
              if (this._preloadUint(1, this._offset + 2) !== 0n) {
                throw Error('Invalid address');
              } // Read address
              let wc = Number(this._preloadInt(8, this._offset + 3));
              let hash = this._preloadBuffer(32, this._offset + 11); // Update offset
              this._offset += 267;
              return new Address_1.Address(wc, hash);
            }
            _loadExternalAddress() {
              let type = Number(this._preloadUint(2, this._offset));
              if (type !== 1) {
                throw Error('Invalid address');
              } // Load length
              let bits = Number(this._preloadUint(9, this._offset + 2)); // Load address
              let value = this._preloadUint(bits, this._offset + 11); // Update offset
              this._offset += 11 + bits;
              return new ExternalAddress_1.ExternalAddress(value, bits);
            }
          }
          exports.BitReader = BitReader; /***/
        },
        /***/8261: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          var _a;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.BitString = void 0;
          const paddedBits_1 = __webpack_require__(355);
          const symbol_inspect_1 = __importDefault(__webpack_require__(4700)); /**
                                                                               * BitString is a class that represents a bitstring in a buffer with a specified offset and length
                                                                               */
          class BitString {
            /**
            * Checks if supplied object is BitString
            * @param src is unknow object
            * @returns true if object is BitString and false otherwise
            **/
            static isBitString(src) {
              return src instanceof BitString;
            } /**
              * Constructing BitString from a buffer
              * @param data data that contains the bitstring data. NOTE: We are expecting this buffer to be NOT modified
              * @param offset offset in bits from the start of the buffer
              * @param length length of the bitstring in bits
              */
            constructor(data, offset, length) {
              this[_a] = () => this.toString(); // Check bounds
              if (length < 0) {
                throw new Error(`Length ${length} is out of bounds`);
              }
              this._length = length;
              this._data = data;
              this._offset = offset;
            } /**
              * Returns the length of the bitstring
              */
            get length() {
              return this._length;
            } /**
              * Returns the bit at the specified index
              * @param index index of the bit
              * @throws Error if index is out of bounds
              * @returns true if the bit is set, false otherwise
              */
            at(index) {
              // Check bounds
              if (index >= this._length) {
                throw new Error(`Index ${index} > ${this._length} is out of bounds`);
              }
              if (index < 0) {
                throw new Error(`Index ${index} < 0 is out of bounds`);
              } // Calculcate offsets
              let byteIndex = this._offset + index >> 3;
              let bitIndex = 7 - (this._offset + index) % 8; // NOTE: We are using big endian
              // Return the bit
              return (this._data[byteIndex] & 1 << bitIndex) !== 0;
            } /**
              * Get a subscring of the bitstring
              * @param offset
              * @param length
              * @returns
              */
            substring(offset, length) {
              // Check offset
              if (offset > this._length) {
                throw new Error(`Offset(${offset}) > ${this._length} is out of bounds`);
              }
              if (offset < 0) {
                throw new Error(`Offset(${offset}) < 0 is out of bounds`);
              } // Corner case of empty string
              if (length === 0) {
                return BitString.EMPTY;
              }
              if (offset + length > this._length) {
                throw new Error(`Offset ${offset} + Length ${length} > ${this._length} is out of bounds`);
              } // Create substring
              return new BitString(this._data, this._offset + offset, length);
            } /**
              * Try to get a buffer from the bitstring without allocations
              * @param offset offset in bits
              * @param length length in bits
              * @returns buffer if the bitstring is aligned to bytes, null otherwise
              */
            subbuffer(offset, length) {
              // Check offset
              if (offset > this._length) {
                throw new Error(`Offset ${offset} is out of bounds`);
              }
              if (offset < 0) {
                throw new Error(`Offset ${offset} is out of bounds`);
              }
              if (offset + length > this._length) {
                throw new Error(`Offset + Lenght = ${offset + length} is out of bounds`);
              } // Check alignment
              if (length % 8 !== 0) {
                return null;
              }
              if ((this._offset + offset) % 8 !== 0) {
                return null;
              } // Create substring
              let start = this._offset + offset >> 3;
              let end = start + (length >> 3);
              return this._data.subarray(start, end);
            } /**
              * Checks for equality
              * @param b other bitstring
              * @returns true if the bitstrings are equal, false otherwise
              */
            equals(b) {
              if (this._length !== b._length) {
                return false;
              }
              for (let i = 0; i < this._length; i++) {
                if (this.at(i) !== b.at(i)) {
                  return false;
                }
              }
              return true;
            } /**
              * Format to canonical string
              * @returns formatted bits as a string
              */
            toString() {
              const padded = (0, paddedBits_1.bitsToPaddedBuffer)(this);
              if (this._length % 4 === 0) {
                const s = padded.subarray(0, Math.ceil(this._length / 8)).toString('hex').toUpperCase();
                if (this._length % 8 === 0) {
                  return s;
                } else {
                  return s.substring(0, s.length - 1);
                }
              } else {
                const hex = padded.toString('hex').toUpperCase();
                if (this._length % 8 <= 4) {
                  return hex.substring(0, hex.length - 1) + '_';
                } else {
                  return hex + '_';
                }
              }
            }
          }
          exports.BitString = BitString;
          _a = symbol_inspect_1.default;
          BitString.EMPTY = new BitString(Buffer.alloc(0), 0, 0); /***/
        },
        /***/7856: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Builder = exports.beginCell = void 0;
          const BitBuilder_1 = __webpack_require__(8889);
          const Cell_1 = __webpack_require__(9567);
          const strings_1 = __webpack_require__(3279); /**
                                                       * Start building a cell
                                                       * @returns a new builder
                                                       */
          function beginCell() {
            return new Builder();
          }
          exports.beginCell = beginCell; /**
                                         * Builder for Cells
                                         */
          class Builder {
            constructor() {
              this._bits = new BitBuilder_1.BitBuilder();
              this._refs = [];
            } /**
              * Bits written so far
              */
            get bits() {
              return this._bits.length;
            } /**
              * References written so far
              */
            get refs() {
              return this._refs.length;
            } /**
              * Available bits
              */
            get availableBits() {
              return 1023 - this.bits;
            } /**
              * Available references
              */
            get availableRefs() {
              return 4 - this.refs;
            } /**
              * Write a single bit
              * @param value bit to write, true or positive number for 1, false or zero or negative for 0
              * @returns this builder
              */
            storeBit(value) {
              this._bits.writeBit(value);
              return this;
            } /**
              * Write bits from BitString
              * @param src source bits
              * @returns this builder
              */
            storeBits(src) {
              this._bits.writeBits(src);
              return this;
            } /**
              * Store Buffer
              * @param src source buffer
              * @param bytes optional number of bytes to write
              * @returns this builder
              */
            storeBuffer(src, bytes) {
              if (bytes !== undefined && bytes !== null) {
                if (src.length !== bytes) {
                  throw Error(`Buffer length ${src.length} is not equal to ${bytes}`);
                }
              }
              this._bits.writeBuffer(src);
              return this;
            } /**
              * Store Maybe Buffer
              * @param src source buffer or null
              * @param bytes optional number of bytes to write
              * @returns this builder
              */
            storeMaybeBuffer(src, bytes) {
              if (src !== null) {
                this.storeBit(1);
                this.storeBuffer(src, bytes);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store uint value
              * @param value value as bigint or number
              * @param bits number of bits to write
              * @returns this builder
              */
            storeUint(value, bits) {
              this._bits.writeUint(value, bits);
              return this;
            } /**
              * Store maybe uint value
              * @param value value as bigint or number, null or undefined
              * @param bits number of bits to write
              * @returns this builder
              */
            storeMaybeUint(value, bits) {
              if (value !== null && value !== undefined) {
                this.storeBit(1);
                this.storeUint(value, bits);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store int value
              * @param value value as bigint or number
              * @param bits number of bits to write
              * @returns this builder
              */
            storeInt(value, bits) {
              this._bits.writeInt(value, bits);
              return this;
            } /**
              * Store maybe int value
              * @param value value as bigint or number, null or undefined
              * @param bits number of bits to write
              * @returns this builder
              */
            storeMaybeInt(value, bits) {
              if (value !== null && value !== undefined) {
                this.storeBit(1);
                this.storeInt(value, bits);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store varuint value
              * @param value value as bigint or number
              * @param bits number of bits to write to header
              * @returns this builder
              */
            storeVarUint(value, bits) {
              this._bits.writeVarUint(value, bits);
              return this;
            } /**
              * Store maybe varuint value
              * @param value value as bigint or number, null or undefined
              * @param bits number of bits to write to header
              * @returns this builder
              */
            storeMaybeVarUint(value, bits) {
              if (value !== null && value !== undefined) {
                this.storeBit(1);
                this.storeVarUint(value, bits);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store varint value
              * @param value value as bigint or number
              * @param bits number of bits to write to header
              * @returns this builder
              */
            storeVarInt(value, bits) {
              this._bits.writeVarInt(value, bits);
              return this;
            } /**
              * Store maybe varint value
              * @param value value as bigint or number, null or undefined
              * @param bits number of bits to write to header
              * @returns this builder
              */
            storeMaybeVarInt(value, bits) {
              if (value !== null && value !== undefined) {
                this.storeBit(1);
                this.storeVarInt(value, bits);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store coins value
              * @param amount amount of coins
              * @returns this builder
              */
            storeCoins(amount) {
              this._bits.writeCoins(amount);
              return this;
            } /**
              * Store maybe coins value
              * @param amount amount of coins, null or undefined
              * @returns this builder
              */
            storeMaybeCoins(amount) {
              if (amount !== null && amount !== undefined) {
                this.storeBit(1);
                this.storeCoins(amount);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store address
              * @param addres address to store
              * @returns this builder
              */
            storeAddress(address) {
              this._bits.writeAddress(address);
              return this;
            } /**
              * Store reference
              * @param cell cell or builder to store
              * @returns this builder
              */
            storeRef(cell) {
              // Check refs
              if (this._refs.length >= 4) {
                throw new Error("Too many references");
              } // Store reference
              if (cell instanceof Cell_1.Cell) {
                this._refs.push(cell);
              } else if (cell instanceof Builder) {
                this._refs.push(cell.endCell());
              } else {
                throw new Error("Invalid argument");
              }
              return this;
            } /**
              * Store reference if not null
              * @param cell cell or builder to store
              * @returns this builder
              */
            storeMaybeRef(cell) {
              if (cell) {
                this.storeBit(1);
                this.storeRef(cell);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store slice it in this builder
              * @param src source slice
              */
            storeSlice(src) {
              let c = src.clone();
              if (c.remainingBits > 0) {
                this.storeBits(c.loadBits(c.remainingBits));
              }
              while (c.remainingRefs > 0) {
                this.storeRef(c.loadRef());
              }
              return this;
            } /**
              * Store slice in this builder if not null
              * @param src source slice
              */
            storeMaybeSlice(src) {
              if (src) {
                this.storeBit(1);
                this.storeSlice(src);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store builder
              * @param src builder to store
              * @returns this builder
              */
            storeBuilder(src) {
              return this.storeSlice(src.endCell().beginParse());
            } /**
              * Store builder if not null
              * @param src builder to store
              * @returns this builder
              */
            storeMaybeBuilder(src) {
              if (src) {
                this.storeBit(1);
                this.storeBuilder(src);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store writer or builder
              * @param writer writer or builder to store
              * @returns this builder
              */
            storeWritable(writer) {
              if (typeof writer === 'object') {
                writer.writeTo(this);
              } else {
                writer(this);
              }
              return this;
            } /**
              * Store writer or builder if not null
              * @param writer writer or builder to store
              * @returns this builder
              */
            storeMaybeWritable(writer) {
              if (writer) {
                this.storeBit(1);
                this.storeWritable(writer);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store object in this builder
              * @param writer Writable or writer functuin
              */
            store(writer) {
              this.storeWritable(writer);
              return this;
            } /**
              * Store string tail
              * @param src source string
              * @returns this builder
              */
            storeStringTail(src) {
              (0, strings_1.writeString)(src, this);
              return this;
            } /**
              * Store string tail
              * @param src source string
              * @returns this builder
              */
            storeMaybeStringTail(src) {
              if (src !== null && src !== undefined) {
                this.storeBit(1);
                (0, strings_1.writeString)(src, this);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store string tail in ref
              * @param src source string
              * @returns this builder
              */
            storeStringRefTail(src) {
              this.storeRef(beginCell().storeStringTail(src));
              return this;
            } /**
              * Store maybe string tail in ref
              * @param src source string
              * @returns this builder
              */
            storeMaybeStringRefTail(src) {
              if (src !== null && src !== undefined) {
                this.storeBit(1);
                this.storeStringRefTail(src);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store dictionary in this builder
              * @param dict dictionary to store
              * @returns this builder
              */
            storeDict(dict, key, value) {
              if (dict) {
                dict.store(this, key, value);
              } else {
                this.storeBit(0);
              }
              return this;
            } /**
              * Store dictionary in this builder directly
              * @param dict dictionary to store
              * @returns this builder
              */
            storeDictDirect(dict, key, value) {
              dict.storeDirect(this, key, value);
              return this;
            } /**
              * Complete cell
              * @returns cell
              */
            endCell() {
              return new Cell_1.Cell({
                bits: this._bits.build(),
                refs: this._refs
              });
            } /**
              * Convert to cell
              * @returns cell
              */
            asCell() {
              return this.endCell();
            } /**
              * Convert to slice
              * @returns slice
              */
            asSlice() {
              return this.endCell().beginParse();
            }
          }
          exports.Builder = Builder; /***/
        },
        /***/9567: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          var _a;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Cell = void 0;
          const symbol_inspect_1 = __importDefault(__webpack_require__(4700));
          const BitString_1 = __webpack_require__(8261);
          const CellType_1 = __webpack_require__(7623);
          const Slice_1 = __webpack_require__(7681);
          const resolveExotic_1 = __webpack_require__(6390);
          const wonderCalculator_1 = __webpack_require__(2173);
          const serialization_1 = __webpack_require__(3860);
          const BitReader_1 = __webpack_require__(2391);
          const Builder_1 = __webpack_require__(7856); /**
                                                       * Cell as described in TVM spec
                                                       */
          class Cell {
            /**
            * Deserialize cells from BOC
            * @param src source buffer
            * @returns array of cells
            */
            static fromBoc(src) {
              return (0, serialization_1.deserializeBoc)(src);
            } /**
              * Helper class that deserializes a single cell from BOC in base64
              * @param src source string
              */
            static fromBase64(src) {
              let parsed = Cell.fromBoc(Buffer.from(src, 'base64'));
              if (parsed.length !== 1) {
                throw new Error("Deserialized more than one cell");
              }
              return parsed[0];
            }
            constructor(opts) {
              var _this3 = this; // Level and depth information
              this._hashes = [];
              this._depths = []; /**
                                 * Beging cell parsing
                                 * @returns a new slice
                                 */
              this.beginParse = function (allowExotic) {
                if (allowExotic === void 0) {
                  allowExotic = false;
                }
                if (_this3.isExotic && !allowExotic) {
                  throw new Error("Exotic cells cannot be parsed");
                }
                return new Slice_1.Slice(new BitReader_1.BitReader(_this3.bits), _this3.refs);
              }; /**
                 * Get cell hash
                 * @param level level
                 * @returns cell hash
                 */
              this.hash = function (level) {
                if (level === void 0) {
                  level = 3;
                }
                return _this3._hashes[Math.min(_this3._hashes.length - 1, level)];
              }; /**
                 * Get cell depth
                 * @param level level
                 * @returns cell depth
                 */
              this.depth = function (level) {
                if (level === void 0) {
                  level = 3;
                }
                return _this3._depths[Math.min(_this3._depths.length - 1, level)];
              }; /**
                 * Get cell level
                 * @returns cell level
                 */
              this.level = () => {
                return this.mask.level;
              }; /**
                 * Checks cell to be euqal to another cell
                 * @param other other cell
                 * @returns true if cells are equal
                 */
              this.equals = other => {
                return this.hash().equals(other.hash());
              };
              this[_a] = () => this.toString(); // Resolve bits
              let bits = BitString_1.BitString.EMPTY;
              if (opts && opts.bits) {
                bits = opts.bits;
              } // Resolve refs
              let refs = [];
              if (opts && opts.refs) {
                refs = [...opts.refs];
              } // Resolve type
              let hashes;
              let depths;
              let mask;
              let type = CellType_1.CellType.Ordinary;
              if (opts && opts.exotic) {
                // Resolve exotic cell
                let resolved = (0, resolveExotic_1.resolveExotic)(bits, refs); // Perform wonders
                let wonders = (0, wonderCalculator_1.wonderCalculator)(resolved.type, bits, refs); // Copy results
                mask = wonders.mask;
                depths = wonders.depths;
                hashes = wonders.hashes;
                type = resolved.type;
              } else {
                // Check correctness
                if (refs.length > 4) {
                  throw new Error("Invalid number of references");
                }
                if (bits.length > 1023) {
                  throw new Error(`Bits overflow: ${bits.length} > 1023`);
                } // Perform wonders
                let wonders = (0, wonderCalculator_1.wonderCalculator)(CellType_1.CellType.Ordinary, bits, refs); // Copy results
                mask = wonders.mask;
                depths = wonders.depths;
                hashes = wonders.hashes;
                type = CellType_1.CellType.Ordinary;
              } // Set fields
              this.type = type;
              this.bits = bits;
              this.refs = refs;
              this.mask = mask;
              this._depths = depths;
              this._hashes = hashes;
              Object.freeze(this);
              Object.freeze(this.refs);
              Object.freeze(this.bits);
              Object.freeze(this.mask);
              Object.freeze(this._depths);
              Object.freeze(this._hashes);
            } /**
              * Check if cell is exotic
              */
            get isExotic() {
              return this.type !== CellType_1.CellType.Ordinary;
            } /**
              * Serializes cell to BOC
              * @param opts options
              */
            toBoc(opts) {
              let idx = opts && opts.idx !== null && opts.idx !== undefined ? opts.idx : false;
              let crc32 = opts && opts.crc32 !== null && opts.crc32 !== undefined ? opts.crc32 : true;
              return (0, serialization_1.serializeBoc)(this, {
                idx,
                crc32
              });
            } /**
              * Format cell to string
              * @param indent indentation
              * @returns string representation
              */
            toString(indent) {
              let id = indent || '';
              let t = 'x';
              if (this.isExotic) {
                if (this.type === CellType_1.CellType.MerkleProof) {
                  t = 'p';
                } else if (this.type === CellType_1.CellType.MerkleUpdate) {
                  t = 'u';
                } else if (this.type === CellType_1.CellType.PrunedBranch) {
                  t = 'p';
                }
              }
              let s = id + (this.isExotic ? t : 'x') + '{' + this.bits.toString() + '}';
              for (let k in this.refs) {
                const i = this.refs[k];
                s += '\n' + i.toString(id + ' ');
              }
              return s;
            } /**
              * Covnert cell to slice
              * @returns slice
              */
            asSlice() {
              return this.beginParse();
            } /**
              * Convert cell to a builder that has this cell stored
              * @returns builder
              */
            asBuilder() {
              return (0, Builder_1.beginCell)().storeSlice(this.asSlice());
            }
          }
          exports.Cell = Cell;
          _a = symbol_inspect_1.default;
          Cell.EMPTY = new Cell(); /***/
        },
        /***/7623: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.CellType = void 0;
          (function (CellType) {
            CellType[CellType["Ordinary"] = -1] = "Ordinary";
            CellType[CellType["PrunedBranch"] = 1] = "PrunedBranch";
            CellType[CellType["Library"] = 2] = "Library";
            CellType[CellType["MerkleProof"] = 3] = "MerkleProof";
            CellType[CellType["MerkleUpdate"] = 4] = "MerkleUpdate";
          })(exports.CellType || (exports.CellType = {})); /***/
        },
        /***/7681: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          var _a;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Slice = void 0;
          const symbol_inspect_1 = __importDefault(__webpack_require__(4700));
          const Dictionary_1 = __webpack_require__(5189);
          const Builder_1 = __webpack_require__(7856);
          const strings_1 = __webpack_require__(3279); /**
                                                       * Slice is a class that allows to read cell data
                                                       */
          class Slice {
            constructor(reader, refs) {
              this[_a] = () => this.toString();
              this._reader = reader.clone();
              this._refs = [...refs];
              this._refsOffset = 0;
            } /**
              * Get remaining bits
              */
            get remainingBits() {
              return this._reader.remaining;
            } /**
              * Get offset bits
              */
            get offsetBits() {
              return this._reader.offset;
            } /**
              * Get remaining refs
              */
            get remainingRefs() {
              return this._refs.length - this._refsOffset;
            } /**
              * Get offset refs
              */
            get offsetRefs() {
              return this._refsOffset;
            } /**
              * Skip bits
              * @param bits
              */
            skip(bits) {
              this._reader.skip(bits);
              return this;
            } /**
              * Load a single bit
              * @returns true or false depending on the bit value
              */
            loadBit() {
              return this._reader.loadBit();
            } /**
              * Preload a signle bit
              * @returns true or false depending on the bit value
              */
            preloadBit() {
              return this._reader.preloadBit();
            } /**
              * Load a boolean
              * @returns true or false depending on the bit value
              */
            loadBoolean() {
              return this.loadBit();
            } /**
              * Load maybe boolean
              * @returns true or false depending on the bit value or null
              */
            loadMaybeBoolean() {
              if (this.loadBit()) {
                return this.loadBoolean();
              } else {
                return null;
              }
            } /**
              * Load bits as a new BitString
              * @param bits number of bits to read
              * @returns new BitString
              */
            loadBits(bits) {
              return this._reader.loadBits(bits);
            } /**
              * Preload bits as a new BitString
              * @param bits number of bits to read
              * @returns new BitString
              */
            preloadBits(bits) {
              return this._reader.preloadBits(bits);
            } /**
              * Load uint
              * @param bits number of bits to read
              * @returns uint value
              */
            loadUint(bits) {
              return this._reader.loadUint(bits);
            } /**
              * Load uint
              * @param bits number of bits to read
              * @returns uint value
              */
            loadUintBig(bits) {
              return this._reader.loadUintBig(bits);
            } /**
              * Preload uint
              * @param bits number of bits to read
              * @returns uint value
              */
            preloadUint(bits) {
              return this._reader.preloadUint(bits);
            } /**
              * Preload uint
              * @param bits number of bits to read
              * @returns uint value
              */
            preloadUintBig(bits) {
              return this._reader.preloadUintBig(bits);
            } /**
              * Load maybe uint
              * @param bits number of bits to read
              * @returns uint value or null
              */
            loadMaybeUint(bits) {
              if (this.loadBit()) {
                return this.loadUint(bits);
              } else {
                return null;
              }
            } /**
              * Load maybe uint
              * @param bits number of bits to read
              * @returns uint value or null
              */
            loadMaybeUintBig(bits) {
              if (this.loadBit()) {
                return this.loadUintBig(bits);
              } else {
                return null;
              }
            } /**
              * Load int
              * @param bits number of bits to read
              * @returns int value
              */
            loadInt(bits) {
              return this._reader.loadInt(bits);
            } /**
              * Load int
              * @param bits number of bits to read
              * @returns int value
              */
            loadIntBig(bits) {
              return this._reader.loadIntBig(bits);
            } /**
              * Preload int
              * @param bits number of bits to read
              * @returns int value
              */
            preloadInt(bits) {
              return this._reader.preloadInt(bits);
            } /**
              * Preload int
              * @param bits number of bits to read
              * @returns int value
              */
            preloadIntBig(bits) {
              return this._reader.preloadIntBig(bits);
            } /**
              * Load maybe uint
              * @param bits number of bits to read
              * @returns uint value or null
              */
            loadMaybeInt(bits) {
              if (this.loadBit()) {
                return this.loadInt(bits);
              } else {
                return null;
              }
            } /**
              * Load maybe uint
              * @param bits number of bits to read
              * @returns uint value or null
              */
            loadMaybeIntBig(bits) {
              if (this.loadBit()) {
                return this.loadIntBig(bits);
              } else {
                return null;
              }
            } /**
              * Load varuint
              * @param bits number of bits to read in header
              * @returns varuint value
              */
            loadVarUint(bits) {
              return this._reader.loadVarUint(bits);
            } /**
              * Load varuint
              * @param bits number of bits to read in header
              * @returns varuint value
              */
            loadVarUintBig(bits) {
              return this._reader.loadVarUintBig(bits);
            } /**
              * Preload varuint
              * @param bits number of bits to read in header
              * @returns varuint value
              */
            preloadVarUint(bits) {
              return this._reader.preloadVarUint(bits);
            } /**
              * Preload varuint
              * @param bits number of bits to read in header
              * @returns varuint value
              */
            preloadVarUintBig(bits) {
              return this._reader.preloadVarUintBig(bits);
            } /**
              * Load varint
              * @param bits number of bits to read in header
              * @returns varint value
              */
            loadVarInt(bits) {
              return this._reader.loadVarInt(bits);
            } /**
              * Load varint
              * @param bits number of bits to read in header
              * @returns varint value
              */
            loadVarIntBig(bits) {
              return this._reader.loadVarIntBig(bits);
            } /**
              * Preload varint
              * @param bits number of bits to read in header
              * @returns varint value
              */
            preloadVarInt(bits) {
              return this._reader.preloadVarInt(bits);
            } /**
              * Preload varint
              * @param bits number of bits to read in header
              * @returns varint value
              */
            preloadVarIntBig(bits) {
              return this._reader.preloadVarIntBig(bits);
            } /**
              * Load coins
              * @returns coins value
              */
            loadCoins() {
              return this._reader.loadCoins();
            } /**
              * Preload coins
              * @returns coins value
              */
            preloadCoins() {
              return this._reader.preloadCoins();
            } /**
              * Load maybe coins
              * @returns coins value or null
              */
            loadMaybeCoins() {
              if (this._reader.loadBit()) {
                return this._reader.loadCoins();
              } else {
                return null;
              }
            } /**
              * Load internal Address
              * @returns Address
              */
            loadAddress() {
              return this._reader.loadAddress();
            } /**
              * Load optional internal Address
              * @returns Address or null
              */
            loadMaybeAddress() {
              return this._reader.loadMaybeAddress();
            } /**
              * Load external address
              * @returns ExternalAddress
              */
            loadExternalAddress() {
              return this._reader.loadExternalAddress();
            } /**
              * Load optional external address
              * @returns ExternalAddress or null
              */
            loadMaybeExternalAddress() {
              return this._reader.loadMaybeExternalAddress();
            } /**
              * Load address
              * @returns Address, ExternalAddress or null
              */
            loadAddressAny() {
              return this._reader.loadAddressAny();
            } /**
              * Load reference
              * @returns Cell
              */
            loadRef() {
              if (this._refsOffset >= this._refs.length) {
                throw new Error("No more references");
              }
              return this._refs[this._refsOffset++];
            } /**
              * Preload reference
              * @returns Cell
              */
            preloadRef() {
              if (this._refsOffset >= this._refs.length) {
                throw new Error("No more references");
              }
              return this._refs[this._refsOffset];
            } /**
              * Load optional reference
              * @returns Cell or null
              */
            loadMaybeRef() {
              if (this.loadBit()) {
                return this.loadRef();
              } else {
                return null;
              }
            } /**
              * Preload optional reference
              * @returns Cell or null
              */
            preloadMaybeRef() {
              if (this.preloadBit()) {
                return this.preloadRef();
              } else {
                return null;
              }
            } /**
              * Load byte buffer
              * @param bytes number of bytes to load
              * @returns Buffer
              */
            loadBuffer(bytes) {
              return this._reader.loadBuffer(bytes);
            } /**
              * Load byte buffer
              * @param bytes number of bytes to load
              * @returns Buffer
              */
            preloadBuffer(bytes) {
              return this._reader.preloadBuffer(bytes);
            } /**
              * Load string tail
              */
            loadStringTail() {
              return (0, strings_1.readString)(this);
            } /**
              * Load maybe string tail
              * @returns string or null
              */
            loadMaybeStringTail() {
              if (this.loadBit()) {
                return (0, strings_1.readString)(this);
              } else {
                return null;
              }
            } /**
              * Load string tail from ref
              * @returns string
              */
            loadStringRefTail() {
              return (0, strings_1.readString)(this.loadRef().beginParse());
            } /**
              * Load maybe string tail from ref
              * @returns string or null
              */
            loadMaybeStringRefTail() {
              const ref = this.loadMaybeRef();
              if (ref) {
                return (0, strings_1.readString)(ref.beginParse());
              } else {
                return null;
              }
            } /**
              * Loads dictionary
              * @param key key description
              * @param value value description
              * @returns Dictionary<K, V>
              */
            loadDict(key, value) {
              return Dictionary_1.Dictionary.load(key, value, this);
            } /**
              * Loads dictionary directly from current slice
              * @param key key description
              * @param value value description
              * @returns Dictionary<K, V>
              */
            loadDictDirect(key, value) {
              return Dictionary_1.Dictionary.loadDirect(key, value, this);
            } /**
              * Checks if slice is empty
              */
            endParse() {
              if (this.remainingBits > 0 || this.remainingRefs > 0) {
                throw new Error("Slice is not empty");
              }
            } /**
              * Convert slice to cell
              */
            asCell() {
              return (0, Builder_1.beginCell)().storeSlice(this).endCell();
            } /**
              *
              * @returns
              */
            asBuilder() {
              return (0, Builder_1.beginCell)().storeSlice(this);
            } /**
              * Clone slice
              * @returns cloned slice
              */
            clone(fromStart) {
              if (fromStart === void 0) {
                fromStart = false;
              }
              if (fromStart) {
                let reader = this._reader.clone();
                reader.reset();
                return new Slice(reader, this._refs);
              } else {
                let res = new Slice(this._reader, this._refs);
                res._refsOffset = this._refsOffset;
                return res;
              }
            } /**
              * Print slice as string by converting it to cell
              * @returns string
              */
            toString() {
              return this.asCell().toString();
            }
          }
          exports.Slice = Slice;
          _a = symbol_inspect_1.default; /***/
        },
        /***/6282: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.LevelMask = void 0;
          class LevelMask {
            constructor(mask) {
              if (mask === void 0) {
                mask = 0;
              }
              this._mask = 0;
              this._mask = mask;
              this._hashIndex = countSetBits(this._mask);
              this._hashCount = this._hashIndex + 1;
            }
            get value() {
              return this._mask;
            }
            get level() {
              return 32 - Math.clz32(this._mask);
            }
            get hashIndex() {
              return this._hashIndex;
            }
            get hashCount() {
              return this._hashCount;
            }
            apply(level) {
              return new LevelMask(this._mask & (1 << level) - 1);
            }
            isSignificant(level) {
              let res = level === 0 || (this._mask >> level - 1) % 2 !== 0;
              return res; // bool res = level == 0 | | ( (mask_ >> (level -1)) % 2 != 0);
            }
          }
          exports.LevelMask = LevelMask;
          function countSetBits(n) {
            n = n - (n >> 1 & 0x55555555);
            n = (n & 0x33333333) + (n >> 2 & 0x33333333);
            return (n + (n >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;
          } /***/
        },
        /***/311: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getRepr = exports.getBitsDescriptor = exports.getRefsDescriptor = void 0;
          const CellType_1 = __webpack_require__(7623);
          const paddedBits_1 = __webpack_require__(355);
          function getRefsDescriptor(refs, level, type) {
            return refs.length + (type !== CellType_1.CellType.Ordinary ? 1 : 0) * 8 + level * 32;
          }
          exports.getRefsDescriptor = getRefsDescriptor;
          function getBitsDescriptor(bits) {
            let len = bits.length;
            return Math.ceil(len / 8) + Math.floor(len / 8);
          }
          exports.getBitsDescriptor = getBitsDescriptor;
          function getRepr(originalBits, bits, refs, level, type) {
            // Allocate
            const bitsLen = Math.ceil(bits.length / 8);
            const repr = Buffer.alloc(2 + bitsLen + (2 + 32) * refs.length); // Write descriptors
            let reprCursor = 0;
            repr[reprCursor++] = getRefsDescriptor(refs, level, type);
            repr[reprCursor++] = getBitsDescriptor(originalBits); // Write bits
            (0, paddedBits_1.bitsToPaddedBuffer)(bits).copy(repr, reprCursor);
            reprCursor += bitsLen; // Write refs
            for (const c of refs) {
              let childDepth;
              if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {
                childDepth = c.depth(level + 1);
              } else {
                childDepth = c.depth(level);
              }
              repr[reprCursor++] = Math.floor(childDepth / 256);
              repr[reprCursor++] = childDepth % 256;
            }
            for (const c of refs) {
              let childHash;
              if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {
                childHash = c.hash(level + 1);
              } else {
                childHash = c.hash(level);
              }
              childHash.copy(repr, reprCursor);
              reprCursor += 32;
            } // Result
            return repr;
          }
          exports.getRepr = getRepr; /***/
        },
        /***/7389: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.exoticLibrary = void 0;
          const BitReader_1 = __webpack_require__(2391);
          function exoticLibrary(bits, refs) {
            const reader = new BitReader_1.BitReader(bits); // type + hash
            const size = 8 + 256;
            if (bits.length !== size) {
              throw new Error(`Library cell must have exactly (8 + 256) bits, got "${bits.length}"`);
            } // Check type
            let type = reader.loadUint(8);
            if (type !== 2) {
              throw new Error(`Library cell must have type 2, got "${type}"`);
            }
            return {};
          }
          exports.exoticLibrary = exoticLibrary; /***/
        },
        /***/2294: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.exoticMerkleProof = void 0;
          const BitReader_1 = __webpack_require__(2391);
          function exoticMerkleProof(bits, refs) {
            const reader = new BitReader_1.BitReader(bits); // type + hash + depth
            const size = 8 + 256 + 16;
            if (bits.length !== size) {
              throw new Error(`Merkle Proof cell must have exactly (8 + 256 + 16) bits, got "${bits.length}"`);
            }
            if (refs.length !== 1) {
              throw new Error(`Merkle Proof cell must have exactly 1 ref, got "${refs.length}"`);
            } // Check type
            let type = reader.loadUint(8);
            if (type !== 3) {
              throw new Error(`Merkle Proof cell must have type 3, got "${type}"`);
            } // Check data
            const proofHash = reader.loadBuffer(32);
            const proofDepth = reader.loadUint(16);
            const refHash = refs[0].hash(0);
            const refDepth = refs[0].depth(0);
            if (proofDepth !== refDepth) {
              throw new Error(`Merkle Proof cell ref depth must be exactly "${proofDepth}", got "${refDepth}"`);
            }
            if (!proofHash.equals(refHash)) {
              throw new Error(`Merkle Proof cell ref hash must be exactly "${proofHash.toString('hex')}", got "${refHash.toString('hex')}"`);
            }
            return {
              proofDepth,
              proofHash
            };
          }
          exports.exoticMerkleProof = exoticMerkleProof; /***/
        },
        /***/2319: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.exoticMerkleUpdate = void 0;
          const BitReader_1 = __webpack_require__(2391);
          function exoticMerkleUpdate(bits, refs) {
            const reader = new BitReader_1.BitReader(bits); // type + hash + hash + depth + depth
            const size = 8 + 2 * (256 + 16);
            if (bits.length !== size) {
              throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got "${bits.length}"`);
            }
            if (refs.length !== 2) {
              throw new Error(`Merkle Update cell must have exactly 2 refs, got "${refs.length}"`);
            }
            let type = reader.loadUint(8);
            if (type !== 4) {
              throw new Error(`Merkle Update cell type must be exactly 4, got "${type}"`);
            }
            const proofHash1 = reader.loadBuffer(32);
            const proofHash2 = reader.loadBuffer(32);
            const proofDepth1 = reader.loadUint(16);
            const proofDepth2 = reader.loadUint(16);
            if (proofDepth1 !== refs[0].depth(0)) {
              throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth1}", got "${refs[0].depth(0)}"`);
            }
            if (!proofHash1.equals(refs[0].hash(0))) {
              throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash1.toString('hex')}", got "${refs[0].hash(0).toString('hex')}"`);
            }
            if (proofDepth2 !== refs[1].depth(0)) {
              throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth2}", got "${refs[1].depth(0)}"`);
            }
            if (!proofHash2.equals(refs[1].hash(0))) {
              throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash2.toString('hex')}", got "${refs[1].hash(0).toString('hex')}"`);
            }
            return {
              proofDepth1,
              proofDepth2,
              proofHash1,
              proofHash2
            };
          }
          exports.exoticMerkleUpdate = exoticMerkleUpdate; /***/
        },
        /***/5488: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.exoticPruned = void 0;
          const BitReader_1 = __webpack_require__(2391);
          const LevelMask_1 = __webpack_require__(6282);
          function exoticPruned(bits, refs) {
            let reader = new BitReader_1.BitReader(bits); // Check type
            let type = reader.loadUint(8);
            if (type !== 1) {
              throw new Error(`Pruned branch cell must have type 1, got "${type}"`);
            } // Check refs
            if (refs.length !== 0) {
              throw new Error(`Pruned Branch cell can't has refs, got "${refs.length}"`);
            } // Resolve cell
            let mask;
            if (bits.length === 280) {
              // Special case for config proof
              // This test proof is generated in the moment of voting for a slashing
              // it seems that tools generate it incorrectly and therefore doesn't have mask in it
              // so we need to hardcode it equal to 1
              mask = new LevelMask_1.LevelMask(1);
            } else {
              // Check level
              mask = new LevelMask_1.LevelMask(reader.loadUint(8));
              if (mask.level < 1 || mask.level > 3) {
                throw new Error(`Pruned Branch cell level must be >= 1 and <= 3, got "${mask.level}/${mask.value}"`);
              } // Read pruned
              const size = 8 + 8 + mask.apply(mask.level - 1).hashCount * (256 /* Hash */ + 16 /* Depth */);
              if (bits.length !== size) {
                throw new Error(`Pruned branch cell must have exactly ${size} bits, got "${bits.length}"`);
              }
            } // Read pruned
            let pruned = [];
            let hashes = [];
            let depths = [];
            for (let i = 0; i < mask.level; i++) {
              hashes.push(reader.loadBuffer(32));
            }
            for (let i = 0; i < mask.level; i++) {
              depths.push(reader.loadUint(16));
            }
            for (let i = 0; i < mask.level; i++) {
              pruned.push({
                depth: depths[i],
                hash: hashes[i]
              });
            }
            return {
              mask: mask.value,
              pruned
            };
          }
          exports.exoticPruned = exoticPruned; /***/
        },
        /***/6390: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.resolveExotic = void 0;
          const BitReader_1 = __webpack_require__(2391);
          const CellType_1 = __webpack_require__(7623);
          const exoticLibrary_1 = __webpack_require__(7389);
          const exoticMerkleProof_1 = __webpack_require__(2294);
          const exoticMerkleUpdate_1 = __webpack_require__(2319);
          const exoticPruned_1 = __webpack_require__(5488);
          const LevelMask_1 = __webpack_require__(6282);
          function resolvePruned(bits, refs) {
            // Parse pruned cell
            let pruned = (0, exoticPruned_1.exoticPruned)(bits, refs); // Calculate parameters
            let depths = [];
            let hashes = [];
            let mask = new LevelMask_1.LevelMask(pruned.mask);
            for (let i = 0; i < pruned.pruned.length; i++) {
              depths.push(pruned.pruned[i].depth);
              hashes.push(pruned.pruned[i].hash);
            }
            return {
              type: CellType_1.CellType.PrunedBranch,
              depths,
              hashes,
              mask
            };
          }
          function resolveLibrary(bits, refs) {
            // Parse library cell
            let pruned = (0, exoticLibrary_1.exoticLibrary)(bits, refs); // Calculate parameters
            let depths = [];
            let hashes = [];
            let mask = new LevelMask_1.LevelMask();
            return {
              type: CellType_1.CellType.Library,
              depths,
              hashes,
              mask
            };
          }
          function resolveMerkleProof(bits, refs) {
            // Parse merkle proof cell
            let merkleProof = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs); // Calculate parameters
            let depths = [];
            let hashes = [];
            let mask = new LevelMask_1.LevelMask(refs[0].level() >> 1);
            return {
              type: CellType_1.CellType.MerkleProof,
              depths,
              hashes,
              mask
            };
          }
          function resolveMerkleUpdate(bits, refs) {
            // Parse merkle proof cell
            let merkleUpdate = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs); // Calculate parameters
            let depths = [];
            let hashes = [];
            let mask = new LevelMask_1.LevelMask((refs[0].level() | refs[1].level()) >> 1);
            return {
              type: CellType_1.CellType.MerkleUpdate,
              depths,
              hashes,
              mask
            };
          }
          function resolveExotic(bits, refs) {
            let reader = new BitReader_1.BitReader(bits);
            let type = reader.preloadUint(8);
            if (type === 1) {
              return resolvePruned(bits, refs);
            }
            if (type === 2) {
              return resolveLibrary(bits, refs);
            }
            if (type === 3) {
              return resolveMerkleProof(bits, refs);
            }
            if (type === 4) {
              return resolveMerkleUpdate(bits, refs);
            }
            throw Error('Invalid exotic cell type: ' + type);
          }
          exports.resolveExotic = resolveExotic; /***/
        },
        /***/3860: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.serializeBoc = exports.deserializeBoc = exports.parseBoc = void 0;
          const BitReader_1 = __webpack_require__(2391);
          const BitString_1 = __webpack_require__(8261);
          const Cell_1 = __webpack_require__(9567);
          const topologicalSort_1 = __webpack_require__(3281);
          const bitsForNumber_1 = __webpack_require__(224);
          const BitBuilder_1 = __webpack_require__(8889);
          const descriptor_1 = __webpack_require__(311);
          const paddedBits_1 = __webpack_require__(355);
          const crc32c_1 = __webpack_require__(2444);
          function getHashesCount(levelMask) {
            return getHashesCountFromMask(levelMask & 7);
          }
          function getHashesCountFromMask(mask) {
            let n = 0;
            for (let i = 0; i < 3; i++) {
              n += mask & 1;
              mask = mask >> 1;
            }
            return n + 1; // 1 repr + up to 3 higher hashes
          }
          function readCell(reader, sizeBytes) {
            // D1
            const d1 = reader.loadUint(8);
            const refsCount = d1 % 8;
            const exotic = !!(d1 & 8); // D2
            const d2 = reader.loadUint(8);
            const dataBytesize = Math.ceil(d2 / 2);
            const paddingAdded = !!(d2 % 2);
            const levelMask = d1 >> 5;
            const hasHashes = (d1 & 16) != 0;
            const hash_bytes = 32;
            const hashesSize = hasHashes ? getHashesCount(levelMask) * hash_bytes : 0;
            const depthSize = hasHashes ? getHashesCount(levelMask) * 2 : 0;
            reader.skip(hashesSize * 8);
            reader.skip(depthSize * 8); // Bits
            let bits = BitString_1.BitString.EMPTY;
            if (dataBytesize > 0) {
              if (paddingAdded) {
                bits = reader.loadPaddedBits(dataBytesize * 8);
              } else {
                bits = reader.loadBits(dataBytesize * 8);
              }
            } // Refs
            let refs = [];
            for (let i = 0; i < refsCount; i++) {
              refs.push(reader.loadUint(sizeBytes * 8));
            } // Result
            return {
              bits,
              refs,
              exotic
            };
          }
          function calcCellSize(cell, sizeBytes) {
            return 2 /* D1+D2 */ + Math.ceil(cell.bits.length / 8) + cell.refs.length * sizeBytes;
          }
          function parseBoc(src) {
            let reader = new BitReader_1.BitReader(new BitString_1.BitString(src, 0, src.length * 8));
            let magic = reader.loadUint(32);
            if (magic === 0x68ff65f3) {
              let size = reader.loadUint(8);
              let offBytes = reader.loadUint(8);
              let cells = reader.loadUint(size * 8);
              let roots = reader.loadUint(size * 8); // Must be 1
              let absent = reader.loadUint(size * 8);
              let totalCellSize = reader.loadUint(offBytes * 8);
              let index = reader.loadBuffer(cells * offBytes);
              let cellData = reader.loadBuffer(totalCellSize);
              return {
                size,
                offBytes,
                cells,
                roots,
                absent,
                totalCellSize,
                index,
                cellData,
                root: [0]
              };
            } else if (magic === 0xacc3a728) {
              let size = reader.loadUint(8);
              let offBytes = reader.loadUint(8);
              let cells = reader.loadUint(size * 8);
              let roots = reader.loadUint(size * 8); // Must be 1
              let absent = reader.loadUint(size * 8);
              let totalCellSize = reader.loadUint(offBytes * 8);
              let index = reader.loadBuffer(cells * offBytes);
              let cellData = reader.loadBuffer(totalCellSize);
              let crc32 = reader.loadBuffer(4);
              if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {
                throw Error('Invalid CRC32C');
              }
              return {
                size,
                offBytes,
                cells,
                roots,
                absent,
                totalCellSize,
                index,
                cellData,
                root: [0]
              };
            } else if (magic === 0xb5ee9c72) {
              let hasIdx = reader.loadUint(1);
              let hasCrc32c = reader.loadUint(1);
              let hasCacheBits = reader.loadUint(1);
              let flags = reader.loadUint(2); // Must be 0
              let size = reader.loadUint(3);
              let offBytes = reader.loadUint(8);
              let cells = reader.loadUint(size * 8);
              let roots = reader.loadUint(size * 8);
              let absent = reader.loadUint(size * 8);
              let totalCellSize = reader.loadUint(offBytes * 8);
              let root = [];
              for (let i = 0; i < roots; i++) {
                root.push(reader.loadUint(size * 8));
              }
              let index = null;
              if (hasIdx) {
                index = reader.loadBuffer(cells * offBytes);
              }
              let cellData = reader.loadBuffer(totalCellSize);
              if (hasCrc32c) {
                let crc32 = reader.loadBuffer(4);
                if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {
                  throw Error('Invalid CRC32C');
                }
              }
              return {
                size,
                offBytes,
                cells,
                roots,
                absent,
                totalCellSize,
                index,
                cellData,
                root
              };
            } else {
              throw Error('Invalid magic');
            }
          }
          exports.parseBoc = parseBoc;
          function deserializeBoc(src) {
            //
            // Parse BOC
            //
            let boc = parseBoc(src);
            let reader = new BitReader_1.BitReader(new BitString_1.BitString(boc.cellData, 0, boc.cellData.length * 8)); //
            // Load cells
            //
            let cells = [];
            for (let i = 0; i < boc.cells; i++) {
              let cll = readCell(reader, boc.size);
              cells.push({
                ...cll,
                result: null
              });
            } //
            // Build cells
            //
            for (let i = cells.length - 1; i >= 0; i--) {
              if (cells[i].result) {
                throw Error('Impossible');
              }
              let refs = [];
              for (let r of cells[i].refs) {
                if (!cells[r].result) {
                  throw Error('Invalid BOC file');
                }
                refs.push(cells[r].result);
              }
              cells[i].result = new Cell_1.Cell({
                bits: cells[i].bits,
                refs,
                exotic: cells[i].exotic
              });
            } //
            // Load roots
            //
            let roots = [];
            for (let i = 0; i < boc.root.length; i++) {
              roots.push(cells[boc.root[i]].result);
            } //
            // Return
            //
            return roots;
          }
          exports.deserializeBoc = deserializeBoc;
          function writeCellToBuilder(cell, refs, sizeBytes, to) {
            let d1 = (0, descriptor_1.getRefsDescriptor)(cell.refs, cell.level(), cell.type);
            let d2 = (0, descriptor_1.getBitsDescriptor)(cell.bits);
            to.writeUint(d1, 8);
            to.writeUint(d2, 8);
            to.writeBuffer((0, paddedBits_1.bitsToPaddedBuffer)(cell.bits));
            for (let r of refs) {
              to.writeUint(r, sizeBytes * 8);
            }
          }
          function serializeBoc(root, opts) {
            // Sort cells
            let allCells = (0, topologicalSort_1.topologicalSort)(root); // Calculcate parameters
            let cellsNum = allCells.length;
            let has_idx = opts.idx;
            let has_crc32c = opts.crc32;
            let has_cache_bits = false;
            let flags = 0;
            let sizeBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(cellsNum, 'uint') / 8), 1);
            let totalCellSize = 0;
            let index = [];
            for (let c of allCells) {
              let sz = calcCellSize(c.cell, sizeBytes);
              index.push(totalCellSize);
              totalCellSize += sz;
            }
            let offsetBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(totalCellSize, 'uint') / 8), 1);
            let totalSize = (4 +
            // magic
            1 +
            // flags and s_bytes
            1 +
            // offset_bytes
            3 * sizeBytes +
            // cells_num, roots, complete
            offsetBytes +
            // full_size
            1 * sizeBytes + (
            // root_idx
            has_idx ? cellsNum * offsetBytes : 0) + totalCellSize + (has_crc32c ? 4 : 0)) * 8; // Serialize
            let builder = new BitBuilder_1.BitBuilder(totalSize);
            builder.writeUint(0xb5ee9c72, 32); // Magic
            builder.writeBit(has_idx); // Has index
            builder.writeBit(has_crc32c); // Has crc32c
            builder.writeBit(has_cache_bits); // Has cache bits
            builder.writeUint(flags, 2); // Flags
            builder.writeUint(sizeBytes, 3); // Size bytes
            builder.writeUint(offsetBytes, 8); // Offset bytes
            builder.writeUint(cellsNum, sizeBytes * 8); // Cells num
            builder.writeUint(1, sizeBytes * 8); // Roots num
            builder.writeUint(0, sizeBytes * 8); // Absent num
            builder.writeUint(totalCellSize, offsetBytes * 8); // Total cell size
            builder.writeUint(0, sizeBytes * 8); // Root id == 0
            if (has_idx) {
              // Index
              for (let i = 0; i < cellsNum; i++) {
                builder.writeUint(index[i], offsetBytes * 8);
              }
            }
            for (let i = 0; i < cellsNum; i++) {
              // Cells
              writeCellToBuilder(allCells[i].cell, allCells[i].refs, sizeBytes, builder);
            }
            if (has_crc32c) {
              let crc32 = (0, crc32c_1.crc32c)(builder.buffer()); // builder.buffer() is fast since it doesn't allocate new memory
              builder.writeBuffer(crc32);
            } // Sanity Check
            let res = builder.buffer();
            if (res.length !== totalSize / 8) {
              throw Error('Internal error');
            }
            return res;
          }
          exports.serializeBoc = serializeBoc; /***/
        },
        /***/3281: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.topologicalSort = void 0;
          function topologicalSort(src) {
            let pending = [src];
            let allCells = new Map();
            let notPermCells = new Set();
            let sorted = [];
            while (pending.length > 0) {
              const cells = [...pending];
              pending = [];
              for (let cell of cells) {
                const hash = cell.hash().toString('hex');
                if (allCells.has(hash)) {
                  continue;
                }
                notPermCells.add(hash);
                allCells.set(hash, {
                  cell: cell,
                  refs: cell.refs.map(v => v.hash().toString('hex'))
                });
                for (let r of cell.refs) {
                  pending.push(r);
                }
              }
            }
            let tempMark = new Set();
            function visit(hash) {
              if (!notPermCells.has(hash)) {
                return;
              }
              if (tempMark.has(hash)) {
                throw Error('Not a DAG');
              }
              tempMark.add(hash);
              for (let c of allCells.get(hash).refs) {
                visit(c);
              }
              sorted.unshift(hash);
              tempMark.delete(hash);
              notPermCells.delete(hash);
            }
            while (notPermCells.size > 0) {
              const id = Array.from(notPermCells)[0];
              visit(id);
            }
            let indexes = new Map();
            for (let i = 0; i < sorted.length; i++) {
              indexes.set(sorted[i], i);
            }
            let result = [];
            for (let ent of sorted) {
              const rrr = allCells.get(ent);
              result.push({
                cell: rrr.cell,
                refs: rrr.refs.map(v => indexes.get(v))
              });
            }
            return result;
          }
          exports.topologicalSort = topologicalSort; /***/
        },
        /***/2173: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.wonderCalculator = void 0;
          const BitString_1 = __webpack_require__(8261);
          const CellType_1 = __webpack_require__(7623);
          const LevelMask_1 = __webpack_require__(6282);
          const exoticPruned_1 = __webpack_require__(5488);
          const exoticMerkleProof_1 = __webpack_require__(2294);
          const descriptor_1 = __webpack_require__(311);
          const crypto_1 = __webpack_require__(3022);
          const exoticMerkleUpdate_1 = __webpack_require__(2319);
          const exoticLibrary_1 = __webpack_require__(7389); //
          // This function replicates unknown logic of resolving cell data
          // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214
          //
          function wonderCalculator(type, bits, refs) {
            //
            // Resolving level mask
            //
            let levelMask;
            let pruned = null;
            if (type === CellType_1.CellType.Ordinary) {
              let mask = 0;
              for (let r of refs) {
                mask = mask | r.mask.value;
              }
              levelMask = new LevelMask_1.LevelMask(mask);
            } else if (type === CellType_1.CellType.PrunedBranch) {
              // Parse pruned
              pruned = (0, exoticPruned_1.exoticPruned)(bits, refs); // Load level
              levelMask = new LevelMask_1.LevelMask(pruned.mask);
            } else if (type === CellType_1.CellType.MerkleProof) {
              // Parse proof
              let loaded = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs); // Load level
              levelMask = new LevelMask_1.LevelMask(refs[0].mask.value >> 1);
            } else if (type === CellType_1.CellType.MerkleUpdate) {
              // Parse update
              let loaded = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs); // Load level
              levelMask = new LevelMask_1.LevelMask((refs[0].mask.value | refs[1].mask.value) >> 1);
            } else if (type === CellType_1.CellType.Library) {
              // Parse library
              let loaded = (0, exoticLibrary_1.exoticLibrary)(bits, refs); // Load level
              levelMask = new LevelMask_1.LevelMask();
            } else {
              throw new Error("Unsupported exotic type");
            } //
            // Calculate hashes and depths
            // NOTE: https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214
            //
            let depths = [];
            let hashes = [];
            let hashCount = type === CellType_1.CellType.PrunedBranch ? 1 : levelMask.hashCount;
            let totalHashCount = levelMask.hashCount;
            let hashIOffset = totalHashCount - hashCount;
            for (let levelI = 0, hashI = 0; levelI <= levelMask.level; levelI++) {
              if (!levelMask.isSignificant(levelI)) {
                continue;
              }
              if (hashI < hashIOffset) {
                hashI++;
                continue;
              } //
              // Bits
              //
              let currentBits;
              if (hashI === hashIOffset) {
                if (!(levelI === 0 || type === CellType_1.CellType.PrunedBranch)) {
                  throw Error('Invalid');
                }
                currentBits = bits;
              } else {
                if (!(levelI !== 0 && type !== CellType_1.CellType.PrunedBranch)) {
                  throw Error('Invalid: ' + levelI + ', ' + type);
                }
                currentBits = new BitString_1.BitString(hashes[hashI - hashIOffset - 1], 0, 256);
              } //
              // Depth
              //
              let currentDepth = 0;
              for (let c of refs) {
                let childDepth;
                if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {
                  childDepth = c.depth(levelI + 1);
                } else {
                  childDepth = c.depth(levelI);
                }
                currentDepth = Math.max(currentDepth, childDepth);
              }
              if (refs.length > 0) {
                currentDepth++;
              } //
              // Hash
              //
              let repr = (0, descriptor_1.getRepr)(bits, currentBits, refs, levelI, type);
              let hash = (0, crypto_1.sha256_sync)(repr); //
              // Persist next
              //
              let destI = hashI - hashIOffset;
              depths[destI] = currentDepth;
              hashes[destI] = hash; //
              // Next
              //
              hashI++;
            } //
            // Calculate hash and depth for all levels
            //
            let resolvedHashes = [];
            let resolvedDepths = [];
            if (pruned) {
              for (let i = 0; i < 4; i++) {
                const {
                  hashIndex
                } = levelMask.apply(i);
                const {
                  hashIndex: thisHashIndex
                } = levelMask;
                if (hashIndex !== thisHashIndex) {
                  resolvedHashes.push(pruned.pruned[hashIndex].hash);
                  resolvedDepths.push(pruned.pruned[hashIndex].depth);
                } else {
                  resolvedHashes.push(hashes[0]);
                  resolvedDepths.push(depths[0]);
                }
              }
            } else {
              for (let i = 0; i < 4; i++) {
                resolvedHashes.push(hashes[levelMask.apply(i).hashIndex]);
                resolvedDepths.push(depths[levelMask.apply(i).hashIndex]);
              }
            } //
            // Result
            //
            return {
              mask: levelMask,
              hashes: resolvedHashes,
              depths: resolvedDepths
            };
          }
          exports.wonderCalculator = wonderCalculator; /***/
        },
        /***/355: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.paddedBufferToBits = exports.bitsToPaddedBuffer = void 0;
          const BitBuilder_1 = __webpack_require__(8889);
          const BitString_1 = __webpack_require__(8261);
          function bitsToPaddedBuffer(bits) {
            // Create builder
            let builder = new BitBuilder_1.BitBuilder(Math.ceil(bits.length / 8) * 8);
            builder.writeBits(bits); // Apply padding
            let padding = Math.ceil(bits.length / 8) * 8 - bits.length;
            for (let i = 0; i < padding; i++) {
              if (i === 0) {
                builder.writeBit(1);
              } else {
                builder.writeBit(0);
              }
            }
            return builder.buffer();
          }
          exports.bitsToPaddedBuffer = bitsToPaddedBuffer;
          function paddedBufferToBits(buff) {
            let bitLen = 0; // Finding rightmost non-zero byte in the buffer
            for (let i = buff.length - 1; i >= 0; i--) {
              if (buff[i] !== 0) {
                const testByte = buff[i]; // Looking for a rightmost set padding bit
                let bitPos = testByte & -testByte;
                if ((bitPos & 1) == 0) {
                  // It's power of 2 (only one bit set)
                  bitPos = Math.log2(bitPos) + 1;
                }
                if (i > 0) {
                  // If we are dealing with more than 1 byte buffer
                  bitLen = i << 3; //Number of full bytes * 8
                }
                bitLen += 8 - bitPos;
                break;
              }
            }
            return new BitString_1.BitString(buff, 0, bitLen);
          }
          exports.paddedBufferToBits = paddedBufferToBits; /***/
        },
        /***/3279: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.writeString = exports.stringToCell = exports.readString = void 0;
          const Builder_1 = __webpack_require__(7856);
          function readBuffer(slice) {
            // Check consistency
            if (slice.remainingBits % 8 !== 0) {
              throw new Error(`Invalid string length: ${slice.remainingBits}`);
            }
            if (slice.remainingRefs !== 0 && slice.remainingRefs !== 1) {
              throw new Error(`invalid number of refs: ${slice.remainingRefs}`);
            } // Read string
            let res;
            if (slice.remainingBits === 0) {
              res = Buffer.alloc(0);
            } else {
              res = slice.loadBuffer(slice.remainingBits / 8);
            } // Read tail
            if (slice.remainingRefs === 1) {
              res = Buffer.concat([res, readBuffer(slice.loadRef().beginParse())]);
            }
            return res;
          }
          function readString(slice) {
            return readBuffer(slice).toString();
          }
          exports.readString = readString;
          function writeBuffer(src, builder) {
            if (src.length > 0) {
              let bytes = Math.floor(builder.availableBits / 8);
              if (src.length > bytes) {
                let a = src.subarray(0, bytes);
                let t = src.subarray(bytes);
                builder = builder.storeBuffer(a);
                let bb = (0, Builder_1.beginCell)();
                writeBuffer(t, bb);
                builder = builder.storeRef(bb.endCell());
              } else {
                builder = builder.storeBuffer(src);
              }
            }
          }
          function stringToCell(src) {
            let builder = (0, Builder_1.beginCell)();
            writeBuffer(Buffer.from(src), builder);
            return builder.endCell();
          }
          exports.stringToCell = stringToCell;
          function writeString(src, builder) {
            writeBuffer(Buffer.from(src), builder);
          }
          exports.writeString = writeString; /***/
        },
        /***/8342: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ComputeError = void 0;
          class ComputeError extends Error {
            constructor(message, exitCode, opts) {
              super(message);
              this.exitCode = exitCode;
              this.debugLogs = opts && opts.debugLogs ? opts.debugLogs : null;
              this.logs = opts && opts.logs ? opts.logs : null;
              Object.setPrototypeOf(this, ComputeError.prototype);
            }
          }
          exports.ComputeError = ComputeError; /***/
        },
        /***/4693: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.openContract = void 0;
          const Address_1 = __webpack_require__(6575);
          const Cell_1 = __webpack_require__(9567);
          function openContract(src, factory) {
            // Resolve parameters
            let address;
            let init = null;
            if (!Address_1.Address.isAddress(src.address)) {
              throw Error('Invalid address');
            }
            address = src.address;
            if (src.init) {
              if (!(src.init.code instanceof Cell_1.Cell)) {
                throw Error('Invalid init.code');
              }
              if (!(src.init.data instanceof Cell_1.Cell)) {
                throw Error('Invalid init.data');
              }
              init = src.init;
            } // Create executor
            let executor = factory({
              address,
              init
            }); // Create proxy
            return new Proxy(src, {
              get(target, prop) {
                const value = target[prop];
                if (typeof prop === 'string' && (prop.startsWith('get') || prop.startsWith('send'))) {
                  if (typeof value === 'function') {
                    return function () {
                      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
                        args[_key2] = arguments[_key2];
                      }
                      return value.apply(target, [executor, ...args]);
                    };
                  }
                }
                return value;
              }
            });
          }
          exports.openContract = openContract; /***/
        },
        /***/3790: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.safeSignVerify = exports.safeSign = void 0;
          const crypto_1 = __webpack_require__(3022);
          const MIN_SEED_LENGTH = 8;
          const MAX_SEED_LENGTH = 64;
          function createSafeSignHash(cell, seed) {
            let seedData = Buffer.from(seed);
            if (seedData.length > MAX_SEED_LENGTH) {
              throw Error('Seed can\t be longer than 64 bytes');
            }
            if (seedData.length < MIN_SEED_LENGTH) {
              throw Error('Seed must be at least 8 bytes');
            }
            return (0, crypto_1.sha256_sync)(Buffer.concat([Buffer.from([0xff, 0xff]), seedData, cell.hash()]));
          }
          function safeSign(cell, secretKey, seed) {
            if (seed === void 0) {
              seed = 'ton-safe-sign-magic';
            }
            return (0, crypto_1.sign)(createSafeSignHash(cell, seed), secretKey);
          }
          exports.safeSign = safeSign;
          function safeSignVerify(cell, signature, publicKey, seed) {
            if (seed === void 0) {
              seed = 'ton-safe-sign-magic';
            }
            return (0, crypto_1.signVerify)(createSafeSignHash(cell, seed), signature, publicKey);
          }
          exports.safeSignVerify = safeSignVerify; /***/
        },
        /***/5189: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Dictionary = void 0;
          const Address_1 = __webpack_require__(6575);
          const Builder_1 = __webpack_require__(7856);
          const Cell_1 = __webpack_require__(9567);
          const BitString_1 = __webpack_require__(8261);
          const generateMerkleProof_1 = __webpack_require__(8520);
          const generateMerkleUpdate_1 = __webpack_require__(9389);
          const parseDict_1 = __webpack_require__(9558);
          const serializeDict_1 = __webpack_require__(2323);
          const internalKeySerializer_1 = __webpack_require__(4719);
          class Dictionary {
            /**
            * Create an empty map
            * @param key key type
            * @param value value type
            * @returns Dictionary<K, V>
            */
            static empty(key, value) {
              if (key && value) {
                return new Dictionary(new Map(), key, value);
              } else {
                return new Dictionary(new Map(), null, null);
              }
            } /**
              * Load dictionary from slice
              * @param key key description
              * @param value value description
              * @param src slice
              * @returns Dictionary<K, V>
              */
            static load(key, value, sc) {
              let slice;
              if (sc instanceof Cell_1.Cell) {
                if (sc.isExotic) {
                  return Dictionary.empty(key, value);
                }
                slice = sc.beginParse();
              } else {
                slice = sc;
              }
              let cell = slice.loadMaybeRef();
              if (cell && !cell.isExotic) {
                return Dictionary.loadDirect(key, value, cell.beginParse());
              } else {
                return Dictionary.empty(key, value);
              }
            } /**
              * Low level method for rare dictionaries from system contracts.
              * Loads dictionary from slice directly without going to the ref.
              *
              * @param key key description
              * @param value value description
              * @param sc slice
              * @returns Dictionary<K, V>
              */
            static loadDirect(key, value, sc) {
              if (!sc) {
                return Dictionary.empty(key, value);
              }
              let slice;
              if (sc instanceof Cell_1.Cell) {
                slice = sc.beginParse();
              } else {
                slice = sc;
              }
              let values = (0, parseDict_1.parseDict)(slice, key.bits, value.parse);
              let prepare = new Map();
              for (let [k, v] of values) {
                prepare.set((0, internalKeySerializer_1.serializeInternalKey)(key.parse(k)), v);
              }
              return new Dictionary(prepare, key, value);
            }
            constructor(values, key, value) {
              this._key = key;
              this._value = value;
              this._map = values;
            }
            get size() {
              return this._map.size;
            }
            get(key) {
              return this._map.get((0, internalKeySerializer_1.serializeInternalKey)(key));
            }
            has(key) {
              return this._map.has((0, internalKeySerializer_1.serializeInternalKey)(key));
            }
            set(key, value) {
              this._map.set((0, internalKeySerializer_1.serializeInternalKey)(key), value);
              return this;
            }
            delete(key) {
              const k = (0, internalKeySerializer_1.serializeInternalKey)(key);
              return this._map.delete(k);
            }
            clear() {
              this._map.clear();
            }
            *[Symbol.iterator]() {
              for (const [k, v] of this._map) {
                const key = (0, internalKeySerializer_1.deserializeInternalKey)(k);
                yield [key, v];
              }
            }
            keys() {
              return Array.from(this._map.keys()).map(v => (0, internalKeySerializer_1.deserializeInternalKey)(v));
            }
            values() {
              return Array.from(this._map.values());
            }
            store(builder, key, value) {
              if (this._map.size === 0) {
                builder.storeBit(0);
              } else {
                // Resolve serializer
                let resolvedKey = this._key;
                if (key !== null && key !== undefined) {
                  resolvedKey = key;
                }
                let resolvedValue = this._value;
                if (value !== null && value !== undefined) {
                  resolvedValue = value;
                }
                if (!resolvedKey) {
                  throw Error('Key serializer is not defined');
                }
                if (!resolvedValue) {
                  throw Error('Value serializer is not defined');
                } // Prepare map
                let prepared = new Map();
                for (const [k, v] of this._map) {
                  prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);
                } // Store
                builder.storeBit(1);
                let dd = (0, Builder_1.beginCell)();
                (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, dd);
                builder.storeRef(dd.endCell());
              }
            }
            storeDirect(builder, key, value) {
              if (this._map.size === 0) {
                throw Error('Cannot store empty dictionary directly');
              } // Resolve serializer
              let resolvedKey = this._key;
              if (key !== null && key !== undefined) {
                resolvedKey = key;
              }
              let resolvedValue = this._value;
              if (value !== null && value !== undefined) {
                resolvedValue = value;
              }
              if (!resolvedKey) {
                throw Error('Key serializer is not defined');
              }
              if (!resolvedValue) {
                throw Error('Value serializer is not defined');
              } // Prepare map
              let prepared = new Map();
              for (const [k, v] of this._map) {
                prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);
              } // Store
              (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, builder);
            }
            generateMerkleProof(key) {
              return (0, generateMerkleProof_1.generateMerkleProof)(this, key, this._key);
            }
            generateMerkleUpdate(key, newValue) {
              return (0, generateMerkleUpdate_1.generateMerkleUpdate)(this, key, this._key, newValue);
            }
          }
          exports.Dictionary = Dictionary;
          Dictionary.Keys = {
            /**
            * Standard address key
            * @returns DictionaryKey<Address>
            */
            Address: () => {
              return createAddressKey();
            },
            /**
            * Create standard big integer key
            * @param bits number of bits
            * @returns DictionaryKey<bigint>
            */
            BigInt: bits => {
              return createBigIntKey(bits);
            },
            /**
            * Create integer key
            * @param bits bits of integer
            * @returns DictionaryKey<number>
            */
            Int: bits => {
              return createIntKey(bits);
            },
            /**
            * Create standard unsigned big integer key
            * @param bits number of bits
            * @returns DictionaryKey<bigint>
            */
            BigUint: bits => {
              return createBigUintKey(bits);
            },
            /**
            * Create standard unsigned integer key
            * @param bits number of bits
            * @returns DictionaryKey<number>
            */
            Uint: bits => {
              return createUintKey(bits);
            },
            /**
            * Create standard buffer key
            * @param bytes number of bytes of a buffer
            * @returns DictionaryKey<Buffer>
            */
            Buffer: bytes => {
              return createBufferKey(bytes);
            },
            /**
            * Create BitString key
            * @param bits key length
            * @returns DictionaryKey<BitString>
            * Point is that Buffer has to be 8 bit aligned,
            * while key is TVM dictionary doesn't have to be
            * aligned at all.
            */
            BitString: bits => {
              return createBitStringKey(bits);
            }
          };
          Dictionary.Values = {
            /**
            * Create standard integer value
            * @returns DictionaryValue<bigint>
            */
            BigInt: bits => {
              return createBigIntValue(bits);
            },
            /**
            * Create standard integer value
            * @returns DictionaryValue<number>
            */
            Int: bits => {
              return createIntValue(bits);
            },
            /**
            * Create big var int
            * @param bits nubmer of header bits
            * @returns DictionaryValue<bigint>
            */
            BigVarInt: bits => {
              return createBigVarIntValue(bits);
            },
            /**
            * Create standard unsigned integer value
            * @param bits number of bits
            * @returns DictionaryValue<bigint>
            */
            BigUint: bits => {
              return createBigUintValue(bits);
            },
            /**
            * Create standard unsigned integer value
            * @param bits number of bits
            * @returns DictionaryValue<bigint>
            */
            Uint: bits => {
              return createUintValue(bits);
            },
            /**
            * Create big var int
            * @param bits nubmer of header bits
            * @returns DictionaryValue<bigint>
            */
            BigVarUint: bits => {
              return createBigVarUintValue(bits);
            },
            /**
            * Create standard boolean value
            * @returns DictionaryValue<boolean>
            */
            Bool: () => {
              return createBooleanValue();
            },
            /**
            * Create standard address value
            * @returns DictionaryValue<Address>
            */
            Address: () => {
              return createAddressValue();
            },
            /**
            * Create standard cell value
            * @returns DictionaryValue<Cell>
            */
            Cell: () => {
              return createCellValue();
            },
            /**
            * Create Builder value
            * @param bytes number of bytes of a buffer
            * @returns DictionaryValue<Builder>
            */
            Buffer: bytes => {
              return createBufferValue(bytes);
            },
            /**
            * Create BitString value
            * @param requested bit length
            * @returns DictionaryValue<BitString>
            * Point is that Buffer is not applicable
            * when length is not 8 bit alligned.
            */
            BitString: bits => {
              return createBitStringValue(bits);
            },
            /**
            * Create dictionary value
            * @param key
            * @param value
            */
            Dictionary: (key, value) => {
              return createDictionaryValue(key, value);
            }
          }; //
          // Keys and Values
          //
          function createAddressKey() {
            return {
              bits: 267,
              serialize: src => {
                if (!Address_1.Address.isAddress(src)) {
                  throw Error('Key is not an address');
                }
                return (0, Builder_1.beginCell)().storeAddress(src).endCell().beginParse().preloadUintBig(267);
              },
              parse: src => {
                return (0, Builder_1.beginCell)().storeUint(src, 267).endCell().beginParse().loadAddress();
              }
            };
          }
          function createBigIntKey(bits) {
            return {
              bits,
              serialize: src => {
                if (typeof src !== 'bigint') {
                  throw Error('Key is not a bigint');
                }
                return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);
              },
              parse: src => {
                return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadIntBig(bits);
              }
            };
          }
          function createIntKey(bits) {
            return {
              bits: bits,
              serialize: src => {
                if (typeof src !== 'number') {
                  throw Error('Key is not a number');
                }
                if (!Number.isSafeInteger(src)) {
                  throw Error('Key is not a safe integer: ' + src);
                }
                return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);
              },
              parse: src => {
                return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadInt(bits);
              }
            };
          }
          function createBigUintKey(bits) {
            return {
              bits,
              serialize: src => {
                if (typeof src !== 'bigint') {
                  throw Error('Key is not a bigint');
                }
                if (src < 0) {
                  throw Error('Key is negative: ' + src);
                }
                return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
              },
              parse: src => {
                return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
              }
            };
          }
          function createUintKey(bits) {
            return {
              bits,
              serialize: src => {
                if (typeof src !== 'number') {
                  throw Error('Key is not a number');
                }
                if (!Number.isSafeInteger(src)) {
                  throw Error('Key is not a safe integer: ' + src);
                }
                if (src < 0) {
                  throw Error('Key is negative: ' + src);
                }
                return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
              },
              parse: src => {
                return Number((0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUint(bits));
              }
            };
          }
          function createBufferKey(bytes) {
            return {
              bits: bytes * 8,
              serialize: src => {
                if (!Buffer.isBuffer(src)) {
                  throw Error('Key is not a buffer');
                }
                return (0, Builder_1.beginCell)().storeBuffer(src).endCell().beginParse().loadUintBig(bytes * 8);
              },
              parse: src => {
                return (0, Builder_1.beginCell)().storeUint(src, bytes * 8).endCell().beginParse().loadBuffer(bytes);
              }
            };
          }
          function createBitStringKey(bits) {
            return {
              bits,
              serialize: src => {
                if (!BitString_1.BitString.isBitString(src)) throw Error('Key is not a BitString');
                return (0, Builder_1.beginCell)().storeBits(src).endCell().beginParse().loadUintBig(bits);
              },
              parse: src => {
                return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadBits(bits);
              }
            };
          }
          function createIntValue(bits) {
            return {
              serialize: (src, buidler) => {
                buidler.storeInt(src, bits);
              },
              parse: src => {
                return src.loadInt(bits);
              }
            };
          }
          function createBigIntValue(bits) {
            return {
              serialize: (src, buidler) => {
                buidler.storeInt(src, bits);
              },
              parse: src => {
                return src.loadIntBig(bits);
              }
            };
          }
          function createBigVarIntValue(bits) {
            return {
              serialize: (src, buidler) => {
                buidler.storeVarInt(src, bits);
              },
              parse: src => {
                return src.loadVarIntBig(bits);
              }
            };
          }
          function createBigVarUintValue(bits) {
            return {
              serialize: (src, buidler) => {
                buidler.storeVarUint(src, bits);
              },
              parse: src => {
                return src.loadVarUintBig(bits);
              }
            };
          }
          function createUintValue(bits) {
            return {
              serialize: (src, buidler) => {
                buidler.storeUint(src, bits);
              },
              parse: src => {
                return src.loadUint(bits);
              }
            };
          }
          function createBigUintValue(bits) {
            return {
              serialize: (src, buidler) => {
                buidler.storeUint(src, bits);
              },
              parse: src => {
                return src.loadUintBig(bits);
              }
            };
          }
          function createBooleanValue() {
            return {
              serialize: (src, buidler) => {
                buidler.storeBit(src);
              },
              parse: src => {
                return src.loadBit();
              }
            };
          }
          function createAddressValue() {
            return {
              serialize: (src, buidler) => {
                buidler.storeAddress(src);
              },
              parse: src => {
                return src.loadAddress();
              }
            };
          }
          function createCellValue() {
            return {
              serialize: (src, buidler) => {
                buidler.storeRef(src);
              },
              parse: src => {
                return src.loadRef();
              }
            };
          }
          function createDictionaryValue(key, value) {
            return {
              serialize: (src, buidler) => {
                src.store(buidler);
              },
              parse: src => {
                return Dictionary.load(key, value, src);
              }
            };
          }
          function createBufferValue(size) {
            return {
              serialize: (src, buidler) => {
                if (src.length !== size) {
                  throw Error('Invalid buffer size');
                }
                buidler.storeBuffer(src);
              },
              parse: src => {
                return src.loadBuffer(size);
              }
            };
          }
          function createBitStringValue(bits) {
            return {
              serialize: (src, builder) => {
                if (src.length !== bits) {
                  throw Error('Invalid BitString size');
                }
                builder.storeBits(src);
              },
              parse: src => {
                return src.loadBits(bits);
              }
            };
          } /***/
        },
        /***/8520: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.generateMerkleProof = void 0;
          const Builder_1 = __webpack_require__(7856);
          const Cell_1 = __webpack_require__(9567);
          const readUnaryLength_1 = __webpack_require__(6156);
          function convertToPrunedBranch(c) {
            return new Cell_1.Cell({
              exotic: true,
              bits: (0, Builder_1.beginCell)().storeUint(1, 8).storeUint(1, 8).storeBuffer(c.hash(0)).storeUint(c.depth(0), 16).endCell().beginParse().loadBits(288)
            });
          }
          function convertToMerkleProof(c) {
            return new Cell_1.Cell({
              exotic: true,
              bits: (0, Builder_1.beginCell)().storeUint(3, 8).storeBuffer(c.hash(0)).storeUint(c.depth(0), 16).endCell().beginParse().loadBits(280),
              refs: [c]
            });
          }
          function doGenerateMerkleProof(prefix, slice, n, key) {
            // Reading label
            const originalCell = slice.asCell();
            let lb0 = slice.loadBit() ? 1 : 0;
            let prefixLength = 0;
            let pp = prefix;
            if (lb0 === 0) {
              // Short label detected
              // Read
              prefixLength = (0, readUnaryLength_1.readUnaryLength)(slice); // Read prefix
              for (let i = 0; i < prefixLength; i++) {
                pp += slice.loadBit() ? '1' : '0';
              }
            } else {
              let lb1 = slice.loadBit() ? 1 : 0;
              if (lb1 === 0) {
                // Long label detected
                prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
                for (let i = 0; i < prefixLength; i++) {
                  pp += slice.loadBit() ? '1' : '0';
                }
              } else {
                // Same label detected
                let bit = slice.loadBit() ? '1' : '0';
                prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
                for (let i = 0; i < prefixLength; i++) {
                  pp += bit;
                }
              }
            }
            if (n - prefixLength === 0) {
              return originalCell;
            } else {
              let sl = originalCell.beginParse();
              let left = sl.loadRef();
              let right = sl.loadRef(); // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'
              if (!left.isExotic) {
                if (pp + '0' === key.slice(0, pp.length + 1)) {
                  left = doGenerateMerkleProof(pp + '0', left.beginParse(), n - prefixLength - 1, key);
                } else {
                  left = convertToPrunedBranch(left);
                }
              }
              if (!right.isExotic) {
                if (pp + '1' === key.slice(0, pp.length + 1)) {
                  right = doGenerateMerkleProof(pp + '1', right.beginParse(), n - prefixLength - 1, key);
                } else {
                  right = convertToPrunedBranch(right);
                }
              }
              return (0, Builder_1.beginCell)().storeSlice(sl).storeRef(left).storeRef(right).endCell();
            }
          }
          function generateMerkleProof(dict, key, keyObject) {
            const s = (0, Builder_1.beginCell)().storeDictDirect(dict).endCell().beginParse();
            return convertToMerkleProof(doGenerateMerkleProof('', s, keyObject.bits, keyObject.serialize(key).toString(2).padStart(keyObject.bits, '0')));
          }
          exports.generateMerkleProof = generateMerkleProof; /***/
        },
        /***/9389: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.generateMerkleUpdate = void 0;
          const Builder_1 = __webpack_require__(7856);
          const Cell_1 = __webpack_require__(9567);
          const generateMerkleProof_1 = __webpack_require__(8520);
          function convertToMerkleUpdate(c1, c2) {
            return new Cell_1.Cell({
              exotic: true,
              bits: (0, Builder_1.beginCell)().storeUint(4, 8).storeBuffer(c1.hash(0)).storeBuffer(c2.hash(0)).storeUint(c1.depth(0), 16).storeUint(c2.depth(0), 16).endCell().beginParse().loadBits(552),
              refs: [c1, c2]
            });
          }
          function generateMerkleUpdate(dict, key, keyObject, newValue) {
            const oldProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, key, keyObject).refs[0];
            dict.set(key, newValue);
            const newProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, key, keyObject).refs[0];
            return convertToMerkleUpdate(oldProof, newProof);
          }
          exports.generateMerkleUpdate = generateMerkleUpdate; /***/
        },
        /***/9558: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.parseDict = void 0;
          function readUnaryLength(slice) {
            let res = 0;
            while (slice.loadBit()) {
              res++;
            }
            return res;
          }
          function doParse(prefix, slice, n, res, extractor) {
            // Reading label
            let lb0 = slice.loadBit() ? 1 : 0;
            let prefixLength = 0;
            let pp = prefix;
            if (lb0 === 0) {
              // Short label detected
              // Read 
              prefixLength = readUnaryLength(slice); // Read prefix
              for (let i = 0; i < prefixLength; i++) {
                pp += slice.loadBit() ? '1' : '0';
              }
            } else {
              let lb1 = slice.loadBit() ? 1 : 0;
              if (lb1 === 0) {
                // Long label detected
                prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
                for (let i = 0; i < prefixLength; i++) {
                  pp += slice.loadBit() ? '1' : '0';
                }
              } else {
                // Same label detected
                let bit = slice.loadBit() ? '1' : '0';
                prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
                for (let i = 0; i < prefixLength; i++) {
                  pp += bit;
                }
              }
            }
            if (n - prefixLength === 0) {
              res.set(BigInt('0b' + pp), extractor(slice));
            } else {
              let left = slice.loadRef();
              let right = slice.loadRef(); // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'
              if (!left.isExotic) {
                doParse(pp + '0', left.beginParse(), n - prefixLength - 1, res, extractor);
              }
              if (!right.isExotic) {
                doParse(pp + '1', right.beginParse(), n - prefixLength - 1, res, extractor);
              }
            }
          }
          function parseDict(sc, keySize, extractor) {
            let res = new Map();
            if (sc) {
              doParse('', sc, keySize, res, extractor);
            }
            return res;
          }
          exports.parseDict = parseDict; /***/
        },
        /***/2323: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.serializeDict = exports.detectLabelType = exports.writeLabelSame = exports.writeLabelLong = exports.writeLabelShort = exports.buildTree = void 0;
          const Builder_1 = __webpack_require__(7856);
          const findCommonPrefix_1 = __webpack_require__(8605); //
          // Tree Build
          //
          function pad(src, size) {
            while (src.length < size) {
              src = '0' + src;
            }
            return src;
          }
          function removePrefixMap(src, length) {
            if (length === 0) {
              return src;
            } else {
              let res = new Map();
              for (let k of src.keys()) {
                let d = src.get(k);
                res.set(k.slice(length), d);
              }
              return res;
            }
          }
          function forkMap(src) {
            if (src.size === 0) {
              throw Error('Internal inconsistency');
            }
            let left = new Map();
            let right = new Map();
            for (let k of src.keys()) {
              let d = src.get(k);
              if (k.startsWith('0')) {
                left.set(k.substr(1), d);
              } else {
                right.set(k.substr(1), d);
              }
            }
            if (left.size === 0) {
              throw Error('Internal inconsistency. Left emtpy.');
            }
            if (right.size === 0) {
              throw Error('Internal inconsistency. Right emtpy.');
            }
            return {
              left,
              right
            };
          }
          function buildNode(src) {
            if (src.size === 0) {
              throw Error('Internal inconsistency');
            }
            if (src.size === 1) {
              return {
                type: 'leaf',
                value: Array.from(src.values())[0]
              };
            }
            let {
              left,
              right
            } = forkMap(src);
            return {
              type: 'fork',
              left: buildEdge(left),
              right: buildEdge(right)
            };
          }
          function buildEdge(src) {
            if (src.size === 0) {
              throw Error('Internal inconsistency');
            }
            const label = (0, findCommonPrefix_1.findCommonPrefix)(Array.from(src.keys()));
            return {
              label,
              node: buildNode(removePrefixMap(src, label.length))
            };
          }
          function buildTree(src, keyLength) {
            // Convert map keys
            let converted = new Map();
            for (let k of Array.from(src.keys())) {
              const padded = pad(k.toString(2), keyLength);
              converted.set(padded, src.get(k));
            } // Calculate root label
            return buildEdge(converted);
          }
          exports.buildTree = buildTree; //
          // Serialization
          //
          function writeLabelShort(src, to) {
            // Header
            to.storeBit(0); // Unary length
            for (let i = 0; i < src.length; i++) {
              to.storeBit(1);
            }
            to.storeBit(0); // Value
            for (let i = 0; i < src.length; i++) {
              to.storeBit(src[i] === '1');
            }
            return to;
          }
          exports.writeLabelShort = writeLabelShort;
          function labelShortLength(src) {
            return 1 + src.length + 1 + src.length;
          }
          function writeLabelLong(src, keyLength, to) {
            // Header
            to.storeBit(1);
            to.storeBit(0); // Length
            let length = Math.ceil(Math.log2(keyLength + 1));
            to.storeUint(src.length, length); // Value
            for (let i = 0; i < src.length; i++) {
              to.storeBit(src[i] === '1');
            }
            return to;
          }
          exports.writeLabelLong = writeLabelLong;
          function labelLongLength(src, keyLength) {
            return 1 + 1 + Math.ceil(Math.log2(keyLength + 1)) + src.length;
          }
          function writeLabelSame(value, length, keyLength, to) {
            // Header
            to.storeBit(1);
            to.storeBit(1); // Value
            to.storeBit(value); // Length
            let lenLen = Math.ceil(Math.log2(keyLength + 1));
            to.storeUint(length, lenLen);
          }
          exports.writeLabelSame = writeLabelSame;
          function labelSameLength(keyLength) {
            return 1 + 1 + 1 + Math.ceil(Math.log2(keyLength + 1));
          }
          function isSame(src) {
            if (src.length === 0 || src.length === 1) {
              return true;
            }
            for (let i = 1; i < src.length; i++) {
              if (src[i] !== src[0]) {
                return false;
              }
            }
            return true;
          }
          function detectLabelType(src, keyLength) {
            let kind = 'short';
            let kindLength = labelShortLength(src);
            let longLength = labelLongLength(src, keyLength);
            if (longLength < kindLength) {
              kindLength = longLength;
              kind = 'long';
            }
            if (isSame(src)) {
              let sameLength = labelSameLength(keyLength);
              if (sameLength < kindLength) {
                kindLength = sameLength;
                kind = 'same';
              }
            }
            return kind;
          }
          exports.detectLabelType = detectLabelType;
          function writeLabel(src, keyLength, to) {
            let type = detectLabelType(src, keyLength);
            if (type === 'short') {
              writeLabelShort(src, to);
            }
            if (type === 'long') {
              writeLabelLong(src, keyLength, to);
            }
            if (type === 'same') {
              writeLabelSame(src[0] === '1', src.length, keyLength, to);
            }
          }
          function writeNode(src, keyLength, serializer, to) {
            if (src.type === 'leaf') {
              serializer(src.value, to);
            }
            if (src.type === 'fork') {
              const leftCell = (0, Builder_1.beginCell)();
              const rightCell = (0, Builder_1.beginCell)();
              writeEdge(src.left, keyLength - 1, serializer, leftCell);
              writeEdge(src.right, keyLength - 1, serializer, rightCell);
              to.storeRef(leftCell);
              to.storeRef(rightCell);
            }
          }
          function writeEdge(src, keyLength, serializer, to) {
            writeLabel(src.label, keyLength, to);
            writeNode(src.node, keyLength - src.label.length, serializer, to);
          }
          function serializeDict(src, keyLength, serializer, to) {
            const tree = buildTree(src, keyLength);
            writeEdge(tree, keyLength, serializer, to);
          }
          exports.serializeDict = serializeDict; /***/
        },
        /***/8605: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.findCommonPrefix = void 0;
          function findCommonPrefix(src) {
            // Corner cases
            if (src.length === 0) {
              return '';
            }
            if (src.length === 1) {
              return src[0];
            } // Searching for prefix
            const sorted = [...src].sort();
            let size = 0;
            for (let i = 0; i < sorted[0].length; i++) {
              if (sorted[0][i] !== sorted[sorted.length - 1][i]) {
                break;
              }
              size++;
            }
            return src[0].slice(0, size);
          }
          exports.findCommonPrefix = findCommonPrefix; /***/
        },
        /***/4719: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.deserializeInternalKey = exports.serializeInternalKey = void 0;
          const Address_1 = __webpack_require__(6575);
          const BitString_1 = __webpack_require__(8261);
          const paddedBits_1 = __webpack_require__(355);
          function serializeInternalKey(value) {
            if (typeof value === 'number') {
              if (!Number.isSafeInteger(value)) {
                throw Error('Invalid key type: not a safe integer: ' + value);
              }
              return 'n:' + value.toString(10);
            } else if (typeof value === 'bigint') {
              return 'b:' + value.toString(10);
            } else if (Address_1.Address.isAddress(value)) {
              return 'a:' + value.toString();
            } else if (Buffer.isBuffer(value)) {
              return 'f:' + value.toString('hex');
            } else if (BitString_1.BitString.isBitString(value)) {
              return 'B:' + value.toString();
            } else {
              throw Error('Invalid key type');
            }
          }
          exports.serializeInternalKey = serializeInternalKey;
          function deserializeInternalKey(value) {
            let k = value.slice(0, 2);
            let v = value.slice(2);
            if (k === 'n:') {
              return parseInt(v, 10);
            } else if (k === 'b:') {
              return BigInt(v);
            } else if (k === 'a:') {
              return Address_1.Address.parse(v);
            } else if (k === 'f:') {
              return Buffer.from(v, 'hex');
            } else if (k === 'B:') {
              const lastDash = v.slice(-1) == "_";
              const isPadded = lastDash || v.length % 2 != 0;
              if (isPadded) {
                let charLen = lastDash ? v.length - 1 : v.length;
                const padded = v.substr(0, charLen) + "0"; //Padding
                if (!lastDash && (charLen & 1) !== 0) {
                  // Four bit nibmle without padding
                  return new BitString_1.BitString(Buffer.from(padded, 'hex'), 0, charLen << 2);
                } else {
                  return (0, paddedBits_1.paddedBufferToBits)(Buffer.from(padded, 'hex'));
                }
              } else {
                return new BitString_1.BitString(Buffer.from(v, 'hex'), 0, v.length << 2);
              }
            }
            throw Error('Invalid key type: ' + k);
          }
          exports.deserializeInternalKey = deserializeInternalKey; /***/
        },
        /***/6156: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.readUnaryLength = void 0;
          function readUnaryLength(slice) {
            let res = 0;
            while (slice.loadBit()) {
              res++;
            }
            return res;
          }
          exports.readUnaryLength = readUnaryLength; /***/
        },
        /***/6900: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }
            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          });
          var __exportStar = this && this.__exportStar || function (m, exports) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.safeSignVerify = exports.safeSign = exports.getMethodId = exports.base32Encode = exports.base32Decode = exports.crc32c = exports.crc16 = exports.fromNano = exports.toNano = exports.ComputeError = exports.openContract = exports.TupleBuilder = exports.TupleReader = exports.serializeTuple = exports.parseTuple = exports.generateMerkleUpdate = exports.generateMerkleProof = exports.exoticPruned = exports.exoticMerkleUpdate = exports.exoticMerkleProof = exports.Dictionary = exports.Cell = exports.CellType = exports.Slice = exports.beginCell = exports.Builder = exports.BitBuilder = exports.BitReader = exports.BitString = exports.contractAddress = exports.ADNLAddress = exports.ExternalAddress = exports.address = exports.Address = void 0; // Address
          var Address_1 = __webpack_require__(6575);
          Object.defineProperty(exports, "Address", {
            enumerable: true,
            get: function () {
              return Address_1.Address;
            }
          });
          Object.defineProperty(exports, "address", {
            enumerable: true,
            get: function () {
              return Address_1.address;
            }
          });
          var ExternalAddress_1 = __webpack_require__(8366);
          Object.defineProperty(exports, "ExternalAddress", {
            enumerable: true,
            get: function () {
              return ExternalAddress_1.ExternalAddress;
            }
          });
          var ADNLAddress_1 = __webpack_require__(1470);
          Object.defineProperty(exports, "ADNLAddress", {
            enumerable: true,
            get: function () {
              return ADNLAddress_1.ADNLAddress;
            }
          });
          var contractAddress_1 = __webpack_require__(1837);
          Object.defineProperty(exports, "contractAddress", {
            enumerable: true,
            get: function () {
              return contractAddress_1.contractAddress;
            }
          }); // BitString
          var BitString_1 = __webpack_require__(8261);
          Object.defineProperty(exports, "BitString", {
            enumerable: true,
            get: function () {
              return BitString_1.BitString;
            }
          });
          var BitReader_1 = __webpack_require__(2391);
          Object.defineProperty(exports, "BitReader", {
            enumerable: true,
            get: function () {
              return BitReader_1.BitReader;
            }
          });
          var BitBuilder_1 = __webpack_require__(8889);
          Object.defineProperty(exports, "BitBuilder", {
            enumerable: true,
            get: function () {
              return BitBuilder_1.BitBuilder;
            }
          }); // Cell
          var Builder_1 = __webpack_require__(7856);
          Object.defineProperty(exports, "Builder", {
            enumerable: true,
            get: function () {
              return Builder_1.Builder;
            }
          });
          Object.defineProperty(exports, "beginCell", {
            enumerable: true,
            get: function () {
              return Builder_1.beginCell;
            }
          });
          var Slice_1 = __webpack_require__(7681);
          Object.defineProperty(exports, "Slice", {
            enumerable: true,
            get: function () {
              return Slice_1.Slice;
            }
          });
          var CellType_1 = __webpack_require__(7623);
          Object.defineProperty(exports, "CellType", {
            enumerable: true,
            get: function () {
              return CellType_1.CellType;
            }
          });
          var Cell_1 = __webpack_require__(9567);
          Object.defineProperty(exports, "Cell", {
            enumerable: true,
            get: function () {
              return Cell_1.Cell;
            }
          }); // Dict
          var Dictionary_1 = __webpack_require__(5189);
          Object.defineProperty(exports, "Dictionary", {
            enumerable: true,
            get: function () {
              return Dictionary_1.Dictionary;
            }
          }); // Exotics
          var exoticMerkleProof_1 = __webpack_require__(2294);
          Object.defineProperty(exports, "exoticMerkleProof", {
            enumerable: true,
            get: function () {
              return exoticMerkleProof_1.exoticMerkleProof;
            }
          });
          var exoticMerkleUpdate_1 = __webpack_require__(2319);
          Object.defineProperty(exports, "exoticMerkleUpdate", {
            enumerable: true,
            get: function () {
              return exoticMerkleUpdate_1.exoticMerkleUpdate;
            }
          });
          var exoticPruned_1 = __webpack_require__(5488);
          Object.defineProperty(exports, "exoticPruned", {
            enumerable: true,
            get: function () {
              return exoticPruned_1.exoticPruned;
            }
          }); // Merkle trees
          var generateMerkleProof_1 = __webpack_require__(8520);
          Object.defineProperty(exports, "generateMerkleProof", {
            enumerable: true,
            get: function () {
              return generateMerkleProof_1.generateMerkleProof;
            }
          });
          var generateMerkleUpdate_1 = __webpack_require__(9389);
          Object.defineProperty(exports, "generateMerkleUpdate", {
            enumerable: true,
            get: function () {
              return generateMerkleUpdate_1.generateMerkleUpdate;
            }
          });
          var tuple_1 = __webpack_require__(6983);
          Object.defineProperty(exports, "parseTuple", {
            enumerable: true,
            get: function () {
              return tuple_1.parseTuple;
            }
          });
          Object.defineProperty(exports, "serializeTuple", {
            enumerable: true,
            get: function () {
              return tuple_1.serializeTuple;
            }
          });
          var reader_1 = __webpack_require__(9626);
          Object.defineProperty(exports, "TupleReader", {
            enumerable: true,
            get: function () {
              return reader_1.TupleReader;
            }
          });
          var builder_1 = __webpack_require__(2954);
          Object.defineProperty(exports, "TupleBuilder", {
            enumerable: true,
            get: function () {
              return builder_1.TupleBuilder;
            }
          }); // Types
          __exportStar(__webpack_require__(6341), exports);
          var openContract_1 = __webpack_require__(4693);
          Object.defineProperty(exports, "openContract", {
            enumerable: true,
            get: function () {
              return openContract_1.openContract;
            }
          });
          var ComputeError_1 = __webpack_require__(8342);
          Object.defineProperty(exports, "ComputeError", {
            enumerable: true,
            get: function () {
              return ComputeError_1.ComputeError;
            }
          }); // Utility
          var convert_1 = __webpack_require__(4429);
          Object.defineProperty(exports, "toNano", {
            enumerable: true,
            get: function () {
              return convert_1.toNano;
            }
          });
          Object.defineProperty(exports, "fromNano", {
            enumerable: true,
            get: function () {
              return convert_1.fromNano;
            }
          });
          var crc16_1 = __webpack_require__(431);
          Object.defineProperty(exports, "crc16", {
            enumerable: true,
            get: function () {
              return crc16_1.crc16;
            }
          });
          var crc32c_1 = __webpack_require__(2444);
          Object.defineProperty(exports, "crc32c", {
            enumerable: true,
            get: function () {
              return crc32c_1.crc32c;
            }
          });
          var base32_1 = __webpack_require__(7040);
          Object.defineProperty(exports, "base32Decode", {
            enumerable: true,
            get: function () {
              return base32_1.base32Decode;
            }
          });
          Object.defineProperty(exports, "base32Encode", {
            enumerable: true,
            get: function () {
              return base32_1.base32Encode;
            }
          });
          var getMethodId_1 = __webpack_require__(9578);
          Object.defineProperty(exports, "getMethodId", {
            enumerable: true,
            get: function () {
              return getMethodId_1.getMethodId;
            }
          }); // Crypto
          var safeSign_1 = __webpack_require__(3790);
          Object.defineProperty(exports, "safeSign", {
            enumerable: true,
            get: function () {
              return safeSign_1.safeSign;
            }
          });
          Object.defineProperty(exports, "safeSignVerify", {
            enumerable: true,
            get: function () {
              return safeSign_1.safeSignVerify;
            }
          }); /***/
        },
        /***/2954: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TupleBuilder = void 0;
          const Builder_1 = __webpack_require__(7856);
          const Cell_1 = __webpack_require__(9567);
          const Slice_1 = __webpack_require__(7681);
          class TupleBuilder {
            constructor() {
              this._tuple = [];
            }
            writeNumber(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                this._tuple.push({
                  type: 'int',
                  value: BigInt(v)
                });
              }
            }
            writeBoolean(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                this._tuple.push({
                  type: 'int',
                  value: v ? -1n : 0n
                });
              }
            }
            writeBuffer(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                this._tuple.push({
                  type: 'slice',
                  cell: (0, Builder_1.beginCell)().storeBuffer(v).endCell()
                });
              }
            }
            writeString(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                this._tuple.push({
                  type: 'slice',
                  cell: (0, Builder_1.beginCell)().storeStringTail(v).endCell()
                });
              }
            }
            writeCell(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                if (v instanceof Cell_1.Cell) {
                  this._tuple.push({
                    type: 'cell',
                    cell: v
                  });
                } else if (v instanceof Slice_1.Slice) {
                  this._tuple.push({
                    type: 'cell',
                    cell: v.asCell()
                  });
                }
              }
            }
            writeSlice(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                if (v instanceof Cell_1.Cell) {
                  this._tuple.push({
                    type: 'slice',
                    cell: v
                  });
                } else if (v instanceof Slice_1.Slice) {
                  this._tuple.push({
                    type: 'slice',
                    cell: v.asCell()
                  });
                }
              }
            }
            writeBuilder(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                if (v instanceof Cell_1.Cell) {
                  this._tuple.push({
                    type: 'builder',
                    cell: v
                  });
                } else if (v instanceof Slice_1.Slice) {
                  this._tuple.push({
                    type: 'builder',
                    cell: v.asCell()
                  });
                }
              }
            }
            writeTuple(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                this._tuple.push({
                  type: 'tuple',
                  items: v
                });
              }
            }
            writeAddress(v) {
              if (v === null || v === undefined) {
                this._tuple.push({
                  type: 'null'
                });
              } else {
                this._tuple.push({
                  type: 'slice',
                  cell: (0, Builder_1.beginCell)().storeAddress(v).endCell()
                });
              }
            }
            build() {
              return [...this._tuple];
            }
          }
          exports.TupleBuilder = TupleBuilder; /***/
        },
        /***/9626: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TupleReader = void 0;
          class TupleReader {
            constructor(items) {
              this.items = [...items];
            }
            get remaining() {
              return this.items.length;
            }
            peek() {
              if (this.items.length === 0) {
                throw Error('EOF');
              }
              return this.items[0];
            }
            pop() {
              if (this.items.length === 0) {
                throw Error('EOF');
              }
              let res = this.items[0];
              this.items.splice(0, 1);
              return res;
            }
            skip(num) {
              if (num === void 0) {
                num = 1;
              }
              for (let i = 0; i < num; i++) {
                this.pop();
              }
              return this;
            }
            readBigNumber() {
              let popped = this.pop();
              if (popped.type !== 'int') {
                throw Error('Not a number');
              }
              return popped.value;
            }
            readBigNumberOpt() {
              let popped = this.pop();
              if (popped.type === 'null') {
                return null;
              }
              if (popped.type !== 'int') {
                throw Error('Not a number');
              }
              return popped.value;
            }
            readNumber() {
              return Number(this.readBigNumber());
            }
            readNumberOpt() {
              let r = this.readBigNumberOpt();
              if (r !== null) {
                return Number(r);
              } else {
                return null;
              }
            }
            readBoolean() {
              let res = this.readNumber();
              return res === 0 ? false : true;
            }
            readBooleanOpt() {
              let res = this.readNumberOpt();
              if (res !== null) {
                return res === 0 ? false : true;
              } else {
                return null;
              }
            }
            readAddress() {
              let r = this.readCell().beginParse().loadAddress();
              if (r !== null) {
                return r;
              } else {
                throw Error('Not an address');
              }
            }
            readAddressOpt() {
              let r = this.readCellOpt();
              if (r !== null) {
                return r.beginParse().loadMaybeAddress();
              } else {
                return null;
              }
            }
            readCell() {
              let popped = this.pop();
              if (popped.type !== 'cell' && popped.type !== 'slice' && popped.type !== 'builder') {
                throw Error('Not a cell: ' + popped.type);
              }
              return popped.cell;
            }
            readCellOpt() {
              let popped = this.pop();
              if (popped.type === 'null') {
                return null;
              }
              if (popped.type !== 'cell' && popped.type !== 'slice' && popped.type !== 'builder') {
                throw Error('Not a cell');
              }
              return popped.cell;
            }
            readTuple() {
              let popped = this.pop();
              if (popped.type !== 'tuple') {
                throw Error('Not a tuple');
              }
              return new TupleReader(popped.items);
            }
            readTupleOpt() {
              let popped = this.pop();
              if (popped.type === 'null') {
                return null;
              }
              if (popped.type !== 'tuple') {
                throw Error('Not a tuple');
              }
              return new TupleReader(popped.items);
            }
            static readLispList(reader) {
              const result = [];
              let tail = reader;
              while (tail !== null) {
                var head = tail.pop();
                if (tail.items.length === 0 || tail.items[0].type !== 'tuple' && tail.items[0].type !== 'null') {
                  throw Error('Lisp list consists only from (any, tuple) elements and ends with null');
                }
                tail = tail.readTupleOpt();
                result.push(head);
              }
              return result;
            }
            readLispListDirect() {
              if (this.items.length === 1 && this.items[0].type === 'null') {
                return [];
              }
              return TupleReader.readLispList(this);
            }
            readLispList() {
              return TupleReader.readLispList(this.readTupleOpt());
            }
            readBuffer() {
              let s = this.readCell().beginParse();
              if (s.remainingRefs !== 0) {
                throw Error('Not a buffer');
              }
              if (s.remainingBits % 8 !== 0) {
                throw Error('Not a buffer');
              }
              return s.loadBuffer(s.remainingBits / 8);
            }
            readBufferOpt() {
              let popped = this.peek();
              if (popped.type === 'null') {
                return null;
              }
              let s = this.readCell().beginParse();
              if (s.remainingRefs !== 0) {
                throw Error('Not a buffer');
              }
              if (s.remainingBits % 8 !== 0) {
                throw Error('Not a buffer');
              }
              return s.loadBuffer(s.remainingBits / 8);
            }
            readString() {
              let s = this.readCell().beginParse();
              return s.loadStringTail();
            }
            readStringOpt() {
              let popped = this.peek();
              if (popped.type === 'null') {
                return null;
              }
              let s = this.readCell().beginParse();
              return s.loadStringTail();
            }
          }
          exports.TupleReader = TupleReader; /***/
        },
        /***/6983: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.parseTuple = exports.serializeTuple = void 0;
          const Builder_1 = __webpack_require__(7856);
          const INT64_MIN = BigInt('-9223372036854775808');
          const INT64_MAX = BigInt('9223372036854775807'); // vm_stk_null#00 = VmStackValue;
          // vm_stk_tinyint#01 value:int64 = VmStackValue;
          // vm_stk_int#0201_ value:int257 = VmStackValue;
          // vm_stk_nan#02ff = VmStackValue;
          // vm_stk_cell#03 cell:^Cell = VmStackValue;
          //_ cell:^Cell st_bits:(## 10) end_bits:(## 10) { st_bits <= end_bits }
          //   st_ref:(#<= 4) end_ref:(#<= 4) { st_ref <= end_ref } = VmCellSlice;
          // vm_stk_slice#04 _:VmCellSlice = VmStackValue;
          // vm_stk_builder#05 cell:^Cell = VmStackValue;
          // vm_stk_cont#06 cont:VmCont = VmStackValue;
          // vm_tupref_nil$_ = VmTupleRef 0;
          // vm_tupref_single$_ entry:^VmStackValue = VmTupleRef 1;
          // vm_tupref_any$_ {n:#} ref:^(VmTuple (n + 2)) = VmTupleRef (n + 2);
          // vm_tuple_nil$_ = VmTuple 0;
          // vm_tuple_tcons$_ {n:#} head:(VmTupleRef n) tail:^VmStackValue = VmTuple (n + 1);
          // vm_stk_tuple#07 len:(## 16) data:(VmTuple len) = VmStackValue;
          function serializeTupleItem(src, builder) {
            if (src.type === 'null') {
              builder.storeUint(0x00, 8);
            } else if (src.type === 'int') {
              if (src.value <= INT64_MAX && src.value >= INT64_MIN) {
                builder.storeUint(0x01, 8);
                builder.storeInt(src.value, 64);
              } else {
                builder.storeUint(0x0100, 15);
                builder.storeInt(src.value, 257);
              }
            } else if (src.type === 'nan') {
              builder.storeInt(0x02ff, 16);
            } else if (src.type === 'cell') {
              builder.storeUint(0x03, 8);
              builder.storeRef(src.cell);
            } else if (src.type === 'slice') {
              builder.storeUint(0x04, 8);
              builder.storeUint(0, 10);
              builder.storeUint(src.cell.bits.length, 10);
              builder.storeUint(0, 3);
              builder.storeUint(src.cell.refs.length, 3);
              builder.storeRef(src.cell);
            } else if (src.type === 'builder') {
              builder.storeUint(0x05, 8);
              builder.storeRef(src.cell);
            } else if (src.type === 'tuple') {
              let head = null;
              let tail = null;
              for (let i = 0; i < src.items.length; i++) {
                // Swap
                let s = head;
                head = tail;
                tail = s;
                if (i > 1) {
                  head = (0, Builder_1.beginCell)().storeRef(tail).storeRef(head).endCell();
                }
                let bc = (0, Builder_1.beginCell)();
                serializeTupleItem(src.items[i], bc);
                tail = bc.endCell();
              }
              builder.storeUint(0x07, 8);
              builder.storeUint(src.items.length, 16);
              if (head) {
                builder.storeRef(head);
              }
              if (tail) {
                builder.storeRef(tail);
              }
            } else {
              throw Error('Invalid value');
            }
          }
          function parseStackItem(cs) {
            let kind = cs.loadUint(8);
            if (kind === 0) {
              return {
                type: 'null'
              };
            } else if (kind === 1) {
              return {
                type: 'int',
                value: cs.loadIntBig(64)
              };
            } else if (kind === 2) {
              if (cs.loadUint(7) === 0) {
                return {
                  type: 'int',
                  value: cs.loadIntBig(257)
                };
              } else {
                cs.loadBit(); // must eq 1
                return {
                  type: 'nan'
                };
              }
            } else if (kind === 3) {
              return {
                type: 'cell',
                cell: cs.loadRef()
              };
            } else if (kind === 4) {
              let startBits = cs.loadUint(10);
              let endBits = cs.loadUint(10);
              let startRefs = cs.loadUint(3);
              let endRefs = cs.loadUint(3); // Copy to new cell
              let rs = cs.loadRef().beginParse();
              rs.skip(startBits);
              let dt = rs.loadBits(endBits - startBits);
              let builder = (0, Builder_1.beginCell)().storeBits(dt); // Copy refs if exist
              if (startRefs < endRefs) {
                for (let i = 0; i < startRefs; i++) {
                  rs.loadRef();
                }
                for (let i = 0; i < endRefs - startRefs; i++) {
                  builder.storeRef(rs.loadRef());
                }
              }
              return {
                type: 'slice',
                cell: builder.endCell()
              };
            } else if (kind === 5) {
              return {
                type: 'builder',
                cell: cs.loadRef()
              };
            } else if (kind === 7) {
              let length = cs.loadUint(16);
              let items = [];
              if (length > 1) {
                let head = cs.loadRef().beginParse();
                let tail = cs.loadRef().beginParse();
                items.unshift(parseStackItem(tail));
                for (let i = 0; i < length - 2; i++) {
                  let ohead = head;
                  head = ohead.loadRef().beginParse();
                  tail = ohead.loadRef().beginParse();
                  items.unshift(parseStackItem(tail));
                }
                items.unshift(parseStackItem(head));
              } else if (length === 1) {
                items.push(parseStackItem(cs.loadRef().beginParse()));
              }
              return {
                type: 'tuple',
                items
              };
            } else {
              throw Error('Unsupported stack item');
            }
          } //
          // Stack parsing
          // Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/block.tlb#L783
          //
          // vm_stack#_ depth:(## 24) stack:(VmStackList depth) = VmStack;
          // vm_stk_cons#_ {n:#} rest:^(VmStackList n) tos:VmStackValue = VmStackList (n + 1);
          // vm_stk_nil#_ = VmStackList 0;
          //
          function serializeTupleTail(src, builder) {
            if (src.length > 0) {
              // rest:^(VmStackList n)
              let tail = (0, Builder_1.beginCell)();
              serializeTupleTail(src.slice(0, src.length - 1), tail);
              builder.storeRef(tail.endCell()); // tos
              serializeTupleItem(src[src.length - 1], builder);
            }
          }
          function serializeTuple(src) {
            let builder = (0, Builder_1.beginCell)();
            builder.storeUint(src.length, 24);
            let r = [...src];
            serializeTupleTail(r, builder);
            return builder.endCell();
          }
          exports.serializeTuple = serializeTuple;
          function parseTuple(src) {
            let res = [];
            let cs = src.beginParse();
            let size = cs.loadUint(24);
            for (let i = 0; i < size; i++) {
              let next = cs.loadRef();
              res.unshift(parseStackItem(cs));
              cs = next.beginParse();
            }
            return res;
          }
          exports.parseTuple = parseTuple; /***/
        },
        /***/6721: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeAccount = exports.loadAccount = void 0;
          const AccountStorage_1 = __webpack_require__(9904);
          const StorageInto_1 = __webpack_require__(9573);
          function loadAccount(slice) {
            return {
              addr: slice.loadAddress(),
              storageStats: (0, StorageInto_1.loadStorageInfo)(slice),
              storage: (0, AccountStorage_1.loadAccountStorage)(slice)
            };
          }
          exports.loadAccount = loadAccount;
          function storeAccount(src) {
            return builder => {
              builder.storeAddress(src.addr);
              builder.store((0, StorageInto_1.storeStorageInfo)(src.storageStats));
              builder.store((0, AccountStorage_1.storeAccountStorage)(src.storage));
            };
          }
          exports.storeAccount = storeAccount; /***/
        },
        /***/4368: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeAccountState = exports.loadAccountState = void 0;
          const StateInit_1 = __webpack_require__(3545);
          function loadAccountState(cs) {
            if (cs.loadBit()) {
              return {
                type: 'active',
                state: (0, StateInit_1.loadStateInit)(cs)
              };
            } else if (cs.loadBit()) {
              return {
                type: 'frozen',
                stateHash: cs.loadUintBig(256)
              };
            } else {
              return {
                type: 'uninit'
              };
            }
          }
          exports.loadAccountState = loadAccountState;
          function storeAccountState(src) {
            return builder => {
              if (src.type === 'active') {
                builder.storeBit(true);
                builder.store((0, StateInit_1.storeStateInit)(src.state));
              } else if (src.type === 'frozen') {
                builder.storeBit(false);
                builder.storeBit(true);
                builder.storeUint(src.stateHash, 256);
              } else if (src.type === 'uninit') {
                builder.storeBit(false);
                builder.storeBit(false);
              }
            };
          }
          exports.storeAccountState = storeAccountState; /***/
        },
        /***/8287: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeAccountStatus = exports.loadAccountStatus = void 0; /**
                                                                           * Load account state from slice
                                                                           * @param slice
                                                                           * @returns AccountState
                                                                           */
          function loadAccountStatus(slice) {
            const status = slice.loadUint(2);
            if (status === 0x00) {
              return 'uninitialized';
            }
            if (status === 0x01) {
              return 'frozen';
            }
            if (status === 0x02) {
              return 'active';
            }
            if (status === 0x03) {
              return 'non-existing';
            }
            throw Error('Invalid data');
          }
          exports.loadAccountStatus = loadAccountStatus; /**
                                                         * Store account state to builder
                                                         * @param src account state
                                                         * @param builder buidler
                                                         */
          function storeAccountStatus(src) {
            return builder => {
              if (src === 'uninitialized') {
                builder.storeUint(0x00, 2);
              } else if (src === 'frozen') {
                builder.storeUint(0x01, 2);
              } else if (src === 'active') {
                builder.storeUint(0x02, 2);
              } else if (src === 'non-existing') {
                builder.storeUint(0x03, 2);
              } else {
                throw Error('Invalid data');
              }
              return builder;
            };
          }
          exports.storeAccountStatus = storeAccountStatus; /***/
        },
        /***/991: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeAccountStatusChange = exports.loadAccountStatusChange = void 0;
          function loadAccountStatusChange(slice) {
            if (!slice.loadBit()) {
              return 'unchanged';
            }
            if (slice.loadBit()) {
              return 'frozen';
            } else {
              return 'deleted';
            }
          }
          exports.loadAccountStatusChange = loadAccountStatusChange;
          function storeAccountStatusChange(src) {
            return builder => {
              if (src == 'unchanged') {
                builder.storeBit(0);
              } else if (src === 'frozen') {
                builder.storeBit(1);
                builder.storeBit(0);
              } else if (src === 'deleted') {
                builder.storeBit(1);
                builder.storeBit(1);
              } else {
                throw Error('Invalid account status change');
              }
            };
          }
          exports.storeAccountStatusChange = storeAccountStatusChange; /***/
        },
        /***/9904: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeAccountStorage = exports.loadAccountStorage = void 0;
          const AccountState_1 = __webpack_require__(4368);
          const CurrencyCollection_1 = __webpack_require__(5467);
          function loadAccountStorage(slice) {
            return {
              lastTransLt: slice.loadUintBig(64),
              balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice),
              state: (0, AccountState_1.loadAccountState)(slice)
            };
          }
          exports.loadAccountStorage = loadAccountStorage;
          function storeAccountStorage(src) {
            return builder => {
              builder.storeUint(src.lastTransLt, 64);
              builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));
              builder.store((0, AccountState_1.storeAccountState)(src.state));
            };
          }
          exports.storeAccountStorage = storeAccountStorage; /***/
        },
        /***/426: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = void 0;
          const CurrencyCollection_1 = __webpack_require__(5467);
          function loadCommonMessageInfo(slice) {
            // Internal message
            if (!slice.loadBit()) {
              const ihrDisabled = slice.loadBit();
              const bounce = slice.loadBit();
              const bounced = slice.loadBit();
              const src = slice.loadAddress();
              const dest = slice.loadAddress();
              const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
              const ihrFee = slice.loadCoins();
              const forwardFee = slice.loadCoins();
              const createdLt = slice.loadUintBig(64);
              const createdAt = slice.loadUint(32);
              return {
                type: 'internal',
                ihrDisabled,
                bounce,
                bounced,
                src,
                dest,
                value,
                ihrFee,
                forwardFee,
                createdLt,
                createdAt
              };
            } // External In mesage
            if (!slice.loadBit()) {
              const src = slice.loadMaybeExternalAddress();
              const dest = slice.loadAddress();
              const importFee = slice.loadCoins();
              return {
                type: 'external-in',
                src,
                dest,
                importFee
              };
            } // External Out message
            const src = slice.loadAddress();
            const dest = slice.loadMaybeExternalAddress();
            const createdLt = slice.loadUintBig(64);
            const createdAt = slice.loadUint(32);
            return {
              type: 'external-out',
              src,
              dest,
              createdLt,
              createdAt
            };
          }
          exports.loadCommonMessageInfo = loadCommonMessageInfo;
          function storeCommonMessageInfo(source) {
            return builder => {
              if (source.type === 'internal') {
                builder.storeBit(0);
                builder.storeBit(source.ihrDisabled);
                builder.storeBit(source.bounce);
                builder.storeBit(source.bounced);
                builder.storeAddress(source.src);
                builder.storeAddress(source.dest);
                builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));
                builder.storeCoins(source.ihrFee);
                builder.storeCoins(source.forwardFee);
                builder.storeUint(source.createdLt, 64);
                builder.storeUint(source.createdAt, 32);
              } else if (source.type === 'external-in') {
                builder.storeBit(1);
                builder.storeBit(0);
                builder.storeAddress(source.src);
                builder.storeAddress(source.dest);
                builder.storeCoins(source.importFee);
              } else if (source.type === 'external-out') {
                builder.storeBit(1);
                builder.storeBit(1);
                builder.storeAddress(source.src);
                builder.storeAddress(source.dest);
                builder.storeUint(source.createdLt, 64);
                builder.storeUint(source.createdAt, 32);
              } else {
                throw new Error('Unknown CommonMessageInfo type');
              }
            };
          }
          exports.storeCommonMessageInfo = storeCommonMessageInfo; /***/
        },
        /***/3335: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = void 0;
          const CurrencyCollection_1 = __webpack_require__(5467);
          function loadCommonMessageInfoRelaxed(slice) {
            // Internal message
            if (!slice.loadBit()) {
              const ihrDisabled = slice.loadBit();
              const bounce = slice.loadBit();
              const bounced = slice.loadBit();
              const src = slice.loadMaybeAddress();
              const dest = slice.loadAddress();
              const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
              const ihrFee = slice.loadCoins();
              const forwardFee = slice.loadCoins();
              const createdLt = slice.loadUintBig(64);
              const createdAt = slice.loadUint(32);
              return {
                type: 'internal',
                ihrDisabled,
                bounce,
                bounced,
                src,
                dest,
                value,
                ihrFee,
                forwardFee,
                createdLt,
                createdAt
              };
            } // External In mesage
            if (!slice.loadBit()) {
              throw Error('External In message is not possible for CommonMessageInfoRelaxed');
            } // External Out message
            const src = slice.loadMaybeAddress();
            const dest = slice.loadMaybeExternalAddress();
            const createdLt = slice.loadUintBig(64);
            const createdAt = slice.loadUint(32);
            return {
              type: 'external-out',
              src,
              dest,
              createdLt,
              createdAt
            };
          }
          exports.loadCommonMessageInfoRelaxed = loadCommonMessageInfoRelaxed;
          function storeCommonMessageInfoRelaxed(source) {
            return builder => {
              if (source.type === 'internal') {
                builder.storeBit(0);
                builder.storeBit(source.ihrDisabled);
                builder.storeBit(source.bounce);
                builder.storeBit(source.bounced);
                builder.storeAddress(source.src);
                builder.storeAddress(source.dest);
                builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));
                builder.storeCoins(source.ihrFee);
                builder.storeCoins(source.forwardFee);
                builder.storeUint(source.createdLt, 64);
                builder.storeUint(source.createdAt, 32);
              } else if (source.type === 'external-out') {
                builder.storeBit(1);
                builder.storeBit(1);
                builder.storeAddress(source.src);
                builder.storeAddress(source.dest);
                builder.storeUint(source.createdLt, 64);
                builder.storeUint(source.createdAt, 32);
              } else {
                throw new Error('Unknown CommonMessageInfo type');
              }
            };
          }
          exports.storeCommonMessageInfoRelaxed = storeCommonMessageInfoRelaxed; /***/
        },
        /***/6372: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeComputeSkipReason = exports.loadComputeSkipReason = void 0;
          function loadComputeSkipReason(slice) {
            let reason = slice.loadUint(2);
            if (reason === 0x00) {
              return 'no-state';
            } else if (reason === 0x01) {
              return 'bad-state';
            } else if (reason === 0x02) {
              return 'no-gas';
            }
            throw new Error(`Unknown ComputeSkipReason: ${reason}`);
          }
          exports.loadComputeSkipReason = loadComputeSkipReason;
          function storeComputeSkipReason(src) {
            return builder => {
              if (src === 'no-state') {
                builder.storeUint(0x00, 2);
              } else if (src === 'bad-state') {
                builder.storeUint(0x01, 2);
              } else if (src === 'no-gas') {
                builder.storeUint(0x02, 2);
              } else {
                throw new Error(`Unknown ComputeSkipReason: ${src}`);
              }
            };
          }
          exports.storeComputeSkipReason = storeComputeSkipReason; /***/
        },
        /***/5467: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeCurrencyCollection = exports.loadCurrencyCollection = void 0;
          const Dictionary_1 = __webpack_require__(5189);
          function loadCurrencyCollection(slice) {
            const coins = slice.loadCoins();
            const other = slice.loadDict(Dictionary_1.Dictionary.Keys.Uint(32), Dictionary_1.Dictionary.Values.BigVarUint(5 /* log2(32) */));
            if (other.size === 0) {
              return {
                coins
              };
            } else {
              return {
                other,
                coins
              };
            }
          }
          exports.loadCurrencyCollection = loadCurrencyCollection;
          function storeCurrencyCollection(collection) {
            return builder => {
              builder.storeCoins(collection.coins);
              if (collection.other) {
                builder.storeDict(collection.other);
              } else {
                builder.storeBit(0);
              }
            };
          }
          exports.storeCurrencyCollection = storeCurrencyCollection; /***/
        },
        /***/883: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = void 0;
          const CurrencyCollection_1 = __webpack_require__(5467);
          function loadDepthBalanceInfo(slice) {
            let splitDepth = slice.loadUint(5);
            return {
              splitDepth,
              balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice)
            };
          }
          exports.loadDepthBalanceInfo = loadDepthBalanceInfo;
          function storeDepthBalanceInfo(src) {
            return builder => {
              builder.storeUint(src.splitDepth, 5);
              builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));
            };
          }
          exports.storeDepthBalanceInfo = storeDepthBalanceInfo; /***/
        },
        /***/7661: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeHashUpdate = exports.loadHashUpdate = void 0;
          function loadHashUpdate(slice) {
            if (slice.loadUint(8) !== 0x72) {
              throw Error('Invalid data');
            }
            const oldHash = slice.loadBuffer(32);
            const newHash = slice.loadBuffer(32);
            return {
              oldHash,
              newHash
            };
          }
          exports.loadHashUpdate = loadHashUpdate;
          function storeHashUpdate(src) {
            return builder => {
              builder.storeUint(0x72, 8);
              builder.storeBuffer(src.oldHash);
              builder.storeBuffer(src.newHash);
            };
          }
          exports.storeHashUpdate = storeHashUpdate; /***/
        },
        /***/9672: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.loadMasterchainStateExtra = void 0;
          const Dictionary_1 = __webpack_require__(5189);
          const CurrencyCollection_1 = __webpack_require__(5467);
          function loadMasterchainStateExtra(cs) {
            // Check magic
            if (cs.loadUint(16) !== 0xcc26) {
              throw Error('Invalid data');
            } // Skip shard_hashes
            if (cs.loadBit()) {
              cs.loadRef();
            } // Read config
            let configAddress = cs.loadUintBig(256);
            let config = Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.Int(32), Dictionary_1.Dictionary.Values.Cell(), cs); // Rad global balance
            const globalBalance = (0, CurrencyCollection_1.loadCurrencyCollection)(cs);
            return {
              config,
              configAddress,
              globalBalance
            };
          }
          exports.loadMasterchainStateExtra = loadMasterchainStateExtra; /***/
        },
        /***/6781: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.MessageValue = exports.storeMessage = exports.loadMessage = void 0;
          const Builder_1 = __webpack_require__(7856);
          const CommonMessageInfo_1 = __webpack_require__(426);
          const StateInit_1 = __webpack_require__(3545);
          function loadMessage(slice) {
            const info = (0, CommonMessageInfo_1.loadCommonMessageInfo)(slice);
            let init = null;
            if (slice.loadBit()) {
              if (!slice.loadBit()) {
                init = (0, StateInit_1.loadStateInit)(slice);
              } else {
                init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());
              }
            }
            const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
            return {
              info,
              init,
              body
            };
          }
          exports.loadMessage = loadMessage;
          function storeMessage(message, opts) {
            return builder => {
              // Store CommonMsgInfo
              builder.store((0, CommonMessageInfo_1.storeCommonMessageInfo)(message.info)); // Store init
              if (message.init) {
                builder.storeBit(true);
                let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init)); // Check if need to store it in ref
                let needRef = false;
                if (opts && opts.forceRef) {
                  needRef = true;
                } else if (builder.availableBits - 2 /* At least on byte for ref flag */ >= initCell.bits) {
                  needRef = false;
                } else {
                  needRef = true;
                } // Persist init
                if (needRef) {
                  builder.storeBit(true);
                  builder.storeRef(initCell);
                } else {
                  builder.storeBit(false);
                  builder.storeBuilder(initCell);
                }
              } else {
                builder.storeBit(false);
              } // Store body
              let needRef = false;
              if (opts && opts.forceRef) {
                needRef = true;
              } else {
                if (builder.availableBits - 1 /* At least on byte for ref flag */ >= message.body.bits.length && builder.refs + message.body.refs.length <= 4) {
                  needRef = false;
                } else {
                  needRef = true;
                }
              }
              if (needRef) {
                builder.storeBit(true);
                builder.storeRef(message.body);
              } else {
                builder.storeBit(false);
                builder.storeBuilder(message.body.asBuilder());
              }
            };
          }
          exports.storeMessage = storeMessage;
          exports.MessageValue = {
            serialize(src, builder) {
              builder.storeRef((0, Builder_1.beginCell)().store(storeMessage(src)));
            },
            parse(slice) {
              return loadMessage(slice.loadRef().beginParse());
            }
          }; /***/
        },
        /***/1914: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeMessageRelaxed = exports.loadMessageRelaxed = void 0;
          const Builder_1 = __webpack_require__(7856);
          const CommonMessageInfoRelaxed_1 = __webpack_require__(3335);
          const StateInit_1 = __webpack_require__(3545);
          function loadMessageRelaxed(slice) {
            const info = (0, CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed)(slice);
            let init = null;
            if (slice.loadBit()) {
              if (!slice.loadBit()) {
                init = (0, StateInit_1.loadStateInit)(slice);
              } else {
                init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());
              }
            }
            const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
            return {
              info,
              init,
              body
            };
          }
          exports.loadMessageRelaxed = loadMessageRelaxed;
          function storeMessageRelaxed(message, opts) {
            return builder => {
              // Store CommonMsgInfo
              builder.store((0, CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed)(message.info)); // Store init
              if (message.init) {
                builder.storeBit(true);
                let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init)); // Check if ref is needed
                let needRef = false;
                if (opts && opts.forceRef) {
                  needRef = true;
                } else {
                  if (builder.availableBits - 2 /* At least on byte for ref flag */ >= initCell.bits) {
                    needRef = false;
                  } else {
                    needRef = true;
                  }
                } // Store ref
                if (needRef) {
                  builder.storeBit(true);
                  builder.storeRef(initCell);
                } else {
                  builder.storeBit(false);
                  builder.storeBuilder(initCell);
                }
              } else {
                builder.storeBit(false);
              } // Store body
              let needRef = false;
              if (opts && opts.forceRef) {
                needRef = true;
              } else {
                if (builder.availableBits - 1 /* At least on byte for ref flag */ >= message.body.bits.length && builder.refs + message.body.refs.length <= 4) {
                  needRef = false;
                } else {
                  needRef = true;
                }
              }
              if (needRef) {
                builder.storeBit(true);
                builder.storeRef(message.body);
              } else {
                builder.storeBit(false);
                builder.storeBuilder(message.body.asBuilder());
              }
            };
          }
          exports.storeMessageRelaxed = storeMessageRelaxed; /***/
        },
        /***/2114: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.loadOutList = exports.storeOutList = exports.loadOutAction = exports.storeOutAction = void 0;
          const MessageRelaxed_1 = __webpack_require__(1914);
          const Builder_1 = __webpack_require__(7856);
          function storeOutAction(action) {
            switch (action.type) {
              case 'sendMsg':
                return storeOutActionSendMsg(action);
              case 'setCode':
                return storeOutActionSetCode(action);
              default:
                throw new Error(`Unknown action type ${action.type}`);
            }
          }
          exports.storeOutAction = storeOutAction; /*
                                                   action_send_msg#0ec3c86d mode:(## 8)
                                                   out_msg:^(MessageRelaxed Any) = OutAction;
                                                   */
          const outActionSendMsgTag = 0x0ec3c86d;
          function storeOutActionSendMsg(action) {
            return builder => {
              builder.storeUint(outActionSendMsgTag, 32).storeUint(action.mode, 8).storeRef((0, Builder_1.beginCell)().store((0, MessageRelaxed_1.storeMessageRelaxed)(action.outMsg)).endCell());
            };
          } /*
            action_set_code#ad4de08e new_code:^Cell = OutAction;
            */
          const outActionSetCodeTag = 0xad4de08e;
          function storeOutActionSetCode(action) {
            return builder => {
              builder.storeUint(outActionSetCodeTag, 32).storeRef(action.newCode);
            };
          }
          function loadOutAction(slice) {
            const tag = slice.loadUint(32);
            if (tag === outActionSendMsgTag) {
              const mode = slice.loadUint(8);
              const outMsg = (0, MessageRelaxed_1.loadMessageRelaxed)(slice.loadRef().beginParse());
              return {
                type: 'sendMsg',
                mode,
                outMsg
              };
            }
            if (tag === outActionSetCodeTag) {
              const newCode = slice.loadRef();
              return {
                type: 'setCode',
                newCode
              };
            }
            throw new Error(`Unknown out action tag 0x${tag.toString(16)}`);
          }
          exports.loadOutAction = loadOutAction; /*
                                                 out_list_empty$_ = OutList 0;
                                                 out_list$_ {n:#} prev:^(OutList n) action:OutAction
                                                 = OutList (n + 1);
                                                 */
          function storeOutList(actions) {
            const cell = actions.reduce((cell, action) => (0, Builder_1.beginCell)().storeRef(cell).store(storeOutAction(action)).endCell(), (0, Builder_1.beginCell)().endCell());
            return builder => {
              builder.storeSlice(cell.beginParse());
            };
          }
          exports.storeOutList = storeOutList;
          function loadOutList(slice) {
            const actions = [];
            while (slice.remainingRefs) {
              const nextCell = slice.loadRef();
              actions.push(loadOutAction(slice));
              slice = nextCell.beginParse();
            }
            return actions.reverse();
          }
          exports.loadOutList = loadOutList; /***/
        },
        /***/3269: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SendMode = void 0;
          (function (SendMode) {
            SendMode[SendMode["CARRY_ALL_REMAINING_BALANCE"] = 128] = "CARRY_ALL_REMAINING_BALANCE";
            SendMode[SendMode["CARRY_ALL_REMAINING_INCOMING_VALUE"] = 64] = "CARRY_ALL_REMAINING_INCOMING_VALUE";
            SendMode[SendMode["DESTROY_ACCOUNT_IF_ZERO"] = 32] = "DESTROY_ACCOUNT_IF_ZERO";
            SendMode[SendMode["PAY_GAS_SEPARATELY"] = 1] = "PAY_GAS_SEPARATELY";
            SendMode[SendMode["IGNORE_ERRORS"] = 2] = "IGNORE_ERRORS";
            SendMode[SendMode["NONE"] = 0] = "NONE";
          })(exports.SendMode || (exports.SendMode = {})); /***/
        },
        /***/7163: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeShardAccount = exports.loadShardAccount = void 0;
          const Builder_1 = __webpack_require__(7856);
          const Account_1 = __webpack_require__(6721);
          function loadShardAccount(slice) {
            let accountRef = slice.loadRef();
            let account = undefined;
            if (!accountRef.isExotic) {
              let accountSlice = accountRef.beginParse();
              if (accountSlice.loadBit()) {
                account = (0, Account_1.loadAccount)(accountSlice);
              }
            }
            return {
              account,
              lastTransactionHash: slice.loadUintBig(256),
              lastTransactionLt: slice.loadUintBig(64)
            };
          }
          exports.loadShardAccount = loadShardAccount;
          function storeShardAccount(src) {
            return builder => {
              if (src.account) {
                builder.storeRef((0, Builder_1.beginCell)().storeBit(true).store((0, Account_1.storeAccount)(src.account)));
              } else {
                builder.storeRef((0, Builder_1.beginCell)().storeBit(false));
              }
              builder.storeUint(src.lastTransactionHash, 256);
              builder.storeUint(src.lastTransactionLt, 64);
            };
          }
          exports.storeShardAccount = storeShardAccount; /***/
        },
        /***/9598: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = void 0;
          const Dictionary_1 = __webpack_require__(5189);
          const DepthBalanceInfo_1 = __webpack_require__(883);
          const ShardAccount_1 = __webpack_require__(7163);
          exports.ShardAccountRefValue = {
            parse: cs => {
              let depthBalanceInfo = (0, DepthBalanceInfo_1.loadDepthBalanceInfo)(cs);
              let shardAccount = (0, ShardAccount_1.loadShardAccount)(cs);
              return {
                depthBalanceInfo,
                shardAccount
              };
            },
            serialize(src, builder) {
              builder.store((0, DepthBalanceInfo_1.storeDepthBalanceInfo)(src.depthBalanceInfo));
              builder.store((0, ShardAccount_1.storeShardAccount)(src.shardAccount));
            }
          };
          function loadShardAccounts(cs) {
            return Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.BigUint(256), exports.ShardAccountRefValue, cs);
          }
          exports.loadShardAccounts = loadShardAccounts;
          function storeShardAccounts(src) {
            return Builder => {
              Builder.storeDict(src);
            };
          }
          exports.storeShardAccounts = storeShardAccounts; /***/
        },
        /***/5198: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeShardIdent = exports.loadShardIdent = void 0;
          function loadShardIdent(slice) {
            if (slice.loadUint(2) !== 0) {
              throw Error('Invalid data');
            }
            return {
              shardPrefixBits: slice.loadUint(6),
              workchainId: slice.loadInt(32),
              shardPrefix: slice.loadUintBig(64)
            };
          }
          exports.loadShardIdent = loadShardIdent;
          function storeShardIdent(src) {
            return builder => {
              builder.storeUint(0, 2);
              builder.storeUint(src.shardPrefixBits, 6);
              builder.storeInt(src.workchainId, 32);
              builder.storeUint(src.shardPrefix, 64);
            };
          }
          exports.storeShardIdent = storeShardIdent; /***/
        },
        /***/9680: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.loadShardStateUnsplit = void 0;
          const MasterchainStateExtra_1 = __webpack_require__(9672);
          const ShardAccounts_1 = __webpack_require__(9598);
          const ShardIdent_1 = __webpack_require__(5198);
          function loadShardStateUnsplit(cs) {
            if (cs.loadUint(32) !== 0x9023afe2) {
              throw Error('Invalid data');
            }
            let globalId = cs.loadInt(32);
            let shardId = (0, ShardIdent_1.loadShardIdent)(cs);
            let seqno = cs.loadUint(32);
            let vertSeqNo = cs.loadUint(32);
            let genUtime = cs.loadUint(32);
            let genLt = cs.loadUintBig(64);
            let minRefMcSeqno = cs.loadUint(32); // Skip OutMsgQueueInfo: usually exotic
            cs.loadRef();
            let beforeSplit = cs.loadBit(); // Parse accounts
            let shardAccountsRef = cs.loadRef();
            let accounts = undefined;
            if (!shardAccountsRef.isExotic) {
              accounts = (0, ShardAccounts_1.loadShardAccounts)(shardAccountsRef.beginParse());
            } // Skip (not used by apps)
            cs.loadRef(); // Parse extras
            let mcStateExtra = cs.loadBit();
            let extras = null;
            if (mcStateExtra) {
              let cell = cs.loadRef();
              if (!cell.isExotic) {
                extras = (0, MasterchainStateExtra_1.loadMasterchainStateExtra)(cell.beginParse());
              }
            }
            return {
              globalId,
              shardId,
              seqno,
              vertSeqNo,
              genUtime,
              genLt,
              minRefMcSeqno,
              beforeSplit,
              accounts,
              extras
            };
          }
          exports.loadShardStateUnsplit = loadShardStateUnsplit; /***/
        },
        /***/1891: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SimpleLibraryValue = exports.storeSimpleLibrary = exports.loadSimpleLibrary = void 0;
          function loadSimpleLibrary(slice) {
            return {
              public: slice.loadBit(),
              root: slice.loadRef()
            };
          }
          exports.loadSimpleLibrary = loadSimpleLibrary;
          function storeSimpleLibrary(src) {
            return builder => {
              builder.storeBit(src.public);
              builder.storeRef(src.root);
            };
          }
          exports.storeSimpleLibrary = storeSimpleLibrary;
          exports.SimpleLibraryValue = {
            serialize(src, builder) {
              storeSimpleLibrary(src)(builder);
            },
            parse(src) {
              return loadSimpleLibrary(src);
            }
          }; /***/
        },
        /***/2004: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = void 0;
          function loadSplitMergeInfo(slice) {
            let currentShardPrefixLength = slice.loadUint(6);
            let accountSplitDepth = slice.loadUint(6);
            let thisAddress = slice.loadUintBig(256);
            let siblingAddress = slice.loadUintBig(256);
            return {
              currentShardPrefixLength,
              accountSplitDepth,
              thisAddress,
              siblingAddress
            };
          }
          exports.loadSplitMergeInfo = loadSplitMergeInfo;
          function storeSplitMergeInfo(src) {
            return builder => {
              builder.storeUint(src.currentShardPrefixLength, 6);
              builder.storeUint(src.accountSplitDepth, 6);
              builder.storeUint(src.thisAddress, 256);
              builder.storeUint(src.siblingAddress, 256);
            };
          }
          exports.storeSplitMergeInfo = storeSplitMergeInfo; /***/
        },
        /***/3545: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeStateInit = exports.loadStateInit = void 0;
          const Dictionary_1 = __webpack_require__(5189);
          const SimpleLibrary_1 = __webpack_require__(1891);
          const TickTock_1 = __webpack_require__(4286);
          function loadStateInit(slice) {
            // Split Depth
            let splitDepth;
            if (slice.loadBit()) {
              splitDepth = slice.loadUint(5);
            } // TickTock
            let special;
            if (slice.loadBit()) {
              special = (0, TickTock_1.loadTickTock)(slice);
            } // Code and Data
            let code = slice.loadMaybeRef();
            let data = slice.loadMaybeRef(); // Libs
            let libraries = slice.loadDict(Dictionary_1.Dictionary.Keys.BigUint(256), SimpleLibrary_1.SimpleLibraryValue);
            if (libraries.size === 0) {
              libraries = undefined;
            }
            return {
              splitDepth,
              special,
              code,
              data,
              libraries
            };
          }
          exports.loadStateInit = loadStateInit;
          function storeStateInit(src) {
            return builder => {
              if (src.splitDepth !== null && src.splitDepth !== undefined) {
                builder.storeBit(true);
                builder.storeUint(src.splitDepth, 5);
              } else {
                builder.storeBit(false);
              }
              if (src.special !== null && src.special !== undefined) {
                builder.storeBit(true);
                builder.store((0, TickTock_1.storeTickTock)(src.special));
              } else {
                builder.storeBit(false);
              }
              builder.storeMaybeRef(src.code);
              builder.storeMaybeRef(src.data);
              builder.storeDict(src.libraries);
            };
          }
          exports.storeStateInit = storeStateInit; /***/
        },
        /***/9573: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeStorageInfo = exports.loadStorageInfo = void 0;
          const StorageUsed_1 = __webpack_require__(7486);
          function loadStorageInfo(slice) {
            return {
              used: (0, StorageUsed_1.loadStorageUsed)(slice),
              lastPaid: slice.loadUint(32),
              duePayment: slice.loadMaybeCoins()
            };
          }
          exports.loadStorageInfo = loadStorageInfo;
          function storeStorageInfo(src) {
            return builder => {
              builder.store((0, StorageUsed_1.storeStorageUsed)(src.used));
              builder.storeUint(src.lastPaid, 32);
              builder.storeMaybeCoins(src.duePayment);
            };
          }
          exports.storeStorageInfo = storeStorageInfo; /***/
        },
        /***/7486: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeStorageUsed = exports.loadStorageUsed = void 0;
          function loadStorageUsed(cs) {
            return {
              cells: cs.loadVarUintBig(3),
              bits: cs.loadVarUintBig(3),
              publicCells: cs.loadVarUintBig(3)
            };
          }
          exports.loadStorageUsed = loadStorageUsed;
          function storeStorageUsed(src) {
            return builder => {
              builder.storeVarUint(src.cells, 3);
              builder.storeVarUint(src.bits, 3);
              builder.storeVarUint(src.publicCells, 3);
            };
          }
          exports.storeStorageUsed = storeStorageUsed; /***/
        },
        /***/6694: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeStorageUsedShort = exports.loadStorageUsedShort = void 0;
          function loadStorageUsedShort(slice) {
            let cells = slice.loadVarUintBig(3);
            let bits = slice.loadVarUintBig(3);
            return {
              cells,
              bits
            };
          }
          exports.loadStorageUsedShort = loadStorageUsedShort;
          function storeStorageUsedShort(src) {
            return builder => {
              builder.storeVarUint(src.cells, 3);
              builder.storeVarUint(src.bits, 3);
            };
          }
          exports.storeStorageUsedShort = storeStorageUsedShort; /***/
        },
        /***/4286: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTickTock = exports.loadTickTock = void 0;
          function loadTickTock(slice) {
            return {
              tick: slice.loadBit(),
              tock: slice.loadBit()
            };
          }
          exports.loadTickTock = loadTickTock;
          function storeTickTock(src) {
            return builder => {
              builder.storeBit(src.tick);
              builder.storeBit(src.tock);
            };
          }
          exports.storeTickTock = storeTickTock; /***/
        },
        /***/718: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTransaction = exports.loadTransaction = void 0;
          const Builder_1 = __webpack_require__(7856);
          const Dictionary_1 = __webpack_require__(5189);
          const AccountStatus_1 = __webpack_require__(8287);
          const CurrencyCollection_1 = __webpack_require__(5467);
          const HashUpdate_1 = __webpack_require__(7661);
          const Message_1 = __webpack_require__(6781);
          const TransactionDescription_1 = __webpack_require__(5754);
          function loadTransaction(slice) {
            let raw = slice.asCell();
            if (slice.loadUint(4) !== 0x07) {
              throw Error('Invalid data');
            }
            let address = slice.loadUintBig(256);
            let lt = slice.loadUintBig(64);
            let prevTransactionHash = slice.loadUintBig(256);
            let prevTransactionLt = slice.loadUintBig(64);
            let now = slice.loadUint(32);
            let outMessagesCount = slice.loadUint(15);
            let oldStatus = (0, AccountStatus_1.loadAccountStatus)(slice);
            let endStatus = (0, AccountStatus_1.loadAccountStatus)(slice);
            let msgRef = slice.loadRef();
            let msgSlice = msgRef.beginParse();
            let inMessage = msgSlice.loadBit() ? (0, Message_1.loadMessage)(msgSlice.loadRef().beginParse()) : undefined;
            let outMessages = msgSlice.loadDict(Dictionary_1.Dictionary.Keys.Uint(15), Message_1.MessageValue);
            msgSlice.endParse();
            let totalFees = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
            let stateUpdate = (0, HashUpdate_1.loadHashUpdate)(slice.loadRef().beginParse());
            let description = (0, TransactionDescription_1.loadTransactionDescription)(slice.loadRef().beginParse());
            return {
              address,
              lt,
              prevTransactionHash,
              prevTransactionLt,
              now,
              outMessagesCount,
              oldStatus,
              endStatus,
              inMessage,
              outMessages,
              totalFees,
              stateUpdate,
              description,
              raw,
              hash: () => raw.hash()
            };
          }
          exports.loadTransaction = loadTransaction;
          function storeTransaction(src) {
            return builder => {
              builder.storeUint(0x07, 4);
              builder.storeUint(src.address, 256);
              builder.storeUint(src.lt, 64);
              builder.storeUint(src.prevTransactionHash, 256);
              builder.storeUint(src.prevTransactionLt, 64);
              builder.storeUint(src.now, 32);
              builder.storeUint(src.outMessagesCount, 15);
              builder.store((0, AccountStatus_1.storeAccountStatus)(src.oldStatus));
              builder.store((0, AccountStatus_1.storeAccountStatus)(src.endStatus));
              let msgBuilder = (0, Builder_1.beginCell)();
              if (src.inMessage) {
                msgBuilder.storeBit(true);
                msgBuilder.storeRef((0, Builder_1.beginCell)().store((0, Message_1.storeMessage)(src.inMessage)));
              } else {
                msgBuilder.storeBit(false);
              }
              msgBuilder.storeDict(src.outMessages);
              builder.storeRef(msgBuilder);
              builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.totalFees));
              builder.storeRef((0, Builder_1.beginCell)().store((0, HashUpdate_1.storeHashUpdate)(src.stateUpdate)));
              builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionDescription_1.storeTransactionDescription)(src.description)));
            };
          }
          exports.storeTransaction = storeTransaction; /***/
        },
        /***/5197: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = void 0;
          const AccountStatusChange_1 = __webpack_require__(991);
          const StorageUsedShort_1 = __webpack_require__(6694);
          function loadTransactionActionPhase(slice) {
            let success = slice.loadBit();
            let valid = slice.loadBit();
            let noFunds = slice.loadBit();
            let statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);
            let totalFwdFees = slice.loadBit() ? slice.loadCoins() : undefined;
            let totalActionFees = slice.loadBit() ? slice.loadCoins() : undefined;
            let resultCode = slice.loadInt(32);
            let resultArg = slice.loadBit() ? slice.loadInt(32) : undefined;
            let totalActions = slice.loadUint(16);
            let specActions = slice.loadUint(16);
            let skippedActions = slice.loadUint(16);
            let messagesCreated = slice.loadUint(16);
            let actionListHash = slice.loadUintBig(256);
            let totalMessageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
            return {
              success,
              valid,
              noFunds,
              statusChange,
              totalFwdFees,
              totalActionFees,
              resultCode,
              resultArg,
              totalActions,
              specActions,
              skippedActions,
              messagesCreated,
              actionListHash,
              totalMessageSize
            };
          }
          exports.loadTransactionActionPhase = loadTransactionActionPhase;
          function storeTransactionActionPhase(src) {
            return builder => {
              builder.storeBit(src.success);
              builder.storeBit(src.valid);
              builder.storeBit(src.noFunds);
              builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));
              builder.storeMaybeCoins(src.totalFwdFees);
              builder.storeMaybeCoins(src.totalActionFees);
              builder.storeInt(src.resultCode, 32);
              builder.storeMaybeInt(src.resultArg, 32);
              builder.storeUint(src.totalActions, 16);
              builder.storeUint(src.specActions, 16);
              builder.storeUint(src.skippedActions, 16);
              builder.storeUint(src.messagesCreated, 16);
              builder.storeUint(src.actionListHash, 256);
              builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.totalMessageSize));
            };
          }
          exports.storeTransactionActionPhase = storeTransactionActionPhase; /***/
        },
        /***/9239: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = void 0;
          const StorageUsedShort_1 = __webpack_require__(6694);
          function loadTransactionBouncePhase(slice) {
            // Ok
            if (slice.loadBit()) {
              let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
              let messageFees = slice.loadCoins();
              let forwardFees = slice.loadCoins();
              return {
                type: "ok",
                messageSize,
                messageFees,
                forwardFees
              };
            } // No funds
            if (slice.loadBit()) {
              let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
              let requiredForwardFees = slice.loadCoins();
              return {
                type: "no-funds",
                messageSize,
                requiredForwardFees
              };
            } // Negative funds
            return {
              type: "negative-funds"
            };
          }
          exports.loadTransactionBouncePhase = loadTransactionBouncePhase;
          function storeTransactionBouncePhase(src) {
            return builder => {
              if (src.type === 'ok') {
                builder.storeBit(true);
                builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));
                builder.storeCoins(src.messageFees);
                builder.storeCoins(src.forwardFees);
              } else if (src.type === 'negative-funds') {
                builder.storeBit(false);
                builder.storeBit(false);
              } else if (src.type === 'no-funds') {
                builder.storeBit(false);
                builder.storeBit(true);
                builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));
                builder.storeCoins(src.requiredForwardFees);
              } else {
                throw new Error("Invalid TransactionBouncePhase type");
              }
            };
          }
          exports.storeTransactionBouncePhase = storeTransactionBouncePhase; /***/
        },
        /***/8018: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = void 0;
          const Builder_1 = __webpack_require__(7856);
          const ComputeSkipReason_1 = __webpack_require__(6372);
          function loadTransactionComputePhase(slice) {
            // Skipped
            if (!slice.loadBit()) {
              let reason = (0, ComputeSkipReason_1.loadComputeSkipReason)(slice);
              return {
                type: 'skipped',
                reason
              };
            }
            let success = slice.loadBit();
            let messageStateUsed = slice.loadBit();
            let accountActivated = slice.loadBit();
            let gasFees = slice.loadCoins();
            const vmState = slice.loadRef().beginParse();
            let gasUsed = vmState.loadVarUintBig(3);
            let gasLimit = vmState.loadVarUintBig(3);
            let gasCredit = vmState.loadBit() ? vmState.loadVarUintBig(2) : undefined;
            let mode = vmState.loadUint(8);
            let exitCode = vmState.loadInt(32);
            let exitArg = vmState.loadBit() ? vmState.loadInt(32) : undefined;
            let vmSteps = vmState.loadUint(32);
            let vmInitStateHash = vmState.loadUintBig(256);
            let vmFinalStateHash = vmState.loadUintBig(256);
            return {
              type: 'vm',
              success,
              messageStateUsed,
              accountActivated,
              gasFees,
              gasUsed,
              gasLimit,
              gasCredit,
              mode,
              exitCode,
              exitArg,
              vmSteps,
              vmInitStateHash,
              vmFinalStateHash
            };
          }
          exports.loadTransactionComputePhase = loadTransactionComputePhase;
          function storeTransactionComputePhase(src) {
            return builder => {
              if (src.type === 'skipped') {
                builder.storeBit(0);
                builder.store((0, ComputeSkipReason_1.storeComputeSkipReason)(src.reason));
                return;
              }
              builder.storeBit(1);
              builder.storeBit(src.success);
              builder.storeBit(src.messageStateUsed);
              builder.storeBit(src.accountActivated);
              builder.storeCoins(src.gasFees);
              builder.storeRef((0, Builder_1.beginCell)().storeVarUint(src.gasUsed, 3).storeVarUint(src.gasLimit, 3).store(b => src.gasCredit !== undefined && src.gasCredit !== null ? b.storeBit(1).storeVarUint(src.gasCredit, 2) : b.storeBit(0)).storeUint(src.mode, 8).storeInt(src.exitCode, 32).store(b => src.exitArg !== undefined && src.exitArg !== null ? b.storeBit(1).storeInt(src.exitArg, 32) : b.storeBit(0)).storeUint(src.vmSteps, 32).storeUint(src.vmInitStateHash, 256).storeUint(src.vmFinalStateHash, 256).endCell());
            };
          }
          exports.storeTransactionComputePhase = storeTransactionComputePhase; /***/
        },
        /***/2352: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = void 0;
          const CurrencyCollection_1 = __webpack_require__(5467);
          function loadTransactionCreditPhase(slice) {
            const dueFeesColelcted = slice.loadBit() ? slice.loadCoins() : undefined;
            const credit = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
            return {
              dueFeesColelcted,
              credit
            };
          }
          exports.loadTransactionCreditPhase = loadTransactionCreditPhase;
          function storeTransactionCreditPhase(src) {
            return builder => {
              if (src.dueFeesColelcted === null || src.dueFeesColelcted === undefined) {
                builder.storeBit(false);
              } else {
                builder.storeBit(true);
                builder.storeCoins(src.dueFeesColelcted);
              }
              builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.credit));
            };
          }
          exports.storeTransactionCreditPhase = storeTransactionCreditPhase; /***/
        },
        /***/5754: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTransactionDescription = exports.loadTransactionDescription = void 0;
          const Builder_1 = __webpack_require__(7856);
          const SplitMergeInfo_1 = __webpack_require__(2004);
          const Transaction_1 = __webpack_require__(718);
          const TransactionActionPhase_1 = __webpack_require__(5197);
          const TransactionBouncePhase_1 = __webpack_require__(9239);
          const TransactionComputePhase_1 = __webpack_require__(8018);
          const TransactionCreditPhase_1 = __webpack_require__(2352);
          const TransactionStoragePhase_1 = __webpack_require__(1774);
          function loadTransactionDescription(slice) {
            let type = slice.loadUint(4);
            if (type === 0x00) {
              const creditFirst = slice.loadBit();
              let storagePhase = undefined;
              if (slice.loadBit()) {
                storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
              }
              let creditPhase = undefined;
              if (slice.loadBit()) {
                creditPhase = (0, TransactionCreditPhase_1.loadTransactionCreditPhase)(slice);
              }
              let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
              let actionPhase = undefined;
              if (slice.loadBit()) {
                actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
              }
              let aborted = slice.loadBit();
              let bouncePhase = undefined;
              if (slice.loadBit()) {
                bouncePhase = (0, TransactionBouncePhase_1.loadTransactionBouncePhase)(slice);
              }
              const destroyed = slice.loadBit();
              return {
                type: 'generic',
                creditFirst,
                storagePhase,
                creditPhase,
                computePhase,
                actionPhase,
                bouncePhase,
                aborted,
                destroyed
              };
            }
            if (type === 0x01) {
              return {
                type: 'storage',
                storagePhase: (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice)
              };
            }
            if (type === 0x2 || type === 0x03) {
              const isTock = type === 0x03;
              let storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
              let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
              let actionPhase = undefined;
              if (slice.loadBit()) {
                actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
              }
              const aborted = slice.loadBit();
              const destroyed = slice.loadBit();
              return {
                type: 'tick-tock',
                isTock,
                storagePhase,
                computePhase,
                actionPhase,
                aborted,
                destroyed
              };
            }
            if (type === 0x04) {
              let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);
              let storagePhase = undefined;
              if (slice.loadBit()) {
                storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
              }
              let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
              let actionPhase = undefined;
              if (slice.loadBit()) {
                actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
              }
              const aborted = slice.loadBit();
              const destroyed = slice.loadBit();
              return {
                type: 'split-prepare',
                splitInfo,
                storagePhase,
                computePhase,
                actionPhase,
                aborted,
                destroyed
              };
            }
            if (type === 0x05) {
              let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);
              let prepareTransaction = (0, Transaction_1.loadTransaction)(slice.loadRef().beginParse());
              const installed = slice.loadBit();
              return {
                type: 'split-install',
                splitInfo,
                prepareTransaction,
                installed
              };
            }
            throw Error(`Unsupported transaction description type ${type}`);
          }
          exports.loadTransactionDescription = loadTransactionDescription;
          function storeTransactionDescription(src) {
            return builder => {
              if (src.type === 'generic') {
                builder.storeUint(0x00, 4);
                builder.storeBit(src.creditFirst);
                if (src.storagePhase) {
                  builder.storeBit(true);
                  builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
                } else {
                  builder.storeBit(false);
                }
                if (src.creditPhase) {
                  builder.storeBit(true);
                  builder.store((0, TransactionCreditPhase_1.storeTransactionCreditPhase)(src.creditPhase));
                } else {
                  builder.storeBit(false);
                }
                builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));
                if (src.actionPhase) {
                  builder.storeBit(true);
                  builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));
                } else {
                  builder.storeBit(false);
                }
                builder.storeBit(src.aborted);
                if (src.bouncePhase) {
                  builder.storeBit(true);
                  builder.store((0, TransactionBouncePhase_1.storeTransactionBouncePhase)(src.bouncePhase));
                } else {
                  builder.storeBit(false);
                }
                builder.storeBit(src.destroyed);
              } else if (src.type === 'storage') {
                builder.storeUint(0x01, 4);
                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
              } else if (src.type === 'tick-tock') {
                builder.storeUint(src.isTock ? 0x03 : 0x02, 4);
                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
                builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));
                if (src.actionPhase) {
                  builder.storeBit(true);
                  builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));
                } else {
                  builder.storeBit(false);
                }
                builder.storeBit(src.aborted);
                builder.storeBit(src.destroyed);
              } else if (src.type === 'split-prepare') {
                builder.storeUint(0x04, 4);
                builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));
                if (src.storagePhase) {
                  builder.storeBit(true);
                  builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
                } else {
                  builder.storeBit(false);
                }
                builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));
                if (src.actionPhase) {
                  builder.storeBit(true);
                  builder.store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase));
                } else {
                  builder.storeBit(false);
                }
                builder.storeBit(src.aborted);
                builder.storeBit(src.destroyed);
              } else if (src.type === 'split-install') {
                builder.storeUint(0x05, 4);
                builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));
                builder.storeRef((0, Builder_1.beginCell)().store((0, Transaction_1.storeTransaction)(src.prepareTransaction)));
                builder.storeBit(src.installed);
              } else {
                throw Error(`Unsupported transaction description type ${src.type}`);
              }
            };
          }
          exports.storeTransactionDescription = storeTransactionDescription; /***/
        },
        /***/1774: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = void 0;
          const AccountStatusChange_1 = __webpack_require__(991);
          function loadTransactionStoragePhase(slice) {
            const storageFeesCollected = slice.loadCoins();
            let storageFeesDue = undefined;
            if (slice.loadBit()) {
              storageFeesDue = slice.loadCoins();
            }
            const statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);
            return {
              storageFeesCollected,
              storageFeesDue,
              statusChange
            };
          }
          exports.loadTransactionStoragePhase = loadTransactionStoragePhase;
          function storeTransactionsStoragePhase(src) {
            return builder => {
              builder.storeCoins(src.storageFeesCollected);
              if (src.storageFeesDue === null || src.storageFeesDue === undefined) {
                builder.storeBit(false);
              } else {
                builder.storeBit(true);
                builder.storeCoins(src.storageFeesDue);
              }
              builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));
            };
          }
          exports.storeTransactionsStoragePhase = storeTransactionsStoragePhase; /***/
        },
        /***/6341: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.loadStorageInfo = exports.storeStateInit = exports.loadStateInit = exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = exports.storeSimpleLibrary = exports.loadSimpleLibrary = exports.loadShardStateUnsplit = exports.storeShardIdent = exports.loadShardIdent = exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = exports.storeShardAccount = exports.loadShardAccount = exports.SendMode = exports.storeMessageRelaxed = exports.loadMessageRelaxed = exports.storeMessage = exports.loadMessage = exports.loadMasterchainStateExtra = exports.storeHashUpdate = exports.loadHashUpdate = exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = exports.storeCurrencyCollection = exports.loadCurrencyCollection = exports.storeComputeSkipReason = exports.loadComputeSkipReason = exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = exports.storeOutList = exports.loadOutList = exports.storeOutAction = exports.loadOutAction = exports.storeAccountStorage = exports.loadAccountStorage = exports.storeAccountStatusChange = exports.loadAccountStatusChange = exports.storeAccountStatus = exports.loadAccountStatus = exports.storeAccountState = exports.loadAccountState = exports.storeAccount = exports.loadAccount = exports.comment = exports.external = exports.internal = void 0;
          exports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = exports.storeTransactionDescription = exports.loadTransactionDescription = exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = exports.storeTransaction = exports.loadTransaction = exports.storeTickTock = exports.loadTickTock = exports.storeStorageUsedShort = exports.loadStorageUsedShort = exports.storeStorageUsed = exports.loadStorageUsed = exports.storeStorageInfo = void 0;
          var _helpers_1 = __webpack_require__(2534);
          Object.defineProperty(exports, "internal", {
            enumerable: true,
            get: function () {
              return _helpers_1.internal;
            }
          });
          Object.defineProperty(exports, "external", {
            enumerable: true,
            get: function () {
              return _helpers_1.external;
            }
          });
          Object.defineProperty(exports, "comment", {
            enumerable: true,
            get: function () {
              return _helpers_1.comment;
            }
          });
          var Account_1 = __webpack_require__(6721);
          Object.defineProperty(exports, "loadAccount", {
            enumerable: true,
            get: function () {
              return Account_1.loadAccount;
            }
          });
          Object.defineProperty(exports, "storeAccount", {
            enumerable: true,
            get: function () {
              return Account_1.storeAccount;
            }
          });
          var AccountState_1 = __webpack_require__(4368);
          Object.defineProperty(exports, "loadAccountState", {
            enumerable: true,
            get: function () {
              return AccountState_1.loadAccountState;
            }
          });
          Object.defineProperty(exports, "storeAccountState", {
            enumerable: true,
            get: function () {
              return AccountState_1.storeAccountState;
            }
          });
          var AccountStatus_1 = __webpack_require__(8287);
          Object.defineProperty(exports, "loadAccountStatus", {
            enumerable: true,
            get: function () {
              return AccountStatus_1.loadAccountStatus;
            }
          });
          Object.defineProperty(exports, "storeAccountStatus", {
            enumerable: true,
            get: function () {
              return AccountStatus_1.storeAccountStatus;
            }
          });
          var AccountStatusChange_1 = __webpack_require__(991);
          Object.defineProperty(exports, "loadAccountStatusChange", {
            enumerable: true,
            get: function () {
              return AccountStatusChange_1.loadAccountStatusChange;
            }
          });
          Object.defineProperty(exports, "storeAccountStatusChange", {
            enumerable: true,
            get: function () {
              return AccountStatusChange_1.storeAccountStatusChange;
            }
          });
          var AccountStorage_1 = __webpack_require__(9904);
          Object.defineProperty(exports, "loadAccountStorage", {
            enumerable: true,
            get: function () {
              return AccountStorage_1.loadAccountStorage;
            }
          });
          Object.defineProperty(exports, "storeAccountStorage", {
            enumerable: true,
            get: function () {
              return AccountStorage_1.storeAccountStorage;
            }
          });
          var OutList_1 = __webpack_require__(2114);
          Object.defineProperty(exports, "loadOutAction", {
            enumerable: true,
            get: function () {
              return OutList_1.loadOutAction;
            }
          });
          Object.defineProperty(exports, "storeOutAction", {
            enumerable: true,
            get: function () {
              return OutList_1.storeOutAction;
            }
          });
          Object.defineProperty(exports, "loadOutList", {
            enumerable: true,
            get: function () {
              return OutList_1.loadOutList;
            }
          });
          Object.defineProperty(exports, "storeOutList", {
            enumerable: true,
            get: function () {
              return OutList_1.storeOutList;
            }
          });
          var CommonMessageInfo_1 = __webpack_require__(426);
          Object.defineProperty(exports, "loadCommonMessageInfo", {
            enumerable: true,
            get: function () {
              return CommonMessageInfo_1.loadCommonMessageInfo;
            }
          });
          Object.defineProperty(exports, "storeCommonMessageInfo", {
            enumerable: true,
            get: function () {
              return CommonMessageInfo_1.storeCommonMessageInfo;
            }
          });
          var CommonMessageInfoRelaxed_1 = __webpack_require__(3335);
          Object.defineProperty(exports, "loadCommonMessageInfoRelaxed", {
            enumerable: true,
            get: function () {
              return CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed;
            }
          });
          Object.defineProperty(exports, "storeCommonMessageInfoRelaxed", {
            enumerable: true,
            get: function () {
              return CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed;
            }
          });
          var ComputeSkipReason_1 = __webpack_require__(6372);
          Object.defineProperty(exports, "loadComputeSkipReason", {
            enumerable: true,
            get: function () {
              return ComputeSkipReason_1.loadComputeSkipReason;
            }
          });
          Object.defineProperty(exports, "storeComputeSkipReason", {
            enumerable: true,
            get: function () {
              return ComputeSkipReason_1.storeComputeSkipReason;
            }
          });
          var CurrencyCollection_1 = __webpack_require__(5467);
          Object.defineProperty(exports, "loadCurrencyCollection", {
            enumerable: true,
            get: function () {
              return CurrencyCollection_1.loadCurrencyCollection;
            }
          });
          Object.defineProperty(exports, "storeCurrencyCollection", {
            enumerable: true,
            get: function () {
              return CurrencyCollection_1.storeCurrencyCollection;
            }
          });
          var DepthBalanceInfo_1 = __webpack_require__(883);
          Object.defineProperty(exports, "loadDepthBalanceInfo", {
            enumerable: true,
            get: function () {
              return DepthBalanceInfo_1.loadDepthBalanceInfo;
            }
          });
          Object.defineProperty(exports, "storeDepthBalanceInfo", {
            enumerable: true,
            get: function () {
              return DepthBalanceInfo_1.storeDepthBalanceInfo;
            }
          });
          var HashUpdate_1 = __webpack_require__(7661);
          Object.defineProperty(exports, "loadHashUpdate", {
            enumerable: true,
            get: function () {
              return HashUpdate_1.loadHashUpdate;
            }
          });
          Object.defineProperty(exports, "storeHashUpdate", {
            enumerable: true,
            get: function () {
              return HashUpdate_1.storeHashUpdate;
            }
          });
          var MasterchainStateExtra_1 = __webpack_require__(9672);
          Object.defineProperty(exports, "loadMasterchainStateExtra", {
            enumerable: true,
            get: function () {
              return MasterchainStateExtra_1.loadMasterchainStateExtra;
            }
          });
          var Message_1 = __webpack_require__(6781);
          Object.defineProperty(exports, "loadMessage", {
            enumerable: true,
            get: function () {
              return Message_1.loadMessage;
            }
          });
          Object.defineProperty(exports, "storeMessage", {
            enumerable: true,
            get: function () {
              return Message_1.storeMessage;
            }
          });
          var MessageRelaxed_1 = __webpack_require__(1914);
          Object.defineProperty(exports, "loadMessageRelaxed", {
            enumerable: true,
            get: function () {
              return MessageRelaxed_1.loadMessageRelaxed;
            }
          });
          Object.defineProperty(exports, "storeMessageRelaxed", {
            enumerable: true,
            get: function () {
              return MessageRelaxed_1.storeMessageRelaxed;
            }
          });
          var SendMode_1 = __webpack_require__(3269);
          Object.defineProperty(exports, "SendMode", {
            enumerable: true,
            get: function () {
              return SendMode_1.SendMode;
            }
          });
          var ShardAccount_1 = __webpack_require__(7163);
          Object.defineProperty(exports, "loadShardAccount", {
            enumerable: true,
            get: function () {
              return ShardAccount_1.loadShardAccount;
            }
          });
          Object.defineProperty(exports, "storeShardAccount", {
            enumerable: true,
            get: function () {
              return ShardAccount_1.storeShardAccount;
            }
          });
          var ShardAccounts_1 = __webpack_require__(9598);
          Object.defineProperty(exports, "ShardAccountRefValue", {
            enumerable: true,
            get: function () {
              return ShardAccounts_1.ShardAccountRefValue;
            }
          });
          Object.defineProperty(exports, "loadShardAccounts", {
            enumerable: true,
            get: function () {
              return ShardAccounts_1.loadShardAccounts;
            }
          });
          Object.defineProperty(exports, "storeShardAccounts", {
            enumerable: true,
            get: function () {
              return ShardAccounts_1.storeShardAccounts;
            }
          });
          var ShardIdent_1 = __webpack_require__(5198);
          Object.defineProperty(exports, "loadShardIdent", {
            enumerable: true,
            get: function () {
              return ShardIdent_1.loadShardIdent;
            }
          });
          Object.defineProperty(exports, "storeShardIdent", {
            enumerable: true,
            get: function () {
              return ShardIdent_1.storeShardIdent;
            }
          });
          var ShardStateUnsplit_1 = __webpack_require__(9680);
          Object.defineProperty(exports, "loadShardStateUnsplit", {
            enumerable: true,
            get: function () {
              return ShardStateUnsplit_1.loadShardStateUnsplit;
            }
          });
          var SimpleLibrary_1 = __webpack_require__(1891);
          Object.defineProperty(exports, "loadSimpleLibrary", {
            enumerable: true,
            get: function () {
              return SimpleLibrary_1.loadSimpleLibrary;
            }
          });
          Object.defineProperty(exports, "storeSimpleLibrary", {
            enumerable: true,
            get: function () {
              return SimpleLibrary_1.storeSimpleLibrary;
            }
          });
          var SplitMergeInfo_1 = __webpack_require__(2004);
          Object.defineProperty(exports, "loadSplitMergeInfo", {
            enumerable: true,
            get: function () {
              return SplitMergeInfo_1.loadSplitMergeInfo;
            }
          });
          Object.defineProperty(exports, "storeSplitMergeInfo", {
            enumerable: true,
            get: function () {
              return SplitMergeInfo_1.storeSplitMergeInfo;
            }
          });
          var StateInit_1 = __webpack_require__(3545);
          Object.defineProperty(exports, "loadStateInit", {
            enumerable: true,
            get: function () {
              return StateInit_1.loadStateInit;
            }
          });
          Object.defineProperty(exports, "storeStateInit", {
            enumerable: true,
            get: function () {
              return StateInit_1.storeStateInit;
            }
          });
          var StorageInto_1 = __webpack_require__(9573);
          Object.defineProperty(exports, "loadStorageInfo", {
            enumerable: true,
            get: function () {
              return StorageInto_1.loadStorageInfo;
            }
          });
          Object.defineProperty(exports, "storeStorageInfo", {
            enumerable: true,
            get: function () {
              return StorageInto_1.storeStorageInfo;
            }
          });
          var StorageUsed_1 = __webpack_require__(7486);
          Object.defineProperty(exports, "loadStorageUsed", {
            enumerable: true,
            get: function () {
              return StorageUsed_1.loadStorageUsed;
            }
          });
          Object.defineProperty(exports, "storeStorageUsed", {
            enumerable: true,
            get: function () {
              return StorageUsed_1.storeStorageUsed;
            }
          });
          var StorageUsedShort_1 = __webpack_require__(6694);
          Object.defineProperty(exports, "loadStorageUsedShort", {
            enumerable: true,
            get: function () {
              return StorageUsedShort_1.loadStorageUsedShort;
            }
          });
          Object.defineProperty(exports, "storeStorageUsedShort", {
            enumerable: true,
            get: function () {
              return StorageUsedShort_1.storeStorageUsedShort;
            }
          });
          var TickTock_1 = __webpack_require__(4286);
          Object.defineProperty(exports, "loadTickTock", {
            enumerable: true,
            get: function () {
              return TickTock_1.loadTickTock;
            }
          });
          Object.defineProperty(exports, "storeTickTock", {
            enumerable: true,
            get: function () {
              return TickTock_1.storeTickTock;
            }
          });
          var Transaction_1 = __webpack_require__(718);
          Object.defineProperty(exports, "loadTransaction", {
            enumerable: true,
            get: function () {
              return Transaction_1.loadTransaction;
            }
          });
          Object.defineProperty(exports, "storeTransaction", {
            enumerable: true,
            get: function () {
              return Transaction_1.storeTransaction;
            }
          });
          var TransactionActionPhase_1 = __webpack_require__(5197);
          Object.defineProperty(exports, "loadTransactionActionPhase", {
            enumerable: true,
            get: function () {
              return TransactionActionPhase_1.loadTransactionActionPhase;
            }
          });
          Object.defineProperty(exports, "storeTransactionActionPhase", {
            enumerable: true,
            get: function () {
              return TransactionActionPhase_1.storeTransactionActionPhase;
            }
          });
          var TransactionBouncePhase_1 = __webpack_require__(9239);
          Object.defineProperty(exports, "loadTransactionBouncePhase", {
            enumerable: true,
            get: function () {
              return TransactionBouncePhase_1.loadTransactionBouncePhase;
            }
          });
          Object.defineProperty(exports, "storeTransactionBouncePhase", {
            enumerable: true,
            get: function () {
              return TransactionBouncePhase_1.storeTransactionBouncePhase;
            }
          });
          var TransactionComputePhase_1 = __webpack_require__(8018);
          Object.defineProperty(exports, "loadTransactionComputePhase", {
            enumerable: true,
            get: function () {
              return TransactionComputePhase_1.loadTransactionComputePhase;
            }
          });
          Object.defineProperty(exports, "storeTransactionComputePhase", {
            enumerable: true,
            get: function () {
              return TransactionComputePhase_1.storeTransactionComputePhase;
            }
          });
          var TransactionCreditPhase_1 = __webpack_require__(2352);
          Object.defineProperty(exports, "loadTransactionCreditPhase", {
            enumerable: true,
            get: function () {
              return TransactionCreditPhase_1.loadTransactionCreditPhase;
            }
          });
          Object.defineProperty(exports, "storeTransactionCreditPhase", {
            enumerable: true,
            get: function () {
              return TransactionCreditPhase_1.storeTransactionCreditPhase;
            }
          });
          var TransactionDescription_1 = __webpack_require__(5754);
          Object.defineProperty(exports, "loadTransactionDescription", {
            enumerable: true,
            get: function () {
              return TransactionDescription_1.loadTransactionDescription;
            }
          });
          Object.defineProperty(exports, "storeTransactionDescription", {
            enumerable: true,
            get: function () {
              return TransactionDescription_1.storeTransactionDescription;
            }
          });
          var TransactionStoragePhase_1 = __webpack_require__(1774);
          Object.defineProperty(exports, "loadTransactionStoragePhase", {
            enumerable: true,
            get: function () {
              return TransactionStoragePhase_1.loadTransactionStoragePhase;
            }
          });
          Object.defineProperty(exports, "storeTransactionsStoragePhase", {
            enumerable: true,
            get: function () {
              return TransactionStoragePhase_1.storeTransactionsStoragePhase;
            }
          }); /***/
        },
        /***/2534: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.comment = exports.external = exports.internal = void 0;
          const Address_1 = __webpack_require__(6575);
          const Cell_1 = __webpack_require__(9567);
          const Builder_1 = __webpack_require__(7856);
          const convert_1 = __webpack_require__(4429);
          function internal(src) {
            // Resolve bounce
            let bounce = true;
            if (src.bounce !== null && src.bounce !== undefined) {
              bounce = src.bounce;
            } // Resolve address
            let to;
            if (typeof src.to === 'string') {
              to = Address_1.Address.parse(src.to);
            } else if (Address_1.Address.isAddress(src.to)) {
              to = src.to;
            } else {
              throw new Error(`Invalid address ${src.to}`);
            } // Resolve value
            let value;
            if (typeof src.value === 'string') {
              value = (0, convert_1.toNano)(src.value);
            } else {
              value = src.value;
            } // Resolve body
            let body = Cell_1.Cell.EMPTY;
            if (typeof src.body === 'string') {
              body = (0, Builder_1.beginCell)().storeUint(0, 32).storeStringTail(src.body).endCell();
            } else if (src.body) {
              body = src.body;
            } // Create message
            return {
              info: {
                type: 'internal',
                dest: to,
                value: {
                  coins: value
                },
                bounce,
                ihrDisabled: true,
                bounced: false,
                ihrFee: 0n,
                forwardFee: 0n,
                createdAt: 0,
                createdLt: 0n
              },
              init: src.init ? {
                code: src.init.code,
                data: src.init.data
              } : undefined,
              body: body
            };
          }
          exports.internal = internal;
          function external(src) {
            // Resolve address
            let to;
            if (typeof src.to === 'string') {
              to = Address_1.Address.parse(src.to);
            } else if (Address_1.Address.isAddress(src.to)) {
              to = src.to;
            } else {
              throw new Error(`Invalid address ${src.to}`);
            }
            return {
              info: {
                type: 'external-in',
                dest: to,
                importFee: 0n
              },
              init: src.init ? {
                code: src.init.code,
                data: src.init.data
              } : undefined,
              body: src.body || Cell_1.Cell.EMPTY
            };
          }
          exports.external = external;
          function comment(src) {
            return (0, Builder_1.beginCell)().storeUint(0, 32).storeStringTail(src).endCell();
          }
          exports.comment = comment; /***/
        },
        /***/7040: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.base32Decode = exports.base32Encode = void 0;
          const alphabet = 'abcdefghijklmnopqrstuvwxyz234567';
          function base32Encode(buffer) {
            const length = buffer.byteLength;
            let bits = 0;
            let value = 0;
            let output = '';
            for (let i = 0; i < length; i++) {
              value = value << 8 | buffer[i];
              bits += 8;
              while (bits >= 5) {
                output += alphabet[value >>> bits - 5 & 31];
                bits -= 5;
              }
            }
            if (bits > 0) {
              output += alphabet[value << 5 - bits & 31];
            }
            return output;
          }
          exports.base32Encode = base32Encode;
          function readChar(alphabet, char) {
            const idx = alphabet.indexOf(char);
            if (idx === -1) {
              throw new Error('Invalid character found: ' + char);
            }
            return idx;
          }
          function base32Decode(input) {
            let cleanedInput;
            cleanedInput = input.toLowerCase();
            const {
              length
            } = cleanedInput;
            let bits = 0;
            let value = 0;
            let index = 0;
            const output = Buffer.alloc(length * 5 / 8 | 0);
            for (let i = 0; i < length; i++) {
              value = value << 5 | readChar(alphabet, cleanedInput[i]);
              bits += 5;
              if (bits >= 8) {
                output[index++] = value >>> bits - 8 & 255;
                bits -= 8;
              }
            }
            return output;
          }
          exports.base32Decode = base32Decode; /***/
        },
        /***/224: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.bitsForNumber = void 0;
          function bitsForNumber(src, mode) {
            let v = BigInt(src); // Handle negative values
            if (mode === 'int') {
              // Corner case for zero or -1 value
              if (v === 0n || v === -1n) {
                return 1;
              }
              let v2 = v > 0 ? v : -v;
              return v2.toString(2).length + 1 /* Sign bit */;
            } else if (mode === 'uint') {
              if (v < 0) {
                throw Error(`value is negative. Got ${src}`);
              }
              return v.toString(2).length;
            } else {
              throw Error(`invalid mode. Got ${mode}`);
            }
          }
          exports.bitsForNumber = bitsForNumber; /***/
        },
        /***/4429: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.fromNano = exports.toNano = void 0;
          function toNano(src) {
            if (typeof src === 'bigint') {
              return src * 1000000000n;
            } else {
              if (typeof src === 'number') {
                if (!Number.isFinite(src)) {
                  throw Error('Invalid number');
                }
                if (Math.log10(src) <= 6) {
                  src = src.toLocaleString('en', {
                    minimumFractionDigits: 9,
                    useGrouping: false
                  });
                } else if (src - Math.trunc(src) === 0) {
                  src = src.toLocaleString('en', {
                    maximumFractionDigits: 0,
                    useGrouping: false
                  });
                } else {
                  throw Error('Not enough precision for a number value. Use string value instead');
                }
              } // Check sign
              let neg = false;
              while (src.startsWith('-')) {
                neg = !neg;
                src = src.slice(1);
              } // Split string
              if (src === '.') {
                throw Error('Invalid number');
              }
              let parts = src.split('.');
              if (parts.length > 2) {
                throw Error('Invalid number');
              } // Prepare parts
              let whole = parts[0];
              let frac = parts[1];
              if (!whole) {
                whole = '0';
              }
              if (!frac) {
                frac = '0';
              }
              if (frac.length > 9) {
                throw Error('Invalid number');
              }
              while (frac.length < 9) {
                frac += '0';
              } // Convert
              let r = BigInt(whole) * 1000000000n + BigInt(frac);
              if (neg) {
                r = -r;
              }
              return r;
            }
          }
          exports.toNano = toNano;
          function fromNano(src) {
            let v = BigInt(src);
            let neg = false;
            if (v < 0) {
              neg = true;
              v = -v;
            } // Convert fraction
            let frac = v % 1000000000n;
            let facStr = frac.toString();
            while (facStr.length < 9) {
              facStr = '0' + facStr;
            }
            facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1]; // Convert whole
            let whole = v / 1000000000n;
            let wholeStr = whole.toString(); // Value
            let value = `${wholeStr}${facStr === '0' ? '' : `.${facStr}`}`;
            if (neg) {
              value = '-' + value;
            }
            return value;
          }
          exports.fromNano = fromNano; /***/
        },
        /***/431: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.crc16 = void 0;
          function crc16(data) {
            const poly = 0x1021;
            let reg = 0;
            const message = Buffer.alloc(data.length + 2);
            message.set(data);
            for (let byte of message) {
              let mask = 0x80;
              while (mask > 0) {
                reg <<= 1;
                if (byte & mask) {
                  reg += 1;
                }
                mask >>= 1;
                if (reg > 0xffff) {
                  reg &= 0xffff;
                  reg ^= poly;
                }
              }
            }
            return Buffer.from([Math.floor(reg / 256), reg % 256]);
          }
          exports.crc16 = crc16; /***/
        },
        /***/2444: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.crc32c = void 0;
          const POLY = 0x82f63b78;
          function crc32c(source) {
            let crc = 0 ^ 0xffffffff;
            for (let n = 0; n < source.length; n++) {
              crc ^= source[n];
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
              crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
            }
            crc = crc ^ 0xffffffff; // Convert endianness
            let res = Buffer.alloc(4);
            res.writeInt32LE(crc);
            return res;
          }
          exports.crc32c = crc32c; /***/
        },
        /***/9578: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getMethodId = void 0;
          const TABLE = new Int16Array([0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0]);
          function crc16(data) {
            if (!(data instanceof Buffer)) {
              data = Buffer.from(data);
            }
            let crc = 0;
            for (let index = 0; index < data.length; index++) {
              const byte = data[index];
              crc = (TABLE[(crc >> 8 ^ byte) & 0xff] ^ crc << 8) & 0xffff;
            }
            return crc;
          }
          function getMethodId(name) {
            return crc16(name) & 0xffff | 0x10000;
          }
          exports.getMethodId = getMethodId; /***/
        },
        /***/5763: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sha512 = exports.sha256 = exports.pbkdf2_sha512 = exports.hmac_sha512 = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
          var getSecureRandom_1 = __webpack_require__(8046);
          Object.defineProperty(exports, "getSecureRandomBytes", {
            enumerable: true,
            get: function () {
              return getSecureRandom_1.getSecureRandomBytes;
            }
          });
          Object.defineProperty(exports, "getSecureRandomWords", {
            enumerable: true,
            get: function () {
              return getSecureRandom_1.getSecureRandomWords;
            }
          });
          var hmac_sha512_1 = __webpack_require__(5818);
          Object.defineProperty(exports, "hmac_sha512", {
            enumerable: true,
            get: function () {
              return hmac_sha512_1.hmac_sha512;
            }
          });
          var pbkdf2_sha512_1 = __webpack_require__(8276);
          Object.defineProperty(exports, "pbkdf2_sha512", {
            enumerable: true,
            get: function () {
              return pbkdf2_sha512_1.pbkdf2_sha512;
            }
          });
          var sha256_1 = __webpack_require__(89);
          Object.defineProperty(exports, "sha256", {
            enumerable: true,
            get: function () {
              return sha256_1.sha256;
            }
          });
          var sha512_1 = __webpack_require__(8140);
          Object.defineProperty(exports, "sha512", {
            enumerable: true,
            get: function () {
              return sha512_1.sha512;
            }
          }); /***/
        },
        /***/8046: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
          function getSecureRandomBytes(size) {
            return Buffer.from(window.crypto.getRandomValues(new Uint8Array(size)));
          }
          exports.getSecureRandomBytes = getSecureRandomBytes;
          function getSecureRandomWords(size) {
            return window.crypto.getRandomValues(new Uint16Array(size));
          }
          exports.getSecureRandomWords = getSecureRandomWords; /***/
        },
        /***/5818: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.hmac_sha512 = void 0;
          async function hmac_sha512(key, data) {
            let keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;
            let dataBuffer = typeof data === 'string' ? Buffer.from(data, 'utf-8') : data;
            const hmacAlgo = {
              name: "HMAC",
              hash: "SHA-512"
            };
            const hmacKey = await window.crypto.subtle.importKey("raw", keyBuffer, hmacAlgo, false, ["sign"]);
            return Buffer.from(await crypto.subtle.sign(hmacAlgo, hmacKey, dataBuffer));
          }
          exports.hmac_sha512 = hmac_sha512; /***/
        },
        /***/8276: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.pbkdf2_sha512 = void 0;
          async function pbkdf2_sha512(key, salt, iterations, keyLen) {
            const keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;
            const saltBuffer = typeof salt === 'string' ? Buffer.from(salt, 'utf-8') : salt;
            const pbkdf2_key = await window.crypto.subtle.importKey("raw", keyBuffer, {
              name: "PBKDF2"
            }, false, ["deriveBits"]);
            const derivedBits = await window.crypto.subtle.deriveBits({
              name: "PBKDF2",
              hash: "SHA-512",
              salt: saltBuffer,
              iterations: iterations
            }, pbkdf2_key, keyLen * 8);
            return Buffer.from(derivedBits);
          }
          exports.pbkdf2_sha512 = pbkdf2_sha512; /***/
        },
        /***/89: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sha256 = void 0;
          async function sha256(source) {
            if (typeof source === 'string') {
              return Buffer.from(await crypto.subtle.digest("SHA-256", Buffer.from(source, 'utf-8')));
            }
            return Buffer.from(await crypto.subtle.digest("SHA-256", source));
          }
          exports.sha256 = sha256; /***/
        },
        /***/8140: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sha512 = void 0;
          async function sha512(source) {
            if (typeof source === 'string') {
              return Buffer.from(await crypto.subtle.digest("SHA-512", Buffer.from(source, 'utf-8')));
            }
            return Buffer.from(await crypto.subtle.digest("SHA-512", source));
          }
          exports.sha512 = sha512; /***/
        },
        /***/7098: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = void 0;
          const hmac_sha512_1 = __webpack_require__(4299);
          const ED25519_CURVE = 'ed25519 seed';
          const HARDENED_OFFSET = 0x80000000;
          async function getED25519MasterKeyFromSeed(seed) {
            const I = await (0, hmac_sha512_1.hmac_sha512)(ED25519_CURVE, seed);
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            return {
              key: IL,
              chainCode: IR
            };
          }
          exports.getED25519MasterKeyFromSeed = getED25519MasterKeyFromSeed;
          async function deriveED25519HardenedKey(parent, index) {
            if (index >= HARDENED_OFFSET) {
              throw Error('Key index must be less than offset');
            } // Key Derive Path: 0x00 + parent.key + index;
            const indexBuffer = Buffer.alloc(4);
            indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);
            const data = Buffer.concat([Buffer.alloc(1, 0), parent.key, indexBuffer]); // Derive key
            const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            return {
              key: IL,
              chainCode: IR
            };
          }
          exports.deriveED25519HardenedKey = deriveED25519HardenedKey;
          async function deriveEd25519Path(seed, path) {
            let state = await getED25519MasterKeyFromSeed(seed);
            let remaining = [...path];
            while (remaining.length > 0) {
              let index = remaining[0];
              remaining = remaining.slice(1);
              state = await deriveED25519HardenedKey(state, index);
            }
            return state.key;
          }
          exports.deriveEd25519Path = deriveEd25519Path; /***/
        },
        /***/2326: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.deriveMnemonicsPath = exports.deriveMnemonicHardenedKey = exports.getMnemonicsMasterKeyFromSeed = void 0;
          const mnemonic_1 = __webpack_require__(2099);
          const hmac_sha512_1 = __webpack_require__(4299);
          const HARDENED_OFFSET = 0x80000000;
          const MNEMONICS_SEED = 'TON Mnemonics HD seed';
          async function getMnemonicsMasterKeyFromSeed(seed) {
            const I = await (0, hmac_sha512_1.hmac_sha512)(MNEMONICS_SEED, seed);
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            return {
              key: IL,
              chainCode: IR
            };
          }
          exports.getMnemonicsMasterKeyFromSeed = getMnemonicsMasterKeyFromSeed;
          async function deriveMnemonicHardenedKey(parent, index) {
            if (index >= HARDENED_OFFSET) {
              throw Error('Key index must be less than offset');
            } // Key Derive Path: 0x00 + parent.key + index;
            const indexBuffer = Buffer.alloc(4);
            indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);
            const data = Buffer.concat([Buffer.alloc(1, 0), parent.key, indexBuffer]); // Derive key
            const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            return {
              key: IL,
              chainCode: IR
            };
          }
          exports.deriveMnemonicHardenedKey = deriveMnemonicHardenedKey;
          async function deriveMnemonicsPath(seed, path, wordsCount, password) {
            if (wordsCount === void 0) {
              wordsCount = 24;
            }
            let state = await getMnemonicsMasterKeyFromSeed(seed);
            let remaining = [...path];
            while (remaining.length > 0) {
              let index = remaining[0];
              remaining = remaining.slice(1);
              state = await deriveMnemonicHardenedKey(state, index);
            }
            return await (0, mnemonic_1.mnemonicFromRandomSeed)(state.key, wordsCount, password);
          }
          exports.deriveMnemonicsPath = deriveMnemonicsPath; /***/
        },
        /***/7628: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = void 0;
          const hmac_sha512_1 = __webpack_require__(4299);
          const SYMMETRIC_SEED = 'Symmetric key seed';
          async function getSymmetricMasterKeyFromSeed(seed) {
            const I = await (0, hmac_sha512_1.hmac_sha512)(SYMMETRIC_SEED, seed);
            const IL = I.slice(32);
            const IR = I.slice(0, 32);
            return {
              key: IL,
              chainCode: IR
            };
          }
          exports.getSymmetricMasterKeyFromSeed = getSymmetricMasterKeyFromSeed;
          async function deriveSymmetricHardenedKey(parent, offset) {
            // Prepare data
            const data = Buffer.concat([Buffer.alloc(1, 0), Buffer.from(offset)]); // Derive key
            const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);
            const IL = I.slice(32);
            const IR = I.slice(0, 32);
            return {
              key: IL,
              chainCode: IR
            };
          }
          exports.deriveSymmetricHardenedKey = deriveSymmetricHardenedKey;
          async function deriveSymmetricPath(seed, path) {
            let state = await getSymmetricMasterKeyFromSeed(seed);
            let remaining = [...path];
            while (remaining.length > 0) {
              let index = remaining[0];
              remaining = remaining.slice(1);
              state = await deriveSymmetricHardenedKey(state, index);
            }
            return state.key;
          }
          exports.deriveSymmetricPath = deriveSymmetricPath; /***/
        },
        /***/3022: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getMnemonicsMasterKeyFromSeed = exports.deriveMnemonicHardenedKey = exports.deriveMnemonicsPath = exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = exports.signVerify = exports.sign = exports.keyPairFromSecretKey = exports.keyPairFromSeed = exports.openBox = exports.sealBox = exports.mnemonicWordList = exports.mnemonicToHDSeed = exports.mnemonicToSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicValidate = exports.mnemonicNew = exports.newSecurePassphrase = exports.newSecureWords = exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = exports.hmac_sha512 = exports.pbkdf2_sha512 = exports.sha512_sync = exports.sha512 = exports.sha256_sync = exports.sha256 = void 0;
          var sha256_1 = __webpack_require__(9690);
          Object.defineProperty(exports, "sha256", {
            enumerable: true,
            get: function () {
              return sha256_1.sha256;
            }
          });
          Object.defineProperty(exports, "sha256_sync", {
            enumerable: true,
            get: function () {
              return sha256_1.sha256_sync;
            }
          });
          var sha512_1 = __webpack_require__(6915);
          Object.defineProperty(exports, "sha512", {
            enumerable: true,
            get: function () {
              return sha512_1.sha512;
            }
          });
          Object.defineProperty(exports, "sha512_sync", {
            enumerable: true,
            get: function () {
              return sha512_1.sha512_sync;
            }
          });
          var pbkdf2_sha512_1 = __webpack_require__(6829);
          Object.defineProperty(exports, "pbkdf2_sha512", {
            enumerable: true,
            get: function () {
              return pbkdf2_sha512_1.pbkdf2_sha512;
            }
          });
          var hmac_sha512_1 = __webpack_require__(4299);
          Object.defineProperty(exports, "hmac_sha512", {
            enumerable: true,
            get: function () {
              return hmac_sha512_1.hmac_sha512;
            }
          });
          var getSecureRandom_1 = __webpack_require__(1495);
          Object.defineProperty(exports, "getSecureRandomBytes", {
            enumerable: true,
            get: function () {
              return getSecureRandom_1.getSecureRandomBytes;
            }
          });
          Object.defineProperty(exports, "getSecureRandomWords", {
            enumerable: true,
            get: function () {
              return getSecureRandom_1.getSecureRandomWords;
            }
          });
          Object.defineProperty(exports, "getSecureRandomNumber", {
            enumerable: true,
            get: function () {
              return getSecureRandom_1.getSecureRandomNumber;
            }
          });
          var newSecureWords_1 = __webpack_require__(1979);
          Object.defineProperty(exports, "newSecureWords", {
            enumerable: true,
            get: function () {
              return newSecureWords_1.newSecureWords;
            }
          });
          var newSecurePassphrase_1 = __webpack_require__(1936);
          Object.defineProperty(exports, "newSecurePassphrase", {
            enumerable: true,
            get: function () {
              return newSecurePassphrase_1.newSecurePassphrase;
            }
          });
          var mnemonic_1 = __webpack_require__(2099);
          Object.defineProperty(exports, "mnemonicNew", {
            enumerable: true,
            get: function () {
              return mnemonic_1.mnemonicNew;
            }
          });
          Object.defineProperty(exports, "mnemonicValidate", {
            enumerable: true,
            get: function () {
              return mnemonic_1.mnemonicValidate;
            }
          });
          Object.defineProperty(exports, "mnemonicToPrivateKey", {
            enumerable: true,
            get: function () {
              return mnemonic_1.mnemonicToPrivateKey;
            }
          });
          Object.defineProperty(exports, "mnemonicToWalletKey", {
            enumerable: true,
            get: function () {
              return mnemonic_1.mnemonicToWalletKey;
            }
          });
          Object.defineProperty(exports, "mnemonicToSeed", {
            enumerable: true,
            get: function () {
              return mnemonic_1.mnemonicToSeed;
            }
          });
          Object.defineProperty(exports, "mnemonicToHDSeed", {
            enumerable: true,
            get: function () {
              return mnemonic_1.mnemonicToHDSeed;
            }
          });
          var wordlist_1 = __webpack_require__(4067);
          Object.defineProperty(exports, "mnemonicWordList", {
            enumerable: true,
            get: function () {
              return wordlist_1.wordlist;
            }
          });
          var nacl_1 = __webpack_require__(7091);
          Object.defineProperty(exports, "sealBox", {
            enumerable: true,
            get: function () {
              return nacl_1.sealBox;
            }
          });
          Object.defineProperty(exports, "openBox", {
            enumerable: true,
            get: function () {
              return nacl_1.openBox;
            }
          });
          var nacl_2 = __webpack_require__(7091);
          Object.defineProperty(exports, "keyPairFromSeed", {
            enumerable: true,
            get: function () {
              return nacl_2.keyPairFromSeed;
            }
          });
          Object.defineProperty(exports, "keyPairFromSecretKey", {
            enumerable: true,
            get: function () {
              return nacl_2.keyPairFromSecretKey;
            }
          });
          Object.defineProperty(exports, "sign", {
            enumerable: true,
            get: function () {
              return nacl_2.sign;
            }
          });
          Object.defineProperty(exports, "signVerify", {
            enumerable: true,
            get: function () {
              return nacl_2.signVerify;
            }
          });
          var ed25519_1 = __webpack_require__(7098);
          Object.defineProperty(exports, "getED25519MasterKeyFromSeed", {
            enumerable: true,
            get: function () {
              return ed25519_1.getED25519MasterKeyFromSeed;
            }
          });
          Object.defineProperty(exports, "deriveED25519HardenedKey", {
            enumerable: true,
            get: function () {
              return ed25519_1.deriveED25519HardenedKey;
            }
          });
          Object.defineProperty(exports, "deriveEd25519Path", {
            enumerable: true,
            get: function () {
              return ed25519_1.deriveEd25519Path;
            }
          });
          var symmetric_1 = __webpack_require__(7628);
          Object.defineProperty(exports, "getSymmetricMasterKeyFromSeed", {
            enumerable: true,
            get: function () {
              return symmetric_1.getSymmetricMasterKeyFromSeed;
            }
          });
          Object.defineProperty(exports, "deriveSymmetricHardenedKey", {
            enumerable: true,
            get: function () {
              return symmetric_1.deriveSymmetricHardenedKey;
            }
          });
          Object.defineProperty(exports, "deriveSymmetricPath", {
            enumerable: true,
            get: function () {
              return symmetric_1.deriveSymmetricPath;
            }
          });
          var mnemonics_1 = __webpack_require__(2326);
          Object.defineProperty(exports, "deriveMnemonicsPath", {
            enumerable: true,
            get: function () {
              return mnemonics_1.deriveMnemonicsPath;
            }
          });
          Object.defineProperty(exports, "deriveMnemonicHardenedKey", {
            enumerable: true,
            get: function () {
              return mnemonics_1.deriveMnemonicHardenedKey;
            }
          });
          Object.defineProperty(exports, "getMnemonicsMasterKeyFromSeed", {
            enumerable: true,
            get: function () {
              return mnemonics_1.getMnemonicsMasterKeyFromSeed;
            }
          }); /***/
        },
        /***/2099: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.mnemonicFromRandomSeed = exports.mnemonicIndexesToBytes = exports.bytesToMnemonics = exports.bytesToMnemonicIndexes = exports.mnemonicNew = exports.mnemonicValidate = exports.mnemonicToHDSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicToSeed = exports.mnemonicToEntropy = void 0;
          const tweetnacl_1 = __importDefault(__webpack_require__(2926));
          const getSecureRandom_1 = __webpack_require__(1495);
          const hmac_sha512_1 = __webpack_require__(4299);
          const pbkdf2_sha512_1 = __webpack_require__(6829);
          const binary_1 = __webpack_require__(1763);
          const wordlist_1 = __webpack_require__(4067);
          const PBKDF_ITERATIONS = 100000;
          async function isPasswordNeeded(mnemonicArray) {
            const passlessEntropy = await mnemonicToEntropy(mnemonicArray);
            return (await isPasswordSeed(passlessEntropy)) && !(await isBasicSeed(passlessEntropy));
          }
          function normalizeMnemonic(src) {
            return src.map(v => v.toLowerCase().trim());
          }
          async function isBasicSeed(entropy) {
            // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L68
            // bool Mnemonic::is_basic_seed() {
            //   td::SecureString hash(64);
            //   td::pbkdf2_sha512(as_slice(to_entropy()), "TON seed version", td::max(1, PBKDF_ITERATIONS / 256),
            //                     hash.as_mutable_slice());
            //   return hash.as_slice()[0] == 0;
            // }
            const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON seed version', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);
            return seed[0] == 0;
          }
          async function isPasswordSeed(entropy) {
            // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L75
            // bool Mnemonic::is_password_seed() {
            //   td::SecureString hash(64);
            //   td::pbkdf2_sha512(as_slice(to_entropy()), "TON fast seed version", 1, hash.as_mutable_slice());
            //   return hash.as_slice()[0] == 1;
            // }
            const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON fast seed version', 1, 64);
            return seed[0] == 1;
          }
          async function mnemonicToEntropy(mnemonicArray, password) {
            // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L52
            // td::SecureString Mnemonic::to_entropy() const {
            //   td::SecureString res(64);
            //   td::hmac_sha512(join(words_), password_, res.as_mutable_slice());
            //   return res;
            // }
            return await (0, hmac_sha512_1.hmac_sha512)(mnemonicArray.join(' '), password && password.length > 0 ? password : '');
          }
          exports.mnemonicToEntropy = mnemonicToEntropy;
          async function mnemonicToSeed(mnemonicArray, seed, password) {
            // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L58
            // td::SecureString Mnemonic::to_seed() const {
            //   td::SecureString hash(64);
            //   td::pbkdf2_sha512(as_slice(to_entropy()), "TON default seed", PBKDF_ITERATIONS, hash.as_mutable_slice());
            //   return hash;
            // }
            const entropy = await mnemonicToEntropy(mnemonicArray, password);
            return await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);
          }
          exports.mnemonicToSeed = mnemonicToSeed; /**
                                                   * Extract private key from mnemonic
                                                   * @param mnemonicArray mnemonic array
                                                   * @param password mnemonic password
                                                   * @returns Key Pair
                                                   */
          async function mnemonicToPrivateKey(mnemonicArray, password) {
            // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L64
            // td::Ed25519::PrivateKey Mnemonic::to_private_key() const {
            //   return td::Ed25519::PrivateKey(td::SecureString(as_slice(to_seed()).substr(0, td::Ed25519::PrivateKey::LENGTH)));
            // }
            mnemonicArray = normalizeMnemonic(mnemonicArray);
            const seed = await mnemonicToSeed(mnemonicArray, 'TON default seed', password);
            let keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seed.slice(0, 32));
            return {
              publicKey: Buffer.from(keyPair.publicKey),
              secretKey: Buffer.from(keyPair.secretKey)
            };
          }
          exports.mnemonicToPrivateKey = mnemonicToPrivateKey; /**
                                                               * Convert mnemonic to wallet key pair
                                                               * @param mnemonicArray mnemonic array
                                                               * @param password mnemonic password
                                                               * @returns Key Pair
                                                               */
          async function mnemonicToWalletKey(mnemonicArray, password) {
            let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);
            let seedSecret = seedPk.secretKey.slice(0, 32);
            const keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seedSecret);
            return {
              publicKey: Buffer.from(keyPair.publicKey),
              secretKey: Buffer.from(keyPair.secretKey)
            };
          }
          exports.mnemonicToWalletKey = mnemonicToWalletKey; /**
                                                             * Convert mnemonics to HD seed
                                                             * @param mnemonicArray mnemonic array
                                                             * @param password mnemonic password
                                                             * @returns 64 byte seed
                                                             */
          async function mnemonicToHDSeed(mnemonicArray, password) {
            mnemonicArray = normalizeMnemonic(mnemonicArray);
            return await mnemonicToSeed(mnemonicArray, 'TON HD Keys seed', password);
          }
          exports.mnemonicToHDSeed = mnemonicToHDSeed; /**
                                                       * Validate Mnemonic
                                                       * @param mnemonicArray mnemonic array
                                                       * @param password mnemonic password
                                                       * @returns true for valid mnemonic
                                                       */
          async function mnemonicValidate(mnemonicArray, password) {
            // Normalize
            mnemonicArray = normalizeMnemonic(mnemonicArray); // Validate mnemonic words
            for (let word of mnemonicArray) {
              if (wordlist_1.wordlist.indexOf(word) < 0) {
                return false;
              }
            } // Check password
            if (password && password.length > 0) {
              if (!(await isPasswordNeeded(mnemonicArray))) {
                return false;
              }
            } // Validate seed
            return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));
          }
          exports.mnemonicValidate = mnemonicValidate; /**
                                                       * Generate new Mnemonic
                                                       * @param wordsCount number of words to generate
                                                       * @param password mnemonic password
                                                       * @returns
                                                       */
          async function mnemonicNew(wordsCount, password) {
            if (wordsCount === void 0) {
              wordsCount = 24;
            } // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L159
            let mnemonicArray = [];
            while (true) {
              // Regenerate new mnemonics
              mnemonicArray = [];
              for (let i = 0; i < wordsCount; i++) {
                let ind = await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length);
                mnemonicArray.push(wordlist_1.wordlist[ind]);
              } // Chek password conformance
              if (password && password.length > 0) {
                if (!(await isPasswordNeeded(mnemonicArray))) {
                  continue;
                }
              } // Check if basic seed correct
              if (!(await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password)))) {
                continue;
              }
              break;
            }
            return mnemonicArray;
          }
          exports.mnemonicNew = mnemonicNew; /**
                                             * Converts bytes to mnemonics array (could be invalid for TON)
                                             * @param src source buffer
                                             * @param wordsCount number of words
                                             */
          function bytesToMnemonicIndexes(src, wordsCount) {
            let bits = (0, binary_1.bytesToBits)(src);
            let indexes = [];
            for (let i = 0; i < wordsCount; i++) {
              let sl = bits.slice(i * 11, i * 11 + 11);
              indexes.push(parseInt(sl, 2));
            }
            return indexes;
          }
          exports.bytesToMnemonicIndexes = bytesToMnemonicIndexes;
          function bytesToMnemonics(src, wordsCount) {
            let mnemonics = bytesToMnemonicIndexes(src, wordsCount);
            let res = [];
            for (let m of mnemonics) {
              res.push(wordlist_1.wordlist[m]);
            }
            return res;
          }
          exports.bytesToMnemonics = bytesToMnemonics; /**
                                                       * Converts mnemonics indexes to buffer with zero padding in the end
                                                       * @param src source indexes
                                                       * @returns Buffer
                                                       */
          function mnemonicIndexesToBytes(src) {
            let res = '';
            for (let s of src) {
              if (!Number.isSafeInteger(s)) {
                throw Error('Invalid input');
              }
              if (s < 0 || s >= 2028) {
                throw Error('Invalid input');
              }
              res += (0, binary_1.lpad)(s.toString(2), '0', 11);
            }
            while (res.length % 8 !== 0) {
              res = res + '0';
            }
            return (0, binary_1.bitsToBytes)(res);
          }
          exports.mnemonicIndexesToBytes = mnemonicIndexesToBytes; /**
                                                                   * Generates deterministically mnemonics
                                                                   * @param seed
                                                                   * @param wordsCount
                                                                   * @param password
                                                                   */
          async function mnemonicFromRandomSeed(seed, wordsCount, password) {
            if (wordsCount === void 0) {
              wordsCount = 24;
            }
            const bytesLength = Math.ceil(wordsCount * 11 / 8);
            let currentSeed = seed;
            while (true) {
              // Create entropy
              let entropy = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(currentSeed, 'TON mnemonic seed', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), bytesLength); // Create mnemonics
              let mnemonics = bytesToMnemonics(entropy, wordsCount); // Check if mnemonics are valid
              if (await mnemonicValidate(mnemonics, password)) {
                return mnemonics;
              }
              currentSeed = entropy;
            }
          }
          exports.mnemonicFromRandomSeed = mnemonicFromRandomSeed; /***/
        },
        /***/4067: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.wordlist = void 0;
          const EN = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused', 'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual', 'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple', 'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around', 'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault', 'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract', 'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake', 'aware', 'away', 'awesome', 'awful', 'awkward', 'axis', 'baby', 'bachelor', 'bacon', 'badge', 'bag', 'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base', 'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin', 'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between', 'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame', 'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush', 'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow', 'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze', 'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother', 'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle', 'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz', 'cabbage', 'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel', 'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card', 'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch', 'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census', 'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge', 'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child', 'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle', 'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click', 'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club', 'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect', 'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct', 'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy', 'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin', 'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy', 'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch', 'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture', 'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle', 'dad', 'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate', 'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define', 'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend', 'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy', 'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel', 'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree', 'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce', 'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door', 'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill', 'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty', 'dwarf', 'dynamic', 'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology', 'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric', 'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge', 'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy', 'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure', 'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion', 'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke', 'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise', 'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose', 'express', 'extend', 'extra', 'eye', 'eyebrow', 'fabric', 'face', 'faculty', 'fade', 'faint', 'faith', 'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal', 'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female', 'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film', 'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit', 'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock', 'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food', 'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found', 'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown', 'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future', 'gadget', 'gain', 'galaxy', 'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate', 'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant', 'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide', 'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose', 'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass', 'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess', 'guide', 'guilt', 'guitar', 'gun', 'gym', 'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy', 'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy', 'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip', 'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope', 'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble', 'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid', 'ice', 'icon', 'idea', 'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune', 'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate', 'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury', 'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install', 'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item', 'ivory', 'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke', 'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just', 'kangaroo', 'keen', 'keep', 'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten', 'kiwi', 'knee', 'knife', 'knock', 'know', 'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp', 'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit', 'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure', 'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library', 'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little', 'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery', 'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics', 'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage', 'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market', 'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze', 'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory', 'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle', 'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery', 'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor', 'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor', 'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom', 'music', 'must', 'mutual', 'myself', 'mystery', 'myth', 'naive', 'name', 'napkin', 'narrow', 'nasty', 'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest', 'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee', 'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear', 'number', 'nurse', 'nut', 'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious', 'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive', 'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose', 'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan', 'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner', 'oxygen', 'oyster', 'ozone', 'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic', 'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient', 'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen', 'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase', 'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer', 'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge', 'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool', 'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power', 'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride', 'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit', 'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public', 'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose', 'purse', 'push', 'put', 'puzzle', 'pyramid', 'quality', 'quantum', 'quarter', 'question', 'quick', 'quit', 'quiz', 'quote', 'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally', 'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready', 'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce', 'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat', 'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire', 'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich', 'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river', 'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate', 'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural', 'sad', 'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand', 'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene', 'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea', 'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select', 'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup', 'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine', 'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug', 'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver', 'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski', 'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim', 'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap', 'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid', 'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south', 'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice', 'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray', 'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs', 'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still', 'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong', 'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such', 'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply', 'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow', 'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol', 'symptom', 'syrup', 'system', 'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target', 'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term', 'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought', 'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny', 'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet', 'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple', 'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track', 'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree', 'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true', 'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey', 'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical', 'ugly', 'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy', 'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update', 'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless', 'usual', 'utility', 'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor', 'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version', 'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village', 'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice', 'void', 'volcano', 'volume', 'vote', 'voyage', 'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want', 'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear', 'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what', 'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win', 'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf', 'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle', 'wrist', 'write', 'wrong', 'yard', 'year', 'yellow', 'you', 'young', 'youth', 'zebra', 'zero', 'zone', 'zoo'];
          exports.wordlist = EN; /***/
        },
        /***/1936: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.newSecurePassphrase = void 0;
          const __1 = __webpack_require__(3022);
          async function newSecurePassphrase(size) {
            if (size === void 0) {
              size = 6;
            }
            return (await (0, __1.newSecureWords)(size)).join('-');
          }
          exports.newSecurePassphrase = newSecurePassphrase; /***/
        },
        /***/1979: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.newSecureWords = void 0;
          const getSecureRandom_1 = __webpack_require__(1495);
          const wordlist_1 = __webpack_require__(7431);
          async function newSecureWords(size) {
            if (size === void 0) {
              size = 6;
            }
            let words = [];
            for (let i = 0; i < size; i++) {
              words.push(wordlist_1.wordlist[await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length)]);
            }
            return words;
          }
          exports.newSecureWords = newSecureWords; /***/
        },
        /***/7431: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.wordlist = void 0; // Source https://www.eff.org/dice
          exports.wordlist = ['abacus', 'abdomen', 'abdominal', 'abide', 'abiding', 'ability', 'ablaze', 'able', 'abnormal', 'abrasion', 'abrasive', 'abreast', 'abridge', 'abroad', 'abruptly', 'absence', 'absentee', 'absently', 'absinthe', 'absolute', 'absolve', 'abstain', 'abstract', 'absurd', 'accent', 'acclaim', 'acclimate', 'accompany', 'account', 'accuracy', 'accurate', 'accustom', 'acetone', 'achiness', 'aching', 'acid', 'acorn', 'acquaint', 'acquire', 'acre', 'acrobat', 'acronym', 'acting', 'action', 'activate', 'activator', 'active', 'activism', 'activist', 'activity', 'actress', 'acts', 'acutely', 'acuteness', 'aeration', 'aerobics', 'aerosol', 'aerospace', 'afar', 'affair', 'affected', 'affecting', 'affection', 'affidavit', 'affiliate', 'affirm', 'affix', 'afflicted', 'affluent', 'afford', 'affront', 'aflame', 'afloat', 'aflutter', 'afoot', 'afraid', 'afterglow', 'afterlife', 'aftermath', 'aftermost', 'afternoon', 'aged', 'ageless', 'agency', 'agenda', 'agent', 'aggregate', 'aghast', 'agile', 'agility', 'aging', 'agnostic', 'agonize', 'agonizing', 'agony', 'agreeable', 'agreeably', 'agreed', 'agreeing', 'agreement', 'aground', 'ahead', 'ahoy', 'aide', 'aids', 'aim', 'ajar', 'alabaster', 'alarm', 'albatross', 'album', 'alfalfa', 'algebra', 'algorithm', 'alias', 'alibi', 'alienable', 'alienate', 'aliens', 'alike', 'alive', 'alkaline', 'alkalize', 'almanac', 'almighty', 'almost', 'aloe', 'aloft', 'aloha', 'alone', 'alongside', 'aloof', 'alphabet', 'alright', 'although', 'altitude', 'alto', 'aluminum', 'alumni', 'always', 'amaretto', 'amaze', 'amazingly', 'amber', 'ambiance', 'ambiguity', 'ambiguous', 'ambition', 'ambitious', 'ambulance', 'ambush', 'amendable', 'amendment', 'amends', 'amenity', 'amiable', 'amicably', 'amid', 'amigo', 'amino', 'amiss', 'ammonia', 'ammonium', 'amnesty', 'amniotic', 'among', 'amount', 'amperage', 'ample', 'amplifier', 'amplify', 'amply', 'amuck', 'amulet', 'amusable', 'amused', 'amusement', 'amuser', 'amusing', 'anaconda', 'anaerobic', 'anagram', 'anatomist', 'anatomy', 'anchor', 'anchovy', 'ancient', 'android', 'anemia', 'anemic', 'aneurism', 'anew', 'angelfish', 'angelic', 'anger', 'angled', 'angler', 'angles', 'angling', 'angrily', 'angriness', 'anguished', 'angular', 'animal', 'animate', 'animating', 'animation', 'animator', 'anime', 'animosity', 'ankle', 'annex', 'annotate', 'announcer', 'annoying', 'annually', 'annuity', 'anointer', 'another', 'answering', 'antacid', 'antarctic', 'anteater', 'antelope', 'antennae', 'anthem', 'anthill', 'anthology', 'antibody', 'antics', 'antidote', 'antihero', 'antiquely', 'antiques', 'antiquity', 'antirust', 'antitoxic', 'antitrust', 'antiviral', 'antivirus', 'antler', 'antonym', 'antsy', 'anvil', 'anybody', 'anyhow', 'anymore', 'anyone', 'anyplace', 'anything', 'anytime', 'anyway', 'anywhere', 'aorta', 'apache', 'apostle', 'appealing', 'appear', 'appease', 'appeasing', 'appendage', 'appendix', 'appetite', 'appetizer', 'applaud', 'applause', 'apple', 'appliance', 'applicant', 'applied', 'apply', 'appointee', 'appraisal', 'appraiser', 'apprehend', 'approach', 'approval', 'approve', 'apricot', 'april', 'apron', 'aptitude', 'aptly', 'aqua', 'aqueduct', 'arbitrary', 'arbitrate', 'ardently', 'area', 'arena', 'arguable', 'arguably', 'argue', 'arise', 'armadillo', 'armband', 'armchair', 'armed', 'armful', 'armhole', 'arming', 'armless', 'armoire', 'armored', 'armory', 'armrest', 'army', 'aroma', 'arose', 'around', 'arousal', 'arrange', 'array', 'arrest', 'arrival', 'arrive', 'arrogance', 'arrogant', 'arson', 'art', 'ascend', 'ascension', 'ascent', 'ascertain', 'ashamed', 'ashen', 'ashes', 'ashy', 'aside', 'askew', 'asleep', 'asparagus', 'aspect', 'aspirate', 'aspire', 'aspirin', 'astonish', 'astound', 'astride', 'astrology', 'astronaut', 'astronomy', 'astute', 'atlantic', 'atlas', 'atom', 'atonable', 'atop', 'atrium', 'atrocious', 'atrophy', 'attach', 'attain', 'attempt', 'attendant', 'attendee', 'attention', 'attentive', 'attest', 'attic', 'attire', 'attitude', 'attractor', 'attribute', 'atypical', 'auction', 'audacious', 'audacity', 'audible', 'audibly', 'audience', 'audio', 'audition', 'augmented', 'august', 'authentic', 'author', 'autism', 'autistic', 'autograph', 'automaker', 'automated', 'automatic', 'autopilot', 'available', 'avalanche', 'avatar', 'avenge', 'avenging', 'avenue', 'average', 'aversion', 'avert', 'aviation', 'aviator', 'avid', 'avoid', 'await', 'awaken', 'award', 'aware', 'awhile', 'awkward', 'awning', 'awoke', 'awry', 'axis', 'babble', 'babbling', 'babied', 'baboon', 'backache', 'backboard', 'backboned', 'backdrop', 'backed', 'backer', 'backfield', 'backfire', 'backhand', 'backing', 'backlands', 'backlash', 'backless', 'backlight', 'backlit', 'backlog', 'backpack', 'backpedal', 'backrest', 'backroom', 'backshift', 'backside', 'backslid', 'backspace', 'backspin', 'backstab', 'backstage', 'backtalk', 'backtrack', 'backup', 'backward', 'backwash', 'backwater', 'backyard', 'bacon', 'bacteria', 'bacterium', 'badass', 'badge', 'badland', 'badly', 'badness', 'baffle', 'baffling', 'bagel', 'bagful', 'baggage', 'bagged', 'baggie', 'bagginess', 'bagging', 'baggy', 'bagpipe', 'baguette', 'baked', 'bakery', 'bakeshop', 'baking', 'balance', 'balancing', 'balcony', 'balmy', 'balsamic', 'bamboo', 'banana', 'banish', 'banister', 'banjo', 'bankable', 'bankbook', 'banked', 'banker', 'banking', 'banknote', 'bankroll', 'banner', 'bannister', 'banshee', 'banter', 'barbecue', 'barbed', 'barbell', 'barber', 'barcode', 'barge', 'bargraph', 'barista', 'baritone', 'barley', 'barmaid', 'barman', 'barn', 'barometer', 'barrack', 'barracuda', 'barrel', 'barrette', 'barricade', 'barrier', 'barstool', 'bartender', 'barterer', 'bash', 'basically', 'basics', 'basil', 'basin', 'basis', 'basket', 'batboy', 'batch', 'bath', 'baton', 'bats', 'battalion', 'battered', 'battering', 'battery', 'batting', 'battle', 'bauble', 'bazooka', 'blabber', 'bladder', 'blade', 'blah', 'blame', 'blaming', 'blanching', 'blandness', 'blank', 'blaspheme', 'blasphemy', 'blast', 'blatancy', 'blatantly', 'blazer', 'blazing', 'bleach', 'bleak', 'bleep', 'blemish', 'blend', 'bless', 'blighted', 'blimp', 'bling', 'blinked', 'blinker', 'blinking', 'blinks', 'blip', 'blissful', 'blitz', 'blizzard', 'bloated', 'bloating', 'blob', 'blog', 'bloomers', 'blooming', 'blooper', 'blot', 'blouse', 'blubber', 'bluff', 'bluish', 'blunderer', 'blunt', 'blurb', 'blurred', 'blurry', 'blurt', 'blush', 'blustery', 'boaster', 'boastful', 'boasting', 'boat', 'bobbed', 'bobbing', 'bobble', 'bobcat', 'bobsled', 'bobtail', 'bodacious', 'body', 'bogged', 'boggle', 'bogus', 'boil', 'bok', 'bolster', 'bolt', 'bonanza', 'bonded', 'bonding', 'bondless', 'boned', 'bonehead', 'boneless', 'bonelike', 'boney', 'bonfire', 'bonnet', 'bonsai', 'bonus', 'bony', 'boogeyman', 'boogieman', 'book', 'boondocks', 'booted', 'booth', 'bootie', 'booting', 'bootlace', 'bootleg', 'boots', 'boozy', 'borax', 'boring', 'borough', 'borrower', 'borrowing', 'boss', 'botanical', 'botanist', 'botany', 'botch', 'both', 'bottle', 'bottling', 'bottom', 'bounce', 'bouncing', 'bouncy', 'bounding', 'boundless', 'bountiful', 'bovine', 'boxcar', 'boxer', 'boxing', 'boxlike', 'boxy', 'breach', 'breath', 'breeches', 'breeching', 'breeder', 'breeding', 'breeze', 'breezy', 'brethren', 'brewery', 'brewing', 'briar', 'bribe', 'brick', 'bride', 'bridged', 'brigade', 'bright', 'brilliant', 'brim', 'bring', 'brink', 'brisket', 'briskly', 'briskness', 'bristle', 'brittle', 'broadband', 'broadcast', 'broaden', 'broadly', 'broadness', 'broadside', 'broadways', 'broiler', 'broiling', 'broken', 'broker', 'bronchial', 'bronco', 'bronze', 'bronzing', 'brook', 'broom', 'brought', 'browbeat', 'brownnose', 'browse', 'browsing', 'bruising', 'brunch', 'brunette', 'brunt', 'brush', 'brussels', 'brute', 'brutishly', 'bubble', 'bubbling', 'bubbly', 'buccaneer', 'bucked', 'bucket', 'buckle', 'buckshot', 'buckskin', 'bucktooth', 'buckwheat', 'buddhism', 'buddhist', 'budding', 'buddy', 'budget', 'buffalo', 'buffed', 'buffer', 'buffing', 'buffoon', 'buggy', 'bulb', 'bulge', 'bulginess', 'bulgur', 'bulk', 'bulldog', 'bulldozer', 'bullfight', 'bullfrog', 'bullhorn', 'bullion', 'bullish', 'bullpen', 'bullring', 'bullseye', 'bullwhip', 'bully', 'bunch', 'bundle', 'bungee', 'bunion', 'bunkbed', 'bunkhouse', 'bunkmate', 'bunny', 'bunt', 'busboy', 'bush', 'busily', 'busload', 'bust', 'busybody', 'buzz', 'cabana', 'cabbage', 'cabbie', 'cabdriver', 'cable', 'caboose', 'cache', 'cackle', 'cacti', 'cactus', 'caddie', 'caddy', 'cadet', 'cadillac', 'cadmium', 'cage', 'cahoots', 'cake', 'calamari', 'calamity', 'calcium', 'calculate', 'calculus', 'caliber', 'calibrate', 'calm', 'caloric', 'calorie', 'calzone', 'camcorder', 'cameo', 'camera', 'camisole', 'camper', 'campfire', 'camping', 'campsite', 'campus', 'canal', 'canary', 'cancel', 'candied', 'candle', 'candy', 'cane', 'canine', 'canister', 'cannabis', 'canned', 'canning', 'cannon', 'cannot', 'canola', 'canon', 'canopener', 'canopy', 'canteen', 'canyon', 'capable', 'capably', 'capacity', 'cape', 'capillary', 'capital', 'capitol', 'capped', 'capricorn', 'capsize', 'capsule', 'caption', 'captivate', 'captive', 'captivity', 'capture', 'caramel', 'carat', 'caravan', 'carbon', 'cardboard', 'carded', 'cardiac', 'cardigan', 'cardinal', 'cardstock', 'carefully', 'caregiver', 'careless', 'caress', 'caretaker', 'cargo', 'caring', 'carless', 'carload', 'carmaker', 'carnage', 'carnation', 'carnival', 'carnivore', 'carol', 'carpenter', 'carpentry', 'carpool', 'carport', 'carried', 'carrot', 'carrousel', 'carry', 'cartel', 'cartload', 'carton', 'cartoon', 'cartridge', 'cartwheel', 'carve', 'carving', 'carwash', 'cascade', 'case', 'cash', 'casing', 'casino', 'casket', 'cassette', 'casually', 'casualty', 'catacomb', 'catalog', 'catalyst', 'catalyze', 'catapult', 'cataract', 'catatonic', 'catcall', 'catchable', 'catcher', 'catching', 'catchy', 'caterer', 'catering', 'catfight', 'catfish', 'cathedral', 'cathouse', 'catlike', 'catnap', 'catnip', 'catsup', 'cattail', 'cattishly', 'cattle', 'catty', 'catwalk', 'caucasian', 'caucus', 'causal', 'causation', 'cause', 'causing', 'cauterize', 'caution', 'cautious', 'cavalier', 'cavalry', 'caviar', 'cavity', 'cedar', 'celery', 'celestial', 'celibacy', 'celibate', 'celtic', 'cement', 'census', 'ceramics', 'ceremony', 'certainly', 'certainty', 'certified', 'certify', 'cesarean', 'cesspool', 'chafe', 'chaffing', 'chain', 'chair', 'chalice', 'challenge', 'chamber', 'chamomile', 'champion', 'chance', 'change', 'channel', 'chant', 'chaos', 'chaperone', 'chaplain', 'chapped', 'chaps', 'chapter', 'character', 'charbroil', 'charcoal', 'charger', 'charging', 'chariot', 'charity', 'charm', 'charred', 'charter', 'charting', 'chase', 'chasing', 'chaste', 'chastise', 'chastity', 'chatroom', 'chatter', 'chatting', 'chatty', 'cheating', 'cheddar', 'cheek', 'cheer', 'cheese', 'cheesy', 'chef', 'chemicals', 'chemist', 'chemo', 'cherisher', 'cherub', 'chess', 'chest', 'chevron', 'chevy', 'chewable', 'chewer', 'chewing', 'chewy', 'chief', 'chihuahua', 'childcare', 'childhood', 'childish', 'childless', 'childlike', 'chili', 'chill', 'chimp', 'chip', 'chirping', 'chirpy', 'chitchat', 'chivalry', 'chive', 'chloride', 'chlorine', 'choice', 'chokehold', 'choking', 'chomp', 'chooser', 'choosing', 'choosy', 'chop', 'chosen', 'chowder', 'chowtime', 'chrome', 'chubby', 'chuck', 'chug', 'chummy', 'chump', 'chunk', 'churn', 'chute', 'cider', 'cilantro', 'cinch', 'cinema', 'cinnamon', 'circle', 'circling', 'circular', 'circulate', 'circus', 'citable', 'citadel', 'citation', 'citizen', 'citric', 'citrus', 'city', 'civic', 'civil', 'clad', 'claim', 'clambake', 'clammy', 'clamor', 'clamp', 'clamshell', 'clang', 'clanking', 'clapped', 'clapper', 'clapping', 'clarify', 'clarinet', 'clarity', 'clash', 'clasp', 'class', 'clatter', 'clause', 'clavicle', 'claw', 'clay', 'clean', 'clear', 'cleat', 'cleaver', 'cleft', 'clench', 'clergyman', 'clerical', 'clerk', 'clever', 'clicker', 'client', 'climate', 'climatic', 'cling', 'clinic', 'clinking', 'clip', 'clique', 'cloak', 'clobber', 'clock', 'clone', 'cloning', 'closable', 'closure', 'clothes', 'clothing', 'cloud', 'clover', 'clubbed', 'clubbing', 'clubhouse', 'clump', 'clumsily', 'clumsy', 'clunky', 'clustered', 'clutch', 'clutter', 'coach', 'coagulant', 'coastal', 'coaster', 'coasting', 'coastland', 'coastline', 'coat', 'coauthor', 'cobalt', 'cobbler', 'cobweb', 'cocoa', 'coconut', 'cod', 'coeditor', 'coerce', 'coexist', 'coffee', 'cofounder', 'cognition', 'cognitive', 'cogwheel', 'coherence', 'coherent', 'cohesive', 'coil', 'coke', 'cola', 'cold', 'coleslaw', 'coliseum', 'collage', 'collapse', 'collar', 'collected', 'collector', 'collide', 'collie', 'collision', 'colonial', 'colonist', 'colonize', 'colony', 'colossal', 'colt', 'coma', 'come', 'comfort', 'comfy', 'comic', 'coming', 'comma', 'commence', 'commend', 'comment', 'commerce', 'commode', 'commodity', 'commodore', 'common', 'commotion', 'commute', 'commuting', 'compacted', 'compacter', 'compactly', 'compactor', 'companion', 'company', 'compare', 'compel', 'compile', 'comply', 'component', 'composed', 'composer', 'composite', 'compost', 'composure', 'compound', 'compress', 'comprised', 'computer', 'computing', 'comrade', 'concave', 'conceal', 'conceded', 'concept', 'concerned', 'concert', 'conch', 'concierge', 'concise', 'conclude', 'concrete', 'concur', 'condense', 'condiment', 'condition', 'condone', 'conducive', 'conductor', 'conduit', 'cone', 'confess', 'confetti', 'confidant', 'confident', 'confider', 'confiding', 'configure', 'confined', 'confining', 'confirm', 'conflict', 'conform', 'confound', 'confront', 'confused', 'confusing', 'confusion', 'congenial', 'congested', 'congrats', 'congress', 'conical', 'conjoined', 'conjure', 'conjuror', 'connected', 'connector', 'consensus', 'consent', 'console', 'consoling', 'consonant', 'constable', 'constant', 'constrain', 'constrict', 'construct', 'consult', 'consumer', 'consuming', 'contact', 'container', 'contempt', 'contend', 'contented', 'contently', 'contents', 'contest', 'context', 'contort', 'contour', 'contrite', 'control', 'contusion', 'convene', 'convent', 'copartner', 'cope', 'copied', 'copier', 'copilot', 'coping', 'copious', 'copper', 'copy', 'coral', 'cork', 'cornball', 'cornbread', 'corncob', 'cornea', 'corned', 'corner', 'cornfield', 'cornflake', 'cornhusk', 'cornmeal', 'cornstalk', 'corny', 'coronary', 'coroner', 'corporal', 'corporate', 'corral', 'correct', 'corridor', 'corrode', 'corroding', 'corrosive', 'corsage', 'corset', 'cortex', 'cosigner', 'cosmetics', 'cosmic', 'cosmos', 'cosponsor', 'cost', 'cottage', 'cotton', 'couch', 'cough', 'could', 'countable', 'countdown', 'counting', 'countless', 'country', 'county', 'courier', 'covenant', 'cover', 'coveted', 'coveting', 'coyness', 'cozily', 'coziness', 'cozy', 'crabbing', 'crabgrass', 'crablike', 'crabmeat', 'cradle', 'cradling', 'crafter', 'craftily', 'craftsman', 'craftwork', 'crafty', 'cramp', 'cranberry', 'crane', 'cranial', 'cranium', 'crank', 'crate', 'crave', 'craving', 'crawfish', 'crawlers', 'crawling', 'crayfish', 'crayon', 'crazed', 'crazily', 'craziness', 'crazy', 'creamed', 'creamer', 'creamlike', 'crease', 'creasing', 'creatable', 'create', 'creation', 'creative', 'creature', 'credible', 'credibly', 'credit', 'creed', 'creme', 'creole', 'crepe', 'crept', 'crescent', 'crested', 'cresting', 'crestless', 'crevice', 'crewless', 'crewman', 'crewmate', 'crib', 'cricket', 'cried', 'crier', 'crimp', 'crimson', 'cringe', 'cringing', 'crinkle', 'crinkly', 'crisped', 'crisping', 'crisply', 'crispness', 'crispy', 'criteria', 'critter', 'croak', 'crock', 'crook', 'croon', 'crop', 'cross', 'crouch', 'crouton', 'crowbar', 'crowd', 'crown', 'crucial', 'crudely', 'crudeness', 'cruelly', 'cruelness', 'cruelty', 'crumb', 'crummiest', 'crummy', 'crumpet', 'crumpled', 'cruncher', 'crunching', 'crunchy', 'crusader', 'crushable', 'crushed', 'crusher', 'crushing', 'crust', 'crux', 'crying', 'cryptic', 'crystal', 'cubbyhole', 'cube', 'cubical', 'cubicle', 'cucumber', 'cuddle', 'cuddly', 'cufflink', 'culinary', 'culminate', 'culpable', 'culprit', 'cultivate', 'cultural', 'culture', 'cupbearer', 'cupcake', 'cupid', 'cupped', 'cupping', 'curable', 'curator', 'curdle', 'cure', 'curfew', 'curing', 'curled', 'curler', 'curliness', 'curling', 'curly', 'curry', 'curse', 'cursive', 'cursor', 'curtain', 'curtly', 'curtsy', 'curvature', 'curve', 'curvy', 'cushy', 'cusp', 'cussed', 'custard', 'custodian', 'custody', 'customary', 'customer', 'customize', 'customs', 'cut', 'cycle', 'cyclic', 'cycling', 'cyclist', 'cylinder', 'cymbal', 'cytoplasm', 'cytoplast', 'dab', 'dad', 'daffodil', 'dagger', 'daily', 'daintily', 'dainty', 'dairy', 'daisy', 'dallying', 'dance', 'dancing', 'dandelion', 'dander', 'dandruff', 'dandy', 'danger', 'dangle', 'dangling', 'daredevil', 'dares', 'daringly', 'darkened', 'darkening', 'darkish', 'darkness', 'darkroom', 'darling', 'darn', 'dart', 'darwinism', 'dash', 'dastardly', 'data', 'datebook', 'dating', 'daughter', 'daunting', 'dawdler', 'dawn', 'daybed', 'daybreak', 'daycare', 'daydream', 'daylight', 'daylong', 'dayroom', 'daytime', 'dazzler', 'dazzling', 'deacon', 'deafening', 'deafness', 'dealer', 'dealing', 'dealmaker', 'dealt', 'dean', 'debatable', 'debate', 'debating', 'debit', 'debrief', 'debtless', 'debtor', 'debug', 'debunk', 'decade', 'decaf', 'decal', 'decathlon', 'decay', 'deceased', 'deceit', 'deceiver', 'deceiving', 'december', 'decency', 'decent', 'deception', 'deceptive', 'decibel', 'decidable', 'decimal', 'decimeter', 'decipher', 'deck', 'declared', 'decline', 'decode', 'decompose', 'decorated', 'decorator', 'decoy', 'decrease', 'decree', 'dedicate', 'dedicator', 'deduce', 'deduct', 'deed', 'deem', 'deepen', 'deeply', 'deepness', 'deface', 'defacing', 'defame', 'default', 'defeat', 'defection', 'defective', 'defendant', 'defender', 'defense', 'defensive', 'deferral', 'deferred', 'defiance', 'defiant', 'defile', 'defiling', 'define', 'definite', 'deflate', 'deflation', 'deflator', 'deflected', 'deflector', 'defog', 'deforest', 'defraud', 'defrost', 'deftly', 'defuse', 'defy', 'degraded', 'degrading', 'degrease', 'degree', 'dehydrate', 'deity', 'dejected', 'delay', 'delegate', 'delegator', 'delete', 'deletion', 'delicacy', 'delicate', 'delicious', 'delighted', 'delirious', 'delirium', 'deliverer', 'delivery', 'delouse', 'delta', 'deluge', 'delusion', 'deluxe', 'demanding', 'demeaning', 'demeanor', 'demise', 'democracy', 'democrat', 'demote', 'demotion', 'demystify', 'denatured', 'deniable', 'denial', 'denim', 'denote', 'dense', 'density', 'dental', 'dentist', 'denture', 'deny', 'deodorant', 'deodorize', 'departed', 'departure', 'depict', 'deplete', 'depletion', 'deplored', 'deploy', 'deport', 'depose', 'depraved', 'depravity', 'deprecate', 'depress', 'deprive', 'depth', 'deputize', 'deputy', 'derail', 'deranged', 'derby', 'derived', 'desecrate', 'deserve', 'deserving', 'designate', 'designed', 'designer', 'designing', 'deskbound', 'desktop', 'deskwork', 'desolate', 'despair', 'despise', 'despite', 'destiny', 'destitute', 'destruct', 'detached', 'detail', 'detection', 'detective', 'detector', 'detention', 'detergent', 'detest', 'detonate', 'detonator', 'detoxify', 'detract', 'deuce', 'devalue', 'deviancy', 'deviant', 'deviate', 'deviation', 'deviator', 'device', 'devious', 'devotedly', 'devotee', 'devotion', 'devourer', 'devouring', 'devoutly', 'dexterity', 'dexterous', 'diabetes', 'diabetic', 'diabolic', 'diagnoses', 'diagnosis', 'diagram', 'dial', 'diameter', 'diaper', 'diaphragm', 'diary', 'dice', 'dicing', 'dictate', 'dictation', 'dictator', 'difficult', 'diffused', 'diffuser', 'diffusion', 'diffusive', 'dig', 'dilation', 'diligence', 'diligent', 'dill', 'dilute', 'dime', 'diminish', 'dimly', 'dimmed', 'dimmer', 'dimness', 'dimple', 'diner', 'dingbat', 'dinghy', 'dinginess', 'dingo', 'dingy', 'dining', 'dinner', 'diocese', 'dioxide', 'diploma', 'dipped', 'dipper', 'dipping', 'directed', 'direction', 'directive', 'directly', 'directory', 'direness', 'dirtiness', 'disabled', 'disagree', 'disallow', 'disarm', 'disarray', 'disaster', 'disband', 'disbelief', 'disburse', 'discard', 'discern', 'discharge', 'disclose', 'discolor', 'discount', 'discourse', 'discover', 'discuss', 'disdain', 'disengage', 'disfigure', 'disgrace', 'dish', 'disinfect', 'disjoin', 'disk', 'dislike', 'disliking', 'dislocate', 'dislodge', 'disloyal', 'dismantle', 'dismay', 'dismiss', 'dismount', 'disobey', 'disorder', 'disown', 'disparate', 'disparity', 'dispatch', 'dispense', 'dispersal', 'dispersed', 'disperser', 'displace', 'display', 'displease', 'disposal', 'dispose', 'disprove', 'dispute', 'disregard', 'disrupt', 'dissuade', 'distance', 'distant', 'distaste', 'distill', 'distinct', 'distort', 'distract', 'distress', 'district', 'distrust', 'ditch', 'ditto', 'ditzy', 'dividable', 'divided', 'dividend', 'dividers', 'dividing', 'divinely', 'diving', 'divinity', 'divisible', 'divisibly', 'division', 'divisive', 'divorcee', 'dizziness', 'dizzy', 'doable', 'docile', 'dock', 'doctrine', 'document', 'dodge', 'dodgy', 'doily', 'doing', 'dole', 'dollar', 'dollhouse', 'dollop', 'dolly', 'dolphin', 'domain', 'domelike', 'domestic', 'dominion', 'dominoes', 'donated', 'donation', 'donator', 'donor', 'donut', 'doodle', 'doorbell', 'doorframe', 'doorknob', 'doorman', 'doormat', 'doornail', 'doorpost', 'doorstep', 'doorstop', 'doorway', 'doozy', 'dork', 'dormitory', 'dorsal', 'dosage', 'dose', 'dotted', 'doubling', 'douche', 'dove', 'down', 'dowry', 'doze', 'drab', 'dragging', 'dragonfly', 'dragonish', 'dragster', 'drainable', 'drainage', 'drained', 'drainer', 'drainpipe', 'dramatic', 'dramatize', 'drank', 'drapery', 'drastic', 'draw', 'dreaded', 'dreadful', 'dreadlock', 'dreamboat', 'dreamily', 'dreamland', 'dreamless', 'dreamlike', 'dreamt', 'dreamy', 'drearily', 'dreary', 'drench', 'dress', 'drew', 'dribble', 'dried', 'drier', 'drift', 'driller', 'drilling', 'drinkable', 'drinking', 'dripping', 'drippy', 'drivable', 'driven', 'driver', 'driveway', 'driving', 'drizzle', 'drizzly', 'drone', 'drool', 'droop', 'drop-down', 'dropbox', 'dropkick', 'droplet', 'dropout', 'dropper', 'drove', 'drown', 'drowsily', 'drudge', 'drum', 'dry', 'dubbed', 'dubiously', 'duchess', 'duckbill', 'ducking', 'duckling', 'ducktail', 'ducky', 'duct', 'dude', 'duffel', 'dugout', 'duh', 'duke', 'duller', 'dullness', 'duly', 'dumping', 'dumpling', 'dumpster', 'duo', 'dupe', 'duplex', 'duplicate', 'duplicity', 'durable', 'durably', 'duration', 'duress', 'during', 'dusk', 'dust', 'dutiful', 'duty', 'duvet', 'dwarf', 'dweeb', 'dwelled', 'dweller', 'dwelling', 'dwindle', 'dwindling', 'dynamic', 'dynamite', 'dynasty', 'dyslexia', 'dyslexic', 'each', 'eagle', 'earache', 'eardrum', 'earflap', 'earful', 'earlobe', 'early', 'earmark', 'earmuff', 'earphone', 'earpiece', 'earplugs', 'earring', 'earshot', 'earthen', 'earthlike', 'earthling', 'earthly', 'earthworm', 'earthy', 'earwig', 'easeful', 'easel', 'easiest', 'easily', 'easiness', 'easing', 'eastbound', 'eastcoast', 'easter', 'eastward', 'eatable', 'eaten', 'eatery', 'eating', 'eats', 'ebay', 'ebony', 'ebook', 'ecard', 'eccentric', 'echo', 'eclair', 'eclipse', 'ecologist', 'ecology', 'economic', 'economist', 'economy', 'ecosphere', 'ecosystem', 'edge', 'edginess', 'edging', 'edgy', 'edition', 'editor', 'educated', 'education', 'educator', 'eel', 'effective', 'effects', 'efficient', 'effort', 'eggbeater', 'egging', 'eggnog', 'eggplant', 'eggshell', 'egomaniac', 'egotism', 'egotistic', 'either', 'eject', 'elaborate', 'elastic', 'elated', 'elbow', 'eldercare', 'elderly', 'eldest', 'electable', 'election', 'elective', 'elephant', 'elevate', 'elevating', 'elevation', 'elevator', 'eleven', 'elf', 'eligible', 'eligibly', 'eliminate', 'elite', 'elitism', 'elixir', 'elk', 'ellipse', 'elliptic', 'elm', 'elongated', 'elope', 'eloquence', 'eloquent', 'elsewhere', 'elude', 'elusive', 'elves', 'email', 'embargo', 'embark', 'embassy', 'embattled', 'embellish', 'ember', 'embezzle', 'emblaze', 'emblem', 'embody', 'embolism', 'emboss', 'embroider', 'emcee', 'emerald', 'emergency', 'emission', 'emit', 'emote', 'emoticon', 'emotion', 'empathic', 'empathy', 'emperor', 'emphases', 'emphasis', 'emphasize', 'emphatic', 'empirical', 'employed', 'employee', 'employer', 'emporium', 'empower', 'emptier', 'emptiness', 'empty', 'emu', 'enable', 'enactment', 'enamel', 'enchanted', 'enchilada', 'encircle', 'enclose', 'enclosure', 'encode', 'encore', 'encounter', 'encourage', 'encroach', 'encrust', 'encrypt', 'endanger', 'endeared', 'endearing', 'ended', 'ending', 'endless', 'endnote', 'endocrine', 'endorphin', 'endorse', 'endowment', 'endpoint', 'endurable', 'endurance', 'enduring', 'energetic', 'energize', 'energy', 'enforced', 'enforcer', 'engaged', 'engaging', 'engine', 'engorge', 'engraved', 'engraver', 'engraving', 'engross', 'engulf', 'enhance', 'enigmatic', 'enjoyable', 'enjoyably', 'enjoyer', 'enjoying', 'enjoyment', 'enlarged', 'enlarging', 'enlighten', 'enlisted', 'enquirer', 'enrage', 'enrich', 'enroll', 'enslave', 'ensnare', 'ensure', 'entail', 'entangled', 'entering', 'entertain', 'enticing', 'entire', 'entitle', 'entity', 'entomb', 'entourage', 'entrap', 'entree', 'entrench', 'entrust', 'entryway', 'entwine', 'enunciate', 'envelope', 'enviable', 'enviably', 'envious', 'envision', 'envoy', 'envy', 'enzyme', 'epic', 'epidemic', 'epidermal', 'epidermis', 'epidural', 'epilepsy', 'epileptic', 'epilogue', 'epiphany', 'episode', 'equal', 'equate', 'equation', 'equator', 'equinox', 'equipment', 'equity', 'equivocal', 'eradicate', 'erasable', 'erased', 'eraser', 'erasure', 'ergonomic', 'errand', 'errant', 'erratic', 'error', 'erupt', 'escalate', 'escalator', 'escapable', 'escapade', 'escapist', 'escargot', 'eskimo', 'esophagus', 'espionage', 'espresso', 'esquire', 'essay', 'essence', 'essential', 'establish', 'estate', 'esteemed', 'estimate', 'estimator', 'estranged', 'estrogen', 'etching', 'eternal', 'eternity', 'ethanol', 'ether', 'ethically', 'ethics', 'euphemism', 'evacuate', 'evacuee', 'evade', 'evaluate', 'evaluator', 'evaporate', 'evasion', 'evasive', 'even', 'everglade', 'evergreen', 'everybody', 'everyday', 'everyone', 'evict', 'evidence', 'evident', 'evil', 'evoke', 'evolution', 'evolve', 'exact', 'exalted', 'example', 'excavate', 'excavator', 'exceeding', 'exception', 'excess', 'exchange', 'excitable', 'exciting', 'exclaim', 'exclude', 'excluding', 'exclusion', 'exclusive', 'excretion', 'excretory', 'excursion', 'excusable', 'excusably', 'excuse', 'exemplary', 'exemplify', 'exemption', 'exerciser', 'exert', 'exes', 'exfoliate', 'exhale', 'exhaust', 'exhume', 'exile', 'existing', 'exit', 'exodus', 'exonerate', 'exorcism', 'exorcist', 'expand', 'expanse', 'expansion', 'expansive', 'expectant', 'expedited', 'expediter', 'expel', 'expend', 'expenses', 'expensive', 'expert', 'expire', 'expiring', 'explain', 'expletive', 'explicit', 'explode', 'exploit', 'explore', 'exploring', 'exponent', 'exporter', 'exposable', 'expose', 'exposure', 'express', 'expulsion', 'exquisite', 'extended', 'extending', 'extent', 'extenuate', 'exterior', 'external', 'extinct', 'extortion', 'extradite', 'extras', 'extrovert', 'extrude', 'extruding', 'exuberant', 'fable', 'fabric', 'fabulous', 'facebook', 'facecloth', 'facedown', 'faceless', 'facelift', 'faceplate', 'faceted', 'facial', 'facility', 'facing', 'facsimile', 'faction', 'factoid', 'factor', 'factsheet', 'factual', 'faculty', 'fade', 'fading', 'failing', 'falcon', 'fall', 'false', 'falsify', 'fame', 'familiar', 'family', 'famine', 'famished', 'fanatic', 'fancied', 'fanciness', 'fancy', 'fanfare', 'fang', 'fanning', 'fantasize', 'fantastic', 'fantasy', 'fascism', 'fastball', 'faster', 'fasting', 'fastness', 'faucet', 'favorable', 'favorably', 'favored', 'favoring', 'favorite', 'fax', 'feast', 'federal', 'fedora', 'feeble', 'feed', 'feel', 'feisty', 'feline', 'felt-tip', 'feminine', 'feminism', 'feminist', 'feminize', 'femur', 'fence', 'fencing', 'fender', 'ferment', 'fernlike', 'ferocious', 'ferocity', 'ferret', 'ferris', 'ferry', 'fervor', 'fester', 'festival', 'festive', 'festivity', 'fetal', 'fetch', 'fever', 'fiber', 'fiction', 'fiddle', 'fiddling', 'fidelity', 'fidgeting', 'fidgety', 'fifteen', 'fifth', 'fiftieth', 'fifty', 'figment', 'figure', 'figurine', 'filing', 'filled', 'filler', 'filling', 'film', 'filter', 'filth', 'filtrate', 'finale', 'finalist', 'finalize', 'finally', 'finance', 'financial', 'finch', 'fineness', 'finer', 'finicky', 'finished', 'finisher', 'finishing', 'finite', 'finless', 'finlike', 'fiscally', 'fit', 'five', 'flaccid', 'flagman', 'flagpole', 'flagship', 'flagstick', 'flagstone', 'flail', 'flakily', 'flaky', 'flame', 'flammable', 'flanked', 'flanking', 'flannels', 'flap', 'flaring', 'flashback', 'flashbulb', 'flashcard', 'flashily', 'flashing', 'flashy', 'flask', 'flatbed', 'flatfoot', 'flatly', 'flatness', 'flatten', 'flattered', 'flatterer', 'flattery', 'flattop', 'flatware', 'flatworm', 'flavored', 'flavorful', 'flavoring', 'flaxseed', 'fled', 'fleshed', 'fleshy', 'flick', 'flier', 'flight', 'flinch', 'fling', 'flint', 'flip', 'flirt', 'float', 'flock', 'flogging', 'flop', 'floral', 'florist', 'floss', 'flounder', 'flyable', 'flyaway', 'flyer', 'flying', 'flyover', 'flypaper', 'foam', 'foe', 'fog', 'foil', 'folic', 'folk', 'follicle', 'follow', 'fondling', 'fondly', 'fondness', 'fondue', 'font', 'food', 'fool', 'footage', 'football', 'footbath', 'footboard', 'footer', 'footgear', 'foothill', 'foothold', 'footing', 'footless', 'footman', 'footnote', 'footpad', 'footpath', 'footprint', 'footrest', 'footsie', 'footsore', 'footwear', 'footwork', 'fossil', 'foster', 'founder', 'founding', 'fountain', 'fox', 'foyer', 'fraction', 'fracture', 'fragile', 'fragility', 'fragment', 'fragrance', 'fragrant', 'frail', 'frame', 'framing', 'frantic', 'fraternal', 'frayed', 'fraying', 'frays', 'freckled', 'freckles', 'freebase', 'freebee', 'freebie', 'freedom', 'freefall', 'freehand', 'freeing', 'freeload', 'freely', 'freemason', 'freeness', 'freestyle', 'freeware', 'freeway', 'freewill', 'freezable', 'freezing', 'freight', 'french', 'frenzied', 'frenzy', 'frequency', 'frequent', 'fresh', 'fretful', 'fretted', 'friction', 'friday', 'fridge', 'fried', 'friend', 'frighten', 'frightful', 'frigidity', 'frigidly', 'frill', 'fringe', 'frisbee', 'frisk', 'fritter', 'frivolous', 'frolic', 'from', 'front', 'frostbite', 'frosted', 'frostily', 'frosting', 'frostlike', 'frosty', 'froth', 'frown', 'frozen', 'fructose', 'frugality', 'frugally', 'fruit', 'frustrate', 'frying', 'gab', 'gaffe', 'gag', 'gainfully', 'gaining', 'gains', 'gala', 'gallantly', 'galleria', 'gallery', 'galley', 'gallon', 'gallows', 'gallstone', 'galore', 'galvanize', 'gambling', 'game', 'gaming', 'gamma', 'gander', 'gangly', 'gangrene', 'gangway', 'gap', 'garage', 'garbage', 'garden', 'gargle', 'garland', 'garlic', 'garment', 'garnet', 'garnish', 'garter', 'gas', 'gatherer', 'gathering', 'gating', 'gauging', 'gauntlet', 'gauze', 'gave', 'gawk', 'gazing', 'gear', 'gecko', 'geek', 'geiger', 'gem', 'gender', 'generic', 'generous', 'genetics', 'genre', 'gentile', 'gentleman', 'gently', 'gents', 'geography', 'geologic', 'geologist', 'geology', 'geometric', 'geometry', 'geranium', 'gerbil', 'geriatric', 'germicide', 'germinate', 'germless', 'germproof', 'gestate', 'gestation', 'gesture', 'getaway', 'getting', 'getup', 'giant', 'gibberish', 'giblet', 'giddily', 'giddiness', 'giddy', 'gift', 'gigabyte', 'gigahertz', 'gigantic', 'giggle', 'giggling', 'giggly', 'gigolo', 'gilled', 'gills', 'gimmick', 'girdle', 'giveaway', 'given', 'giver', 'giving', 'gizmo', 'gizzard', 'glacial', 'glacier', 'glade', 'gladiator', 'gladly', 'glamorous', 'glamour', 'glance', 'glancing', 'glandular', 'glare', 'glaring', 'glass', 'glaucoma', 'glazing', 'gleaming', 'gleeful', 'glider', 'gliding', 'glimmer', 'glimpse', 'glisten', 'glitch', 'glitter', 'glitzy', 'gloater', 'gloating', 'gloomily', 'gloomy', 'glorified', 'glorifier', 'glorify', 'glorious', 'glory', 'gloss', 'glove', 'glowing', 'glowworm', 'glucose', 'glue', 'gluten', 'glutinous', 'glutton', 'gnarly', 'gnat', 'goal', 'goatskin', 'goes', 'goggles', 'going', 'goldfish', 'goldmine', 'goldsmith', 'golf', 'goliath', 'gonad', 'gondola', 'gone', 'gong', 'good', 'gooey', 'goofball', 'goofiness', 'goofy', 'google', 'goon', 'gopher', 'gore', 'gorged', 'gorgeous', 'gory', 'gosling', 'gossip', 'gothic', 'gotten', 'gout', 'gown', 'grab', 'graceful', 'graceless', 'gracious', 'gradation', 'graded', 'grader', 'gradient', 'grading', 'gradually', 'graduate', 'graffiti', 'grafted', 'grafting', 'grain', 'granddad', 'grandkid', 'grandly', 'grandma', 'grandpa', 'grandson', 'granite', 'granny', 'granola', 'grant', 'granular', 'grape', 'graph', 'grapple', 'grappling', 'grasp', 'grass', 'gratified', 'gratify', 'grating', 'gratitude', 'gratuity', 'gravel', 'graveness', 'graves', 'graveyard', 'gravitate', 'gravity', 'gravy', 'gray', 'grazing', 'greasily', 'greedily', 'greedless', 'greedy', 'green', 'greeter', 'greeting', 'grew', 'greyhound', 'grid', 'grief', 'grievance', 'grieving', 'grievous', 'grill', 'grimace', 'grimacing', 'grime', 'griminess', 'grimy', 'grinch', 'grinning', 'grip', 'gristle', 'grit', 'groggily', 'groggy', 'groin', 'groom', 'groove', 'grooving', 'groovy', 'grope', 'ground', 'grouped', 'grout', 'grove', 'grower', 'growing', 'growl', 'grub', 'grudge', 'grudging', 'grueling', 'gruffly', 'grumble', 'grumbling', 'grumbly', 'grumpily', 'grunge', 'grunt', 'guacamole', 'guidable', 'guidance', 'guide', 'guiding', 'guileless', 'guise', 'gulf', 'gullible', 'gully', 'gulp', 'gumball', 'gumdrop', 'gumminess', 'gumming', 'gummy', 'gurgle', 'gurgling', 'guru', 'gush', 'gusto', 'gusty', 'gutless', 'guts', 'gutter', 'guy', 'guzzler', 'gyration', 'habitable', 'habitant', 'habitat', 'habitual', 'hacked', 'hacker', 'hacking', 'hacksaw', 'had', 'haggler', 'haiku', 'half', 'halogen', 'halt', 'halved', 'halves', 'hamburger', 'hamlet', 'hammock', 'hamper', 'hamster', 'hamstring', 'handbag', 'handball', 'handbook', 'handbrake', 'handcart', 'handclap', 'handclasp', 'handcraft', 'handcuff', 'handed', 'handful', 'handgrip', 'handgun', 'handheld', 'handiness', 'handiwork', 'handlebar', 'handled', 'handler', 'handling', 'handmade', 'handoff', 'handpick', 'handprint', 'handrail', 'handsaw', 'handset', 'handsfree', 'handshake', 'handstand', 'handwash', 'handwork', 'handwoven', 'handwrite', 'handyman', 'hangnail', 'hangout', 'hangover', 'hangup', 'hankering', 'hankie', 'hanky', 'haphazard', 'happening', 'happier', 'happiest', 'happily', 'happiness', 'happy', 'harbor', 'hardcopy', 'hardcore', 'hardcover', 'harddisk', 'hardened', 'hardener', 'hardening', 'hardhat', 'hardhead', 'hardiness', 'hardly', 'hardness', 'hardship', 'hardware', 'hardwired', 'hardwood', 'hardy', 'harmful', 'harmless', 'harmonica', 'harmonics', 'harmonize', 'harmony', 'harness', 'harpist', 'harsh', 'harvest', 'hash', 'hassle', 'haste', 'hastily', 'hastiness', 'hasty', 'hatbox', 'hatchback', 'hatchery', 'hatchet', 'hatching', 'hatchling', 'hate', 'hatless', 'hatred', 'haunt', 'haven', 'hazard', 'hazelnut', 'hazily', 'haziness', 'hazing', 'hazy', 'headache', 'headband', 'headboard', 'headcount', 'headdress', 'headed', 'header', 'headfirst', 'headgear', 'heading', 'headlamp', 'headless', 'headlock', 'headphone', 'headpiece', 'headrest', 'headroom', 'headscarf', 'headset', 'headsman', 'headstand', 'headstone', 'headway', 'headwear', 'heap', 'heat', 'heave', 'heavily', 'heaviness', 'heaving', 'hedge', 'hedging', 'heftiness', 'hefty', 'helium', 'helmet', 'helper', 'helpful', 'helping', 'helpless', 'helpline', 'hemlock', 'hemstitch', 'hence', 'henchman', 'henna', 'herald', 'herbal', 'herbicide', 'herbs', 'heritage', 'hermit', 'heroics', 'heroism', 'herring', 'herself', 'hertz', 'hesitancy', 'hesitant', 'hesitate', 'hexagon', 'hexagram', 'hubcap', 'huddle', 'huddling', 'huff', 'hug', 'hula', 'hulk', 'hull', 'human', 'humble', 'humbling', 'humbly', 'humid', 'humiliate', 'humility', 'humming', 'hummus', 'humongous', 'humorist', 'humorless', 'humorous', 'humpback', 'humped', 'humvee', 'hunchback', 'hundredth', 'hunger', 'hungrily', 'hungry', 'hunk', 'hunter', 'hunting', 'huntress', 'huntsman', 'hurdle', 'hurled', 'hurler', 'hurling', 'hurray', 'hurricane', 'hurried', 'hurry', 'hurt', 'husband', 'hush', 'husked', 'huskiness', 'hut', 'hybrid', 'hydrant', 'hydrated', 'hydration', 'hydrogen', 'hydroxide', 'hyperlink', 'hypertext', 'hyphen', 'hypnoses', 'hypnosis', 'hypnotic', 'hypnotism', 'hypnotist', 'hypnotize', 'hypocrisy', 'hypocrite', 'ibuprofen', 'ice', 'iciness', 'icing', 'icky', 'icon', 'icy', 'idealism', 'idealist', 'idealize', 'ideally', 'idealness', 'identical', 'identify', 'identity', 'ideology', 'idiocy', 'idiom', 'idly', 'igloo', 'ignition', 'ignore', 'iguana', 'illicitly', 'illusion', 'illusive', 'image', 'imaginary', 'imagines', 'imaging', 'imbecile', 'imitate', 'imitation', 'immature', 'immerse', 'immersion', 'imminent', 'immobile', 'immodest', 'immorally', 'immortal', 'immovable', 'immovably', 'immunity', 'immunize', 'impaired', 'impale', 'impart', 'impatient', 'impeach', 'impeding', 'impending', 'imperfect', 'imperial', 'impish', 'implant', 'implement', 'implicate', 'implicit', 'implode', 'implosion', 'implosive', 'imply', 'impolite', 'important', 'importer', 'impose', 'imposing', 'impotence', 'impotency', 'impotent', 'impound', 'imprecise', 'imprint', 'imprison', 'impromptu', 'improper', 'improve', 'improving', 'improvise', 'imprudent', 'impulse', 'impulsive', 'impure', 'impurity', 'iodine', 'iodize', 'ion', 'ipad', 'iphone', 'ipod', 'irate', 'irk', 'iron', 'irregular', 'irrigate', 'irritable', 'irritably', 'irritant', 'irritate', 'islamic', 'islamist', 'isolated', 'isolating', 'isolation', 'isotope', 'issue', 'issuing', 'italicize', 'italics', 'item', 'itinerary', 'itunes', 'ivory', 'ivy', 'jab', 'jackal', 'jacket', 'jackknife', 'jackpot', 'jailbird', 'jailbreak', 'jailer', 'jailhouse', 'jalapeno', 'jam', 'janitor', 'january', 'jargon', 'jarring', 'jasmine', 'jaundice', 'jaunt', 'java', 'jawed', 'jawless', 'jawline', 'jaws', 'jaybird', 'jaywalker', 'jazz', 'jeep', 'jeeringly', 'jellied', 'jelly', 'jersey', 'jester', 'jet', 'jiffy', 'jigsaw', 'jimmy', 'jingle', 'jingling', 'jinx', 'jitters', 'jittery', 'job', 'jockey', 'jockstrap', 'jogger', 'jogging', 'john', 'joining', 'jokester', 'jokingly', 'jolliness', 'jolly', 'jolt', 'jot', 'jovial', 'joyfully', 'joylessly', 'joyous', 'joyride', 'joystick', 'jubilance', 'jubilant', 'judge', 'judgingly', 'judicial', 'judiciary', 'judo', 'juggle', 'juggling', 'jugular', 'juice', 'juiciness', 'juicy', 'jujitsu', 'jukebox', 'july', 'jumble', 'jumbo', 'jump', 'junction', 'juncture', 'june', 'junior', 'juniper', 'junkie', 'junkman', 'junkyard', 'jurist', 'juror', 'jury', 'justice', 'justifier', 'justify', 'justly', 'justness', 'juvenile', 'kabob', 'kangaroo', 'karaoke', 'karate', 'karma', 'kebab', 'keenly', 'keenness', 'keep', 'keg', 'kelp', 'kennel', 'kept', 'kerchief', 'kerosene', 'kettle', 'kick', 'kiln', 'kilobyte', 'kilogram', 'kilometer', 'kilowatt', 'kilt', 'kimono', 'kindle', 'kindling', 'kindly', 'kindness', 'kindred', 'kinetic', 'kinfolk', 'king', 'kinship', 'kinsman', 'kinswoman', 'kissable', 'kisser', 'kissing', 'kitchen', 'kite', 'kitten', 'kitty', 'kiwi', 'kleenex', 'knapsack', 'knee', 'knelt', 'knickers', 'knoll', 'koala', 'kooky', 'kosher', 'krypton', 'kudos', 'kung', 'labored', 'laborer', 'laboring', 'laborious', 'labrador', 'ladder', 'ladies', 'ladle', 'ladybug', 'ladylike', 'lagged', 'lagging', 'lagoon', 'lair', 'lake', 'lance', 'landed', 'landfall', 'landfill', 'landing', 'landlady', 'landless', 'landline', 'landlord', 'landmark', 'landmass', 'landmine', 'landowner', 'landscape', 'landside', 'landslide', 'language', 'lankiness', 'lanky', 'lantern', 'lapdog', 'lapel', 'lapped', 'lapping', 'laptop', 'lard', 'large', 'lark', 'lash', 'lasso', 'last', 'latch', 'late', 'lather', 'latitude', 'latrine', 'latter', 'latticed', 'launch', 'launder', 'laundry', 'laurel', 'lavender', 'lavish', 'laxative', 'lazily', 'laziness', 'lazy', 'lecturer', 'left', 'legacy', 'legal', 'legend', 'legged', 'leggings', 'legible', 'legibly', 'legislate', 'lego', 'legroom', 'legume', 'legwarmer', 'legwork', 'lemon', 'lend', 'length', 'lens', 'lent', 'leotard', 'lesser', 'letdown', 'lethargic', 'lethargy', 'letter', 'lettuce', 'level', 'leverage', 'levers', 'levitate', 'levitator', 'liability', 'liable', 'liberty', 'librarian', 'library', 'licking', 'licorice', 'lid', 'life', 'lifter', 'lifting', 'liftoff', 'ligament', 'likely', 'likeness', 'likewise', 'liking', 'lilac', 'lilly', 'lily', 'limb', 'limeade', 'limelight', 'limes', 'limit', 'limping', 'limpness', 'line', 'lingo', 'linguini', 'linguist', 'lining', 'linked', 'linoleum', 'linseed', 'lint', 'lion', 'lip', 'liquefy', 'liqueur', 'liquid', 'lisp', 'list', 'litigate', 'litigator', 'litmus', 'litter', 'little', 'livable', 'lived', 'lively', 'liver', 'livestock', 'lividly', 'living', 'lizard', 'lubricant', 'lubricate', 'lucid', 'luckily', 'luckiness', 'luckless', 'lucrative', 'ludicrous', 'lugged', 'lukewarm', 'lullaby', 'lumber', 'luminance', 'luminous', 'lumpiness', 'lumping', 'lumpish', 'lunacy', 'lunar', 'lunchbox', 'luncheon', 'lunchroom', 'lunchtime', 'lung', 'lurch', 'lure', 'luridness', 'lurk', 'lushly', 'lushness', 'luster', 'lustfully', 'lustily', 'lustiness', 'lustrous', 'lusty', 'luxurious', 'luxury', 'lying', 'lyrically', 'lyricism', 'lyricist', 'lyrics', 'macarena', 'macaroni', 'macaw', 'mace', 'machine', 'machinist', 'magazine', 'magenta', 'maggot', 'magical', 'magician', 'magma', 'magnesium', 'magnetic', 'magnetism', 'magnetize', 'magnifier', 'magnify', 'magnitude', 'magnolia', 'mahogany', 'maimed', 'majestic', 'majesty', 'majorette', 'majority', 'makeover', 'maker', 'makeshift', 'making', 'malformed', 'malt', 'mama', 'mammal', 'mammary', 'mammogram', 'manager', 'managing', 'manatee', 'mandarin', 'mandate', 'mandatory', 'mandolin', 'manger', 'mangle', 'mango', 'mangy', 'manhandle', 'manhole', 'manhood', 'manhunt', 'manicotti', 'manicure', 'manifesto', 'manila', 'mankind', 'manlike', 'manliness', 'manly', 'manmade', 'manned', 'mannish', 'manor', 'manpower', 'mantis', 'mantra', 'manual', 'many', 'map', 'marathon', 'marauding', 'marbled', 'marbles', 'marbling', 'march', 'mardi', 'margarine', 'margarita', 'margin', 'marigold', 'marina', 'marine', 'marital', 'maritime', 'marlin', 'marmalade', 'maroon', 'married', 'marrow', 'marry', 'marshland', 'marshy', 'marsupial', 'marvelous', 'marxism', 'mascot', 'masculine', 'mashed', 'mashing', 'massager', 'masses', 'massive', 'mastiff', 'matador', 'matchbook', 'matchbox', 'matcher', 'matching', 'matchless', 'material', 'maternal', 'maternity', 'math', 'mating', 'matriarch', 'matrimony', 'matrix', 'matron', 'matted', 'matter', 'maturely', 'maturing', 'maturity', 'mauve', 'maverick', 'maximize', 'maximum', 'maybe', 'mayday', 'mayflower', 'moaner', 'moaning', 'mobile', 'mobility', 'mobilize', 'mobster', 'mocha', 'mocker', 'mockup', 'modified', 'modify', 'modular', 'modulator', 'module', 'moisten', 'moistness', 'moisture', 'molar', 'molasses', 'mold', 'molecular', 'molecule', 'molehill', 'mollusk', 'mom', 'monastery', 'monday', 'monetary', 'monetize', 'moneybags', 'moneyless', 'moneywise', 'mongoose', 'mongrel', 'monitor', 'monkhood', 'monogamy', 'monogram', 'monologue', 'monopoly', 'monorail', 'monotone', 'monotype', 'monoxide', 'monsieur', 'monsoon', 'monstrous', 'monthly', 'monument', 'moocher', 'moodiness', 'moody', 'mooing', 'moonbeam', 'mooned', 'moonlight', 'moonlike', 'moonlit', 'moonrise', 'moonscape', 'moonshine', 'moonstone', 'moonwalk', 'mop', 'morale', 'morality', 'morally', 'morbidity', 'morbidly', 'morphine', 'morphing', 'morse', 'mortality', 'mortally', 'mortician', 'mortified', 'mortify', 'mortuary', 'mosaic', 'mossy', 'most', 'mothball', 'mothproof', 'motion', 'motivate', 'motivator', 'motive', 'motocross', 'motor', 'motto', 'mountable', 'mountain', 'mounted', 'mounting', 'mourner', 'mournful', 'mouse', 'mousiness', 'moustache', 'mousy', 'mouth', 'movable', 'move', 'movie', 'moving', 'mower', 'mowing', 'much', 'muck', 'mud', 'mug', 'mulberry', 'mulch', 'mule', 'mulled', 'mullets', 'multiple', 'multiply', 'multitask', 'multitude', 'mumble', 'mumbling', 'mumbo', 'mummified', 'mummify', 'mummy', 'mumps', 'munchkin', 'mundane', 'municipal', 'muppet', 'mural', 'murkiness', 'murky', 'murmuring', 'muscular', 'museum', 'mushily', 'mushiness', 'mushroom', 'mushy', 'music', 'musket', 'muskiness', 'musky', 'mustang', 'mustard', 'muster', 'mustiness', 'musty', 'mutable', 'mutate', 'mutation', 'mute', 'mutilated', 'mutilator', 'mutiny', 'mutt', 'mutual', 'muzzle', 'myself', 'myspace', 'mystified', 'mystify', 'myth', 'nacho', 'nag', 'nail', 'name', 'naming', 'nanny', 'nanometer', 'nape', 'napkin', 'napped', 'napping', 'nappy', 'narrow', 'nastily', 'nastiness', 'national', 'native', 'nativity', 'natural', 'nature', 'naturist', 'nautical', 'navigate', 'navigator', 'navy', 'nearby', 'nearest', 'nearly', 'nearness', 'neatly', 'neatness', 'nebula', 'nebulizer', 'nectar', 'negate', 'negation', 'negative', 'neglector', 'negligee', 'negligent', 'negotiate', 'nemeses', 'nemesis', 'neon', 'nephew', 'nerd', 'nervous', 'nervy', 'nest', 'net', 'neurology', 'neuron', 'neurosis', 'neurotic', 'neuter', 'neutron', 'never', 'next', 'nibble', 'nickname', 'nicotine', 'niece', 'nifty', 'nimble', 'nimbly', 'nineteen', 'ninetieth', 'ninja', 'nintendo', 'ninth', 'nuclear', 'nuclei', 'nucleus', 'nugget', 'nullify', 'number', 'numbing', 'numbly', 'numbness', 'numeral', 'numerate', 'numerator', 'numeric', 'numerous', 'nuptials', 'nursery', 'nursing', 'nurture', 'nutcase', 'nutlike', 'nutmeg', 'nutrient', 'nutshell', 'nuttiness', 'nutty', 'nuzzle', 'nylon', 'oaf', 'oak', 'oasis', 'oat', 'obedience', 'obedient', 'obituary', 'object', 'obligate', 'obliged', 'oblivion', 'oblivious', 'oblong', 'obnoxious', 'oboe', 'obscure', 'obscurity', 'observant', 'observer', 'observing', 'obsessed', 'obsession', 'obsessive', 'obsolete', 'obstacle', 'obstinate', 'obstruct', 'obtain', 'obtrusive', 'obtuse', 'obvious', 'occultist', 'occupancy', 'occupant', 'occupier', 'occupy', 'ocean', 'ocelot', 'octagon', 'octane', 'october', 'octopus', 'ogle', 'oil', 'oink', 'ointment', 'okay', 'old', 'olive', 'olympics', 'omega', 'omen', 'ominous', 'omission', 'omit', 'omnivore', 'onboard', 'oncoming', 'ongoing', 'onion', 'online', 'onlooker', 'only', 'onscreen', 'onset', 'onshore', 'onslaught', 'onstage', 'onto', 'onward', 'onyx', 'oops', 'ooze', 'oozy', 'opacity', 'opal', 'open', 'operable', 'operate', 'operating', 'operation', 'operative', 'operator', 'opium', 'opossum', 'opponent', 'oppose', 'opposing', 'opposite', 'oppressed', 'oppressor', 'opt', 'opulently', 'osmosis', 'other', 'otter', 'ouch', 'ought', 'ounce', 'outage', 'outback', 'outbid', 'outboard', 'outbound', 'outbreak', 'outburst', 'outcast', 'outclass', 'outcome', 'outdated', 'outdoors', 'outer', 'outfield', 'outfit', 'outflank', 'outgoing', 'outgrow', 'outhouse', 'outing', 'outlast', 'outlet', 'outline', 'outlook', 'outlying', 'outmatch', 'outmost', 'outnumber', 'outplayed', 'outpost', 'outpour', 'output', 'outrage', 'outrank', 'outreach', 'outright', 'outscore', 'outsell', 'outshine', 'outshoot', 'outsider', 'outskirts', 'outsmart', 'outsource', 'outspoken', 'outtakes', 'outthink', 'outward', 'outweigh', 'outwit', 'oval', 'ovary', 'oven', 'overact', 'overall', 'overarch', 'overbid', 'overbill', 'overbite', 'overblown', 'overboard', 'overbook', 'overbuilt', 'overcast', 'overcoat', 'overcome', 'overcook', 'overcrowd', 'overdraft', 'overdrawn', 'overdress', 'overdrive', 'overdue', 'overeager', 'overeater', 'overexert', 'overfed', 'overfeed', 'overfill', 'overflow', 'overfull', 'overgrown', 'overhand', 'overhang', 'overhaul', 'overhead', 'overhear', 'overheat', 'overhung', 'overjoyed', 'overkill', 'overlabor', 'overlaid', 'overlap', 'overlay', 'overload', 'overlook', 'overlord', 'overlying', 'overnight', 'overpass', 'overpay', 'overplant', 'overplay', 'overpower', 'overprice', 'overrate', 'overreach', 'overreact', 'override', 'overripe', 'overrule', 'overrun', 'overshoot', 'overshot', 'oversight', 'oversized', 'oversleep', 'oversold', 'overspend', 'overstate', 'overstay', 'overstep', 'overstock', 'overstuff', 'oversweet', 'overtake', 'overthrow', 'overtime', 'overtly', 'overtone', 'overture', 'overturn', 'overuse', 'overvalue', 'overview', 'overwrite', 'owl', 'oxford', 'oxidant', 'oxidation', 'oxidize', 'oxidizing', 'oxygen', 'oxymoron', 'oyster', 'ozone', 'paced', 'pacemaker', 'pacific', 'pacifier', 'pacifism', 'pacifist', 'pacify', 'padded', 'padding', 'paddle', 'paddling', 'padlock', 'pagan', 'pager', 'paging', 'pajamas', 'palace', 'palatable', 'palm', 'palpable', 'palpitate', 'paltry', 'pampered', 'pamperer', 'pampers', 'pamphlet', 'panama', 'pancake', 'pancreas', 'panda', 'pandemic', 'pang', 'panhandle', 'panic', 'panning', 'panorama', 'panoramic', 'panther', 'pantomime', 'pantry', 'pants', 'pantyhose', 'paparazzi', 'papaya', 'paper', 'paprika', 'papyrus', 'parabola', 'parachute', 'parade', 'paradox', 'paragraph', 'parakeet', 'paralegal', 'paralyses', 'paralysis', 'paralyze', 'paramedic', 'parameter', 'paramount', 'parasail', 'parasite', 'parasitic', 'parcel', 'parched', 'parchment', 'pardon', 'parish', 'parka', 'parking', 'parkway', 'parlor', 'parmesan', 'parole', 'parrot', 'parsley', 'parsnip', 'partake', 'parted', 'parting', 'partition', 'partly', 'partner', 'partridge', 'party', 'passable', 'passably', 'passage', 'passcode', 'passenger', 'passerby', 'passing', 'passion', 'passive', 'passivism', 'passover', 'passport', 'password', 'pasta', 'pasted', 'pastel', 'pastime', 'pastor', 'pastrami', 'pasture', 'pasty', 'patchwork', 'patchy', 'paternal', 'paternity', 'path', 'patience', 'patient', 'patio', 'patriarch', 'patriot', 'patrol', 'patronage', 'patronize', 'pauper', 'pavement', 'paver', 'pavestone', 'pavilion', 'paving', 'pawing', 'payable', 'payback', 'paycheck', 'payday', 'payee', 'payer', 'paying', 'payment', 'payphone', 'payroll', 'pebble', 'pebbly', 'pecan', 'pectin', 'peculiar', 'peddling', 'pediatric', 'pedicure', 'pedigree', 'pedometer', 'pegboard', 'pelican', 'pellet', 'pelt', 'pelvis', 'penalize', 'penalty', 'pencil', 'pendant', 'pending', 'penholder', 'penknife', 'pennant', 'penniless', 'penny', 'penpal', 'pension', 'pentagon', 'pentagram', 'pep', 'perceive', 'percent', 'perch', 'percolate', 'perennial', 'perfected', 'perfectly', 'perfume', 'periscope', 'perish', 'perjurer', 'perjury', 'perkiness', 'perky', 'perm', 'peroxide', 'perpetual', 'perplexed', 'persecute', 'persevere', 'persuaded', 'persuader', 'pesky', 'peso', 'pessimism', 'pessimist', 'pester', 'pesticide', 'petal', 'petite', 'petition', 'petri', 'petroleum', 'petted', 'petticoat', 'pettiness', 'petty', 'petunia', 'phantom', 'phobia', 'phoenix', 'phonebook', 'phoney', 'phonics', 'phoniness', 'phony', 'phosphate', 'photo', 'phrase', 'phrasing', 'placard', 'placate', 'placidly', 'plank', 'planner', 'plant', 'plasma', 'plaster', 'plastic', 'plated', 'platform', 'plating', 'platinum', 'platonic', 'platter', 'platypus', 'plausible', 'plausibly', 'playable', 'playback', 'player', 'playful', 'playgroup', 'playhouse', 'playing', 'playlist', 'playmaker', 'playmate', 'playoff', 'playpen', 'playroom', 'playset', 'plaything', 'playtime', 'plaza', 'pleading', 'pleat', 'pledge', 'plentiful', 'plenty', 'plethora', 'plexiglas', 'pliable', 'plod', 'plop', 'plot', 'plow', 'ploy', 'pluck', 'plug', 'plunder', 'plunging', 'plural', 'plus', 'plutonium', 'plywood', 'poach', 'pod', 'poem', 'poet', 'pogo', 'pointed', 'pointer', 'pointing', 'pointless', 'pointy', 'poise', 'poison', 'poker', 'poking', 'polar', 'police', 'policy', 'polio', 'polish', 'politely', 'polka', 'polo', 'polyester', 'polygon', 'polygraph', 'polymer', 'poncho', 'pond', 'pony', 'popcorn', 'pope', 'poplar', 'popper', 'poppy', 'popsicle', 'populace', 'popular', 'populate', 'porcupine', 'pork', 'porous', 'porridge', 'portable', 'portal', 'portfolio', 'porthole', 'portion', 'portly', 'portside', 'poser', 'posh', 'posing', 'possible', 'possibly', 'possum', 'postage', 'postal', 'postbox', 'postcard', 'posted', 'poster', 'posting', 'postnasal', 'posture', 'postwar', 'pouch', 'pounce', 'pouncing', 'pound', 'pouring', 'pout', 'powdered', 'powdering', 'powdery', 'power', 'powwow', 'pox', 'praising', 'prance', 'prancing', 'pranker', 'prankish', 'prankster', 'prayer', 'praying', 'preacher', 'preaching', 'preachy', 'preamble', 'precinct', 'precise', 'precision', 'precook', 'precut', 'predator', 'predefine', 'predict', 'preface', 'prefix', 'preflight', 'preformed', 'pregame', 'pregnancy', 'pregnant', 'preheated', 'prelaunch', 'prelaw', 'prelude', 'premiere', 'premises', 'premium', 'prenatal', 'preoccupy', 'preorder', 'prepaid', 'prepay', 'preplan', 'preppy', 'preschool', 'prescribe', 'preseason', 'preset', 'preshow', 'president', 'presoak', 'press', 'presume', 'presuming', 'preteen', 'pretended', 'pretender', 'pretense', 'pretext', 'pretty', 'pretzel', 'prevail', 'prevalent', 'prevent', 'preview', 'previous', 'prewar', 'prewashed', 'prideful', 'pried', 'primal', 'primarily', 'primary', 'primate', 'primer', 'primp', 'princess', 'print', 'prior', 'prism', 'prison', 'prissy', 'pristine', 'privacy', 'private', 'privatize', 'prize', 'proactive', 'probable', 'probably', 'probation', 'probe', 'probing', 'probiotic', 'problem', 'procedure', 'process', 'proclaim', 'procreate', 'procurer', 'prodigal', 'prodigy', 'produce', 'product', 'profane', 'profanity', 'professed', 'professor', 'profile', 'profound', 'profusely', 'progeny', 'prognosis', 'program', 'progress', 'projector', 'prologue', 'prolonged', 'promenade', 'prominent', 'promoter', 'promotion', 'prompter', 'promptly', 'prone', 'prong', 'pronounce', 'pronto', 'proofing', 'proofread', 'proofs', 'propeller', 'properly', 'property', 'proponent', 'proposal', 'propose', 'props', 'prorate', 'protector', 'protegee', 'proton', 'prototype', 'protozoan', 'protract', 'protrude', 'proud', 'provable', 'proved', 'proven', 'provided', 'provider', 'providing', 'province', 'proving', 'provoke', 'provoking', 'provolone', 'prowess', 'prowler', 'prowling', 'proximity', 'proxy', 'prozac', 'prude', 'prudishly', 'prune', 'pruning', 'pry', 'psychic', 'public', 'publisher', 'pucker', 'pueblo', 'pug', 'pull', 'pulmonary', 'pulp', 'pulsate', 'pulse', 'pulverize', 'puma', 'pumice', 'pummel', 'punch', 'punctual', 'punctuate', 'punctured', 'pungent', 'punisher', 'punk', 'pupil', 'puppet', 'puppy', 'purchase', 'pureblood', 'purebred', 'purely', 'pureness', 'purgatory', 'purge', 'purging', 'purifier', 'purify', 'purist', 'puritan', 'purity', 'purple', 'purplish', 'purposely', 'purr', 'purse', 'pursuable', 'pursuant', 'pursuit', 'purveyor', 'pushcart', 'pushchair', 'pusher', 'pushiness', 'pushing', 'pushover', 'pushpin', 'pushup', 'pushy', 'putdown', 'putt', 'puzzle', 'puzzling', 'pyramid', 'pyromania', 'python', 'quack', 'quadrant', 'quail', 'quaintly', 'quake', 'quaking', 'qualified', 'qualifier', 'qualify', 'quality', 'qualm', 'quantum', 'quarrel', 'quarry', 'quartered', 'quarterly', 'quarters', 'quartet', 'quench', 'query', 'quicken', 'quickly', 'quickness', 'quicksand', 'quickstep', 'quiet', 'quill', 'quilt', 'quintet', 'quintuple', 'quirk', 'quit', 'quiver', 'quizzical', 'quotable', 'quotation', 'quote', 'rabid', 'race', 'racing', 'racism', 'rack', 'racoon', 'radar', 'radial', 'radiance', 'radiantly', 'radiated', 'radiation', 'radiator', 'radio', 'radish', 'raffle', 'raft', 'rage', 'ragged', 'raging', 'ragweed', 'raider', 'railcar', 'railing', 'railroad', 'railway', 'raisin', 'rake', 'raking', 'rally', 'ramble', 'rambling', 'ramp', 'ramrod', 'ranch', 'rancidity', 'random', 'ranged', 'ranger', 'ranging', 'ranked', 'ranking', 'ransack', 'ranting', 'rants', 'rare', 'rarity', 'rascal', 'rash', 'rasping', 'ravage', 'raven', 'ravine', 'raving', 'ravioli', 'ravishing', 'reabsorb', 'reach', 'reacquire', 'reaction', 'reactive', 'reactor', 'reaffirm', 'ream', 'reanalyze', 'reappear', 'reapply', 'reappoint', 'reapprove', 'rearrange', 'rearview', 'reason', 'reassign', 'reassure', 'reattach', 'reawake', 'rebalance', 'rebate', 'rebel', 'rebirth', 'reboot', 'reborn', 'rebound', 'rebuff', 'rebuild', 'rebuilt', 'reburial', 'rebuttal', 'recall', 'recant', 'recapture', 'recast', 'recede', 'recent', 'recess', 'recharger', 'recipient', 'recital', 'recite', 'reckless', 'reclaim', 'recliner', 'reclining', 'recluse', 'reclusive', 'recognize', 'recoil', 'recollect', 'recolor', 'reconcile', 'reconfirm', 'reconvene', 'recopy', 'record', 'recount', 'recoup', 'recovery', 'recreate', 'rectal', 'rectangle', 'rectified', 'rectify', 'recycled', 'recycler', 'recycling', 'reemerge', 'reenact', 'reenter', 'reentry', 'reexamine', 'referable', 'referee', 'reference', 'refill', 'refinance', 'refined', 'refinery', 'refining', 'refinish', 'reflected', 'reflector', 'reflex', 'reflux', 'refocus', 'refold', 'reforest', 'reformat', 'reformed', 'reformer', 'reformist', 'refract', 'refrain', 'refreeze', 'refresh', 'refried', 'refueling', 'refund', 'refurbish', 'refurnish', 'refusal', 'refuse', 'refusing', 'refutable', 'refute', 'regain', 'regalia', 'regally', 'reggae', 'regime', 'region', 'register', 'registrar', 'registry', 'regress', 'regretful', 'regroup', 'regular', 'regulate', 'regulator', 'rehab', 'reheat', 'rehire', 'rehydrate', 'reimburse', 'reissue', 'reiterate', 'rejoice', 'rejoicing', 'rejoin', 'rekindle', 'relapse', 'relapsing', 'relatable', 'related', 'relation', 'relative', 'relax', 'relay', 'relearn', 'release', 'relenting', 'reliable', 'reliably', 'reliance', 'reliant', 'relic', 'relieve', 'relieving', 'relight', 'relish', 'relive', 'reload', 'relocate', 'relock', 'reluctant', 'rely', 'remake', 'remark', 'remarry', 'rematch', 'remedial', 'remedy', 'remember', 'reminder', 'remindful', 'remission', 'remix', 'remnant', 'remodeler', 'remold', 'remorse', 'remote', 'removable', 'removal', 'removed', 'remover', 'removing', 'rename', 'renderer', 'rendering', 'rendition', 'renegade', 'renewable', 'renewably', 'renewal', 'renewed', 'renounce', 'renovate', 'renovator', 'rentable', 'rental', 'rented', 'renter', 'reoccupy', 'reoccur', 'reopen', 'reorder', 'repackage', 'repacking', 'repaint', 'repair', 'repave', 'repaying', 'repayment', 'repeal', 'repeated', 'repeater', 'repent', 'rephrase', 'replace', 'replay', 'replica', 'reply', 'reporter', 'repose', 'repossess', 'repost', 'repressed', 'reprimand', 'reprint', 'reprise', 'reproach', 'reprocess', 'reproduce', 'reprogram', 'reps', 'reptile', 'reptilian', 'repugnant', 'repulsion', 'repulsive', 'repurpose', 'reputable', 'reputably', 'request', 'require', 'requisite', 'reroute', 'rerun', 'resale', 'resample', 'rescuer', 'reseal', 'research', 'reselect', 'reseller', 'resemble', 'resend', 'resent', 'reset', 'reshape', 'reshoot', 'reshuffle', 'residence', 'residency', 'resident', 'residual', 'residue', 'resigned', 'resilient', 'resistant', 'resisting', 'resize', 'resolute', 'resolved', 'resonant', 'resonate', 'resort', 'resource', 'respect', 'resubmit', 'result', 'resume', 'resupply', 'resurface', 'resurrect', 'retail', 'retainer', 'retaining', 'retake', 'retaliate', 'retention', 'rethink', 'retinal', 'retired', 'retiree', 'retiring', 'retold', 'retool', 'retorted', 'retouch', 'retrace', 'retract', 'retrain', 'retread', 'retreat', 'retrial', 'retrieval', 'retriever', 'retry', 'return', 'retying', 'retype', 'reunion', 'reunite', 'reusable', 'reuse', 'reveal', 'reveler', 'revenge', 'revenue', 'reverb', 'revered', 'reverence', 'reverend', 'reversal', 'reverse', 'reversing', 'reversion', 'revert', 'revisable', 'revise', 'revision', 'revisit', 'revivable', 'revival', 'reviver', 'reviving', 'revocable', 'revoke', 'revolt', 'revolver', 'revolving', 'reward', 'rewash', 'rewind', 'rewire', 'reword', 'rework', 'rewrap', 'rewrite', 'rhyme', 'ribbon', 'ribcage', 'rice', 'riches', 'richly', 'richness', 'rickety', 'ricotta', 'riddance', 'ridden', 'ride', 'riding', 'rifling', 'rift', 'rigging', 'rigid', 'rigor', 'rimless', 'rimmed', 'rind', 'rink', 'rinse', 'rinsing', 'riot', 'ripcord', 'ripeness', 'ripening', 'ripping', 'ripple', 'rippling', 'riptide', 'rise', 'rising', 'risk', 'risotto', 'ritalin', 'ritzy', 'rival', 'riverbank', 'riverbed', 'riverboat', 'riverside', 'riveter', 'riveting', 'roamer', 'roaming', 'roast', 'robbing', 'robe', 'robin', 'robotics', 'robust', 'rockband', 'rocker', 'rocket', 'rockfish', 'rockiness', 'rocking', 'rocklike', 'rockslide', 'rockstar', 'rocky', 'rogue', 'roman', 'romp', 'rope', 'roping', 'roster', 'rosy', 'rotten', 'rotting', 'rotunda', 'roulette', 'rounding', 'roundish', 'roundness', 'roundup', 'roundworm', 'routine', 'routing', 'rover', 'roving', 'royal', 'rubbed', 'rubber', 'rubbing', 'rubble', 'rubdown', 'ruby', 'ruckus', 'rudder', 'rug', 'ruined', 'rule', 'rumble', 'rumbling', 'rummage', 'rumor', 'runaround', 'rundown', 'runner', 'running', 'runny', 'runt', 'runway', 'rupture', 'rural', 'ruse', 'rush', 'rust', 'rut', 'sabbath', 'sabotage', 'sacrament', 'sacred', 'sacrifice', 'sadden', 'saddlebag', 'saddled', 'saddling', 'sadly', 'sadness', 'safari', 'safeguard', 'safehouse', 'safely', 'safeness', 'saffron', 'saga', 'sage', 'sagging', 'saggy', 'said', 'saint', 'sake', 'salad', 'salami', 'salaried', 'salary', 'saline', 'salon', 'saloon', 'salsa', 'salt', 'salutary', 'salute', 'salvage', 'salvaging', 'salvation', 'same', 'sample', 'sampling', 'sanction', 'sanctity', 'sanctuary', 'sandal', 'sandbag', 'sandbank', 'sandbar', 'sandblast', 'sandbox', 'sanded', 'sandfish', 'sanding', 'sandlot', 'sandpaper', 'sandpit', 'sandstone', 'sandstorm', 'sandworm', 'sandy', 'sanitary', 'sanitizer', 'sank', 'santa', 'sapling', 'sappiness', 'sappy', 'sarcasm', 'sarcastic', 'sardine', 'sash', 'sasquatch', 'sassy', 'satchel', 'satiable', 'satin', 'satirical', 'satisfied', 'satisfy', 'saturate', 'saturday', 'sauciness', 'saucy', 'sauna', 'savage', 'savanna', 'saved', 'savings', 'savior', 'savor', 'saxophone', 'say', 'scabbed', 'scabby', 'scalded', 'scalding', 'scale', 'scaling', 'scallion', 'scallop', 'scalping', 'scam', 'scandal', 'scanner', 'scanning', 'scant', 'scapegoat', 'scarce', 'scarcity', 'scarecrow', 'scared', 'scarf', 'scarily', 'scariness', 'scarring', 'scary', 'scavenger', 'scenic', 'schedule', 'schematic', 'scheme', 'scheming', 'schilling', 'schnapps', 'scholar', 'science', 'scientist', 'scion', 'scoff', 'scolding', 'scone', 'scoop', 'scooter', 'scope', 'scorch', 'scorebook', 'scorecard', 'scored', 'scoreless', 'scorer', 'scoring', 'scorn', 'scorpion', 'scotch', 'scoundrel', 'scoured', 'scouring', 'scouting', 'scouts', 'scowling', 'scrabble', 'scraggly', 'scrambled', 'scrambler', 'scrap', 'scratch', 'scrawny', 'screen', 'scribble', 'scribe', 'scribing', 'scrimmage', 'script', 'scroll', 'scrooge', 'scrounger', 'scrubbed', 'scrubber', 'scruffy', 'scrunch', 'scrutiny', 'scuba', 'scuff', 'sculptor', 'sculpture', 'scurvy', 'scuttle', 'secluded', 'secluding', 'seclusion', 'second', 'secrecy', 'secret', 'sectional', 'sector', 'secular', 'securely', 'security', 'sedan', 'sedate', 'sedation', 'sedative', 'sediment', 'seduce', 'seducing', 'segment', 'seismic', 'seizing', 'seldom', 'selected', 'selection', 'selective', 'selector', 'self', 'seltzer', 'semantic', 'semester', 'semicolon', 'semifinal', 'seminar', 'semisoft', 'semisweet', 'senate', 'senator', 'send', 'senior', 'senorita', 'sensation', 'sensitive', 'sensitize', 'sensually', 'sensuous', 'sepia', 'september', 'septic', 'septum', 'sequel', 'sequence', 'sequester', 'series', 'sermon', 'serotonin', 'serpent', 'serrated', 'serve', 'service', 'serving', 'sesame', 'sessions', 'setback', 'setting', 'settle', 'settling', 'setup', 'sevenfold', 'seventeen', 'seventh', 'seventy', 'severity', 'shabby', 'shack', 'shaded', 'shadily', 'shadiness', 'shading', 'shadow', 'shady', 'shaft', 'shakable', 'shakily', 'shakiness', 'shaking', 'shaky', 'shale', 'shallot', 'shallow', 'shame', 'shampoo', 'shamrock', 'shank', 'shanty', 'shape', 'shaping', 'share', 'sharpener', 'sharper', 'sharpie', 'sharply', 'sharpness', 'shawl', 'sheath', 'shed', 'sheep', 'sheet', 'shelf', 'shell', 'shelter', 'shelve', 'shelving', 'sherry', 'shield', 'shifter', 'shifting', 'shiftless', 'shifty', 'shimmer', 'shimmy', 'shindig', 'shine', 'shingle', 'shininess', 'shining', 'shiny', 'ship', 'shirt', 'shivering', 'shock', 'shone', 'shoplift', 'shopper', 'shopping', 'shoptalk', 'shore', 'shortage', 'shortcake', 'shortcut', 'shorten', 'shorter', 'shorthand', 'shortlist', 'shortly', 'shortness', 'shorts', 'shortwave', 'shorty', 'shout', 'shove', 'showbiz', 'showcase', 'showdown', 'shower', 'showgirl', 'showing', 'showman', 'shown', 'showoff', 'showpiece', 'showplace', 'showroom', 'showy', 'shrank', 'shrapnel', 'shredder', 'shredding', 'shrewdly', 'shriek', 'shrill', 'shrimp', 'shrine', 'shrink', 'shrivel', 'shrouded', 'shrubbery', 'shrubs', 'shrug', 'shrunk', 'shucking', 'shudder', 'shuffle', 'shuffling', 'shun', 'shush', 'shut', 'shy', 'siamese', 'siberian', 'sibling', 'siding', 'sierra', 'siesta', 'sift', 'sighing', 'silenced', 'silencer', 'silent', 'silica', 'silicon', 'silk', 'silliness', 'silly', 'silo', 'silt', 'silver', 'similarly', 'simile', 'simmering', 'simple', 'simplify', 'simply', 'sincere', 'sincerity', 'singer', 'singing', 'single', 'singular', 'sinister', 'sinless', 'sinner', 'sinuous', 'sip', 'siren', 'sister', 'sitcom', 'sitter', 'sitting', 'situated', 'situation', 'sixfold', 'sixteen', 'sixth', 'sixties', 'sixtieth', 'sixtyfold', 'sizable', 'sizably', 'size', 'sizing', 'sizzle', 'sizzling', 'skater', 'skating', 'skedaddle', 'skeletal', 'skeleton', 'skeptic', 'sketch', 'skewed', 'skewer', 'skid', 'skied', 'skier', 'skies', 'skiing', 'skilled', 'skillet', 'skillful', 'skimmed', 'skimmer', 'skimming', 'skimpily', 'skincare', 'skinhead', 'skinless', 'skinning', 'skinny', 'skintight', 'skipper', 'skipping', 'skirmish', 'skirt', 'skittle', 'skydiver', 'skylight', 'skyline', 'skype', 'skyrocket', 'skyward', 'slab', 'slacked', 'slacker', 'slacking', 'slackness', 'slacks', 'slain', 'slam', 'slander', 'slang', 'slapping', 'slapstick', 'slashed', 'slashing', 'slate', 'slather', 'slaw', 'sled', 'sleek', 'sleep', 'sleet', 'sleeve', 'slept', 'sliceable', 'sliced', 'slicer', 'slicing', 'slick', 'slider', 'slideshow', 'sliding', 'slighted', 'slighting', 'slightly', 'slimness', 'slimy', 'slinging', 'slingshot', 'slinky', 'slip', 'slit', 'sliver', 'slobbery', 'slogan', 'sloped', 'sloping', 'sloppily', 'sloppy', 'slot', 'slouching', 'slouchy', 'sludge', 'slug', 'slum', 'slurp', 'slush', 'sly', 'small', 'smartly', 'smartness', 'smasher', 'smashing', 'smashup', 'smell', 'smelting', 'smile', 'smilingly', 'smirk', 'smite', 'smith', 'smitten', 'smock', 'smog', 'smoked', 'smokeless', 'smokiness', 'smoking', 'smoky', 'smolder', 'smooth', 'smother', 'smudge', 'smudgy', 'smuggler', 'smuggling', 'smugly', 'smugness', 'snack', 'snagged', 'snaking', 'snap', 'snare', 'snarl', 'snazzy', 'sneak', 'sneer', 'sneeze', 'sneezing', 'snide', 'sniff', 'snippet', 'snipping', 'snitch', 'snooper', 'snooze', 'snore', 'snoring', 'snorkel', 'snort', 'snout', 'snowbird', 'snowboard', 'snowbound', 'snowcap', 'snowdrift', 'snowdrop', 'snowfall', 'snowfield', 'snowflake', 'snowiness', 'snowless', 'snowman', 'snowplow', 'snowshoe', 'snowstorm', 'snowsuit', 'snowy', 'snub', 'snuff', 'snuggle', 'snugly', 'snugness', 'speak', 'spearfish', 'spearhead', 'spearman', 'spearmint', 'species', 'specimen', 'specked', 'speckled', 'specks', 'spectacle', 'spectator', 'spectrum', 'speculate', 'speech', 'speed', 'spellbind', 'speller', 'spelling', 'spendable', 'spender', 'spending', 'spent', 'spew', 'sphere', 'spherical', 'sphinx', 'spider', 'spied', 'spiffy', 'spill', 'spilt', 'spinach', 'spinal', 'spindle', 'spinner', 'spinning', 'spinout', 'spinster', 'spiny', 'spiral', 'spirited', 'spiritism', 'spirits', 'spiritual', 'splashed', 'splashing', 'splashy', 'splatter', 'spleen', 'splendid', 'splendor', 'splice', 'splicing', 'splinter', 'splotchy', 'splurge', 'spoilage', 'spoiled', 'spoiler', 'spoiling', 'spoils', 'spoken', 'spokesman', 'sponge', 'spongy', 'sponsor', 'spoof', 'spookily', 'spooky', 'spool', 'spoon', 'spore', 'sporting', 'sports', 'sporty', 'spotless', 'spotlight', 'spotted', 'spotter', 'spotting', 'spotty', 'spousal', 'spouse', 'spout', 'sprain', 'sprang', 'sprawl', 'spray', 'spree', 'sprig', 'spring', 'sprinkled', 'sprinkler', 'sprint', 'sprite', 'sprout', 'spruce', 'sprung', 'spry', 'spud', 'spur', 'sputter', 'spyglass', 'squabble', 'squad', 'squall', 'squander', 'squash', 'squatted', 'squatter', 'squatting', 'squeak', 'squealer', 'squealing', 'squeamish', 'squeegee', 'squeeze', 'squeezing', 'squid', 'squiggle', 'squiggly', 'squint', 'squire', 'squirt', 'squishier', 'squishy', 'stability', 'stabilize', 'stable', 'stack', 'stadium', 'staff', 'stage', 'staging', 'stagnant', 'stagnate', 'stainable', 'stained', 'staining', 'stainless', 'stalemate', 'staleness', 'stalling', 'stallion', 'stamina', 'stammer', 'stamp', 'stand', 'stank', 'staple', 'stapling', 'starboard', 'starch', 'stardom', 'stardust', 'starfish', 'stargazer', 'staring', 'stark', 'starless', 'starlet', 'starlight', 'starlit', 'starring', 'starry', 'starship', 'starter', 'starting', 'startle', 'startling', 'startup', 'starved', 'starving', 'stash', 'state', 'static', 'statistic', 'statue', 'stature', 'status', 'statute', 'statutory', 'staunch', 'stays', 'steadfast', 'steadier', 'steadily', 'steadying', 'steam', 'steed', 'steep', 'steerable', 'steering', 'steersman', 'stegosaur', 'stellar', 'stem', 'stench', 'stencil', 'step', 'stereo', 'sterile', 'sterility', 'sterilize', 'sterling', 'sternness', 'sternum', 'stew', 'stick', 'stiffen', 'stiffly', 'stiffness', 'stifle', 'stifling', 'stillness', 'stilt', 'stimulant', 'stimulate', 'stimuli', 'stimulus', 'stinger', 'stingily', 'stinging', 'stingray', 'stingy', 'stinking', 'stinky', 'stipend', 'stipulate', 'stir', 'stitch', 'stock', 'stoic', 'stoke', 'stole', 'stomp', 'stonewall', 'stoneware', 'stonework', 'stoning', 'stony', 'stood', 'stooge', 'stool', 'stoop', 'stoplight', 'stoppable', 'stoppage', 'stopped', 'stopper', 'stopping', 'stopwatch', 'storable', 'storage', 'storeroom', 'storewide', 'storm', 'stout', 'stove', 'stowaway', 'stowing', 'straddle', 'straggler', 'strained', 'strainer', 'straining', 'strangely', 'stranger', 'strangle', 'strategic', 'strategy', 'stratus', 'straw', 'stray', 'streak', 'stream', 'street', 'strength', 'strenuous', 'strep', 'stress', 'stretch', 'strewn', 'stricken', 'strict', 'stride', 'strife', 'strike', 'striking', 'strive', 'striving', 'strobe', 'strode', 'stroller', 'strongbox', 'strongly', 'strongman', 'struck', 'structure', 'strudel', 'struggle', 'strum', 'strung', 'strut', 'stubbed', 'stubble', 'stubbly', 'stubborn', 'stucco', 'stuck', 'student', 'studied', 'studio', 'study', 'stuffed', 'stuffing', 'stuffy', 'stumble', 'stumbling', 'stump', 'stung', 'stunned', 'stunner', 'stunning', 'stunt', 'stupor', 'sturdily', 'sturdy', 'styling', 'stylishly', 'stylist', 'stylized', 'stylus', 'suave', 'subarctic', 'subatomic', 'subdivide', 'subdued', 'subduing', 'subfloor', 'subgroup', 'subheader', 'subject', 'sublease', 'sublet', 'sublevel', 'sublime', 'submarine', 'submerge', 'submersed', 'submitter', 'subpanel', 'subpar', 'subplot', 'subprime', 'subscribe', 'subscript', 'subsector', 'subside', 'subsiding', 'subsidize', 'subsidy', 'subsoil', 'subsonic', 'substance', 'subsystem', 'subtext', 'subtitle', 'subtly', 'subtotal', 'subtract', 'subtype', 'suburb', 'subway', 'subwoofer', 'subzero', 'succulent', 'such', 'suction', 'sudden', 'sudoku', 'suds', 'sufferer', 'suffering', 'suffice', 'suffix', 'suffocate', 'suffrage', 'sugar', 'suggest', 'suing', 'suitable', 'suitably', 'suitcase', 'suitor', 'sulfate', 'sulfide', 'sulfite', 'sulfur', 'sulk', 'sullen', 'sulphate', 'sulphuric', 'sultry', 'superbowl', 'superglue', 'superhero', 'superior', 'superjet', 'superman', 'supermom', 'supernova', 'supervise', 'supper', 'supplier', 'supply', 'support', 'supremacy', 'supreme', 'surcharge', 'surely', 'sureness', 'surface', 'surfacing', 'surfboard', 'surfer', 'surgery', 'surgical', 'surging', 'surname', 'surpass', 'surplus', 'surprise', 'surreal', 'surrender', 'surrogate', 'surround', 'survey', 'survival', 'survive', 'surviving', 'survivor', 'sushi', 'suspect', 'suspend', 'suspense', 'sustained', 'sustainer', 'swab', 'swaddling', 'swagger', 'swampland', 'swan', 'swapping', 'swarm', 'sway', 'swear', 'sweat', 'sweep', 'swell', 'swept', 'swerve', 'swifter', 'swiftly', 'swiftness', 'swimmable', 'swimmer', 'swimming', 'swimsuit', 'swimwear', 'swinger', 'swinging', 'swipe', 'swirl', 'switch', 'swivel', 'swizzle', 'swooned', 'swoop', 'swoosh', 'swore', 'sworn', 'swung', 'sycamore', 'sympathy', 'symphonic', 'symphony', 'symptom', 'synapse', 'syndrome', 'synergy', 'synopses', 'synopsis', 'synthesis', 'synthetic', 'syrup', 'system', 't-shirt', 'tabasco', 'tabby', 'tableful', 'tables', 'tablet', 'tableware', 'tabloid', 'tackiness', 'tacking', 'tackle', 'tackling', 'tacky', 'taco', 'tactful', 'tactical', 'tactics', 'tactile', 'tactless', 'tadpole', 'taekwondo', 'tag', 'tainted', 'take', 'taking', 'talcum', 'talisman', 'tall', 'talon', 'tamale', 'tameness', 'tamer', 'tamper', 'tank', 'tanned', 'tannery', 'tanning', 'tantrum', 'tapeless', 'tapered', 'tapering', 'tapestry', 'tapioca', 'tapping', 'taps', 'tarantula', 'target', 'tarmac', 'tarnish', 'tarot', 'tartar', 'tartly', 'tartness', 'task', 'tassel', 'taste', 'tastiness', 'tasting', 'tasty', 'tattered', 'tattle', 'tattling', 'tattoo', 'taunt', 'tavern', 'thank', 'that', 'thaw', 'theater', 'theatrics', 'thee', 'theft', 'theme', 'theology', 'theorize', 'thermal', 'thermos', 'thesaurus', 'these', 'thesis', 'thespian', 'thicken', 'thicket', 'thickness', 'thieving', 'thievish', 'thigh', 'thimble', 'thing', 'think', 'thinly', 'thinner', 'thinness', 'thinning', 'thirstily', 'thirsting', 'thirsty', 'thirteen', 'thirty', 'thong', 'thorn', 'those', 'thousand', 'thrash', 'thread', 'threaten', 'threefold', 'thrift', 'thrill', 'thrive', 'thriving', 'throat', 'throbbing', 'throng', 'throttle', 'throwaway', 'throwback', 'thrower', 'throwing', 'thud', 'thumb', 'thumping', 'thursday', 'thus', 'thwarting', 'thyself', 'tiara', 'tibia', 'tidal', 'tidbit', 'tidiness', 'tidings', 'tidy', 'tiger', 'tighten', 'tightly', 'tightness', 'tightrope', 'tightwad', 'tigress', 'tile', 'tiling', 'till', 'tilt', 'timid', 'timing', 'timothy', 'tinderbox', 'tinfoil', 'tingle', 'tingling', 'tingly', 'tinker', 'tinkling', 'tinsel', 'tinsmith', 'tint', 'tinwork', 'tiny', 'tipoff', 'tipped', 'tipper', 'tipping', 'tiptoeing', 'tiptop', 'tiring', 'tissue', 'trace', 'tracing', 'track', 'traction', 'tractor', 'trade', 'trading', 'tradition', 'traffic', 'tragedy', 'trailing', 'trailside', 'train', 'traitor', 'trance', 'tranquil', 'transfer', 'transform', 'translate', 'transpire', 'transport', 'transpose', 'trapdoor', 'trapeze', 'trapezoid', 'trapped', 'trapper', 'trapping', 'traps', 'trash', 'travel', 'traverse', 'travesty', 'tray', 'treachery', 'treading', 'treadmill', 'treason', 'treat', 'treble', 'tree', 'trekker', 'tremble', 'trembling', 'tremor', 'trench', 'trend', 'trespass', 'triage', 'trial', 'triangle', 'tribesman', 'tribunal', 'tribune', 'tributary', 'tribute', 'triceps', 'trickery', 'trickily', 'tricking', 'trickle', 'trickster', 'tricky', 'tricolor', 'tricycle', 'trident', 'tried', 'trifle', 'trifocals', 'trillion', 'trilogy', 'trimester', 'trimmer', 'trimming', 'trimness', 'trinity', 'trio', 'tripod', 'tripping', 'triumph', 'trivial', 'trodden', 'trolling', 'trombone', 'trophy', 'tropical', 'tropics', 'trouble', 'troubling', 'trough', 'trousers', 'trout', 'trowel', 'truce', 'truck', 'truffle', 'trump', 'trunks', 'trustable', 'trustee', 'trustful', 'trusting', 'trustless', 'truth', 'try', 'tubby', 'tubeless', 'tubular', 'tucking', 'tuesday', 'tug', 'tuition', 'tulip', 'tumble', 'tumbling', 'tummy', 'turban', 'turbine', 'turbofan', 'turbojet', 'turbulent', 'turf', 'turkey', 'turmoil', 'turret', 'turtle', 'tusk', 'tutor', 'tutu', 'tux', 'tweak', 'tweed', 'tweet', 'tweezers', 'twelve', 'twentieth', 'twenty', 'twerp', 'twice', 'twiddle', 'twiddling', 'twig', 'twilight', 'twine', 'twins', 'twirl', 'twistable', 'twisted', 'twister', 'twisting', 'twisty', 'twitch', 'twitter', 'tycoon', 'tying', 'tyke', 'udder', 'ultimate', 'ultimatum', 'ultra', 'umbilical', 'umbrella', 'umpire', 'unabashed', 'unable', 'unadorned', 'unadvised', 'unafraid', 'unaired', 'unaligned', 'unaltered', 'unarmored', 'unashamed', 'unaudited', 'unawake', 'unaware', 'unbaked', 'unbalance', 'unbeaten', 'unbend', 'unbent', 'unbiased', 'unbitten', 'unblended', 'unblessed', 'unblock', 'unbolted', 'unbounded', 'unboxed', 'unbraided', 'unbridle', 'unbroken', 'unbuckled', 'unbundle', 'unburned', 'unbutton', 'uncanny', 'uncapped', 'uncaring', 'uncertain', 'unchain', 'unchanged', 'uncharted', 'uncheck', 'uncivil', 'unclad', 'unclaimed', 'unclamped', 'unclasp', 'uncle', 'unclip', 'uncloak', 'unclog', 'unclothed', 'uncoated', 'uncoiled', 'uncolored', 'uncombed', 'uncommon', 'uncooked', 'uncork', 'uncorrupt', 'uncounted', 'uncouple', 'uncouth', 'uncover', 'uncross', 'uncrown', 'uncrushed', 'uncured', 'uncurious', 'uncurled', 'uncut', 'undamaged', 'undated', 'undaunted', 'undead', 'undecided', 'undefined', 'underage', 'underarm', 'undercoat', 'undercook', 'undercut', 'underdog', 'underdone', 'underfed', 'underfeed', 'underfoot', 'undergo', 'undergrad', 'underhand', 'underline', 'underling', 'undermine', 'undermost', 'underpaid', 'underpass', 'underpay', 'underrate', 'undertake', 'undertone', 'undertook', 'undertow', 'underuse', 'underwear', 'underwent', 'underwire', 'undesired', 'undiluted', 'undivided', 'undocked', 'undoing', 'undone', 'undrafted', 'undress', 'undrilled', 'undusted', 'undying', 'unearned', 'unearth', 'unease', 'uneasily', 'uneasy', 'uneatable', 'uneaten', 'unedited', 'unelected', 'unending', 'unengaged', 'unenvied', 'unequal', 'unethical', 'uneven', 'unexpired', 'unexposed', 'unfailing', 'unfair', 'unfasten', 'unfazed', 'unfeeling', 'unfiled', 'unfilled', 'unfitted', 'unfitting', 'unfixable', 'unfixed', 'unflawed', 'unfocused', 'unfold', 'unfounded', 'unframed', 'unfreeze', 'unfrosted', 'unfrozen', 'unfunded', 'unglazed', 'ungloved', 'unglue', 'ungodly', 'ungraded', 'ungreased', 'unguarded', 'unguided', 'unhappily', 'unhappy', 'unharmed', 'unhealthy', 'unheard', 'unhearing', 'unheated', 'unhelpful', 'unhidden', 'unhinge', 'unhitched', 'unholy', 'unhook', 'unicorn', 'unicycle', 'unified', 'unifier', 'uniformed', 'uniformly', 'unify', 'unimpeded', 'uninjured', 'uninstall', 'uninsured', 'uninvited', 'union', 'uniquely', 'unisexual', 'unison', 'unissued', 'unit', 'universal', 'universe', 'unjustly', 'unkempt', 'unkind', 'unknotted', 'unknowing', 'unknown', 'unlaced', 'unlatch', 'unlawful', 'unleaded', 'unlearned', 'unleash', 'unless', 'unleveled', 'unlighted', 'unlikable', 'unlimited', 'unlined', 'unlinked', 'unlisted', 'unlit', 'unlivable', 'unloaded', 'unloader', 'unlocked', 'unlocking', 'unlovable', 'unloved', 'unlovely', 'unloving', 'unluckily', 'unlucky', 'unmade', 'unmanaged', 'unmanned', 'unmapped', 'unmarked', 'unmasked', 'unmasking', 'unmatched', 'unmindful', 'unmixable', 'unmixed', 'unmolded', 'unmoral', 'unmovable', 'unmoved', 'unmoving', 'unnamable', 'unnamed', 'unnatural', 'unneeded', 'unnerve', 'unnerving', 'unnoticed', 'unopened', 'unopposed', 'unpack', 'unpadded', 'unpaid', 'unpainted', 'unpaired', 'unpaved', 'unpeeled', 'unpicked', 'unpiloted', 'unpinned', 'unplanned', 'unplanted', 'unpleased', 'unpledged', 'unplowed', 'unplug', 'unpopular', 'unproven', 'unquote', 'unranked', 'unrated', 'unraveled', 'unreached', 'unread', 'unreal', 'unreeling', 'unrefined', 'unrelated', 'unrented', 'unrest', 'unretired', 'unrevised', 'unrigged', 'unripe', 'unrivaled', 'unroasted', 'unrobed', 'unroll', 'unruffled', 'unruly', 'unrushed', 'unsaddle', 'unsafe', 'unsaid', 'unsalted', 'unsaved', 'unsavory', 'unscathed', 'unscented', 'unscrew', 'unsealed', 'unseated', 'unsecured', 'unseeing', 'unseemly', 'unseen', 'unselect', 'unselfish', 'unsent', 'unsettled', 'unshackle', 'unshaken', 'unshaved', 'unshaven', 'unsheathe', 'unshipped', 'unsightly', 'unsigned', 'unskilled', 'unsliced', 'unsmooth', 'unsnap', 'unsocial', 'unsoiled', 'unsold', 'unsolved', 'unsorted', 'unspoiled', 'unspoken', 'unstable', 'unstaffed', 'unstamped', 'unsteady', 'unsterile', 'unstirred', 'unstitch', 'unstopped', 'unstuck', 'unstuffed', 'unstylish', 'unsubtle', 'unsubtly', 'unsuited', 'unsure', 'unsworn', 'untagged', 'untainted', 'untaken', 'untamed', 'untangled', 'untapped', 'untaxed', 'unthawed', 'unthread', 'untidy', 'untie', 'until', 'untimed', 'untimely', 'untitled', 'untoasted', 'untold', 'untouched', 'untracked', 'untrained', 'untreated', 'untried', 'untrimmed', 'untrue', 'untruth', 'unturned', 'untwist', 'untying', 'unusable', 'unused', 'unusual', 'unvalued', 'unvaried', 'unvarying', 'unveiled', 'unveiling', 'unvented', 'unviable', 'unvisited', 'unvocal', 'unwanted', 'unwarlike', 'unwary', 'unwashed', 'unwatched', 'unweave', 'unwed', 'unwelcome', 'unwell', 'unwieldy', 'unwilling', 'unwind', 'unwired', 'unwitting', 'unwomanly', 'unworldly', 'unworn', 'unworried', 'unworthy', 'unwound', 'unwoven', 'unwrapped', 'unwritten', 'unzip', 'upbeat', 'upchuck', 'upcoming', 'upcountry', 'update', 'upfront', 'upgrade', 'upheaval', 'upheld', 'uphill', 'uphold', 'uplifted', 'uplifting', 'upload', 'upon', 'upper', 'upright', 'uprising', 'upriver', 'uproar', 'uproot', 'upscale', 'upside', 'upstage', 'upstairs', 'upstart', 'upstate', 'upstream', 'upstroke', 'upswing', 'uptake', 'uptight', 'uptown', 'upturned', 'upward', 'upwind', 'uranium', 'urban', 'urchin', 'urethane', 'urgency', 'urgent', 'urging', 'urologist', 'urology', 'usable', 'usage', 'useable', 'used', 'uselessly', 'user', 'usher', 'usual', 'utensil', 'utility', 'utilize', 'utmost', 'utopia', 'utter', 'vacancy', 'vacant', 'vacate', 'vacation', 'vagabond', 'vagrancy', 'vagrantly', 'vaguely', 'vagueness', 'valiant', 'valid', 'valium', 'valley', 'valuables', 'value', 'vanilla', 'vanish', 'vanity', 'vanquish', 'vantage', 'vaporizer', 'variable', 'variably', 'varied', 'variety', 'various', 'varmint', 'varnish', 'varsity', 'varying', 'vascular', 'vaseline', 'vastly', 'vastness', 'veal', 'vegan', 'veggie', 'vehicular', 'velcro', 'velocity', 'velvet', 'vendetta', 'vending', 'vendor', 'veneering', 'vengeful', 'venomous', 'ventricle', 'venture', 'venue', 'venus', 'verbalize', 'verbally', 'verbose', 'verdict', 'verify', 'verse', 'version', 'versus', 'vertebrae', 'vertical', 'vertigo', 'very', 'vessel', 'vest', 'veteran', 'veto', 'vexingly', 'viability', 'viable', 'vibes', 'vice', 'vicinity', 'victory', 'video', 'viewable', 'viewer', 'viewing', 'viewless', 'viewpoint', 'vigorous', 'village', 'villain', 'vindicate', 'vineyard', 'vintage', 'violate', 'violation', 'violator', 'violet', 'violin', 'viper', 'viral', 'virtual', 'virtuous', 'virus', 'visa', 'viscosity', 'viscous', 'viselike', 'visible', 'visibly', 'vision', 'visiting', 'visitor', 'visor', 'vista', 'vitality', 'vitalize', 'vitally', 'vitamins', 'vivacious', 'vividly', 'vividness', 'vixen', 'vocalist', 'vocalize', 'vocally', 'vocation', 'voice', 'voicing', 'void', 'volatile', 'volley', 'voltage', 'volumes', 'voter', 'voting', 'voucher', 'vowed', 'vowel', 'voyage', 'wackiness', 'wad', 'wafer', 'waffle', 'waged', 'wager', 'wages', 'waggle', 'wagon', 'wake', 'waking', 'walk', 'walmart', 'walnut', 'walrus', 'waltz', 'wand', 'wannabe', 'wanted', 'wanting', 'wasabi', 'washable', 'washbasin', 'washboard', 'washbowl', 'washcloth', 'washday', 'washed', 'washer', 'washhouse', 'washing', 'washout', 'washroom', 'washstand', 'washtub', 'wasp', 'wasting', 'watch', 'water', 'waviness', 'waving', 'wavy', 'whacking', 'whacky', 'wham', 'wharf', 'wheat', 'whenever', 'whiff', 'whimsical', 'whinny', 'whiny', 'whisking', 'whoever', 'whole', 'whomever', 'whoopee', 'whooping', 'whoops', 'why', 'wick', 'widely', 'widen', 'widget', 'widow', 'width', 'wieldable', 'wielder', 'wife', 'wifi', 'wikipedia', 'wildcard', 'wildcat', 'wilder', 'wildfire', 'wildfowl', 'wildland', 'wildlife', 'wildly', 'wildness', 'willed', 'willfully', 'willing', 'willow', 'willpower', 'wilt', 'wimp', 'wince', 'wincing', 'wind', 'wing', 'winking', 'winner', 'winnings', 'winter', 'wipe', 'wired', 'wireless', 'wiring', 'wiry', 'wisdom', 'wise', 'wish', 'wisplike', 'wispy', 'wistful', 'wizard', 'wobble', 'wobbling', 'wobbly', 'wok', 'wolf', 'wolverine', 'womanhood', 'womankind', 'womanless', 'womanlike', 'womanly', 'womb', 'woof', 'wooing', 'wool', 'woozy', 'word', 'work', 'worried', 'worrier', 'worrisome', 'worry', 'worsening', 'worshiper', 'worst', 'wound', 'woven', 'wow', 'wrangle', 'wrath', 'wreath', 'wreckage', 'wrecker', 'wrecking', 'wrench', 'wriggle', 'wriggly', 'wrinkle', 'wrinkly', 'wrist', 'writing', 'written', 'wrongdoer', 'wronged', 'wrongful', 'wrongly', 'wrongness', 'wrought', 'xbox', 'xerox', 'yahoo', 'yam', 'yanking', 'yapping', 'yard', 'yarn', 'yeah', 'yearbook', 'yearling', 'yearly', 'yearning', 'yeast', 'yelling', 'yelp', 'yen', 'yesterday', 'yiddish', 'yield', 'yin', 'yippee', 'yo-yo', 'yodel', 'yoga', 'yogurt', 'yonder', 'yoyo', 'yummy', 'zap', 'zealous', 'zebra', 'zen', 'zeppelin', 'zero', 'zestfully', 'zesty', 'zigzagged', 'zipfile', 'zipping', 'zippy', 'zips', 'zit', 'zodiac', 'zombie', 'zone', 'zoning', 'zookeeper', 'zoologist', 'zoology', 'zoom']; /***/
        },
        /***/1495: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
          const crypto_primitives_1 = __webpack_require__(5763);
          async function getSecureRandomBytes(size) {
            return (0, crypto_primitives_1.getSecureRandomBytes)(size);
          }
          exports.getSecureRandomBytes = getSecureRandomBytes;
          async function getSecureRandomWords(size) {
            return getSecureRandomWords();
          }
          exports.getSecureRandomWords = getSecureRandomWords;
          async function getSecureRandomNumber(min, max) {
            let range = max - min;
            var bitsNeeded = Math.ceil(Math.log2(range));
            if (bitsNeeded > 53) {
              throw new Error('Range is too large');
            }
            var bytesNeeded = Math.ceil(bitsNeeded / 8);
            var mask = Math.pow(2, bitsNeeded) - 1;
            while (true) {
              let res = await getSecureRandomBytes(bitsNeeded);
              let power = (bytesNeeded - 1) * 8;
              let numberValue = 0;
              for (var i = 0; i < bytesNeeded; i++) {
                numberValue += res[i] * Math.pow(2, power);
                power -= 8;
              }
              numberValue = numberValue & mask; // Truncate
              if (numberValue >= range) {
                continue;
              }
              return min + numberValue;
            }
          }
          exports.getSecureRandomNumber = getSecureRandomNumber; /***/
        },
        /***/4299: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.hmac_sha512 = exports.hmac_sha512_fallback = void 0;
          const jssha_1 = __importDefault(__webpack_require__(5548));
          const crypto_primitives_1 = __webpack_require__(5763);
          async function hmac_sha512_fallback(key, data) {
            let keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;
            let dataBuffer = typeof data === 'string' ? Buffer.from(data, 'utf-8') : data;
            const shaObj = new jssha_1.default("SHA-512", "HEX", {
              hmacKey: {
                value: keyBuffer.toString('hex'),
                format: "HEX"
              }
            });
            shaObj.update(dataBuffer.toString('hex'));
            const hmac = shaObj.getHash("HEX");
            return Buffer.from(hmac, 'hex');
          }
          exports.hmac_sha512_fallback = hmac_sha512_fallback;
          function hmac_sha512(key, data) {
            return (0, crypto_primitives_1.hmac_sha512)(key, data);
          }
          exports.hmac_sha512 = hmac_sha512; /***/
        },
        /***/7091: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.openBox = exports.sealBox = exports.signVerify = exports.sign = exports.keyPairFromSeed = exports.keyPairFromSecretKey = void 0;
          const tweetnacl_1 = __importDefault(__webpack_require__(2926));
          function keyPairFromSecretKey(secretKey) {
            let res = tweetnacl_1.default.sign.keyPair.fromSecretKey(new Uint8Array(secretKey));
            return {
              publicKey: Buffer.from(res.publicKey),
              secretKey: Buffer.from(res.secretKey)
            };
          }
          exports.keyPairFromSecretKey = keyPairFromSecretKey;
          function keyPairFromSeed(secretKey) {
            let res = tweetnacl_1.default.sign.keyPair.fromSeed(new Uint8Array(secretKey));
            return {
              publicKey: Buffer.from(res.publicKey),
              secretKey: Buffer.from(res.secretKey)
            };
          }
          exports.keyPairFromSeed = keyPairFromSeed;
          function sign(data, secretKey) {
            return Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(data), new Uint8Array(secretKey)));
          }
          exports.sign = sign;
          function signVerify(data, signature, publicKey) {
            return tweetnacl_1.default.sign.detached.verify(new Uint8Array(data), new Uint8Array(signature), new Uint8Array(publicKey));
          }
          exports.signVerify = signVerify;
          function sealBox(data, nonce, key) {
            return Buffer.from(tweetnacl_1.default.secretbox(data, nonce, key));
          }
          exports.sealBox = sealBox;
          function openBox(data, nonce, key) {
            let res = tweetnacl_1.default.secretbox.open(data, nonce, key);
            if (!res) {
              return null;
            }
            return Buffer.from(res);
          }
          exports.openBox = openBox; /***/
        },
        /***/6829: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.pbkdf2_sha512 = void 0;
          const crypto_primitives_1 = __webpack_require__(5763);
          function pbkdf2_sha512(key, salt, iterations, keyLen) {
            return (0, crypto_primitives_1.pbkdf2_sha512)(key, salt, iterations, keyLen);
          }
          exports.pbkdf2_sha512 = pbkdf2_sha512; /***/
        },
        /***/9690: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sha256 = exports.sha256_fallback = exports.sha256_sync = void 0;
          const jssha_1 = __importDefault(__webpack_require__(5548));
          const crypto_primitives_1 = __webpack_require__(5763);
          function sha256_sync(source) {
            let src;
            if (typeof source === 'string') {
              src = Buffer.from(source, 'utf-8').toString('hex');
            } else {
              src = source.toString('hex');
            }
            let hasher = new jssha_1.default('SHA-256', 'HEX');
            hasher.update(src);
            let res = hasher.getHash('HEX');
            return Buffer.from(res, 'hex');
          }
          exports.sha256_sync = sha256_sync;
          async function sha256_fallback(source) {
            return sha256_sync(source);
          }
          exports.sha256_fallback = sha256_fallback;
          function sha256(source) {
            return (0, crypto_primitives_1.sha256)(source);
          }
          exports.sha256 = sha256; /***/
        },
        /***/6915: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sha512 = exports.sha512_fallback = exports.sha512_sync = void 0;
          const jssha_1 = __importDefault(__webpack_require__(5548));
          const crypto_primitives_1 = __webpack_require__(5763);
          function sha512_sync(source) {
            let src;
            if (typeof source === 'string') {
              src = Buffer.from(source, 'utf-8').toString('hex');
            } else {
              src = source.toString('hex');
            }
            let hasher = new jssha_1.default('SHA-512', 'HEX');
            hasher.update(src);
            let res = hasher.getHash('HEX');
            return Buffer.from(res, 'hex');
          }
          exports.sha512_sync = sha512_sync;
          async function sha512_fallback(source) {
            return sha512_sync(source);
          }
          exports.sha512_fallback = sha512_fallback;
          async function sha512(source) {
            return (0, crypto_primitives_1.sha512)(source);
          }
          exports.sha512 = sha512; /***/
        },
        /***/1763: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.bitsToBytes = exports.bytesToBits = exports.lpad = void 0;
          function lpad(str, padString, length) {
            while (str.length < length) {
              str = padString + str;
            }
            return str;
          }
          exports.lpad = lpad;
          function bytesToBits(bytes) {
            let res = '';
            for (let i = 0; i < bytes.length; i++) {
              let x = bytes.at(i);
              res += lpad(x.toString(2), '0', 8);
            }
            return res;
          }
          exports.bytesToBits = bytesToBits;
          function bitsToBytes(src) {
            if (src.length % 8 !== 0) {
              throw Error('Uneven bits');
            }
            let res = [];
            while (src.length > 0) {
              res.push(parseInt(src.slice(0, 8), 2));
              src = src.slice(8);
            }
            return Buffer.from(res);
          }
          exports.bitsToBytes = bitsToBytes; /***/
        },
        /***/5562: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };
          var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };
          var _TonClient_api;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TonClient = void 0;
          const HttpApi_1 = __webpack_require__(8723);
          const core_1 = __webpack_require__(6900);
          class TonClient {
            constructor(parameters) {
              _TonClient_api.set(this, void 0);
              this.parameters = {
                endpoint: parameters.endpoint
              };
              __classPrivateFieldSet(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, {
                timeout: parameters.timeout,
                apiKey: parameters.apiKey,
                adapter: parameters.httpAdapter
              }), "f");
            } /**
              * Get Address Balance
              * @param address address for balance check
              * @returns balance
              */
            async getBalance(address) {
              return (await this.getContractState(address)).balance;
            } /**
              * Invoke get method
              * @param address contract address
              * @param name name of method
              * @param params optional parameters
              * @returns stack and gas_used field
              */
            async runMethod(address, name, stack) {
              if (stack === void 0) {
                stack = [];
              }
              let res = await __classPrivateFieldGet(this, _TonClient_api, "f").callGetMethod(address, name, stack);
              if (res.exit_code !== 0) {
                throw Error('Unable to execute get method. Got exit_code: ' + res.exit_code);
              }
              return {
                gas_used: res.gas_used,
                stack: parseStack(res.stack)
              };
            } /**
              * Invoke get method
              * @param address contract address
              * @param name name of method
              * @param params optional parameters
              * @returns stack and gas_used field
              * @deprecated use runMethod instead
              */
            async callGetMethod(address, name, stack) {
              if (stack === void 0) {
                stack = [];
              }
              return this.runMethod(address, name, stack);
            } /**
              * Invoke get method that returns error code instead of throwing error
              * @param address contract address
              * @param name name of method
              * @param params optional parameters
              * @returns stack and gas_used field
              */
            async runMethodWithError(address, name, params) {
              if (params === void 0) {
                params = [];
              }
              let res = await __classPrivateFieldGet(this, _TonClient_api, "f").callGetMethod(address, name, params);
              return {
                gas_used: res.gas_used,
                stack: parseStack(res.stack),
                exit_code: res.exit_code
              };
            } /**
              * Invoke get method that returns error code instead of throwing error
              * @param address contract address
              * @param name name of method
              * @param params optional parameters
              * @returns stack and gas_used field
              * @deprecated use runMethodWithError instead
              */
            async callGetMethodWithError(address, name, stack) {
              if (stack === void 0) {
                stack = [];
              }
              return this.runMethodWithError(address, name, stack);
            } /**
              * Get transactions
              * @param address address
              */
            async getTransactions(address, opts) {
              // Fetch transactions
              let tx = await __classPrivateFieldGet(this, _TonClient_api, "f").getTransactions(address, opts);
              let res = [];
              for (let r of tx) {
                res.push((0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(r.data, 'base64'))[0].beginParse()));
              }
              return res;
            } /**
              * Get transaction by it's id
              * @param address address
              * @param lt logical time
              * @param hash transaction hash
              * @returns transaction or null if not exist
              */
            async getTransaction(address, lt, hash) {
              let res = await __classPrivateFieldGet(this, _TonClient_api, "f").getTransaction(address, lt, hash);
              if (res) {
                return (0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(res.data, 'base64'))[0].beginParse());
              } else {
                return null;
              }
            } /**
              * Fetch latest masterchain info
              * @returns masterchain info
              */
            async getMasterchainInfo() {
              let r = await __classPrivateFieldGet(this, _TonClient_api, "f").getMasterchainInfo();
              return {
                workchain: r.init.workchain,
                shard: r.last.shard,
                initSeqno: r.init.seqno,
                latestSeqno: r.last.seqno
              };
            } /**
              * Fetch latest workchain shards
              * @param seqno masterchain seqno
              */
            async getWorkchainShards(seqno) {
              let r = await __classPrivateFieldGet(this, _TonClient_api, "f").getShards(seqno);
              return r.map(m => ({
                workchain: m.workchain,
                shard: m.shard,
                seqno: m.seqno
              }));
            } /**
              * Fetch transactions inf shards
              * @param workchain
              * @param seqno
              * @param shard
              */
            async getShardTransactions(workchain, seqno, shard) {
              let tx = await __classPrivateFieldGet(this, _TonClient_api, "f").getBlockTransactions(workchain, seqno, shard);
              if (tx.incomplete) {
                throw Error('Unsupported');
              }
              return tx.transactions.map(v => ({
                account: core_1.Address.parseRaw(v.account),
                lt: v.lt,
                hash: v.hash
              }));
            } /**
              * Send message to a network
              * @param src source message
              */
            async sendMessage(src) {
              const boc = (0, core_1.beginCell)().store((0, core_1.storeMessage)(src)).endCell().toBoc();
              await __classPrivateFieldGet(this, _TonClient_api, "f").sendBoc(boc);
            } /**
              * Send file to a network
              * @param src source file
              */
            async sendFile(src) {
              await __classPrivateFieldGet(this, _TonClient_api, "f").sendBoc(src);
            } /**
              * Estimate fees for external message
              * @param address target address
              * @returns
              */
            async estimateExternalMessageFee(address, args) {
              return await __classPrivateFieldGet(this, _TonClient_api, "f").estimateFee(address, {
                body: args.body,
                initCode: args.initCode,
                initData: args.initData,
                ignoreSignature: args.ignoreSignature
              });
            } /**
              * Send external message to contract
              * @param contract contract to send message
              * @param src message body
              */
            async sendExternalMessage(contract, src) {
              if ((await this.isContractDeployed(contract.address)) || !contract.init) {
                const message = (0, core_1.external)({
                  to: contract.address,
                  body: src
                });
                await this.sendMessage(message);
              } else {
                const message = (0, core_1.external)({
                  to: contract.address,
                  init: {
                    code: contract.init.code,
                    data: contract.init.data
                  },
                  body: src
                });
                await this.sendMessage(message);
              }
            } /**
              * Check if contract is deployed
              * @param address addres to check
              * @returns true if contract is in active state
              */
            async isContractDeployed(address) {
              return (await this.getContractState(address)).state === 'active';
            } /**
              * Resolves contract state
              * @param address contract address
              */
            async getContractState(address) {
              let info = await __classPrivateFieldGet(this, _TonClient_api, "f").getAddressInformation(address);
              let balance = BigInt(info.balance);
              let state = info.state;
              return {
                balance,
                state,
                code: info.code !== '' ? Buffer.from(info.code, 'base64') : null,
                data: info.data !== '' ? Buffer.from(info.data, 'base64') : null,
                lastTransaction: info.last_transaction_id.lt !== '0' ? {
                  lt: info.last_transaction_id.lt,
                  hash: info.last_transaction_id.hash
                } : null,
                blockId: {
                  workchain: info.block_id.workchain,
                  shard: info.block_id.shard,
                  seqno: info.block_id.seqno
                },
                timestampt: info.sync_utime
              };
            } /**
              * Open contract
              * @param src source contract
              * @returns contract
              */
            open(src) {
              return (0, core_1.openContract)(src, args => createProvider(this, args.address, args.init));
            } /**
              * Create a provider
              * @param address address
              * @param init optional init
              * @returns provider
              */
            provider(address, init) {
              return createProvider(this, address, init);
            }
          }
          exports.TonClient = TonClient;
          _TonClient_api = new WeakMap();
          function parseStackEntry(s) {
            switch (s["@type"]) {
              case "tvm.stackEntryNumber":
                return {
                  type: 'int',
                  value: BigInt(s.number.number)
                };
              case "tvm.stackEntryCell":
                return {
                  type: 'cell',
                  cell: core_1.Cell.fromBase64(s.cell)
                };
              case 'tvm.stackEntryTuple':
                return {
                  type: 'tuple',
                  items: s.tuple.elements.map(parseStackEntry)
                };
              default:
                throw Error("Unsupported item type: " + s["@type"]);
            }
          }
          function parseStackItem(s) {
            if (s[0] === 'num') {
              let val = s[1];
              if (val.startsWith('-')) {
                return {
                  type: 'int',
                  value: -BigInt(val.slice(1))
                };
              } else {
                return {
                  type: 'int',
                  value: BigInt(val)
                };
              }
            } else if (s[0] === 'null') {
              return {
                type: 'null'
              };
            } else if (s[0] === 'cell') {
              return {
                type: 'cell',
                cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0]
              };
            } else if (s[0] === 'slice') {
              return {
                type: 'slice',
                cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0]
              };
            } else if (s[0] === 'builder') {
              return {
                type: 'builder',
                cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0]
              };
            } else if (s[0] === 'tuple' || s[0] === 'list') {
              // toncenter.com missbehaviour
              if (s[1].elements.length === 0) {
                return {
                  type: 'null'
                };
              }
              return {
                type: s[0],
                items: s[1].elements.map(parseStackEntry)
              };
            } else {
              throw Error('Unsupported stack item type: ' + s[0]);
            }
          }
          function parseStack(src) {
            let stack = [];
            for (let s of src) {
              stack.push(parseStackItem(s));
            }
            return new core_1.TupleReader(stack);
          }
          function createProvider(client, address, init) {
            return {
              async getState() {
                let state = await client.getContractState(address);
                let balance = state.balance;
                let last = state.lastTransaction ? {
                  lt: BigInt(state.lastTransaction.lt),
                  hash: Buffer.from(state.lastTransaction.hash, 'base64')
                } : null;
                let storage;
                if (state.state === 'active') {
                  storage = {
                    type: 'active',
                    code: state.code ? state.code : null,
                    data: state.data ? state.data : null
                  };
                } else if (state.state === 'uninitialized') {
                  storage = {
                    type: 'uninit'
                  };
                } else if (state.state === 'frozen') {
                  storage = {
                    type: 'frozen',
                    stateHash: Buffer.alloc(0)
                  };
                } else {
                  throw Error('Unsupported state');
                }
                return {
                  balance,
                  last,
                  state: storage
                };
              },
              async get(name, args) {
                let method = await client.callGetMethod(address, name, args);
                return {
                  stack: method.stack
                };
              },
              async external(message) {
                //
                // Resolve init
                //
                let neededInit = null;
                if (init && !(await client.isContractDeployed(address))) {
                  neededInit = init;
                } //
                // Send package
                //
                const ext = (0, core_1.external)({
                  to: address,
                  init: neededInit ? {
                    code: neededInit.code,
                    data: neededInit.data
                  } : null,
                  body: message
                });
                let boc = (0, core_1.beginCell)().store((0, core_1.storeMessage)(ext)).endCell().toBoc();
                await client.sendFile(boc);
              },
              async internal(via, message) {
                // Resolve init
                let neededInit = null;
                if (init && !(await client.isContractDeployed(address))) {
                  neededInit = init;
                } // Resolve bounce
                let bounce = true;
                if (message.bounce !== null && message.bounce !== undefined) {
                  bounce = message.bounce;
                } // Resolve value
                let value;
                if (typeof message.value === 'string') {
                  value = (0, core_1.toNano)(message.value);
                } else {
                  value = message.value;
                } // Resolve body
                let body = null;
                if (typeof message.body === 'string') {
                  body = (0, core_1.comment)(message.body);
                } else if (message.body) {
                  body = message.body;
                } // Send internal message
                await via.send({
                  to: address,
                  value,
                  bounce,
                  sendMode: message.sendMode,
                  init: neededInit,
                  body
                });
              }
            };
          } /***/
        },
        /***/6380: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };
          var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          var _TonClient4_endpoint, _TonClient4_timeout, _TonClient4_adapter;
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.TonClient4 = void 0;
          const axios_1 = __importDefault(__webpack_require__(6660));
          const core_1 = __webpack_require__(6900);
          const toUrlSafe_1 = __webpack_require__(2819);
          const zod_1 = __webpack_require__(5995);
          class TonClient4 {
            constructor(args) {
              _TonClient4_endpoint.set(this, void 0);
              _TonClient4_timeout.set(this, void 0);
              _TonClient4_adapter.set(this, void 0);
              __classPrivateFieldSet(this, _TonClient4_endpoint, args.endpoint, "f");
              __classPrivateFieldSet(this, _TonClient4_timeout, args.timeout || 5000, "f");
              __classPrivateFieldSet(this, _TonClient4_adapter, args.httpAdapter, "f");
            } /**
              * Get Last Block
              * @returns last block info
              */
            async getLastBlock() {
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/latest', {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let lastBlock = lastBlockCodec.safeParse(res.data);
              if (!lastBlock.success) {
                throw Error('Mailformed response: ' + lastBlock.error.format()._errors.join(', '));
              }
              return lastBlock.data;
            } /**
              * Get block info
              * @param seqno block sequence number
              * @returns block info
              */
            async getBlock(seqno) {
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno, {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let block = blockCodec.safeParse(res.data);
              if (!block.success) {
                throw Error('Mailformed response');
              }
              if (!block.data.exist) {
                throw Error('Block is out of scope');
              }
              return block.data.block;
            } /**
              * Get block info by unix timestamp
              * @param ts unix timestamp
              * @returns block info
              */
            async getBlockByUtime(ts) {
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/utime/' + ts, {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let block = blockCodec.safeParse(res.data);
              if (!block.success) {
                throw Error('Mailformed response');
              }
              if (!block.data.exist) {
                throw Error('Block is out of scope');
              }
              return block.data.block;
            } /**
              * Get block info by unix timestamp
              * @param seqno block sequence number
              * @param address account address
              * @returns account info
              */
            async getAccount(seqno, address) {
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toString({
                urlSafe: true
              }), {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let account = accountCodec.safeParse(res.data);
              if (!account.success) {
                throw Error('Mailformed response');
              }
              return account.data;
            } /**
              * Get account lite info (without code and data)
              * @param seqno block sequence number
              * @param address account address
              * @returns account lite info
              */
            async getAccountLite(seqno, address) {
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toString({
                urlSafe: true
              }) + '/lite', {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let account = accountLiteCodec.safeParse(res.data);
              if (!account.success) {
                throw Error('Mailformed response');
              }
              return account.data;
            } /**
              * Check if contract is deployed
              * @param address addres to check
              * @returns true if contract is in active state
              */
            async isContractDeployed(seqno, address) {
              let account = await this.getAccountLite(seqno, address);
              return account.account.state.type === 'active';
            } /**
              * Check if account was updated since
              * @param seqno block sequence number
              * @param address account address
              * @param lt account last transaction lt
              * @returns account change info
              */
            async isAccountChanged(seqno, address, lt) {
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toString({
                urlSafe: true
              }) + '/changed/' + lt.toString(10), {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let changed = changedCodec.safeParse(res.data);
              if (!changed.success) {
                throw Error('Mailformed response');
              }
              return changed.data;
            } /**
              * Load unparsed account transactions
              * @param address address
              * @param lt last transaction lt
              * @param hash last transaction hash
              * @returns unparsed transactions
              */
            async getAccountTransactions(address, lt, hash) {
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/account/' + address.toString({
                urlSafe: true
              }) + '/tx/' + lt.toString(10) + '/' + (0, toUrlSafe_1.toUrlSafe)(hash.toString('base64')), {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let transactions = transactionsCodec.safeParse(res.data);
              if (!transactions.success) {
                throw Error('Mailformed response');
              }
              let data = transactions.data;
              let tx = [];
              let cells = core_1.Cell.fromBoc(Buffer.from(data.boc, 'base64'));
              for (let i = 0; i < data.blocks.length; i++) {
                tx.push({
                  block: data.blocks[i],
                  tx: (0, core_1.loadTransaction)(cells[i].beginParse())
                });
              }
              return tx;
            } /**
              * Load parsed account transactions
              * @param address address
              * @param lt last transaction lt
              * @param hash last transaction hash
              * @param count number of transactions to load
              * @returns parsed transactions
              */
            async getAccountTransactionsParsed(address, lt, hash, count) {
              if (count === void 0) {
                count = 20;
              }
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/account/' + address.toString({
                urlSafe: true
              }) + '/tx/parsed/' + lt.toString(10) + '/' + (0, toUrlSafe_1.toUrlSafe)(hash.toString('base64')), {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f"),
                params: {
                  count
                }
              });
              let parsedTransactionsRes = parsedTransactionsCodec.safeParse(res.data);
              if (!parsedTransactionsRes.success) {
                throw Error('Mailformed response');
              }
              return parsedTransactionsRes.data;
            } /**
              * Get network config
              * @param seqno block sequence number
              * @param ids optional config ids
              * @returns network config
              */
            async getConfig(seqno, ids) {
              let tail = '';
              if (ids && ids.length > 0) {
                tail = '/' + [...ids].sort().join(',');
              }
              let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/config' + tail, {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let config = configCodec.safeParse(res.data);
              if (!config.success) {
                throw Error('Mailformed response');
              }
              return config.data;
            } /**
              * Execute run method
              * @param seqno block sequence number
              * @param address account address
              * @param name method name
              * @param args method arguments
              * @returns method result
              */
            async runMethod(seqno, address, name, args) {
              let tail = args && args.length > 0 ? '/' + (0, toUrlSafe_1.toUrlSafe)((0, core_1.serializeTuple)(args).toBoc({
                idx: false,
                crc32: false
              }).toString('base64')) : '';
              let url = __classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toString({
                urlSafe: true
              }) + '/run/' + encodeURIComponent(name) + tail;
              let res = await axios_1.default.get(url, {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let runMethod = runMethodCodec.safeParse(res.data);
              if (!runMethod.success) {
                throw Error('Mailformed response');
              }
              let resultTuple = runMethod.data.resultRaw ? (0, core_1.parseTuple)(core_1.Cell.fromBoc(Buffer.from(runMethod.data.resultRaw, 'base64'))[0]) : [];
              return {
                exitCode: runMethod.data.exitCode,
                result: resultTuple,
                resultRaw: runMethod.data.resultRaw,
                block: runMethod.data.block,
                shardBlock: runMethod.data.shardBlock,
                reader: new core_1.TupleReader(resultTuple)
              };
            } /**
              * Send external message
              * @param message message boc
              * @returns message status
              */
            async sendMessage(message) {
              let res = await axios_1.default.post(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/send', {
                boc: message.toString('base64')
              }, {
                adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"),
                timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f")
              });
              let send = sendCodec.safeParse(res.data);
              if (!send.success) {
                throw Error('Mailformed response');
              }
              return {
                status: res.data.status
              };
            } /**
              * Open smart contract
              * @param contract contract
              * @returns opened contract
              */
            open(contract) {
              return (0, core_1.openContract)(contract, args => createProvider(this, null, args.address, args.init));
            } /**
              * Open smart contract
              * @param block block number
              * @param contract contract
              * @returns opened contract
              */
            openAt(block, contract) {
              return (0, core_1.openContract)(contract, args => createProvider(this, block, args.address, args.init));
            } /**
              * Create provider
              * @param address address
              * @param init optional init data
              * @returns provider
              */
            provider(address, init) {
              return createProvider(this, null, address, init ? init : null);
            } /**
              * Create provider at specified block number
              * @param block block number
              * @param address address
              * @param init optional init data
              * @returns provider
              */
            providerAt(block, address, init) {
              return createProvider(this, block, address, init ? init : null);
            }
          }
          exports.TonClient4 = TonClient4;
          _TonClient4_endpoint = new WeakMap(), _TonClient4_timeout = new WeakMap(), _TonClient4_adapter = new WeakMap();
          function createProvider(client, block, address, init) {
            return {
              async getState() {
                // Resolve block
                let sq = block;
                if (sq === null) {
                  let res = await client.getLastBlock();
                  sq = res.last.seqno;
                } // Load state
                let state = await client.getAccount(sq, address); // Convert state
                let last = state.account.last ? {
                  lt: BigInt(state.account.last.lt),
                  hash: Buffer.from(state.account.last.hash, 'base64')
                } : null;
                let storage;
                if (state.account.state.type === 'active') {
                  storage = {
                    type: 'active',
                    code: state.account.state.code ? Buffer.from(state.account.state.code, 'base64') : null,
                    data: state.account.state.data ? Buffer.from(state.account.state.data, 'base64') : null
                  };
                } else if (state.account.state.type === 'uninit') {
                  storage = {
                    type: 'uninit'
                  };
                } else if (state.account.state.type === 'frozen') {
                  storage = {
                    type: 'frozen',
                    stateHash: Buffer.from(state.account.state.stateHash, 'base64')
                  };
                } else {
                  throw Error('Unsupported state');
                }
                return {
                  balance: BigInt(state.account.balance.coins),
                  last: last,
                  state: storage
                };
              },
              async get(name, args) {
                let sq = block;
                if (sq === null) {
                  let res = await client.getLastBlock();
                  sq = res.last.seqno;
                }
                let method = await client.runMethod(sq, address, name, args);
                if (method.exitCode !== 0 && method.exitCode !== 1) {
                  throw Error('Exit code: ' + method.exitCode);
                }
                return {
                  stack: new core_1.TupleReader(method.result)
                };
              },
              async external(message) {
                // Resolve last
                let last = await client.getLastBlock(); // Resolve init
                let neededInit = null;
                if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== 'active') {
                  neededInit = init;
                } // Send with state init
                const ext = (0, core_1.external)({
                  to: address,
                  init: neededInit ? {
                    code: neededInit.code,
                    data: neededInit.data
                  } : null,
                  body: message
                });
                let pkg = (0, core_1.beginCell)().store((0, core_1.storeMessage)(ext)).endCell().toBoc();
                await client.sendMessage(pkg);
              },
              async internal(via, message) {
                // Resolve last
                let last = await client.getLastBlock(); // Resolve init
                let neededInit = null;
                if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== 'active') {
                  neededInit = init;
                } // Resolve bounce
                let bounce = true;
                if (message.bounce !== null && message.bounce !== undefined) {
                  bounce = message.bounce;
                } // Resolve value
                let value;
                if (typeof message.value === 'string') {
                  value = (0, core_1.toNano)(message.value);
                } else {
                  value = message.value;
                } // Resolve body
                let body = null;
                if (typeof message.body === 'string') {
                  body = (0, core_1.comment)(message.body);
                } else if (message.body) {
                  body = message.body;
                } // Send internal message
                await via.send({
                  to: address,
                  value,
                  bounce,
                  sendMode: message.sendMode,
                  init: neededInit,
                  body
                });
              }
            };
          } //
          // Codecs
          //
          const lastBlockCodec = zod_1.z.object({
            last: zod_1.z.object({
              seqno: zod_1.z.number(),
              shard: zod_1.z.string(),
              workchain: zod_1.z.number(),
              fileHash: zod_1.z.string(),
              rootHash: zod_1.z.string()
            }),
            init: zod_1.z.object({
              fileHash: zod_1.z.string(),
              rootHash: zod_1.z.string()
            }),
            stateRootHash: zod_1.z.string(),
            now: zod_1.z.number()
          });
          const blockCodec = zod_1.z.union([zod_1.z.object({
            exist: zod_1.z.literal(false)
          }), zod_1.z.object({
            exist: zod_1.z.literal(true),
            block: zod_1.z.object({
              shards: zod_1.z.array(zod_1.z.object({
                workchain: zod_1.z.number(),
                seqno: zod_1.z.number(),
                shard: zod_1.z.string(),
                rootHash: zod_1.z.string(),
                fileHash: zod_1.z.string(),
                transactions: zod_1.z.array(zod_1.z.object({
                  account: zod_1.z.string(),
                  hash: zod_1.z.string(),
                  lt: zod_1.z.string()
                }))
              }))
            })
          })]); // {"lastPaid":1653099243,"duePayment":null,"used":{"bits":119,"cells":1,"publicCells":0}}
          const storageStatCodec = zod_1.z.object({
            lastPaid: zod_1.z.number(),
            duePayment: zod_1.z.union([zod_1.z.null(), zod_1.z.string()]),
            used: zod_1.z.object({
              bits: zod_1.z.number(),
              cells: zod_1.z.number(),
              publicCells: zod_1.z.number()
            })
          });
          const accountCodec = zod_1.z.object({
            account: zod_1.z.object({
              state: zod_1.z.union([zod_1.z.object({
                type: zod_1.z.literal('uninit')
              }), zod_1.z.object({
                type: zod_1.z.literal('active'),
                code: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),
                data: zod_1.z.union([zod_1.z.string(), zod_1.z.null()])
              }), zod_1.z.object({
                type: zod_1.z.literal('frozen'),
                stateHash: zod_1.z.string()
              })]),
              balance: zod_1.z.object({
                coins: zod_1.z.string()
              }),
              last: zod_1.z.union([zod_1.z.null(), zod_1.z.object({
                lt: zod_1.z.string(),
                hash: zod_1.z.string()
              })]),
              storageStat: zod_1.z.union([zod_1.z.null(), storageStatCodec])
            }),
            block: zod_1.z.object({
              workchain: zod_1.z.number(),
              seqno: zod_1.z.number(),
              shard: zod_1.z.string(),
              rootHash: zod_1.z.string(),
              fileHash: zod_1.z.string()
            })
          });
          const accountLiteCodec = zod_1.z.object({
            account: zod_1.z.object({
              state: zod_1.z.union([zod_1.z.object({
                type: zod_1.z.literal('uninit')
              }), zod_1.z.object({
                type: zod_1.z.literal('active'),
                codeHash: zod_1.z.string(),
                dataHash: zod_1.z.string()
              }), zod_1.z.object({
                type: zod_1.z.literal('frozen'),
                stateHash: zod_1.z.string()
              })]),
              balance: zod_1.z.object({
                coins: zod_1.z.string()
              }),
              last: zod_1.z.union([zod_1.z.null(), zod_1.z.object({
                lt: zod_1.z.string(),
                hash: zod_1.z.string()
              })]),
              storageStat: zod_1.z.union([zod_1.z.null(), storageStatCodec])
            })
          });
          const changedCodec = zod_1.z.object({
            changed: zod_1.z.boolean(),
            block: zod_1.z.object({
              workchain: zod_1.z.number(),
              seqno: zod_1.z.number(),
              shard: zod_1.z.string(),
              rootHash: zod_1.z.string(),
              fileHash: zod_1.z.string()
            })
          });
          const runMethodCodec = zod_1.z.object({
            exitCode: zod_1.z.number(),
            resultRaw: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),
            block: zod_1.z.object({
              workchain: zod_1.z.number(),
              seqno: zod_1.z.number(),
              shard: zod_1.z.string(),
              rootHash: zod_1.z.string(),
              fileHash: zod_1.z.string()
            }),
            shardBlock: zod_1.z.object({
              workchain: zod_1.z.number(),
              seqno: zod_1.z.number(),
              shard: zod_1.z.string(),
              rootHash: zod_1.z.string(),
              fileHash: zod_1.z.string()
            })
          });
          const configCodec = zod_1.z.object({
            config: zod_1.z.object({
              cell: zod_1.z.string(),
              address: zod_1.z.string(),
              globalBalance: zod_1.z.object({
                coins: zod_1.z.string()
              })
            })
          });
          const sendCodec = zod_1.z.object({
            status: zod_1.z.number()
          });
          const blocksCodec = zod_1.z.array(zod_1.z.object({
            workchain: zod_1.z.number(),
            seqno: zod_1.z.number(),
            shard: zod_1.z.string(),
            rootHash: zod_1.z.string(),
            fileHash: zod_1.z.string()
          }));
          const transactionsCodec = zod_1.z.object({
            blocks: blocksCodec,
            boc: zod_1.z.string()
          });
          const parsedAddressExternalCodec = zod_1.z.object({
            bits: zod_1.z.number(),
            data: zod_1.z.string()
          });
          const parsedMessageInfoCodec = zod_1.z.union([zod_1.z.object({
            type: zod_1.z.literal('internal'),
            value: zod_1.z.string(),
            dest: zod_1.z.string(),
            src: zod_1.z.string(),
            bounced: zod_1.z.boolean(),
            bounce: zod_1.z.boolean(),
            ihrDisabled: zod_1.z.boolean(),
            createdAt: zod_1.z.number(),
            createdLt: zod_1.z.string(),
            fwdFee: zod_1.z.string(),
            ihrFee: zod_1.z.string()
          }), zod_1.z.object({
            type: zod_1.z.literal('external-in'),
            dest: zod_1.z.string(),
            src: zod_1.z.union([parsedAddressExternalCodec, zod_1.z.null()]),
            importFee: zod_1.z.string()
          }), zod_1.z.object({
            type: zod_1.z.literal('external-out'),
            dest: zod_1.z.union([parsedAddressExternalCodec, zod_1.z.null()])
          })]);
          const parsedStateInitCodec = zod_1.z.object({
            splitDepth: zod_1.z.union([zod_1.z.number(), zod_1.z.null()]),
            code: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),
            data: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),
            special: zod_1.z.union([zod_1.z.object({
              tick: zod_1.z.boolean(),
              tock: zod_1.z.boolean()
            }), zod_1.z.null()])
          });
          const parsedMessageCodec = zod_1.z.object({
            body: zod_1.z.string(),
            info: parsedMessageInfoCodec,
            init: zod_1.z.union([parsedStateInitCodec, zod_1.z.null()])
          });
          const accountStatusCodec = zod_1.z.union([zod_1.z.literal('uninitialized'), zod_1.z.literal('frozen'), zod_1.z.literal('active'), zod_1.z.literal('non-existing')]);
          const txBodyCodec = zod_1.z.union([zod_1.z.object({
            type: zod_1.z.literal('comment'),
            comment: zod_1.z.string()
          }), zod_1.z.object({
            type: zod_1.z.literal('payload'),
            cell: zod_1.z.string()
          })]);
          const parsedOperationItemCodec = zod_1.z.union([zod_1.z.object({
            kind: zod_1.z.literal('ton'),
            amount: zod_1.z.string()
          }), zod_1.z.object({
            kind: zod_1.z.literal('token'),
            amount: zod_1.z.string()
          })]);
          const supportedMessageTypeCodec = zod_1.z.union([zod_1.z.literal('jetton::excesses'), zod_1.z.literal('jetton::transfer'), zod_1.z.literal('jetton::transfer_notification'), zod_1.z.literal('deposit'), zod_1.z.literal('deposit::ok'), zod_1.z.literal('withdraw'), zod_1.z.literal('withdraw::all'), zod_1.z.literal('withdraw::delayed'), zod_1.z.literal('withdraw::ok'), zod_1.z.literal('airdrop')]);
          const opCodec = zod_1.z.object({
            type: supportedMessageTypeCodec,
            options: zod_1.z.optional(zod_1.z.record(zod_1.z.string()))
          });
          const parsedOperationCodec = zod_1.z.object({
            address: zod_1.z.string(),
            comment: zod_1.z.optional(zod_1.z.string()),
            items: zod_1.z.array(parsedOperationItemCodec),
            op: zod_1.z.optional(opCodec)
          });
          const parsedTransactionCodec = zod_1.z.object({
            address: zod_1.z.string(),
            lt: zod_1.z.string(),
            hash: zod_1.z.string(),
            prevTransaction: zod_1.z.object({
              lt: zod_1.z.string(),
              hash: zod_1.z.string()
            }),
            time: zod_1.z.number(),
            outMessagesCount: zod_1.z.number(),
            oldStatus: accountStatusCodec,
            newStatus: accountStatusCodec,
            fees: zod_1.z.string(),
            update: zod_1.z.object({
              oldHash: zod_1.z.string(),
              newHash: zod_1.z.string()
            }),
            inMessage: zod_1.z.union([parsedMessageCodec, zod_1.z.null()]),
            outMessages: zod_1.z.array(parsedMessageCodec),
            parsed: zod_1.z.object({
              seqno: zod_1.z.union([zod_1.z.number(), zod_1.z.null()]),
              body: zod_1.z.union([txBodyCodec, zod_1.z.null()]),
              status: zod_1.z.union([zod_1.z.literal('success'), zod_1.z.literal('failed'), zod_1.z.literal('pending')]),
              dest: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),
              kind: zod_1.z.union([zod_1.z.literal('out'), zod_1.z.literal('in')]),
              amount: zod_1.z.string(),
              resolvedAddress: zod_1.z.string(),
              bounced: zod_1.z.boolean(),
              mentioned: zod_1.z.array(zod_1.z.string())
            }),
            operation: parsedOperationCodec
          });
          const parsedTransactionsCodec = zod_1.z.object({
            blocks: blocksCodec,
            transactions: zod_1.z.array(parsedTransactionCodec)
          }); /***/
        },
        /***/8723: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"];
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.HttpApi = void 0; /**
                                    * Copyright (c) Whales Corp.
                                    * All Rights Reserved.
                                    *
                                    * This source code is licensed under the MIT license found in the
                                    * LICENSE file in the root directory of this source tree.
                                    */
          const TonCache_1 = __webpack_require__(3978);
          const dataloader_1 = __importDefault(__webpack_require__(5033));
          const axios_1 = __importDefault(__webpack_require__(6660));
          const zod_1 = __webpack_require__(5995);
          const version = __webpack_require__(2302) /* .version */.rE;
          const blockIdExt = zod_1.z.object({
            '@type': zod_1.z.literal('ton.blockIdExt'),
            workchain: zod_1.z.number(),
            shard: zod_1.z.string(),
            seqno: zod_1.z.number(),
            root_hash: zod_1.z.string(),
            file_hash: zod_1.z.string()
          });
          const addressInformation = zod_1.z.object({
            balance: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),
            state: zod_1.z.union([zod_1.z.literal('active'), zod_1.z.literal('uninitialized'), zod_1.z.literal('frozen')]),
            data: zod_1.z.string(),
            code: zod_1.z.string(),
            last_transaction_id: zod_1.z.object({
              '@type': zod_1.z.literal('internal.transactionId'),
              lt: zod_1.z.string(),
              hash: zod_1.z.string()
            }),
            block_id: blockIdExt,
            sync_utime: zod_1.z.number()
          });
          const bocResponse = zod_1.z.object({
            '@type': zod_1.z.literal('ok')
          });
          const feeResponse = zod_1.z.object({
            '@type': zod_1.z.literal('query.fees'),
            source_fees: zod_1.z.object({
              '@type': zod_1.z.literal('fees'),
              in_fwd_fee: zod_1.z.number(),
              storage_fee: zod_1.z.number(),
              gas_fee: zod_1.z.number(),
              fwd_fee: zod_1.z.number()
            })
          });
          const callGetMethod = zod_1.z.object({
            gas_used: zod_1.z.number(),
            exit_code: zod_1.z.number(),
            stack: zod_1.z.array(zod_1.z.unknown())
          });
          const messageData = zod_1.z.union([zod_1.z.object({
            '@type': zod_1.z.literal('msg.dataRaw'),
            'body': zod_1.z.string()
          }), zod_1.z.object({
            '@type': zod_1.z.literal('msg.dataText'),
            'text': zod_1.z.string()
          }), zod_1.z.object({
            '@type': zod_1.z.literal('msg.dataDecryptedText'),
            'text': zod_1.z.string()
          }), zod_1.z.object({
            '@type': zod_1.z.literal('msg.dataEncryptedText'),
            'text': zod_1.z.string()
          })]);
          const message = zod_1.z.object({
            source: zod_1.z.string(),
            destination: zod_1.z.string(),
            value: zod_1.z.string(),
            fwd_fee: zod_1.z.string(),
            ihr_fee: zod_1.z.string(),
            created_lt: zod_1.z.string(),
            body_hash: zod_1.z.string(),
            msg_data: messageData,
            message: zod_1.z.string()
          });
          const transaction = zod_1.z.object({
            data: zod_1.z.string(),
            utime: zod_1.z.number(),
            transaction_id: zod_1.z.object({
              lt: zod_1.z.string(),
              hash: zod_1.z.string()
            }),
            fee: zod_1.z.string(),
            storage_fee: zod_1.z.string(),
            other_fee: zod_1.z.string(),
            in_msg: zod_1.z.union([zod_1.z.undefined(), message]),
            out_msgs: zod_1.z.array(message)
          });
          const getTransactions = zod_1.z.array(transaction);
          const getMasterchain = zod_1.z.object({
            state_root_hash: zod_1.z.string(),
            last: blockIdExt,
            init: blockIdExt
          });
          const getShards = zod_1.z.object({
            shards: zod_1.z.array(blockIdExt)
          });
          const blockShortTxt = zod_1.z.object({
            '@type': zod_1.z.literal('blocks.shortTxId'),
            mode: zod_1.z.number(),
            account: zod_1.z.string(),
            lt: zod_1.z.string(),
            hash: zod_1.z.string()
          });
          const getBlockTransactions = zod_1.z.object({
            id: blockIdExt,
            req_count: zod_1.z.number(),
            incomplete: zod_1.z.boolean(),
            transactions: zod_1.z.array(blockShortTxt)
          });
          class TypedCache {
            constructor(namespace, cache, codec, keyEncoder) {
              this.namespace = namespace;
              this.cache = cache;
              this.codec = codec;
              this.keyEncoder = keyEncoder;
            }
            async get(key) {
              let ex = await this.cache.get(this.namespace, this.keyEncoder(key));
              if (ex) {
                let decoded = this.codec.safeParse(JSON.parse(ex));
                if (decoded.success) {
                  return decoded.data;
                }
              }
              return null;
            }
            async set(key, value) {
              if (value !== null) {
                await this.cache.set(this.namespace, this.keyEncoder(key), JSON.stringify(value));
              } else {
                await this.cache.set(this.namespace, this.keyEncoder(key), null);
              }
            }
          }
          class HttpApi {
            constructor(endpoint, parameters) {
              this.endpoint = endpoint;
              this.cache = new TonCache_1.InMemoryCache();
              this.parameters = {
                timeout: parameters?.timeout || 30000,
                apiKey: parameters?.apiKey,
                adapter: parameters?.adapter
              }; // Shard
              this.shardCache = new TypedCache('ton-shard', this.cache, zod_1.z.array(blockIdExt), src => src + '');
              this.shardLoader = new dataloader_1.default(async src => {
                return await Promise.all(src.map(async v => {
                  const cached = await this.shardCache.get(v);
                  if (cached) {
                    return cached;
                  }
                  let loaded = (await this.doCall('shards', {
                    seqno: v
                  }, getShards)).shards;
                  await this.shardCache.set(v, loaded);
                  return loaded;
                }));
              }); // Shard Transactions
              this.shardTransactionsCache = new TypedCache('ton-shard-tx', this.cache, getBlockTransactions, src => src.workchain + ':' + src.shard + ':' + src.seqno);
              this.shardTransactionsLoader = new dataloader_1.default(async src => {
                return await Promise.all(src.map(async v => {
                  const cached = await this.shardTransactionsCache.get(v);
                  if (cached) {
                    return cached;
                  }
                  let loaded = await this.doCall('getBlockTransactions', {
                    workchain: v.workchain,
                    seqno: v.seqno,
                    shard: v.shard
                  }, getBlockTransactions);
                  await this.shardTransactionsCache.set(v, loaded);
                  return loaded;
                }));
              }, {
                cacheKeyFn: src => src.workchain + ':' + src.shard + ':' + src.seqno
              });
            }
            getAddressInformation(address) {
              return this.doCall('getAddressInformation', {
                address: address.toString()
              }, addressInformation);
            }
            async getTransactions(address, opts) {
              const inclusive = opts.inclusive;
              delete opts.inclusive; // Convert hash
              let hash = undefined;
              if (opts.hash) {
                hash = Buffer.from(opts.hash, 'base64').toString('hex');
              } // Adjust limit
              let limit = opts.limit;
              if (opts.hash && opts.lt && inclusive !== true) {
                limit++;
              } // Do request
              let res = await this.doCall('getTransactions', {
                address: address.toString(),
                ...opts,
                limit,
                hash
              }, getTransactions);
              if (res.length > limit) {
                res = res.slice(0, limit);
              } // Adjust result
              if (opts.hash && opts.lt && inclusive !== true) {
                res.shift();
                return res;
              } else {
                return res;
              }
            }
            async getMasterchainInfo() {
              return await this.doCall('getMasterchainInfo', {}, getMasterchain);
            }
            async getShards(seqno) {
              return await this.shardLoader.load(seqno);
            }
            async getBlockTransactions(workchain, seqno, shard) {
              return await this.shardTransactionsLoader.load({
                workchain,
                seqno,
                shard
              });
            }
            async getTransaction(address, lt, hash) {
              let convHash = Buffer.from(hash, 'base64').toString('hex');
              let res = await this.doCall('getTransactions', {
                address: address.toString(),
                lt,
                hash: convHash,
                limit: 1
              }, getTransactions);
              let ex = res.find(v => v.transaction_id.lt === lt && v.transaction_id.hash === hash);
              if (ex) {
                return ex;
              } else {
                return null;
              }
            }
            async callGetMethod(address, method, stack) {
              return await this.doCall('runGetMethod', {
                address: address.toString(),
                method,
                stack: serializeStack(stack)
              }, callGetMethod);
            }
            async sendBoc(body) {
              await this.doCall('sendBoc', {
                boc: body.toString('base64')
              }, bocResponse);
            }
            async estimateFee(address, args) {
              return await this.doCall('estimateFee', {
                address: address.toString(),
                body: args.body.toBoc().toString('base64'),
                'init_data': args.initData ? args.initData.toBoc().toString('base64') : '',
                'init_code': args.initCode ? args.initCode.toBoc().toString('base64') : '',
                ignore_chksig: args.ignoreSignature
              }, feeResponse);
            }
            async doCall(method, body, codec) {
              let headers = {
                'Content-Type': 'application/json',
                'X-Ton-Client-Version': version
              };
              if (this.parameters.apiKey) {
                headers['X-API-Key'] = this.parameters.apiKey;
              }
              let res = await axios_1.default.post(this.endpoint, JSON.stringify({
                id: '1',
                jsonrpc: '2.0',
                method: method,
                params: body
              }), {
                headers,
                timeout: this.parameters.timeout,
                adapter: this.parameters.adapter
              });
              if (res.status !== 200 || !res.data.ok) {
                throw Error('Received error: ' + JSON.stringify(res.data));
              }
              let decoded = codec.safeParse(res.data.result);
              if (decoded.success) {
                return decoded.data;
              } else {
                throw Error('Malformed response: ' + decoded.error.format()._errors.join(', '));
              }
            }
          }
          exports.HttpApi = HttpApi;
          function serializeStack(src) {
            let stack = [];
            for (let s of src) {
              if (s.type === 'int') {
                stack.push(['num', s.value.toString()]);
              } else if (s.type === 'cell') {
                stack.push(['tvm.Cell', s.cell.toBoc().toString('base64')]);
              } else if (s.type === 'slice') {
                stack.push(['tvm.Slice', s.cell.toBoc().toString('base64')]);
              } else if (s.type === 'builder') {
                stack.push(['tvm.Builder', s.cell.toBoc().toString('base64')]);
              } else {
                throw Error('Unsupported stack item type: ' + s.type);
              }
            }
            return stack;
          } /***/
        },
        /***/3978: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.InMemoryCache = void 0;
          class InMemoryCache {
            constructor() {
              this.cache = new Map();
              this.set = async (namespace, key, value) => {
                if (value !== null) {
                  this.cache.set(namespace + '$$' + key, value);
                } else {
                  this.cache.delete(namespace + '$$' + key);
                }
              };
              this.get = async (namespace, key) => {
                let res = this.cache.get(namespace + '$$' + key);
                if (res !== undefined) {
                  return res;
                } else {
                  return null;
                }
              };
            }
          }
          exports.InMemoryCache = InMemoryCache; /***/
        },
        /***/6440: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.parseFullConfig = exports.loadConfigParamsAsSlice = exports.loadConfigParamById = exports.parseVotingSetup = exports.parseProposalSetup = exports.configParse29 = exports.configParse28 = exports.configParseMsgPrices = exports.configParseGasLimitsPrices = exports.configParseBridge = exports.configParseValidatorSet = exports.configParse12 = exports.configParseWorkchainDescriptor = exports.configParse40 = exports.configParse8 = exports.configParse18 = exports.configParse17 = exports.configParse16 = exports.configParse15 = exports.configParse13 = exports.configParse5 = exports.configParseMasterAddressRequired = exports.parseBridge = exports.parseValidatorSet = exports.configParseMasterAddress = void 0;
          const core_1 = __webpack_require__(6900);
          function configParseMasterAddress(slice) {
            if (slice) {
              return new core_1.Address(-1, slice.loadBuffer(32));
            } else {
              return null;
            }
          }
          exports.configParseMasterAddress = configParseMasterAddress;
          function readPublicKey(slice) {
            // 8e81278a
            if (slice.loadUint(32) !== 0x8e81278a) {
              throw Error('Invalid config');
            }
            return slice.loadBuffer(32);
          }
          const ValidatorDescriptionDictValue = {
            serialize(src, builder) {
              throw Error("not implemented");
            },
            parse(src) {
              const header = src.loadUint(8);
              if (header === 0x53) {
                return {
                  publicKey: readPublicKey(src),
                  weight: src.loadUintBig(64),
                  adnlAddress: null
                };
              } else if (header === 0x73) {
                return {
                  publicKey: readPublicKey(src),
                  weight: src.loadUintBig(64),
                  adnlAddress: src.loadBuffer(32)
                };
              } else {
                throw Error('Invalid config');
              }
            }
          };
          function parseValidatorSet(slice) {
            const header = slice.loadUint(8);
            if (header === 0x11) {
              const timeSince = slice.loadUint(32);
              const timeUntil = slice.loadUint(32);
              const total = slice.loadUint(16);
              const main = slice.loadUint(16);
              const list = slice.loadDictDirect(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);
              return {
                timeSince,
                timeUntil,
                total,
                main,
                totalWeight: null,
                list
              };
            } else if (header === 0x12) {
              const timeSince = slice.loadUint(32);
              const timeUntil = slice.loadUint(32);
              const total = slice.loadUint(16);
              const main = slice.loadUint(16);
              const totalWeight = slice.loadUintBig(64);
              const list = slice.loadDict(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);
              return {
                timeSince,
                timeUntil,
                total,
                main,
                totalWeight,
                list
              };
            }
          }
          exports.parseValidatorSet = parseValidatorSet;
          function parseBridge(slice) {
            const bridgeAddress = new core_1.Address(-1, slice.loadBuffer(32));
            const oracleMultisigAddress = new core_1.Address(-1, slice.loadBuffer(32));
            const oraclesDict = slice.loadDict(core_1.Dictionary.Keys.Buffer(32), core_1.Dictionary.Values.Buffer(32));
            const oracles = new Map();
            for (const [local, remote] of oraclesDict) {
              oracles.set(new core_1.Address(-1, local).toString(), remote);
            }
            const externalChainAddress = slice.loadBuffer(32);
            return {
              bridgeAddress,
              oracleMultisigAddress,
              oracles,
              externalChainAddress
            };
          }
          exports.parseBridge = parseBridge;
          function configParseMasterAddressRequired(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            return configParseMasterAddress(slice);
          }
          exports.configParseMasterAddressRequired = configParseMasterAddressRequired;
          function configParse5(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            const magic = slice.loadUint(8);
            if (magic === 0x01) {
              const blackholeAddr = slice.loadBit() ? new core_1.Address(-1, slice.loadBuffer(32)) : null;
              const feeBurnNominator = slice.loadUint(32);
              const feeBurnDenominator = slice.loadUint(32);
              return {
                blackholeAddr,
                feeBurnNominator,
                feeBurnDenominator
              };
            }
            throw new Error('Invalid config');
          }
          exports.configParse5 = configParse5;
          function configParse13(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            const magic = slice.loadUint(8);
            if (magic === 0x1a) {
              const deposit = slice.loadCoins();
              const bitPrice = slice.loadCoins();
              const cellPrice = slice.loadCoins();
              return {
                deposit,
                bitPrice,
                cellPrice
              };
            }
            throw new Error('Invalid config');
          }
          exports.configParse13 = configParse13;
          function configParse15(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            const validatorsElectedFor = slice.loadUint(32);
            const electorsStartBefore = slice.loadUint(32);
            const electorsEndBefore = slice.loadUint(32);
            const stakeHeldFor = slice.loadUint(32);
            return {
              validatorsElectedFor,
              electorsStartBefore,
              electorsEndBefore,
              stakeHeldFor
            };
          }
          exports.configParse15 = configParse15;
          function configParse16(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            const maxValidators = slice.loadUint(16);
            const maxMainValidators = slice.loadUint(16);
            const minValidators = slice.loadUint(16);
            return {
              maxValidators,
              maxMainValidators,
              minValidators
            };
          }
          exports.configParse16 = configParse16;
          function configParse17(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            const minStake = slice.loadCoins();
            const maxStake = slice.loadCoins();
            const minTotalStake = slice.loadCoins();
            const maxStakeFactor = slice.loadUint(32);
            return {
              minStake,
              maxStake,
              minTotalStake,
              maxStakeFactor
            };
          }
          exports.configParse17 = configParse17;
          const StoragePricesDictValue = {
            serialize(src, builder) {
              throw Error("not implemented");
            },
            parse(src) {
              const header = src.loadUint(8);
              if (header !== 0xcc) {
                throw Error('Invalid config');
              }
              const utime_since = src.loadUint(32);
              const bit_price_ps = src.loadUintBig(64);
              const cell_price_ps = src.loadUintBig(64);
              const mc_bit_price_ps = src.loadUintBig(64);
              const mc_cell_price_ps = src.loadUintBig(64);
              return {
                utime_since,
                bit_price_ps,
                cell_price_ps,
                mc_bit_price_ps,
                mc_cell_price_ps
              };
            }
          };
          function configParse18(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            return slice.loadDictDirect(core_1.Dictionary.Keys.Buffer(4), StoragePricesDictValue).values();
          }
          exports.configParse18 = configParse18;
          function configParse8(slice) {
            if (!slice) {
              return {
                version: 0,
                capabilities: 0n
              };
            }
            const version = slice.loadUint(32);
            const capabilities = slice.loadUintBig(64);
            return {
              version,
              capabilities
            };
          }
          exports.configParse8 = configParse8;
          function configParse40(slice) {
            if (!slice) {
              return null;
            }
            const header = slice.loadUint(8);
            if (header !== 1) {
              throw Error('Invalid config');
            }
            const defaultFlatFine = slice.loadCoins();
            const defaultProportionaFine = slice.loadCoins();
            const severityFlatMult = slice.loadUint(16);
            const severityProportionalMult = slice.loadUint(16);
            const unfunishableInterval = slice.loadUint(16);
            const longInterval = slice.loadUint(16);
            const longFlatMult = slice.loadUint(16);
            const longProportionalMult = slice.loadUint(16);
            const mediumInterval = slice.loadUint(16);
            const mediumFlatMult = slice.loadUint(16);
            const mediumProportionalMult = slice.loadUint(16);
            return {
              defaultFlatFine,
              defaultProportionaFine,
              severityFlatMult,
              severityProportionalMult,
              unfunishableInterval,
              longInterval,
              longFlatMult,
              longProportionalMult,
              mediumInterval,
              mediumFlatMult,
              mediumProportionalMult
            };
          }
          exports.configParse40 = configParse40;
          function configParseWorkchainDescriptor(slice) {
            if (slice.loadUint(8) !== 0xA6) {
              throw Error('Invalid config');
            }
            const enabledSince = slice.loadUint(32);
            const actialMinSplit = slice.loadUint(8);
            const min_split = slice.loadUint(8);
            const max_split = slice.loadUint(8);
            const basic = slice.loadBit();
            const active = slice.loadBit();
            const accept_msgs = slice.loadBit();
            const flags = slice.loadUint(13);
            const zerostateRootHash = slice.loadBuffer(32);
            const zerostateFileHash = slice.loadBuffer(32);
            const version = slice.loadUint(32); // Only basic format supported
            if (slice.loadBit()) {
              throw Error('Invalid config');
            }
            const vmVersion = slice.loadUint(32);
            const vmMode = slice.loadUintBig(64);
            return {
              enabledSince,
              actialMinSplit,
              min_split,
              max_split,
              basic,
              active,
              accept_msgs,
              flags,
              zerostateRootHash,
              zerostateFileHash,
              version,
              format: {
                vmVersion,
                vmMode
              }
            };
          }
          exports.configParseWorkchainDescriptor = configParseWorkchainDescriptor;
          const WorkchainDescriptorDictValue = {
            serialize(src, builder) {
              throw Error("not implemented");
            },
            parse(src) {
              if (src.loadUint(8) !== 0xA6) {
                throw Error('Invalid config');
              }
              const enabledSince = src.loadUint(32);
              const actialMinSplit = src.loadUint(8);
              const min_split = src.loadUint(8);
              const max_split = src.loadUint(8);
              const basic = src.loadBit();
              const active = src.loadBit();
              const accept_msgs = src.loadBit();
              const flags = src.loadUint(13);
              const zerostateRootHash = src.loadBuffer(32);
              const zerostateFileHash = src.loadBuffer(32);
              const version = src.loadUint(32); // Only basic format supported
              if (src.loadBit()) {
                throw Error('Invalid config');
              }
              const vmVersion = src.loadUint(32);
              const vmMode = src.loadUintBig(64);
              return {
                enabledSince,
                actialMinSplit,
                min_split,
                max_split,
                basic,
                active,
                accept_msgs,
                flags,
                zerostateRootHash,
                zerostateFileHash,
                version,
                format: {
                  vmVersion,
                  vmMode
                }
              };
            }
          };
          function configParse12(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            const wd = slice.loadDict(core_1.Dictionary.Keys.Uint(32), WorkchainDescriptorDictValue);
            if (wd) {
              return wd;
            }
            throw Error('No workchains exist');
          }
          exports.configParse12 = configParse12;
          function configParseValidatorSet(slice) {
            if (!slice) {
              return null;
            }
            return parseValidatorSet(slice);
          }
          exports.configParseValidatorSet = configParseValidatorSet;
          function configParseBridge(slice) {
            if (!slice) {
              return null;
            }
            return parseBridge(slice);
          }
          exports.configParseBridge = configParseBridge;
          function parseGasLimitsInternal(slice) {
            const tag = slice.loadUint(8);
            if (tag === 0xde) {
              const gasPrice = slice.loadUintBig(64);
              const gasLimit = slice.loadUintBig(64);
              const specialGasLimit = slice.loadUintBig(64);
              const gasCredit = slice.loadUintBig(64);
              const blockGasLimit = slice.loadUintBig(64);
              const freezeDueLimit = slice.loadUintBig(64);
              const deleteDueLimit = slice.loadUintBig(64);
              return {
                gasPrice,
                gasLimit,
                specialGasLimit,
                gasCredit,
                blockGasLimit,
                freezeDueLimit,
                deleteDueLimit
              };
            } else if (tag === 0xdd) {
              const gasPrice = slice.loadUintBig(64);
              const gasLimit = slice.loadUintBig(64);
              const gasCredit = slice.loadUintBig(64);
              const blockGasLimit = slice.loadUintBig(64);
              const freezeDueLimit = slice.loadUintBig(64);
              const deleteDueLimit = slice.loadUintBig(64);
              return {
                gasPrice,
                gasLimit,
                gasCredit,
                blockGasLimit,
                freezeDueLimit,
                deleteDueLimit
              };
            } else {
              throw Error('Invalid config');
            }
          }
          function configParseGasLimitsPrices(slice) {
            if (!slice) {
              throw Error('Invalid config');
            }
            const tag = slice.loadUint(8);
            if (tag === 0xd1) {
              const flatLimit = slice.loadUintBig(64);
              const flatGasPrice = slice.loadUintBig(64);
              const other = parseGasLimitsInternal(slice);
              return {
                flatLimit,
                flatGasPrice,
                other
              };
            } else {
              throw Error('Invalid config');
            }
          }
          exports.configParseGasLimitsPrices = configParseGasLimitsPrices;
          function configParseMsgPrices(slice) {
            if (!slice) {
              throw new Error('Invalid config');
            }
            const magic = slice.loadUint(8);
            if (magic !== 0xea) {
              throw new Error('Invalid msg prices param');
            }
            return {
              lumpPrice: slice.loadUintBig(64),
              bitPrice: slice.loadUintBig(64),
              cellPrice: slice.loadUintBig(64),
              ihrPriceFactor: slice.loadUint(32),
              firstFrac: slice.loadUint(16),
              nextFrac: slice.loadUint(16)
            };
          }
          exports.configParseMsgPrices = configParseMsgPrices; // catchain_config#c1 mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32 
          //   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;
          // catchain_config_new#c2 flags:(## 7) { flags = 0 } shuffle_mc_validators:Bool
          //   mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32
          //   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;
          function configParse28(slice) {
            if (!slice) {
              throw new Error('Invalid config');
            }
            const magic = slice.loadUint(8);
            if (magic === 0xc1) {
              const masterCatchainLifetime = slice.loadUint(32);
              const shardCatchainLifetime = slice.loadUint(32);
              const shardValidatorsLifetime = slice.loadUint(32);
              const shardValidatorsCount = slice.loadUint(32);
              return {
                masterCatchainLifetime,
                shardCatchainLifetime,
                shardValidatorsLifetime,
                shardValidatorsCount
              };
            }
            if (magic === 0xc2) {
              const flags = slice.loadUint(7);
              const suffleMasterValidators = slice.loadBit();
              const masterCatchainLifetime = slice.loadUint(32);
              const shardCatchainLifetime = slice.loadUint(32);
              const shardValidatorsLifetime = slice.loadUint(32);
              const shardValidatorsCount = slice.loadUint(32);
              return {
                flags,
                suffleMasterValidators,
                masterCatchainLifetime,
                shardCatchainLifetime,
                shardValidatorsLifetime,
                shardValidatorsCount
              };
            }
            throw new Error('Invalid config');
          }
          exports.configParse28 = configParse28; // consensus_config#d6 round_candidates:# { round_candidates >= 1 }
          //   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32
          //   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32
          //   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;
          // consensus_config_new#d7 flags:(## 7) { flags = 0 } new_catchain_ids:Bool
          //   round_candidates:(## 8) { round_candidates >= 1 }
          //   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32
          //   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32
          //   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;
          // consensus_config_v3#d8 flags:(## 7) { flags = 0 } new_catchain_ids:Bool
          //   round_candidates:(## 8) { round_candidates >= 1 }
          //   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32
          //   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32
          //   max_block_bytes:uint32 max_collated_bytes:uint32 
          //   proto_version:uint16 = ConsensusConfig;
          function configParse29(slice) {
            if (!slice) {
              throw new Error('Invalid config');
            }
            const magic = slice.loadUint(8);
            if (magic === 0xd6) {
              const roundCandidates = slice.loadUint(32);
              const nextCandidateDelay = slice.loadUint(32);
              const consensusTimeout = slice.loadUint(32);
              const fastAttempts = slice.loadUint(32);
              const attemptDuration = slice.loadUint(32);
              const catchainMaxDeps = slice.loadUint(32);
              const maxBlockBytes = slice.loadUint(32);
              const maxColaltedBytes = slice.loadUint(32);
              return {
                roundCandidates,
                nextCandidateDelay,
                consensusTimeout,
                fastAttempts,
                attemptDuration,
                catchainMaxDeps,
                maxBlockBytes,
                maxColaltedBytes
              };
            } else if (magic === 0xd7) {
              const flags = slice.loadUint(7);
              const newCatchainIds = slice.loadBit();
              const roundCandidates = slice.loadUint(8);
              const nextCandidateDelay = slice.loadUint(32);
              const consensusTimeout = slice.loadUint(32);
              const fastAttempts = slice.loadUint(32);
              const attemptDuration = slice.loadUint(32);
              const catchainMaxDeps = slice.loadUint(32);
              const maxBlockBytes = slice.loadUint(32);
              const maxColaltedBytes = slice.loadUint(32);
              return {
                flags,
                newCatchainIds,
                roundCandidates,
                nextCandidateDelay,
                consensusTimeout,
                fastAttempts,
                attemptDuration,
                catchainMaxDeps,
                maxBlockBytes,
                maxColaltedBytes
              };
            } else if (magic === 0xd8) {
              const flags = slice.loadUint(7);
              const newCatchainIds = slice.loadBit();
              const roundCandidates = slice.loadUint(8);
              const nextCandidateDelay = slice.loadUint(32);
              const consensusTimeout = slice.loadUint(32);
              const fastAttempts = slice.loadUint(32);
              const attemptDuration = slice.loadUint(32);
              const catchainMaxDeps = slice.loadUint(32);
              const maxBlockBytes = slice.loadUint(32);
              const maxColaltedBytes = slice.loadUint(32);
              const protoVersion = slice.loadUint(16);
              return {
                flags,
                newCatchainIds,
                roundCandidates,
                nextCandidateDelay,
                consensusTimeout,
                fastAttempts,
                attemptDuration,
                catchainMaxDeps,
                maxBlockBytes,
                maxColaltedBytes,
                protoVersion
              };
            } else if (magic === 0xd9) {
              const flags = slice.loadUint(7);
              const newCatchainIds = slice.loadBit();
              const roundCandidates = slice.loadUint(8);
              const nextCandidateDelay = slice.loadUint(32);
              const consensusTimeout = slice.loadUint(32);
              const fastAttempts = slice.loadUint(32);
              const attemptDuration = slice.loadUint(32);
              const catchainMaxDeps = slice.loadUint(32);
              const maxBlockBytes = slice.loadUint(32);
              const maxColaltedBytes = slice.loadUint(32);
              const protoVersion = slice.loadUint(16);
              const catchainMaxBlocksCoeff = slice.loadUint(32);
              return {
                flags,
                newCatchainIds,
                roundCandidates,
                nextCandidateDelay,
                consensusTimeout,
                fastAttempts,
                attemptDuration,
                catchainMaxDeps,
                maxBlockBytes,
                maxColaltedBytes,
                protoVersion,
                catchainMaxBlocksCoeff
              };
            }
            throw new Error('Invalid config');
          }
          exports.configParse29 = configParse29; // cfg_vote_cfg#36 min_tot_rounds:uint8 max_tot_rounds:uint8 min_wins:uint8 max_losses:uint8 min_store_sec:uint32 max_store_sec:uint32 bit_price:uint32 cell_price:uint32 = ConfigProposalSetup;
          function parseProposalSetup(slice) {
            const magic = slice.loadUint(8);
            if (magic !== 0x36) {
              throw new Error('Invalid config');
            }
            const minTotalRounds = slice.loadUint(8);
            const maxTotalRounds = slice.loadUint(8);
            const minWins = slice.loadUint(8);
            const maxLoses = slice.loadUint(8);
            const minStoreSec = slice.loadUint(32);
            const maxStoreSec = slice.loadUint(32);
            const bitPrice = slice.loadUint(32);
            const cellPrice = slice.loadUint(32);
            return {
              minTotalRounds,
              maxTotalRounds,
              minWins,
              maxLoses,
              minStoreSec,
              maxStoreSec,
              bitPrice,
              cellPrice
            };
          }
          exports.parseProposalSetup = parseProposalSetup; // cfg_vote_setup#91 normal_params:^ConfigProposalSetup critical_params:^ConfigProposalSetup = ConfigVotingSetup;
          function parseVotingSetup(slice) {
            if (!slice) {
              throw new Error('Invalid config');
            }
            const magic = slice.loadUint(8);
            if (magic !== 0x91) {
              throw new Error('Invalid config');
            }
            const normalParams = parseProposalSetup(slice.loadRef().beginParse());
            const criticalParams = parseProposalSetup(slice.loadRef().beginParse());
            return {
              normalParams,
              criticalParams
            };
          }
          exports.parseVotingSetup = parseVotingSetup;
          function loadConfigParams(configBase64) {
            const comfigMap = core_1.Cell.fromBase64(configBase64).beginParse().loadDictDirect(core_1.Dictionary.Keys.Int(32), core_1.Dictionary.Values.Cell());
            return comfigMap;
          }
          function loadConfigParamById(configBase64, id) {
            return loadConfigParams(configBase64).get(id);
          }
          exports.loadConfigParamById = loadConfigParamById;
          function loadConfigParamsAsSlice(configBase64) {
            const pramsAsCells = loadConfigParams(configBase64);
            const params = new Map();
            for (const [key, value] of pramsAsCells) {
              params.set(key, value.beginParse());
            }
            return params;
          }
          exports.loadConfigParamsAsSlice = loadConfigParamsAsSlice;
          function parseFullConfig(configs) {
            return {
              configAddress: configParseMasterAddressRequired(configs.get(0)),
              electorAddress: configParseMasterAddressRequired(configs.get(1)),
              minterAddress: configParseMasterAddress(configs.get(2)),
              feeCollectorAddress: configParseMasterAddress(configs.get(3)),
              dnsRootAddress: configParseMasterAddress(configs.get(4)),
              burningConfig: configParse5(configs.get(5)),
              globalVersion: configParse8(configs.get(8)),
              workchains: configParse12(configs.get(12)),
              voting: parseVotingSetup(configs.get(11)),
              validators: {
                ...configParse15(configs.get(15)),
                ...configParse16(configs.get(16)),
                ...configParse17(configs.get(17))
              },
              storagePrices: configParse18(configs.get(18)),
              gasPrices: {
                masterchain: configParseGasLimitsPrices(configs.get(20)),
                workchain: configParseGasLimitsPrices(configs.get(21))
              },
              msgPrices: {
                masterchain: configParseMsgPrices(configs.get(24)),
                workchain: configParseMsgPrices(configs.get(25))
              },
              validatorSets: {
                prevValidators: configParseValidatorSet(configs.get(32)),
                prevTempValidators: configParseValidatorSet(configs.get(33)),
                currentValidators: configParseValidatorSet(configs.get(34)),
                currentTempValidators: configParseValidatorSet(configs.get(35)),
                nextValidators: configParseValidatorSet(configs.get(36)),
                nextTempValidators: configParseValidatorSet(configs.get(37))
              },
              validatorsPunish: configParse40(configs.get(40)),
              bridges: {
                ethereum: configParseBridge(configs.get(71)),
                binance: configParseBridge(configs.get(72)),
                polygon: configParseBridge(configs.get(73))
              },
              catchain: configParse28(configs.get(28)),
              consensus: configParse29(configs.get(29)) // TODO: mint_new_price:Grams mint_add_price:Grams = ConfigParam 6;
              // TODO: to_mint:ExtraCurrencyCollection = ConfigParam 7
              // TODO: mandatory_params:(Hashmap 32 True) = ConfigParam 9
              // TODO: critical_params:(Hashmap 32 True) = ConfigParam 10
              // TODO: BlockCreateFees = ConfigParam 14
            };
          }
          exports.parseFullConfig = parseFullConfig; /***/
        },
        /***/7567: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"];
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ElectorContract = void 0;
          const core_1 = __webpack_require__(6900);
          const FrozenDictValue = {
            serialize(src, builder) {
              throw Error("not implemented");
            },
            parse(src) {
              const address = new core_1.Address(-1, src.loadBuffer(32));
              const weight = src.loadUintBig(64);
              const stake = src.loadCoins();
              return {
                address,
                weight,
                stake
              };
            }
          };
          const EntitiesDictValue = {
            serialize(src, builder) {
              throw Error("not implemented");
            },
            parse(src) {
              const stake = src.loadCoins(); // skip time and maxFactor
              src.skip(64);
              const address = new core_1.Address(-1, src.loadBuffer(32));
              const adnl = src.loadBuffer(32);
              return {
                stake,
                address,
                adnl
              };
            }
          };
          class ElectorContract {
            constructor() {
              // Please note that we are NOT loading address from config to avoid mistake and send validator money to a wrong contract
              this.address = core_1.Address.parseRaw('-1:3333333333333333333333333333333333333333333333333333333333333333');
            } //readonly source: ContractSource = new UnknownContractSource('org.ton.elector', -1, 'Elector Contract');
            static create() {
              return new ElectorContract();
            }
            async getReturnedStake(provider, address) {
              if (address.workChain !== -1) {
                throw Error('Only masterchain addresses could have stake');
              }
              const res = await provider.get('compute_returned_stake', [{
                type: 'int',
                value: BigInt('0x' + address.hash.toString('hex'))
              }]);
              return res.stack.readBigNumber();
            }
            async getPastElectionsList(provider) {
              const res = await provider.get('past_elections_list', []);
              const electionsListRaw = new core_1.TupleReader(res.stack.readLispList());
              const elections = [];
              while (electionsListRaw.remaining > 0) {
                const electionsListEntry = electionsListRaw.readTuple();
                const id = electionsListEntry.readNumber();
                const unfreezeAt = electionsListEntry.readNumber();
                electionsListEntry.pop(); // Ignore vset_hash
                const stakeHeld = electionsListEntry.readNumber();
                elections.push({
                  id,
                  unfreezeAt,
                  stakeHeld
                });
              }
              return elections;
            }
            async getPastElections(provider) {
              const res = await provider.get('past_elections', []);
              const electionsRaw = new core_1.TupleReader(res.stack.readLispList());
              const elections = [];
              while (electionsRaw.remaining > 0) {
                const electionsEntry = electionsRaw.readTuple();
                const id = electionsEntry.readNumber();
                const unfreezeAt = electionsEntry.readNumber();
                const stakeHeld = electionsEntry.readNumber();
                electionsEntry.pop(); // Ignore vset_hash
                const frozenDict = electionsEntry.readCell();
                const totalStake = electionsEntry.readBigNumber();
                const bonuses = electionsEntry.readBigNumber();
                let frozen = new Map();
                const frozenData = frozenDict.beginParse().loadDictDirect(core_1.Dictionary.Keys.Buffer(32), FrozenDictValue);
                for (const [key, value] of frozenData) {
                  frozen.set(BigInt("0x" + key.toString("hex")).toString(10), {
                    address: value["address"],
                    weight: value["weight"],
                    stake: value["stake"]
                  });
                }
                elections.push({
                  id,
                  unfreezeAt,
                  stakeHeld,
                  totalStake,
                  bonuses,
                  frozen
                });
              }
              return elections;
            }
            async getElectionEntities(provider) {
              //
              // NOTE: this method doesn't call get method since for some reason it doesn't work
              //
              const account = await provider.getState();
              if (account.state.type !== 'active') {
                throw Error('Unexpected error');
              }
              const cell = core_1.Cell.fromBoc(account.state.data)[0];
              const cs = cell.beginParse();
              if (!cs.loadBit()) {
                return null;
              } // (es~load_uint(32), es~load_uint(32), es~load_grams(), es~load_grams(), es~load_dict(), es~load_int(1), es~load_int(1));
              const sc = cs.loadRef().beginParse();
              const startWorkTime = sc.loadUint(32);
              const endElectionsTime = sc.loadUint(32);
              const minStake = sc.loadCoins();
              const allStakes = sc.loadCoins(); // var (stake, time, max_factor, addr, adnl_addr) = (cs~load_grams(), cs~load_uint(32), cs~load_uint(32), cs~load_uint(256), cs~load_uint(256));
              const entitiesData = sc.loadDict(core_1.Dictionary.Keys.Buffer(32), EntitiesDictValue);
              let entities = []; // const failed = sc.loadBit();
              // const finished = sc.loadBit();
              if (entitiesData) {
                for (const [key, value] of entitiesData) {
                  entities.push({
                    pubkey: key,
                    stake: value["stake"],
                    address: value["address"],
                    adnl: value["adnl"]
                  });
                }
              }
              return {
                minStake,
                allStakes,
                endElectionsTime,
                startWorkTime,
                entities
              };
            } // possible code for fetching data via get method if it is possible to set gas limit by request
            // async getElectionEntities(block: number) {
            //     const res = await this.client.runMethod(block, this.address, 'participant_list_extended');
            //     if (res.exitCode !== 0 && res.exitCode !== 1) {
            //         throw Error('Exit code: ' + res.exitCode);
            //     }
            //     let tuple = new TupleReader(res.result);
            //     const startWorkTime = tuple.readNumber();
            //     const endElectionsTime = tuple.readNumber();
            //     const minStake = tuple.readBigNumber();
            //     const allStakes = tuple.readBigNumber();
            //     let entriesTuple = tuple.readTuple();
            //     const entriesRaw = new TupleReader(entriesTuple.readLispList());
            //     let entities: { pubkey: Buffer, stake: bigint, address: Address, adnl: Buffer }[] = [];
            //     while (entriesRaw.remaining > 0) {
            //         const electionsEntry = entriesRaw.readTuple();
            //         const pubkey = electionsEntry.readBuffer();
            //         const stake = electionsEntry.readBigNumber();
            //         const address = electionsEntry.readAddress();
            //         const adnl = electionsEntry.readBuffer();
            //         entities.push({ pubkey, stake, address, adnl });
            //     }
            //     return { minStake, allStakes, endElectionsTime, startWorkTime, entities };
            // }
            async getActiveElectionId(provider) {
              const res = await provider.get('active_election_id', []);
              const electionId = res.stack.readNumber();
              return electionId > 0 ? electionId : null;
            }
            async getComplaints(provider, electionId) {
              const b = new core_1.TupleBuilder();
              b.writeNumber(electionId);
              const res = await provider.get('list_complaints', b.build());
              if (res.stack.peek().type === 'null') {
                return [];
              } //let tuple = new TupleReader(res.result);
              const complaintsRaw = new core_1.TupleReader(res.stack.readLispList());
              const results = [];
              while (complaintsRaw.remaining > 0) {
                const complaintsEntry = complaintsRaw.readTuple();
                const id = complaintsEntry.readBigNumber();
                const completeUnpackedComplaint = complaintsEntry.readTuple();
                const unpackedComplaints = completeUnpackedComplaint.readTuple();
                const publicKey = Buffer.from(unpackedComplaints.readBigNumber().toString(16), 'hex'); // prod_info#34 utime:uint32 mc_blk_ref:ExtBlkRef state_proof:^(MERKLE_PROOF Block)
                // prod_proof:^(MERKLE_PROOF ShardState) = ProducerInfo;
                // no_blk_gen from_utime:uint32 prod_info:^ProducerInfo = ComplaintDescr;
                // no_blk_gen_diff prod_info_old:^ProducerInfo prod_info_new:^ProducerInfo = ComplaintDescr;
                const description = unpackedComplaints.readCell();
                const createdAt = unpackedComplaints.readNumber();
                const severity = unpackedComplaints.readNumber();
                const rewardAddress = new core_1.Address(-1, Buffer.from(unpackedComplaints.readBigNumber().toString(16), 'hex'));
                const paid = unpackedComplaints.readBigNumber();
                const suggestedFine = unpackedComplaints.readBigNumber();
                const suggestedFinePart = unpackedComplaints.readBigNumber();
                const votes = [];
                const votersListRaw = new core_1.TupleReader(completeUnpackedComplaint.readLispList());
                while (votersListRaw.remaining > 0) {
                  votes.push(votersListRaw.readNumber());
                }
                const vsetId = completeUnpackedComplaint.readBigNumber();
                const remainingWeight = completeUnpackedComplaint.readBigNumber();
                results.push({
                  id,
                  publicKey,
                  createdAt,
                  severity,
                  paid,
                  suggestedFine,
                  suggestedFinePart,
                  rewardAddress,
                  votes,
                  remainingWeight,
                  vsetId
                });
              }
              return results;
            }
          }
          exports.ElectorContract = ElectorContract; /***/
        },
        /***/6330: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              }
            });
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          });
          var __exportStar = this && this.__exportStar || function (m, exports) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.computeStorageFees = exports.computeMessageForwardFees = exports.computeGasPrices = exports.computeFwdFees = exports.computeExternalMessageFees = exports.loadConfigParamsAsSlice = exports.loadConfigParamById = exports.parseFullConfig = exports.parseVotingSetup = exports.parseValidatorSet = exports.parseProposalSetup = exports.parseBridge = exports.configParseWorkchainDescriptor = exports.configParseValidatorSet = exports.configParseMsgPrices = exports.configParseMasterAddressRequired = exports.configParseMasterAddress = exports.configParseGasLimitsPrices = exports.configParseBridge = exports.configParse40 = exports.configParse29 = exports.configParse28 = exports.configParse18 = exports.configParse17 = exports.configParse16 = exports.configParse15 = exports.configParse13 = exports.configParse12 = exports.configParse8 = exports.configParse5 = exports.ElectorContract = exports.MultisigWallet = exports.MultisigOrderBuilder = exports.MultisigOrder = exports.JettonWallet = exports.JettonMaster = exports.WalletContractV4 = exports.WalletContractV3R2 = exports.WalletContractV3R1 = exports.WalletContractV2R2 = exports.WalletContractV2R1 = exports.WalletContractV1R3 = exports.WalletContractV1R2 = exports.WalletContractV1R1 = exports.TonClient4 = exports.TonClient = exports.HttpApi = void 0;
          __exportStar(__webpack_require__(6900), exports); //
          // toncenter Client
          //
          var HttpApi_1 = __webpack_require__(8723);
          Object.defineProperty(exports, "HttpApi", {
            enumerable: true,
            get: function () {
              return HttpApi_1.HttpApi;
            }
          });
          var TonClient_1 = __webpack_require__(5562);
          Object.defineProperty(exports, "TonClient", {
            enumerable: true,
            get: function () {
              return TonClient_1.TonClient;
            }
          }); //
          // API V4 Client
          //
          var TonClient4_1 = __webpack_require__(6380);
          Object.defineProperty(exports, "TonClient4", {
            enumerable: true,
            get: function () {
              return TonClient4_1.TonClient4;
            }
          }); //
          // Wallets
          //
          var WalletContractV1R1_1 = __webpack_require__(3800);
          Object.defineProperty(exports, "WalletContractV1R1", {
            enumerable: true,
            get: function () {
              return WalletContractV1R1_1.WalletContractV1R1;
            }
          });
          var WalletContractV1R2_1 = __webpack_require__(2545);
          Object.defineProperty(exports, "WalletContractV1R2", {
            enumerable: true,
            get: function () {
              return WalletContractV1R2_1.WalletContractV1R2;
            }
          });
          var WalletContractV1R3_1 = __webpack_require__(1618);
          Object.defineProperty(exports, "WalletContractV1R3", {
            enumerable: true,
            get: function () {
              return WalletContractV1R3_1.WalletContractV1R3;
            }
          });
          var WalletContractV2R1_1 = __webpack_require__(4389);
          Object.defineProperty(exports, "WalletContractV2R1", {
            enumerable: true,
            get: function () {
              return WalletContractV2R1_1.WalletContractV2R1;
            }
          });
          var WalletContractV2R2_1 = __webpack_require__(8300);
          Object.defineProperty(exports, "WalletContractV2R2", {
            enumerable: true,
            get: function () {
              return WalletContractV2R2_1.WalletContractV2R2;
            }
          });
          var WalletContractV3R1_1 = __webpack_require__(2874);
          Object.defineProperty(exports, "WalletContractV3R1", {
            enumerable: true,
            get: function () {
              return WalletContractV3R1_1.WalletContractV3R1;
            }
          });
          var WalletContractV3R2_1 = __webpack_require__(6599);
          Object.defineProperty(exports, "WalletContractV3R2", {
            enumerable: true,
            get: function () {
              return WalletContractV3R2_1.WalletContractV3R2;
            }
          });
          var WalletContractV4_1 = __webpack_require__(650);
          Object.defineProperty(exports, "WalletContractV4", {
            enumerable: true,
            get: function () {
              return WalletContractV4_1.WalletContractV4;
            }
          }); //
          // Jettons
          //
          var JettonMaster_1 = __webpack_require__(7849);
          Object.defineProperty(exports, "JettonMaster", {
            enumerable: true,
            get: function () {
              return JettonMaster_1.JettonMaster;
            }
          });
          var JettonWallet_1 = __webpack_require__(6414);
          Object.defineProperty(exports, "JettonWallet", {
            enumerable: true,
            get: function () {
              return JettonWallet_1.JettonWallet;
            }
          }); //
          // Multisig
          //
          var MultisigOrder_1 = __webpack_require__(6187);
          Object.defineProperty(exports, "MultisigOrder", {
            enumerable: true,
            get: function () {
              return MultisigOrder_1.MultisigOrder;
            }
          });
          var MultisigOrderBuilder_1 = __webpack_require__(64);
          Object.defineProperty(exports, "MultisigOrderBuilder", {
            enumerable: true,
            get: function () {
              return MultisigOrderBuilder_1.MultisigOrderBuilder;
            }
          });
          var MultisigWallet_1 = __webpack_require__(9754);
          Object.defineProperty(exports, "MultisigWallet", {
            enumerable: true,
            get: function () {
              return MultisigWallet_1.MultisigWallet;
            }
          }); //
          // Elector
          //
          var ElectorContract_1 = __webpack_require__(7567);
          Object.defineProperty(exports, "ElectorContract", {
            enumerable: true,
            get: function () {
              return ElectorContract_1.ElectorContract;
            }
          }); //
          // Config
          //
          var ConfigParser_1 = __webpack_require__(6440);
          Object.defineProperty(exports, "configParse5", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse5;
            }
          });
          Object.defineProperty(exports, "configParse8", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse8;
            }
          });
          Object.defineProperty(exports, "configParse12", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse12;
            }
          });
          Object.defineProperty(exports, "configParse13", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse13;
            }
          });
          Object.defineProperty(exports, "configParse15", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse15;
            }
          });
          Object.defineProperty(exports, "configParse16", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse16;
            }
          });
          Object.defineProperty(exports, "configParse17", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse17;
            }
          });
          Object.defineProperty(exports, "configParse18", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse18;
            }
          });
          Object.defineProperty(exports, "configParse28", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse28;
            }
          });
          Object.defineProperty(exports, "configParse29", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse29;
            }
          });
          Object.defineProperty(exports, "configParse40", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParse40;
            }
          });
          Object.defineProperty(exports, "configParseBridge", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParseBridge;
            }
          });
          Object.defineProperty(exports, "configParseGasLimitsPrices", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParseGasLimitsPrices;
            }
          });
          Object.defineProperty(exports, "configParseMasterAddress", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParseMasterAddress;
            }
          });
          Object.defineProperty(exports, "configParseMasterAddressRequired", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParseMasterAddressRequired;
            }
          });
          Object.defineProperty(exports, "configParseMsgPrices", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParseMsgPrices;
            }
          });
          Object.defineProperty(exports, "configParseValidatorSet", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParseValidatorSet;
            }
          });
          Object.defineProperty(exports, "configParseWorkchainDescriptor", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.configParseWorkchainDescriptor;
            }
          });
          Object.defineProperty(exports, "parseBridge", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.parseBridge;
            }
          });
          Object.defineProperty(exports, "parseProposalSetup", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.parseProposalSetup;
            }
          });
          Object.defineProperty(exports, "parseValidatorSet", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.parseValidatorSet;
            }
          });
          Object.defineProperty(exports, "parseVotingSetup", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.parseVotingSetup;
            }
          });
          Object.defineProperty(exports, "parseFullConfig", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.parseFullConfig;
            }
          });
          Object.defineProperty(exports, "loadConfigParamById", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.loadConfigParamById;
            }
          });
          Object.defineProperty(exports, "loadConfigParamsAsSlice", {
            enumerable: true,
            get: function () {
              return ConfigParser_1.loadConfigParamsAsSlice;
            }
          }); //
          // Fees
          //
          var fees_1 = __webpack_require__(8035);
          Object.defineProperty(exports, "computeExternalMessageFees", {
            enumerable: true,
            get: function () {
              return fees_1.computeExternalMessageFees;
            }
          });
          Object.defineProperty(exports, "computeFwdFees", {
            enumerable: true,
            get: function () {
              return fees_1.computeFwdFees;
            }
          });
          Object.defineProperty(exports, "computeGasPrices", {
            enumerable: true,
            get: function () {
              return fees_1.computeGasPrices;
            }
          });
          Object.defineProperty(exports, "computeMessageForwardFees", {
            enumerable: true,
            get: function () {
              return fees_1.computeMessageForwardFees;
            }
          });
          Object.defineProperty(exports, "computeStorageFees", {
            enumerable: true,
            get: function () {
              return fees_1.computeStorageFees;
            }
          }); /***/
        },
        /***/7849: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.JettonMaster = void 0;
          const core_1 = __webpack_require__(6900);
          class JettonMaster {
            constructor(address) {
              this.address = address;
            }
            static create(address) {
              return new JettonMaster(address);
            }
            async getWalletAddress(provider, owner) {
              let res = await provider.get('get_wallet_address', [{
                type: 'slice',
                cell: (0, core_1.beginCell)().storeAddress(owner).endCell()
              }]);
              return res.stack.readAddress();
            }
            async getJettonData(provider) {
              let res = await provider.get('get_jetton_data', []);
              let totalSupply = res.stack.readBigNumber();
              let mintable = res.stack.readBoolean();
              let adminAddress = res.stack.readAddress();
              let content = res.stack.readCell();
              let walletCode = res.stack.readCell();
              return {
                totalSupply,
                mintable,
                adminAddress,
                content,
                walletCode
              };
            }
          }
          exports.JettonMaster = JettonMaster; /***/
        },
        /***/6414: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.JettonWallet = void 0;
          class JettonWallet {
            constructor(address) {
              this.address = address;
            }
            static create(address) {
              return new JettonWallet(address);
            }
            async getBalance(provider) {
              let state = await provider.getState();
              if (state.state.type !== 'active') {
                return 0n;
              }
              let res = await provider.get('get_wallet_data', []);
              return res.stack.readBigNumber();
            }
          }
          exports.JettonWallet = JettonWallet; /***/
        },
        /***/6187: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* Made by @Gusarich and @Miandic */Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.MultisigOrder = void 0;
          const crypto_1 = __webpack_require__(3022);
          const core_1 = __webpack_require__(6900);
          class MultisigOrder {
            constructor(payload) {
              this.signatures = {};
              this.payload = payload;
            }
            static fromCell(cell) {
              let s = cell.beginParse();
              let signatures = s.loadMaybeRef()?.beginParse();
              const messagesCell = s.asCell();
              let order = new MultisigOrder(messagesCell);
              if (signatures) {
                while (signatures.remainingBits > 0) {
                  const signature = signatures.loadBuffer(64);
                  const ownerId = signatures.loadUint(8);
                  order.signatures[ownerId] = signature;
                  if (signatures.remainingRefs > 0) {
                    signatures = signatures.loadRef().asSlice();
                  } else {
                    signatures.skip(1);
                  }
                }
                signatures.endParse();
              }
              return order;
            }
            static fromPayload(payload) {
              return new MultisigOrder(payload);
            }
            addSignature(ownerId, signature, multisig) {
              const signingHash = this.payload.hash();
              if (!(0, crypto_1.signVerify)(signingHash, signature, multisig.owners.get(ownerId).slice(0, -1))) {
                throw Error('invalid signature');
              }
              this.signatures[ownerId] = signature;
            }
            sign(ownerId, secretKey) {
              const signingHash = this.payload.hash();
              this.signatures[ownerId] = (0, crypto_1.sign)(signingHash, secretKey);
              return signingHash;
            }
            unionSignatures(other) {
              this.signatures = Object.assign({}, this.signatures, other.signatures);
            }
            clearSignatures() {
              this.signatures = {};
            }
            toCell(ownerId) {
              let b = (0, core_1.beginCell)().storeBit(0);
              for (const ownerId in this.signatures) {
                const signature = this.signatures[ownerId];
                b = (0, core_1.beginCell)().storeBit(1).storeRef((0, core_1.beginCell)().storeBuffer(signature).storeUint(parseInt(ownerId), 8).storeBuilder(b).endCell());
              }
              return (0, core_1.beginCell)().storeUint(ownerId, 8).storeBuilder(b).storeBuilder(this.payload.asBuilder()).endCell();
            }
          }
          exports.MultisigOrder = MultisigOrder; /***/
        },
        /***/64: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* Made by @Gusarich and @Miandic */Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.MultisigOrderBuilder = void 0;
          const core_1 = __webpack_require__(6900);
          const MultisigOrder_1 = __webpack_require__(6187);
          class MultisigOrderBuilder {
            constructor(walletId, offset) {
              this.messages = (0, core_1.beginCell)();
              this.queryId = 0n;
              this.walletId = walletId;
              this.queryOffset = offset || 7200;
            }
            addMessage(message, mode) {
              if (this.messages.refs >= 4) {
                throw Error('only 4 refs are allowed');
              }
              this.updateQueryId();
              this.messages.storeUint(mode, 8);
              this.messages.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(message)).endCell());
            }
            clearMessages() {
              this.messages = (0, core_1.beginCell)();
            }
            build() {
              return MultisigOrder_1.MultisigOrder.fromPayload((0, core_1.beginCell)().storeUint(this.walletId, 32).storeUint(this.queryId, 64).storeBuilder(this.messages).endCell());
            }
            updateQueryId() {
              const time = BigInt(Math.floor(Date.now() / 1000 + this.queryOffset));
              this.queryId = time << 32n;
            }
          }
          exports.MultisigOrderBuilder = MultisigOrderBuilder; /***/
        },
        /***/9754: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /* Made by @Gusarich and @Miandic */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.MultisigWallet = void 0;
          const crypto_1 = __webpack_require__(3022);
          const core_1 = __webpack_require__(6900);
          const MULTISIG_CODE = core_1.Cell.fromBase64('te6ccgECKwEABBgAART/APSkE/S88sgLAQIBIAIDAgFIBAUE2vIgxwCOgzDbPOCDCNcYIPkBAdMH2zwiwAAToVNxePQOb6Hyn9s8VBq6+RDyoAb0BCD5AQHTH1EYuvKq0z9wUwHwCgHCCAGDCryx8mhTFYBA9A5voSCYDqQgwgryZw7f+COqH1NAufJhVCOjU04gIyEiAgLMBgcCASAMDQIBIAgJAgFmCgsAA9GEAiPymAvHoHN9CYbZ5S7Z4BPHohwhJQAtAKkItdJEqCTItdKlwLUAdAT8ArobBKAATwhbpEx4CBukTDgAdAg10rDAJrUAvALyFjPFszJ4HHXI8gBzxb0AMmACASAODwIBIBQVARW77ZbVA0cFUg2zyCoCAUgQEQIBIBITAXOxHXQgwjXGCD5AQHTB4IB1MTtQ9hTIHj0Dm+h8p/XC/9eMfkQ8qCuAfQEIW6TW3Ey4PkBWNs8AaQBgJwA9rtqA6ADoAPoCAXoCEfyAgPyA3XlP+AXkegAA54tkwAAXrhlXP8EA1WZ2oexAAgEgFhcCASAYGQFRtyVbZ4YmRmpGEAgegc30McJNhFpAADMaYeYuAFrgJhwLb+4cC3d0bhAjAYm1WZtnhqvgb+2xxsoicAgej430pBHEoFpAADHDhBACGuQkuuBk9kUWE5kAOeLKhACQCB6IYFImHFImHFImXEA2YlzNijAjAgEgGhsAF7UGtc4QQDVZnah7EAIBIBwdAgOZOB4fARGsGm2eL4G2CUAjABWt+UEAzJV2oewYQAENqTbPBVfBYCMAFa3f3CCAarM7UPYgAiDbPALyZfgAUENxQxPbPO1UIyoACtP/0wcwBKDbPC+uUyCw8mISsQKkJbNTHLmwJYEA4aojoCi8sPJpggGGoPgBBZcCERACPj4wjo0REB/bPEDXePRDEL0F4lQWW1Rz51YQU9zbPFRxClR6vCQlKCYAIO1E0NMf0wfTB9M/9AT0BNEAXgGOGjDSAAHyo9MH0wdQA9cBIPkBBfkBFbrypFAD4GwhIddKqgIi10m68qtwVCATAAwByMv/ywcE1ts87VT4D3AlblOJvrGYEG4QLVDHXwePGzBUJANQTds8UFWgRlAQSRA6SwlTuds8UFQWf+L4AAeDJaGOLCaAQPSWb6UglDBTA7neII4WODk5CNIAAZfTBzAW8AcFkTDifwgHBZJsMeKz5jAGKicoKQBgcI4pA9CDCNcY0wf0BDBTFnj0Dm+h8qXXC/9URUT5EPKmrlIgsVIDvRShI27mbCIyAH5SML6OIF8D+ACTItdKmALTB9QC+wAC6DJwyMoAQBSAQPRDAvAHjhdxyMsAFMsHEssHWM8BWM8WQBOAQPRDAeIBII6KEEUQNEMA2zztVJJfBuIqABzIyx/LB8sHyz/0APQAyQ==');
          class MultisigWallet {
            constructor(publicKeys, workchain, walletId, k, opts) {
              this.provider = null;
              this.owners = core_1.Dictionary.empty();
              this.workchain = workchain;
              this.walletId = walletId;
              this.k = k;
              for (let i = 0; i < publicKeys.length; i += 1) {
                this.owners.set(i, Buffer.concat([publicKeys[i], Buffer.alloc(1)]));
              }
              this.init = {
                code: MULTISIG_CODE,
                data: (0, core_1.beginCell)().storeUint(this.walletId, 32).storeUint(this.owners.size, 8).storeUint(this.k, 8).storeUint(0, 64).storeDict(this.owners, core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33)).storeBit(0).endCell()
              };
              this.address = opts?.address || (0, core_1.contractAddress)(workchain, this.init);
              if (opts?.provider) {
                this.provider = opts.provider;
              } else if (opts?.client) {
                this.provider = opts.client.provider(this.address, {
                  code: this.init.code,
                  data: this.init.data
                });
              }
            }
            static async fromAddress(address, opts) {
              let provider;
              if (opts.provider) {
                provider = opts.provider;
              } else {
                if (!opts.client) {
                  throw Error('Either provider or client must be specified');
                }
                provider = opts.client.provider(address, {
                  code: null,
                  data: null
                });
              }
              const contractState = (await provider.getState()).state;
              if (contractState.type !== 'active') {
                throw Error('Contract must be active');
              }
              const data = core_1.Cell.fromBoc(contractState.data)[0].beginParse();
              const walletId = data.loadUint(32);
              data.skip(8);
              const k = data.loadUint(8);
              data.skip(64);
              const owners = data.loadDict(core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33));
              let publicKeys = [];
              for (const [key, value] of owners) {
                const publicKey = value.subarray(0, 32);
                publicKeys.push(publicKey);
              }
              return new MultisigWallet(publicKeys, address.workChain, walletId, k, {
                address,
                provider,
                client: opts.client
              });
            }
            async deployExternal(provider) {
              if (!provider && !this.provider) {
                throw Error('you must specify provider if there is no such property in MultisigWallet instance');
              }
              if (!provider) {
                provider = this.provider;
              }
              await provider.external(core_1.Cell.EMPTY);
            }
            async deployInternal(sender, value) {
              if (value === void 0) {
                value = 1000000000n;
              }
              await sender.send({
                sendMode: 3,
                to: this.address,
                value: value,
                init: this.init,
                body: core_1.Cell.EMPTY,
                bounce: true
              });
            }
            async sendOrder(order, secretKey, provider) {
              if (!provider && !this.provider) {
                throw Error('you must specify provider if there is no such property in MultisigWallet instance');
              }
              if (!provider) {
                provider = this.provider;
              }
              let publicKey = (0, crypto_1.keyPairFromSecretKey)(secretKey).publicKey;
              let ownerId = this.getOwnerIdByPubkey(publicKey);
              let cell = order.toCell(ownerId);
              let signature = (0, crypto_1.sign)(cell.hash(), secretKey);
              cell = (0, core_1.beginCell)().storeBuffer(signature).storeSlice(cell.asSlice()).endCell();
              await provider.external(cell);
            }
            async sendOrderWithoutSecretKey(order, signature, ownerId, provider) {
              if (!provider && !this.provider) {
                throw Error('you must specify provider if there is no such property in MultisigWallet instance');
              }
              if (!provider) {
                provider = this.provider;
              }
              let cell = order.toCell(ownerId);
              cell = (0, core_1.beginCell)().storeBuffer(signature).storeSlice(cell.asSlice()).endCell();
              await provider.external(cell);
            }
            getOwnerIdByPubkey(publicKey) {
              for (const [key, value] of this.owners) {
                if (value.subarray(0, 32).equals(publicKey)) {
                  return key;
                }
              }
              throw Error('public key is not an owner');
            }
          }
          exports.MultisigWallet = MultisigWallet; /***/
        },
        /***/8035: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.computeMessageForwardFees = exports.computeExternalMessageFees = exports.computeGasPrices = exports.computeFwdFees = exports.computeStorageFees = void 0;
          const core_1 = __webpack_require__(6900); //
          // Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L425
          //
          function computeStorageFees(data) {
            const {
              lastPaid,
              now,
              storagePrices,
              storageStat,
              special,
              masterchain
            } = data;
            if (now <= lastPaid || storagePrices.length === 0 || now < storagePrices[0].utime_since || special) {
              return BigInt(0);
            }
            let upto = Math.max(lastPaid, storagePrices[0].utime_since);
            let total = BigInt(0);
            for (let i = 0; i < storagePrices.length && upto < now; i++) {
              let valid_until = i < storagePrices.length - 1 ? Math.min(now, storagePrices[i + 1].utime_since) : now;
              let payment = BigInt(0);
              if (upto < valid_until) {
                let delta = valid_until - upto;
                payment += BigInt(storageStat.cells) * (masterchain ? storagePrices[i].mc_cell_price_ps : storagePrices[i].cell_price_ps);
                payment += BigInt(storageStat.bits) * (masterchain ? storagePrices[i].mc_bit_price_ps : storagePrices[i].bit_price_ps);
                payment = payment * BigInt(delta);
              }
              upto = valid_until;
              total += payment;
            }
            return shr16ceil(total);
          }
          exports.computeStorageFees = computeStorageFees; //
          // Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L1218
          //
          function computeFwdFees(msgPrices, cells, bits) {
            return msgPrices.lumpPrice + shr16ceil(msgPrices.bitPrice * bits + msgPrices.cellPrice * cells);
          }
          exports.computeFwdFees = computeFwdFees; //
          // Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L761
          //
          function computeGasPrices(gasUsed, prices) {
            if (gasUsed <= prices.flatLimit) {
              return prices.flatPrice;
            } else {
              //  td::rshift(gas_price256 * (gas_used - cfg.flat_gas_limit), 16, 1) + cfg.flat_gas_price
              return prices.flatPrice + (prices.price * (gasUsed - prices.flatLimit) >> 16n);
            }
          }
          exports.computeGasPrices = computeGasPrices; //
          // Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L530
          //
          function computeExternalMessageFees(msgPrices, cell) {
            // Collect stats
            let storageStats = collectCellStats(cell);
            storageStats.bits -= cell.bits.length;
            storageStats.cells -= 1;
            return computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));
          }
          exports.computeExternalMessageFees = computeExternalMessageFees;
          function computeMessageForwardFees(msgPrices, cell) {
            let msg = (0, core_1.loadMessageRelaxed)(cell.beginParse());
            let storageStats = {
              bits: 0,
              cells: 0
            }; // Init
            if (msg.init) {
              const rawBuilder = new core_1.Cell().asBuilder();
              (0, core_1.storeStateInit)(msg.init)(rawBuilder);
              const raw = rawBuilder.endCell();
              let c = collectCellStats(raw);
              c.bits -= raw.bits.length;
              c.cells -= 1;
              storageStats.bits += c.bits;
              storageStats.cells += c.cells;
            } // Body
            let bc = collectCellStats(msg.body);
            bc.bits -= msg.body.bits.length;
            bc.cells -= 1;
            storageStats.bits += bc.bits;
            storageStats.cells += bc.cells; // NOTE: Extra currencies are ignored for now
            let fees = computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));
            let res = fees * BigInt(msgPrices.firstFrac) >> 16n;
            let remaining = fees - res;
            return {
              fees: res,
              remaining
            };
          }
          exports.computeMessageForwardFees = computeMessageForwardFees;
          function collectCellStats(cell) {
            let bits = cell.bits.length;
            let cells = 1;
            for (let ref of cell.refs) {
              let r = collectCellStats(ref);
              cells += r.cells;
              bits += r.bits;
            }
            return {
              bits,
              cells
            };
          }
          function shr16ceil(src) {
            let rem = src % 65536n;
            let res = src >> 16n;
            if (rem !== 0n) {
              res += 1n;
            }
            return res;
          } /***/
        },
        /***/2819: /***/function (__unused_webpack_module, exports) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.toUrlSafe = void 0;
          function toUrlSafe(src) {
            while (src.indexOf('/') >= 0) {
              src = src.replace('/', '_');
            }
            while (src.indexOf('+') >= 0) {
              src = src.replace('+', '-');
            }
            while (src.indexOf('=') >= 0) {
              src = src.replace('=', '');
            }
            return src;
          }
          exports.toUrlSafe = toUrlSafe; /***/
        },
        /***/3800: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV1R1 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV1R1 {
            constructor(workchain, publicKey) {
              this.workchain = workchain;
              this.publicKey = publicKey; // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEARAAAhP8AIN2k8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVEH98Ik=', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeBuffer(publicKey).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV1R1(args.workchain, args.publicKey);
            } /**
              * Get Wallet Balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                return core_1.Cell.fromBoc(state.state.data)[0].beginParse().loadUint(32);
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create signed transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV1)({
                seqno: args.seqno,
                sendMode,
                secretKey: args.secretKey,
                message: args.message
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    message: (0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV1R1 = WalletContractV1R1; /***/
        },
        /***/2545: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV1R2 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV1R2 {
            constructor(workchain, publicKey) {
              this.workchain = workchain;
              this.publicKey = publicKey; // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAUwAAov8AIN0gggFMl7qXMO1E0NcLH+Ck8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVNDieG8=', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeBuffer(publicKey).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV1R2(args.workchain, args.publicKey);
            } /**
              * Get Wallet Balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                let res = await provider.get('seqno', []);
                return res.stack.readNumber();
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create signed transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV1)({
                seqno: args.seqno,
                sendMode,
                secretKey: args.secretKey,
                message: args.message
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    message: (0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV1R2 = WalletContractV1R2; /***/
        },
        /***/1618: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV1R3 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV1R3 {
            constructor(workchain, publicKey) {
              this.workchain = workchain;
              this.publicKey = publicKey; // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAXwAAuv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVLW4bkI=', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeBuffer(publicKey).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV1R3(args.workchain, args.publicKey);
            } /**
              * Get Wallet Balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                let res = await provider.get('seqno', []);
                return res.stack.readNumber();
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(executor, message) {
              await executor.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create signed transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV1)({
                seqno: args.seqno,
                sendMode: sendMode,
                secretKey: args.secretKey,
                message: args.message
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    message: (0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV1R3 = WalletContractV1R3; /***/
        },
        /***/4389: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV2R1 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV2R1 {
            constructor(workchain, publicKey) {
              this.workchain = workchain;
              this.publicKey = publicKey; // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAVwAAqv8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VShNwu2', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeBuffer(publicKey).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV2R1(args.workchain, args.publicKey);
            } /**
              * Get Wallet Balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                let res = await provider.get('seqno', []);
                return res.stack.readNumber();
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create signed transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV2)({
                seqno: args.seqno,
                sendMode,
                secretKey: args.secretKey,
                messages: args.messages,
                timeout: args.timeout
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    messages: [(0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })]
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV2R1 = WalletContractV2R1; /***/
        },
        /***/8300: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV2R2 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV2R2 {
            constructor(workchain, publicKey) {
              this.workchain = workchain;
              this.publicKey = publicKey; // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAYwAAwv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VQETNeh', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeBuffer(publicKey).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV2R2(args.workchain, args.publicKey);
            } /**
              * Get Wallet Balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                let res = await provider.get('seqno', []);
                return res.stack.readNumber();
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create signed transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV2)({
                seqno: args.seqno,
                sendMode,
                secretKey: args.secretKey,
                messages: args.messages,
                timeout: args.timeout
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    messages: [(0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })]
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV2R2 = WalletContractV2R2; /***/
        },
        /***/2874: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV3R1 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV3R1 {
            constructor(workchain, publicKey, walletId) {
              // Resolve parameters
              this.workchain = workchain;
              this.publicKey = publicKey;
              if (walletId !== null && walletId !== undefined) {
                this.walletId = walletId;
              } else {
                this.walletId = 698983191 + workchain;
              } // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAYgAAwP8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVD++buA=', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeUint(this.walletId, 32).storeBuffer(publicKey).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV3R1(args.workchain, args.publicKey, args.walletId);
            } /**
              * Get wallet balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                let res = await provider.get('seqno', []);
                return res.stack.readNumber();
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV3)({
                seqno: args.seqno,
                sendMode,
                secretKey: args.secretKey,
                messages: args.messages,
                timeout: args.timeout,
                walletId: this.walletId
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    messages: [(0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })]
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV3R1 = WalletContractV3R1; /***/
        },
        /***/6599: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV3R2 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV3R2 {
            constructor(workchain, publicKey, walletId) {
              // Resolve parameters
              this.workchain = workchain;
              this.publicKey = publicKey;
              if (walletId !== null && walletId !== undefined) {
                this.walletId = walletId;
              } else {
                this.walletId = 698983191 + workchain;
              } // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVBC9ba0=', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeUint(this.walletId, 32).storeBuffer(publicKey).endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV3R2(args.workchain, args.publicKey, args.walletId);
            } /**
              * Get wallet balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                let res = await provider.get('seqno', []);
                return res.stack.readNumber();
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV3)({
                seqno: args.seqno,
                sendMode,
                secretKey: args.secretKey,
                messages: args.messages,
                timeout: args.timeout,
                walletId: this.walletId
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    messages: [(0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })]
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV3R2 = WalletContractV3R2; /***/
        },
        /***/650: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; /**
                                                                                 * Copyright (c) Whales Corp.
                                                                                 * All Rights Reserved.
                                                                                 *
                                                                                 * This source code is licensed under the MIT license found in the
                                                                                 * LICENSE file in the root directory of this source tree.
                                                                                 */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.WalletContractV4 = void 0;
          const core_1 = __webpack_require__(6900);
          const createWalletTransfer_1 = __webpack_require__(5733);
          class WalletContractV4 {
            constructor(workchain, publicKey, walletId) {
              // Resolve parameters
              this.workchain = workchain;
              this.publicKey = publicKey;
              if (walletId !== null && walletId !== undefined) {
                this.walletId = walletId;
              } else {
                this.walletId = 698983191 + workchain;
              } // Build initial code and data
              let code = core_1.Cell.fromBoc(Buffer.from('te6ccgECFAEAAtQAART/APSkE/S88sgLAQIBIAIDAgFIBAUE+PKDCNcYINMf0x/THwL4I7vyZO1E0NMf0x/T//QE0VFDuvKhUVG68qIF+QFUEGT5EPKj+AAkpMjLH1JAyx9SMMv/UhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC+wDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy/8QERITAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD+kAwIPpEAcjKB8v/ydDtRNCBAUDXIfQEMFyBAQj0Cm+hMbOSXwfgBdM/yCWCEHBsdWe6kjgw4w0DghBkc3RyupJfBuMNBgcCASAICQB4AfoA9AQw+CdvIjBQCqEhvvLgUIIQcGx1Z4MesXCAGFAEywUmzxZY+gIZ9ADLaRfLH1Jgyz8gyYBA+wAGAIpQBIEBCPRZMO1E0IEBQNcgyAHPFvQAye1UAXKwjiOCEGRzdHKDHrFwgBhQBcsFUAPPFiP6AhPLassfyz/JgED7AJJfA+ICASAKCwBZvSQrb2omhAgKBrkPoCGEcNQICEekk30pkQzmkD6f+YN4EoAbeBAUiYcVnzGEAgFYDA0AEbjJftRNDXCx+AA9sp37UTQgQFA1yH0BDACyMoHy//J0AGBAQj0Cm+hMYAIBIA4PABmtznaiaEAga5Drhf/AABmvHfaiaEAQa5DrhY/AAG7SB/oA1NQi+QAFyMoHFcv/ydB3dIAYyMsFywIizxZQBfoCFMtrEszMyXP7AMhAFIEBCPRR8qcCAHCBAQjXGPoA0z/IVCBHgQEI9FHyp4IQbm90ZXB0gBjIywXLAlAGzxZQBPoCFMtqEssfyz/Jc/sAAgBsgQEI1xj6ANM/MFIkgQEI9Fnyp4IQZHN0cnB0gBjIywXLAlAFzxZQA/oCE8tqyx8Syz/Jc/sAAAr0AMntVA==', 'base64'))[0];
              let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno
              .storeUint(this.walletId, 32).storeBuffer(this.publicKey).storeBit(0) // Empty plugins dict
              .endCell();
              this.init = {
                code,
                data
              };
              this.address = (0, core_1.contractAddress)(workchain, {
                code,
                data
              });
            }
            static create(args) {
              return new WalletContractV4(args.workchain, args.publicKey, args.walletId);
            } /**
              * Get Wallet Balance
              */
            async getBalance(provider) {
              let state = await provider.getState();
              return state.balance;
            } /**
              * Get Wallet Seqno
              */
            async getSeqno(provider) {
              let state = await provider.getState();
              if (state.state.type === 'active') {
                let res = await provider.get('seqno', []);
                return res.stack.readNumber();
              } else {
                return 0;
              }
            } /**
              * Send signed transfer
              */
            async send(provider, message) {
              await provider.external(message);
            } /**
              * Sign and send transfer
              */
            async sendTransfer(provider, args) {
              let transfer = this.createTransfer(args);
              await this.send(provider, transfer);
            } /**
              * Create signed transfer
              */
            createTransfer(args) {
              let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
              if (args.sendMode !== null && args.sendMode !== undefined) {
                sendMode = args.sendMode;
              }
              return (0, createWalletTransfer_1.createWalletTransferV4)({
                seqno: args.seqno,
                sendMode,
                secretKey: args.secretKey,
                messages: args.messages,
                timeout: args.timeout,
                walletId: this.walletId
              });
            } /**
              * Create sender
              */
            sender(provider, secretKey) {
              return {
                send: async args => {
                  let seqno = await this.getSeqno(provider);
                  let transfer = this.createTransfer({
                    seqno,
                    secretKey,
                    sendMode: args.sendMode,
                    messages: [(0, core_1.internal)({
                      to: args.to,
                      value: args.value,
                      init: args.init,
                      body: args.body,
                      bounce: args.bounce
                    })]
                  });
                  await this.send(provider, transfer);
                }
              };
            }
          }
          exports.WalletContractV4 = WalletContractV4; /***/
        },
        /***/5733: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /**
          * Copyright (c) Whales Corp.
          * All Rights Reserved.
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          */
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.createWalletTransferV4 = exports.createWalletTransferV3 = exports.createWalletTransferV2 = exports.createWalletTransferV1 = void 0;
          const core_1 = __webpack_require__(6900);
          const crypto_1 = __webpack_require__(3022);
          function createWalletTransferV1(args) {
            // Create message
            let signingMessage = (0, core_1.beginCell)().storeUint(args.seqno, 32);
            if (args.message) {
              signingMessage.storeUint(args.sendMode, 8);
              signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(args.message)));
            } // Sign message
            let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey); // Body
            const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();
            return body;
          }
          exports.createWalletTransferV1 = createWalletTransferV1;
          function createWalletTransferV2(args) {
            // Check number of messages
            if (args.messages.length > 4) {
              throw Error("Maximum number of messages in a single transfer is 4");
            } // Create message
            let signingMessage = (0, core_1.beginCell)().storeUint(args.seqno, 32);
            if (args.seqno === 0) {
              for (let i = 0; i < 32; i++) {
                signingMessage.storeBit(1);
              }
            } else {
              signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32); // Default timeout: 60 seconds
            }
            for (let m of args.messages) {
              signingMessage.storeUint(args.sendMode, 8);
              signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(m)));
            } // Sign message
            let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey); // Body
            const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();
            return body;
          }
          exports.createWalletTransferV2 = createWalletTransferV2;
          function createWalletTransferV3(args) {
            // Check number of messages
            if (args.messages.length > 4) {
              throw Error("Maximum number of messages in a single transfer is 4");
            } // Create message to sign
            let signingMessage = (0, core_1.beginCell)().storeUint(args.walletId, 32);
            if (args.seqno === 0) {
              for (let i = 0; i < 32; i++) {
                signingMessage.storeBit(1);
              }
            } else {
              signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32); // Default timeout: 60 seconds
            }
            signingMessage.storeUint(args.seqno, 32);
            for (let m of args.messages) {
              signingMessage.storeUint(args.sendMode, 8);
              signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(m)));
            } // Sign message
            let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey); // Body
            const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();
            return body;
          }
          exports.createWalletTransferV3 = createWalletTransferV3;
          function createWalletTransferV4(args) {
            // Check number of messages
            if (args.messages.length > 4) {
              throw Error("Maximum number of messages in a single transfer is 4");
            }
            let signingMessage = (0, core_1.beginCell)().storeUint(args.walletId, 32);
            if (args.seqno === 0) {
              for (let i = 0; i < 32; i++) {
                signingMessage.storeBit(1);
              }
            } else {
              signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32); // Default timeout: 60 seconds
            }
            signingMessage.storeUint(args.seqno, 32);
            signingMessage.storeUint(0, 8); // Simple order
            for (let m of args.messages) {
              signingMessage.storeUint(args.sendMode, 8);
              signingMessage.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(m)));
            } // Sign message
            let signature = (0, crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey); // Body
            const body = (0, core_1.beginCell)().storeBuffer(signature).storeBuilder(signingMessage).endCell();
            return body;
          }
          exports.createWalletTransferV4 = createWalletTransferV4; /***/
        },
        /***/6660: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          module.exports = __webpack_require__(8226); /***/
        },
        /***/8427: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          var settle = __webpack_require__(6435);
          var cookies = __webpack_require__(5905);
          var buildURL = __webpack_require__(3025);
          var buildFullPath = __webpack_require__(3916);
          var parseHeaders = __webpack_require__(6135);
          var isURLSameOrigin = __webpack_require__(6923);
          var createError = __webpack_require__(1792);
          var defaults = __webpack_require__(292);
          var Cancel = __webpack_require__(9945);
          module.exports = function xhrAdapter(config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
              var requestData = config.data;
              var requestHeaders = config.headers;
              var responseType = config.responseType;
              var onCanceled;
              function done() {
                if (config.cancelToken) {
                  config.cancelToken.unsubscribe(onCanceled);
                }
                if (config.signal) {
                  config.signal.removeEventListener('abort', onCanceled);
                }
              }
              if (utils.isFormData(requestData)) {
                delete requestHeaders['Content-Type']; // Let the browser set it
              }
              var request = new XMLHttpRequest(); // HTTP basic authentication
              if (config.auth) {
                var username = config.auth.username || '';
                var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
                requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
              }
              var fullPath = buildFullPath(config.baseURL, config.url);
              request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS
              request.timeout = config.timeout;
              function onloadend() {
                if (!request) {
                  return;
                } // Prepare the response
                var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
                var response = {
                  data: responseData,
                  status: request.status,
                  statusText: request.statusText,
                  headers: responseHeaders,
                  config: config,
                  request: request
                };
                settle(function _resolve(value) {
                  resolve(value);
                  done();
                }, function _reject(err) {
                  reject(err);
                  done();
                }, response); // Clean up request
                request = null;
              }
              if ('onloadend' in request) {
                // Use onloadend if available
                request.onloadend = onloadend;
              } else {
                // Listen for ready state to emulate onloadend
                request.onreadystatechange = function handleLoad() {
                  if (!request || request.readyState !== 4) {
                    return;
                  } // The request errored out and we didn't get a response, this will be
                  // handled by onerror instead
                  // With one exception: request that using file: protocol, most browsers
                  // will return status as 0 even though it's a successful request
                  if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                    return;
                  } // readystate handler is calling before onerror or ontimeout handlers,
                  // so we should call onloadend on the next 'tick'
                  setTimeout(onloadend);
                };
              } // Handle browser request cancellation (as opposed to a manual cancellation)
              request.onabort = function handleAbort() {
                if (!request) {
                  return;
                }
                reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request
                request = null;
              }; // Handle low level network errors
              request.onerror = function handleError() {
                // Real errors are hidden from us by the browser
                // onerror should only fire if it's a network error
                reject(createError('Network Error', config, null, request)); // Clean up request
                request = null;
              }; // Handle timeout
              request.ontimeout = function handleTimeout() {
                var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
                var transitional = config.transitional || defaults.transitional;
                if (config.timeoutErrorMessage) {
                  timeoutErrorMessage = config.timeoutErrorMessage;
                }
                reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request)); // Clean up request
                request = null;
              }; // Add xsrf header
              // This is only done if running in a standard browser environment.
              // Specifically not if we're in a web worker, or react-native.
              if (utils.isStandardBrowserEnv()) {
                // Add xsrf header
                var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
                if (xsrfValue) {
                  requestHeaders[config.xsrfHeaderName] = xsrfValue;
                }
              } // Add headers to the request
              if ('setRequestHeader' in request) {
                utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                  if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                    // Remove Content-Type if data is undefined
                    delete requestHeaders[key];
                  } else {
                    // Otherwise add header to the request
                    request.setRequestHeader(key, val);
                  }
                });
              } // Add withCredentials to request if needed
              if (!utils.isUndefined(config.withCredentials)) {
                request.withCredentials = !!config.withCredentials;
              } // Add responseType to request if needed
              if (responseType && responseType !== 'json') {
                request.responseType = config.responseType;
              } // Handle progress if needed
              if (typeof config.onDownloadProgress === 'function') {
                request.addEventListener('progress', config.onDownloadProgress);
              } // Not all browsers support upload events
              if (typeof config.onUploadProgress === 'function' && request.upload) {
                request.upload.addEventListener('progress', config.onUploadProgress);
              }
              if (config.cancelToken || config.signal) {
                // Handle cancellation
                // eslint-disable-next-line func-names
                onCanceled = function (cancel) {
                  if (!request) {
                    return;
                  }
                  reject(!cancel || cancel && cancel.type ? new Cancel('canceled') : cancel);
                  request.abort();
                  request = null;
                };
                config.cancelToken && config.cancelToken.subscribe(onCanceled);
                if (config.signal) {
                  config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
                }
              }
              if (!requestData) {
                requestData = null;
              } // Send the request
              request.send(requestData);
            });
          }; /***/
        },
        /***/8226: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          var bind = __webpack_require__(5063);
          var Axios = __webpack_require__(9560);
          var mergeConfig = __webpack_require__(4816);
          var defaults = __webpack_require__(292); /**
                                                   * Create an instance of Axios
                                                   *
                                                   * @param {Object} defaultConfig The default config for the instance
                                                   * @return {Axios} A new instance of Axios
                                                   */
          function createInstance(defaultConfig) {
            var context = new Axios(defaultConfig);
            var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance
            utils.extend(instance, Axios.prototype, context); // Copy context to instance
            utils.extend(instance, context); // Factory for creating new instances
            instance.create = function create(instanceConfig) {
              return createInstance(mergeConfig(defaultConfig, instanceConfig));
            };
            return instance;
          } // Create the default instance to be exported
          var axios = createInstance(defaults); // Expose Axios class to allow class inheritance
          axios.Axios = Axios; // Expose Cancel & CancelToken
          axios.Cancel = __webpack_require__(9945);
          axios.CancelToken = __webpack_require__(5912);
          axios.isCancel = __webpack_require__(6945);
          axios.VERSION = __webpack_require__(9978).version; // Expose all/spread
          axios.all = function all(promises) {
            return Promise.all(promises);
          };
          axios.spread = __webpack_require__(8127); // Expose isAxiosError
          axios.isAxiosError = __webpack_require__(8568);
          module.exports = axios; // Allow use of default import syntax in TypeScript
          module.exports["default"] = axios; /***/
        },
        /***/9945: /***/function (module) {
          /**
          * A `Cancel` is an object that is thrown when an operation is canceled.
          *
          * @class
          * @param {string=} message The message.
          */
          function Cancel(message) {
            this.message = message;
          }
          Cancel.prototype.toString = function toString() {
            return 'Cancel' + (this.message ? ': ' + this.message : '');
          };
          Cancel.prototype.__CANCEL__ = true;
          module.exports = Cancel; /***/
        },
        /***/5912: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var Cancel = __webpack_require__(9945); /**
                                                  * A `CancelToken` is an object that can be used to request cancellation of an operation.
                                                  *
                                                  * @class
                                                  * @param {Function} executor The executor function.
                                                  */
          function CancelToken(executor) {
            if (typeof executor !== 'function') {
              throw new TypeError('executor must be a function.');
            }
            var resolvePromise;
            this.promise = new Promise(function promiseExecutor(resolve) {
              resolvePromise = resolve;
            });
            var token = this; // eslint-disable-next-line func-names
            this.promise.then(function (cancel) {
              if (!token._listeners) return;
              var i;
              var l = token._listeners.length;
              for (i = 0; i < l; i++) {
                token._listeners[i](cancel);
              }
              token._listeners = null;
            }); // eslint-disable-next-line func-names
            this.promise.then = function (onfulfilled) {
              var _resolve; // eslint-disable-next-line func-names
              var promise = new Promise(function (resolve) {
                token.subscribe(resolve);
                _resolve = resolve;
              }).then(onfulfilled);
              promise.cancel = function reject() {
                token.unsubscribe(_resolve);
              };
              return promise;
            };
            executor(function cancel(message) {
              if (token.reason) {
                // Cancellation has already been requested
                return;
              }
              token.reason = new Cancel(message);
              resolvePromise(token.reason);
            });
          } /**
            * Throws a `Cancel` if cancellation has been requested.
            */
          CancelToken.prototype.throwIfRequested = function throwIfRequested() {
            if (this.reason) {
              throw this.reason;
            }
          }; /**
             * Subscribe to the cancel signal
             */
          CancelToken.prototype.subscribe = function subscribe(listener) {
            if (this.reason) {
              listener(this.reason);
              return;
            }
            if (this._listeners) {
              this._listeners.push(listener);
            } else {
              this._listeners = [listener];
            }
          }; /**
             * Unsubscribe from the cancel signal
             */
          CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
            if (!this._listeners) {
              return;
            }
            var index = this._listeners.indexOf(listener);
            if (index !== -1) {
              this._listeners.splice(index, 1);
            }
          }; /**
             * Returns an object that contains a new `CancelToken` and a function that, when called,
             * cancels the `CancelToken`.
             */
          CancelToken.source = function source() {
            var cancel;
            var token = new CancelToken(function executor(c) {
              cancel = c;
            });
            return {
              token: token,
              cancel: cancel
            };
          };
          module.exports = CancelToken; /***/
        },
        /***/6945: /***/function (module) {
          module.exports = function isCancel(value) {
            return !!(value && value.__CANCEL__);
          }; /***/
        },
        /***/9560: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          var buildURL = __webpack_require__(3025);
          var InterceptorManager = __webpack_require__(546);
          var dispatchRequest = __webpack_require__(1617);
          var mergeConfig = __webpack_require__(4816);
          var validator = __webpack_require__(6552);
          var validators = validator.validators; /**
                                                 * Create a new instance of Axios
                                                 *
                                                 * @param {Object} instanceConfig The default config for the instance
                                                 */
          function Axios(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
              request: new InterceptorManager(),
              response: new InterceptorManager()
            };
          } /**
            * Dispatch a request
            *
            * @param {Object} config The config specific for this request (merged with this.defaults)
            */
          Axios.prototype.request = function request(configOrUrl, config) {
            /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof configOrUrl === 'string') {
              config = config || {};
              config.url = configOrUrl;
            } else {
              config = configOrUrl || {};
            }
            if (!config.url) {
              throw new Error('Provided config url is not valid');
            }
            config = mergeConfig(this.defaults, config); // Set config.method
            if (config.method) {
              config.method = config.method.toLowerCase();
            } else if (this.defaults.method) {
              config.method = this.defaults.method.toLowerCase();
            } else {
              config.method = 'get';
            }
            var transitional = config.transitional;
            if (transitional !== undefined) {
              validator.assertOptions(transitional, {
                silentJSONParsing: validators.transitional(validators.boolean),
                forcedJSONParsing: validators.transitional(validators.boolean),
                clarifyTimeoutError: validators.transitional(validators.boolean)
              }, false);
            } // filter out skipped interceptors
            var requestInterceptorChain = [];
            var synchronousRequestInterceptors = true;
            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
              if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
                return;
              }
              synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
              requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
            });
            var responseInterceptorChain = [];
            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
              responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
            });
            var promise;
            if (!synchronousRequestInterceptors) {
              var chain = [dispatchRequest, undefined];
              Array.prototype.unshift.apply(chain, requestInterceptorChain);
              chain = chain.concat(responseInterceptorChain);
              promise = Promise.resolve(config);
              while (chain.length) {
                promise = promise.then(chain.shift(), chain.shift());
              }
              return promise;
            }
            var newConfig = config;
            while (requestInterceptorChain.length) {
              var onFulfilled = requestInterceptorChain.shift();
              var onRejected = requestInterceptorChain.shift();
              try {
                newConfig = onFulfilled(newConfig);
              } catch (error) {
                onRejected(error);
                break;
              }
            }
            try {
              promise = dispatchRequest(newConfig);
            } catch (error) {
              return Promise.reject(error);
            }
            while (responseInterceptorChain.length) {
              promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
            }
            return promise;
          };
          Axios.prototype.getUri = function getUri(config) {
            if (!config.url) {
              throw new Error('Provided config url is not valid');
            }
            config = mergeConfig(this.defaults, config);
            return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
          }; // Provide aliases for supported request methods
          utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
            /*eslint func-names:0*/Axios.prototype[method] = function (url, config) {
              return this.request(mergeConfig(config || {}, {
                method: method,
                url: url,
                data: (config || {}).data
              }));
            };
          });
          utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            /*eslint func-names:0*/Axios.prototype[method] = function (url, data, config) {
              return this.request(mergeConfig(config || {}, {
                method: method,
                url: url,
                data: data
              }));
            };
          });
          module.exports = Axios; /***/
        },
        /***/546: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          function InterceptorManager() {
            this.handlers = [];
          } /**
            * Add a new interceptor to the stack
            *
            * @param {Function} fulfilled The function to handle `then` for a `Promise`
            * @param {Function} rejected The function to handle `reject` for a `Promise`
            *
            * @return {Number} An ID used to remove interceptor later
            */
          InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
            this.handlers.push({
              fulfilled: fulfilled,
              rejected: rejected,
              synchronous: options ? options.synchronous : false,
              runWhen: options ? options.runWhen : null
            });
            return this.handlers.length - 1;
          }; /**
             * Remove an interceptor from the stack
             *
             * @param {Number} id The ID that was returned by `use`
             */
          InterceptorManager.prototype.eject = function eject(id) {
            if (this.handlers[id]) {
              this.handlers[id] = null;
            }
          }; /**
             * Iterate over all the registered interceptors
             *
             * This method is particularly useful for skipping over any
             * interceptors that may have become `null` calling `eject`.
             *
             * @param {Function} fn The function to call for each interceptor
             */
          InterceptorManager.prototype.forEach = function forEach(fn) {
            utils.forEach(this.handlers, function forEachHandler(h) {
              if (h !== null) {
                fn(h);
              }
            });
          };
          module.exports = InterceptorManager; /***/
        },
        /***/3916: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var isAbsoluteURL = __webpack_require__(4860);
          var combineURLs = __webpack_require__(7825); /**
                                                       * Creates a new URL by combining the baseURL with the requestedURL,
                                                       * only when the requestedURL is not already an absolute URL.
                                                       * If the requestURL is absolute, this function returns the requestedURL untouched.
                                                       *
                                                       * @param {string} baseURL The base URL
                                                       * @param {string} requestedURL Absolute or relative URL to combine
                                                       * @returns {string} The combined full path
                                                       */
          module.exports = function buildFullPath(baseURL, requestedURL) {
            if (baseURL && !isAbsoluteURL(requestedURL)) {
              return combineURLs(baseURL, requestedURL);
            }
            return requestedURL;
          }; /***/
        },
        /***/1792: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var enhanceError = __webpack_require__(7148); /**
                                                        * Create an Error with the specified message, config, error code, request and response.
                                                        *
                                                        * @param {string} message The error message.
                                                        * @param {Object} config The config.
                                                        * @param {string} [code] The error code (for example, 'ECONNABORTED').
                                                        * @param {Object} [request] The request.
                                                        * @param {Object} [response] The response.
                                                        * @returns {Error} The created error.
                                                        */
          module.exports = function createError(message, config, code, request, response) {
            var error = new Error(message);
            return enhanceError(error, config, code, request, response);
          }; /***/
        },
        /***/1617: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          var transformData = __webpack_require__(7638);
          var isCancel = __webpack_require__(6945);
          var defaults = __webpack_require__(292);
          var Cancel = __webpack_require__(9945); /**
                                                  * Throws a `Cancel` if cancellation has been requested.
                                                  */
          function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
              config.cancelToken.throwIfRequested();
            }
            if (config.signal && config.signal.aborted) {
              throw new Cancel('canceled');
            }
          } /**
            * Dispatch a request to the server using the configured adapter.
            *
            * @param {object} config The config that is to be used for the request
            * @returns {Promise} The Promise to be fulfilled
            */
          module.exports = function dispatchRequest(config) {
            throwIfCancellationRequested(config); // Ensure headers exist
            config.headers = config.headers || {}; // Transform request data
            config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers
            config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
            utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
              delete config.headers[method];
            });
            var adapter = config.adapter || defaults.adapter;
            return adapter(config).then(function onAdapterResolution(response) {
              throwIfCancellationRequested(config); // Transform response data
              response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
              return response;
            }, function onAdapterRejection(reason) {
              if (!isCancel(reason)) {
                throwIfCancellationRequested(config); // Transform response data
                if (reason && reason.response) {
                  reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
                }
              }
              return Promise.reject(reason);
            });
          }; /***/
        },
        /***/7148: /***/function (module) {
          /**
          * Update an Error with the specified config, error code, and response.
          *
          * @param {Error} error The error to update.
          * @param {Object} config The config.
          * @param {string} [code] The error code (for example, 'ECONNABORTED').
          * @param {Object} [request] The request.
          * @param {Object} [response] The response.
          * @returns {Error} The error.
          */
          module.exports = function enhanceError(error, config, code, request, response) {
            error.config = config;
            if (code) {
              error.code = code;
            }
            error.request = request;
            error.response = response;
            error.isAxiosError = true;
            error.toJSON = function toJSON() {
              return {
                // Standard
                message: this.message,
                name: this.name,
                // Microsoft
                description: this.description,
                number: this.number,
                // Mozilla
                fileName: this.fileName,
                lineNumber: this.lineNumber,
                columnNumber: this.columnNumber,
                stack: this.stack,
                // Axios
                config: this.config,
                code: this.code,
                status: this.response && this.response.status ? this.response.status : null
              };
            };
            return error;
          }; /***/
        },
        /***/4816: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345); /**
                                                 * Config-specific merge-function which creates a new config-object
                                                 * by merging two configuration objects together.
                                                 *
                                                 * @param {Object} config1
                                                 * @param {Object} config2
                                                 * @returns {Object} New object resulting from merging config2 to config1
                                                 */
          module.exports = function mergeConfig(config1, config2) {
            // eslint-disable-next-line no-param-reassign
            config2 = config2 || {};
            var config = {};
            function getMergedValue(target, source) {
              if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
                return utils.merge(target, source);
              } else if (utils.isPlainObject(source)) {
                return utils.merge({}, source);
              } else if (utils.isArray(source)) {
                return source.slice();
              }
              return source;
            } // eslint-disable-next-line consistent-return
            function mergeDeepProperties(prop) {
              if (!utils.isUndefined(config2[prop])) {
                return getMergedValue(config1[prop], config2[prop]);
              } else if (!utils.isUndefined(config1[prop])) {
                return getMergedValue(undefined, config1[prop]);
              }
            } // eslint-disable-next-line consistent-return
            function valueFromConfig2(prop) {
              if (!utils.isUndefined(config2[prop])) {
                return getMergedValue(undefined, config2[prop]);
              }
            } // eslint-disable-next-line consistent-return
            function defaultToConfig2(prop) {
              if (!utils.isUndefined(config2[prop])) {
                return getMergedValue(undefined, config2[prop]);
              } else if (!utils.isUndefined(config1[prop])) {
                return getMergedValue(undefined, config1[prop]);
              }
            } // eslint-disable-next-line consistent-return
            function mergeDirectKeys(prop) {
              if (prop in config2) {
                return getMergedValue(config1[prop], config2[prop]);
              } else if (prop in config1) {
                return getMergedValue(undefined, config1[prop]);
              }
            }
            var mergeMap = {
              'url': valueFromConfig2,
              'method': valueFromConfig2,
              'data': valueFromConfig2,
              'baseURL': defaultToConfig2,
              'transformRequest': defaultToConfig2,
              'transformResponse': defaultToConfig2,
              'paramsSerializer': defaultToConfig2,
              'timeout': defaultToConfig2,
              'timeoutMessage': defaultToConfig2,
              'withCredentials': defaultToConfig2,
              'adapter': defaultToConfig2,
              'responseType': defaultToConfig2,
              'xsrfCookieName': defaultToConfig2,
              'xsrfHeaderName': defaultToConfig2,
              'onUploadProgress': defaultToConfig2,
              'onDownloadProgress': defaultToConfig2,
              'decompress': defaultToConfig2,
              'maxContentLength': defaultToConfig2,
              'maxBodyLength': defaultToConfig2,
              'transport': defaultToConfig2,
              'httpAgent': defaultToConfig2,
              'httpsAgent': defaultToConfig2,
              'cancelToken': defaultToConfig2,
              'socketPath': defaultToConfig2,
              'responseEncoding': defaultToConfig2,
              'validateStatus': mergeDirectKeys
            };
            utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
              var merge = mergeMap[prop] || mergeDeepProperties;
              var configValue = merge(prop);
              utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
            });
            return config;
          }; /***/
        },
        /***/6435: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var createError = __webpack_require__(1792); /**
                                                       * Resolve or reject a Promise based on response status.
                                                       *
                                                       * @param {Function} resolve A function that resolves the promise.
                                                       * @param {Function} reject A function that rejects the promise.
                                                       * @param {object} response The response.
                                                       */
          module.exports = function settle(resolve, reject, response) {
            var validateStatus = response.config.validateStatus;
            if (!response.status || !validateStatus || validateStatus(response.status)) {
              resolve(response);
            } else {
              reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
            }
          }; /***/
        },
        /***/7638: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          var defaults = __webpack_require__(292); /**
                                                   * Transform the data for a request or a response
                                                   *
                                                   * @param {Object|String} data The data to be transformed
                                                   * @param {Array} headers The headers for the request or response
                                                   * @param {Array|Function} fns A single function or Array of functions
                                                   * @returns {*} The resulting transformed data
                                                   */
          module.exports = function transformData(data, headers, fns) {
            var context = this || defaults; /*eslint no-param-reassign:0*/
            utils.forEach(fns, function transform(fn) {
              data = fn.call(context, data, headers);
            });
            return data;
          }; /***/
        },
        /***/292: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          var normalizeHeaderName = __webpack_require__(2327);
          var enhanceError = __webpack_require__(7148);
          var DEFAULT_CONTENT_TYPE = {
            'Content-Type': 'application/x-www-form-urlencoded'
          };
          function setContentTypeIfUnset(headers, value) {
            if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
              headers['Content-Type'] = value;
            }
          }
          function getDefaultAdapter() {
            var adapter;
            if (typeof XMLHttpRequest !== 'undefined') {
              // For browsers use XHR adapter
              adapter = __webpack_require__(8427);
            } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
              // For node use HTTP adapter
              adapter = __webpack_require__(8427);
            }
            return adapter;
          }
          function stringifySafely(rawValue, parser, encoder) {
            if (utils.isString(rawValue)) {
              try {
                (parser || JSON.parse)(rawValue);
                return utils.trim(rawValue);
              } catch (e) {
                if (e.name !== 'SyntaxError') {
                  throw e;
                }
              }
            }
            return (encoder || JSON.stringify)(rawValue);
          }
          var defaults = {
            transitional: {
              silentJSONParsing: true,
              forcedJSONParsing: true,
              clarifyTimeoutError: false
            },
            adapter: getDefaultAdapter(),
            transformRequest: [function transformRequest(data, headers) {
              normalizeHeaderName(headers, 'Accept');
              normalizeHeaderName(headers, 'Content-Type');
              if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
                return data;
              }
              if (utils.isArrayBufferView(data)) {
                return data.buffer;
              }
              if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                return data.toString();
              }
              if (utils.isObject(data) || headers && headers['Content-Type'] === 'application/json') {
                setContentTypeIfUnset(headers, 'application/json');
                return stringifySafely(data);
              }
              return data;
            }],
            transformResponse: [function transformResponse(data) {
              var transitional = this.transitional || defaults.transitional;
              var silentJSONParsing = transitional && transitional.silentJSONParsing;
              var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
              var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';
              if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
                try {
                  return JSON.parse(data);
                } catch (e) {
                  if (strictJSONParsing) {
                    if (e.name === 'SyntaxError') {
                      throw enhanceError(e, this, 'E_JSON_PARSE');
                    }
                    throw e;
                  }
                }
              }
              return data;
            }],
            /**
            * A timeout in milliseconds to abort a request. If set to 0 (default) a
            * timeout is not created.
            */
            timeout: 0,
            xsrfCookieName: 'XSRF-TOKEN',
            xsrfHeaderName: 'X-XSRF-TOKEN',
            maxContentLength: -1,
            maxBodyLength: -1,
            validateStatus: function validateStatus(status) {
              return status >= 200 && status < 300;
            },
            headers: {
              common: {
                'Accept': 'application/json, text/plain, */*'
              }
            }
          };
          utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
            defaults.headers[method] = {};
          });
          utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
          });
          module.exports = defaults; /***/
        },
        /***/9978: /***/function (module) {
          module.exports = {
            "version": "0.25.0"
          }; /***/
        },
        /***/5063: /***/function (module) {
          module.exports = function bind(fn, thisArg) {
            return function wrap() {
              var args = new Array(arguments.length);
              for (var i = 0; i < args.length; i++) {
                args[i] = arguments[i];
              }
              return fn.apply(thisArg, args);
            };
          }; /***/
        },
        /***/3025: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          function encode(val) {
            return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
          } /**
            * Build a URL by appending params to the end
            *
            * @param {string} url The base of the url (e.g., http://www.google.com)
            * @param {object} [params] The params to be appended
            * @returns {string} The formatted url
            */
          module.exports = function buildURL(url, params, paramsSerializer) {
            /*eslint no-param-reassign:0*/if (!params) {
              return url;
            }
            var serializedParams;
            if (paramsSerializer) {
              serializedParams = paramsSerializer(params);
            } else if (utils.isURLSearchParams(params)) {
              serializedParams = params.toString();
            } else {
              var parts = [];
              utils.forEach(params, function serialize(val, key) {
                if (val === null || typeof val === 'undefined') {
                  return;
                }
                if (utils.isArray(val)) {
                  key = key + '[]';
                } else {
                  val = [val];
                }
                utils.forEach(val, function parseValue(v) {
                  if (utils.isDate(v)) {
                    v = v.toISOString();
                  } else if (utils.isObject(v)) {
                    v = JSON.stringify(v);
                  }
                  parts.push(encode(key) + '=' + encode(v));
                });
              });
              serializedParams = parts.join('&');
            }
            if (serializedParams) {
              var hashmarkIndex = url.indexOf('#');
              if (hashmarkIndex !== -1) {
                url = url.slice(0, hashmarkIndex);
              }
              url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
            }
            return url;
          }; /***/
        },
        /***/7825: /***/function (module) {
          /**
          * Creates a new URL by combining the specified URLs
          *
          * @param {string} baseURL The base URL
          * @param {string} relativeURL The relative URL
          * @returns {string} The combined URL
          */
          module.exports = function combineURLs(baseURL, relativeURL) {
            return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
          }; /***/
        },
        /***/5905: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          module.exports = utils.isStandardBrowserEnv() ?
          // Standard browser envs support document.cookie
          function standardBrowserEnv() {
            return {
              write: function write(name, value, expires, path, domain, secure) {
                var cookie = [];
                cookie.push(name + '=' + encodeURIComponent(value));
                if (utils.isNumber(expires)) {
                  cookie.push('expires=' + new Date(expires).toGMTString());
                }
                if (utils.isString(path)) {
                  cookie.push('path=' + path);
                }
                if (utils.isString(domain)) {
                  cookie.push('domain=' + domain);
                }
                if (secure === true) {
                  cookie.push('secure');
                }
                document.cookie = cookie.join('; ');
              },
              read: function read(name) {
                var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                return match ? decodeURIComponent(match[3]) : null;
              },
              remove: function remove(name) {
                this.write(name, '', Date.now() - 86400000);
              }
            };
          }() :
          // Non standard browser env (web workers, react-native) lack needed support.
          function nonStandardBrowserEnv() {
            return {
              write: function write() {},
              read: function read() {
                return null;
              },
              remove: function remove() {}
            };
          }(); /***/
        },
        /***/4860: /***/function (module) {
          /**
          * Determines whether the specified URL is absolute
          *
          * @param {string} url The URL to test
          * @returns {boolean} True if the specified URL is absolute, otherwise false
          */
          module.exports = function isAbsoluteURL(url) {
            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
            // by any combination of letters, digits, plus, period, or hyphen.
            return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
          }; /***/
        },
        /***/8568: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345); /**
                                                 * Determines whether the payload is an error thrown by Axios
                                                 *
                                                 * @param {*} payload The value to test
                                                 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
                                                 */
          module.exports = function isAxiosError(payload) {
            return utils.isObject(payload) && payload.isAxiosError === true;
          }; /***/
        },
        /***/6923: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          module.exports = utils.isStandardBrowserEnv() ?
          // Standard browser envs have full support of the APIs needed to test
          // whether the request URL is of the same origin as current location.
          function standardBrowserEnv() {
            var msie = /(msie|trident)/i.test(navigator.userAgent);
            var urlParsingNode = document.createElement('a');
            var originURL; /**
                           * Parse a URL to discover it's components
                           *
                           * @param {String} url The URL to be parsed
                           * @returns {Object}
                           */
            function resolveURL(url) {
              var href = url;
              if (msie) {
                // IE needs attribute set twice to normalize properties
                urlParsingNode.setAttribute('href', href);
                href = urlParsingNode.href;
              }
              urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
              return {
                href: urlParsingNode.href,
                protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                host: urlParsingNode.host,
                search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                hostname: urlParsingNode.hostname,
                port: urlParsingNode.port,
                pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
              };
            }
            originURL = resolveURL(window.location.href); /**
                                                          * Determine if a URL shares the same origin as the current location
                                                          *
                                                          * @param {String} requestURL The URL to test
                                                          * @returns {boolean} True if URL shares the same origin, otherwise false
                                                          */
            return function isURLSameOrigin(requestURL) {
              var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
              return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
            };
          }() :
          // Non standard browser envs (web workers, react-native) lack needed support.
          function nonStandardBrowserEnv() {
            return function isURLSameOrigin() {
              return true;
            };
          }(); /***/
        },
        /***/2327: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345);
          module.exports = function normalizeHeaderName(headers, normalizedName) {
            utils.forEach(headers, function processHeader(value, name) {
              if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                headers[normalizedName] = value;
                delete headers[name];
              }
            });
          }; /***/
        },
        /***/6135: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var utils = __webpack_require__(4345); // Headers whose duplicates are ignored by node
          // c.f. https://nodejs.org/api/http.html#http_message_headers
          var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']; /**
                                                                                                                                                                                                                                                                                         * Parse headers into an object
                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                         * ```
                                                                                                                                                                                                                                                                                         * Date: Wed, 27 Aug 2014 08:58:49 GMT
                                                                                                                                                                                                                                                                                         * Content-Type: application/json
                                                                                                                                                                                                                                                                                         * Connection: keep-alive
                                                                                                                                                                                                                                                                                         * Transfer-Encoding: chunked
                                                                                                                                                                                                                                                                                         * ```
                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                         * @param {String} headers Headers needing to be parsed
                                                                                                                                                                                                                                                                                         * @returns {Object} Headers parsed into an object
                                                                                                                                                                                                                                                                                         */
          module.exports = function parseHeaders(headers) {
            var parsed = {};
            var key;
            var val;
            var i;
            if (!headers) {
              return parsed;
            }
            utils.forEach(headers.split('\n'), function parser(line) {
              i = line.indexOf(':');
              key = utils.trim(line.substr(0, i)).toLowerCase();
              val = utils.trim(line.substr(i + 1));
              if (key) {
                if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                  return;
                }
                if (key === 'set-cookie') {
                  parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                } else {
                  parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                }
              }
            });
            return parsed;
          }; /***/
        },
        /***/8127: /***/function (module) {
          /**
          * Syntactic sugar for invoking a function and expanding an array for arguments.
          *
          * Common use case would be to use `Function.prototype.apply`.
          *
          *  ```js
          *  function f(x, y, z) {}
          *  var args = [1, 2, 3];
          *  f.apply(null, args);
          *  ```
          *
          * With `spread` this example can be re-written.
          *
          *  ```js
          *  spread(function(x, y, z) {})([1, 2, 3]);
          *  ```
          *
          * @param {Function} callback
          * @returns {Function}
          */
          module.exports = function spread(callback) {
            return function wrap(arr) {
              return callback.apply(null, arr);
            };
          }; /***/
        },
        /***/6552: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var VERSION = __webpack_require__(9978).version;
          var validators = {}; // eslint-disable-next-line func-names
          ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
            validators[type] = function validator(thing) {
              return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
            };
          });
          var deprecatedWarnings = {}; /**
                                       * Transitional option validator
                                       * @param {function|boolean?} validator - set to false if the transitional option has been removed
                                       * @param {string?} version - deprecated version / removed since version
                                       * @param {string?} message - some message with additional info
                                       * @returns {function}
                                       */
          validators.transitional = function transitional(validator, version, message) {
            function formatMessage(opt, desc) {
              return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
            } // eslint-disable-next-line func-names
            return function (value, opt, opts) {
              if (validator === false) {
                throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
              }
              if (version && !deprecatedWarnings[opt]) {
                deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console
                console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
              }
              return validator ? validator(value, opt, opts) : true;
            };
          }; /**
             * Assert object's properties type
             * @param {object} options
             * @param {object} schema
             * @param {boolean?} allowUnknown
             */
          function assertOptions(options, schema, allowUnknown) {
            if (typeof options !== 'object') {
              throw new TypeError('options must be an object');
            }
            var keys = Object.keys(options);
            var i = keys.length;
            while (i-- > 0) {
              var opt = keys[i];
              var validator = schema[opt];
              if (validator) {
                var value = options[opt];
                var result = value === undefined || validator(value, opt, options);
                if (result !== true) {
                  throw new TypeError('option ' + opt + ' must be ' + result);
                }
                continue;
              }
              if (allowUnknown !== true) {
                throw Error('Unknown option ' + opt);
              }
            }
          }
          module.exports = {
            assertOptions: assertOptions,
            validators: validators
          }; /***/
        },
        /***/4345: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          var bind = __webpack_require__(5063); // utils is a library of generic helper functions non-specific to axios
          var toString = Object.prototype.toString; /**
                                                    * Determine if a value is an Array
                                                    *
                                                    * @param {Object} val The value to test
                                                    * @returns {boolean} True if value is an Array, otherwise false
                                                    */
          function isArray(val) {
            return Array.isArray(val);
          } /**
            * Determine if a value is undefined
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if the value is undefined, otherwise false
            */
          function isUndefined(val) {
            return typeof val === 'undefined';
          } /**
            * Determine if a value is a Buffer
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a Buffer, otherwise false
            */
          function isBuffer(val) {
            return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
          } /**
            * Determine if a value is an ArrayBuffer
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is an ArrayBuffer, otherwise false
            */
          function isArrayBuffer(val) {
            return toString.call(val) === '[object ArrayBuffer]';
          } /**
            * Determine if a value is a FormData
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is an FormData, otherwise false
            */
          function isFormData(val) {
            return toString.call(val) === '[object FormData]';
          } /**
            * Determine if a value is a view on an ArrayBuffer
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
            */
          function isArrayBufferView(val) {
            var result;
            if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
              result = ArrayBuffer.isView(val);
            } else {
              result = val && val.buffer && isArrayBuffer(val.buffer);
            }
            return result;
          } /**
            * Determine if a value is a String
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a String, otherwise false
            */
          function isString(val) {
            return typeof val === 'string';
          } /**
            * Determine if a value is a Number
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a Number, otherwise false
            */
          function isNumber(val) {
            return typeof val === 'number';
          } /**
            * Determine if a value is an Object
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is an Object, otherwise false
            */
          function isObject(val) {
            return val !== null && typeof val === 'object';
          } /**
            * Determine if a value is a plain Object
            *
            * @param {Object} val The value to test
            * @return {boolean} True if value is a plain Object, otherwise false
            */
          function isPlainObject(val) {
            if (toString.call(val) !== '[object Object]') {
              return false;
            }
            var prototype = Object.getPrototypeOf(val);
            return prototype === null || prototype === Object.prototype;
          } /**
            * Determine if a value is a Date
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a Date, otherwise false
            */
          function isDate(val) {
            return toString.call(val) === '[object Date]';
          } /**
            * Determine if a value is a File
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a File, otherwise false
            */
          function isFile(val) {
            return toString.call(val) === '[object File]';
          } /**
            * Determine if a value is a Blob
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a Blob, otherwise false
            */
          function isBlob(val) {
            return toString.call(val) === '[object Blob]';
          } /**
            * Determine if a value is a Function
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a Function, otherwise false
            */
          function isFunction(val) {
            return toString.call(val) === '[object Function]';
          } /**
            * Determine if a value is a Stream
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a Stream, otherwise false
            */
          function isStream(val) {
            return isObject(val) && isFunction(val.pipe);
          } /**
            * Determine if a value is a URLSearchParams object
            *
            * @param {Object} val The value to test
            * @returns {boolean} True if value is a URLSearchParams object, otherwise false
            */
          function isURLSearchParams(val) {
            return toString.call(val) === '[object URLSearchParams]';
          } /**
            * Trim excess whitespace off the beginning and end of a string
            *
            * @param {String} str The String to trim
            * @returns {String} The String freed of excess whitespace
            */
          function trim(str) {
            return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
          } /**
            * Determine if we're running in a standard browser environment
            *
            * This allows axios to run in a web worker, and react-native.
            * Both environments support XMLHttpRequest, but not fully standard globals.
            *
            * web workers:
            *  typeof window -> undefined
            *  typeof document -> undefined
            *
            * react-native:
            *  navigator.product -> 'ReactNative'
            * nativescript
            *  navigator.product -> 'NativeScript' or 'NS'
            */
          function isStandardBrowserEnv() {
            if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
              return false;
            }
            return typeof window !== 'undefined' && typeof document !== 'undefined';
          } /**
            * Iterate over an Array or an Object invoking a function for each item.
            *
            * If `obj` is an Array callback will be called passing
            * the value, index, and complete array for each item.
            *
            * If 'obj' is an Object callback will be called passing
            * the value, key, and complete object for each property.
            *
            * @param {Object|Array} obj The object to iterate
            * @param {Function} fn The callback to invoke for each item
            */
          function forEach(obj, fn) {
            // Don't bother if no value provided
            if (obj === null || typeof obj === 'undefined') {
              return;
            } // Force an array if not already something iterable
            if (typeof obj !== 'object') {
              /*eslint no-param-reassign:0*/obj = [obj];
            }
            if (isArray(obj)) {
              // Iterate over array values
              for (var i = 0, l = obj.length; i < l; i++) {
                fn.call(null, obj[i], i, obj);
              }
            } else {
              // Iterate over object keys
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  fn.call(null, obj[key], key, obj);
                }
              }
            }
          } /**
            * Accepts varargs expecting each argument to be an object, then
            * immutably merges the properties of each object and returns result.
            *
            * When multiple objects contain the same key the later object in
            * the arguments list will take precedence.
            *
            * Example:
            *
            * ```js
            * var result = merge({foo: 123}, {foo: 456});
            * console.log(result.foo); // outputs 456
            * ```
            *
            * @param {Object} obj1 Object to merge
            * @returns {Object} Result of all merge properties
            */
          function merge( /* obj1, obj2, obj3, ... */) {
            var result = {};
            function assignValue(val, key) {
              if (isPlainObject(result[key]) && isPlainObject(val)) {
                result[key] = merge(result[key], val);
              } else if (isPlainObject(val)) {
                result[key] = merge({}, val);
              } else if (isArray(val)) {
                result[key] = val.slice();
              } else {
                result[key] = val;
              }
            }
            for (var i = 0, l = arguments.length; i < l; i++) {
              forEach(arguments[i], assignValue);
            }
            return result;
          } /**
            * Extends object a by mutably adding to it the properties of object b.
            *
            * @param {Object} a The object to be extended
            * @param {Object} b The object to copy properties from
            * @param {Object} thisArg The object to bind function to
            * @return {Object} The resulting value of object a
            */
          function extend(a, b, thisArg) {
            forEach(b, function assignValue(val, key) {
              if (thisArg && typeof val === 'function') {
                a[key] = bind(val, thisArg);
              } else {
                a[key] = val;
              }
            });
            return a;
          } /**
            * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
            *
            * @param {string} content with BOM
            * @return {string} content value without BOM
            */
          function stripBOM(content) {
            if (content.charCodeAt(0) === 0xFEFF) {
              content = content.slice(1);
            }
            return content;
          }
          module.exports = {
            isArray: isArray,
            isArrayBuffer: isArrayBuffer,
            isBuffer: isBuffer,
            isFormData: isFormData,
            isArrayBufferView: isArrayBufferView,
            isString: isString,
            isNumber: isNumber,
            isObject: isObject,
            isPlainObject: isPlainObject,
            isUndefined: isUndefined,
            isDate: isDate,
            isFile: isFile,
            isBlob: isBlob,
            isFunction: isFunction,
            isStream: isStream,
            isURLSearchParams: isURLSearchParams,
            isStandardBrowserEnv: isStandardBrowserEnv,
            forEach: forEach,
            merge: merge,
            extend: extend,
            trim: trim,
            stripBOM: stripBOM
          }; /***/
        },
        /***/7991: /***/function (__unused_webpack_module, exports) {
          exports.byteLength = byteLength;
          exports.toByteArray = toByteArray;
          exports.fromByteArray = fromByteArray;
          var lookup = [];
          var revLookup = [];
          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
          var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
          } // Support decoding URL-safe base64 strings, as Node.js does.
          // See: https://en.wikipedia.org/wiki/Base64#URL_applications
          revLookup['-'.charCodeAt(0)] = 62;
          revLookup['_'.charCodeAt(0)] = 63;
          function getLens(b64) {
            var len = b64.length;
            if (len % 4 > 0) {
              throw new Error('Invalid string. Length must be a multiple of 4');
            } // Trim off extra bytes after placeholder bytes are found
            // See: https://github.com/beatgammit/base64-js/issues/42
            var validLen = b64.indexOf('=');
            if (validLen === -1) validLen = len;
            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
            return [validLen, placeHoldersLen];
          } // base64 is 4/3 + up to two characters of the original data
          function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
          }
          function _byteLength(b64, validLen, placeHoldersLen) {
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
          }
          function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
            var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars
            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
            var i;
            for (i = 0; i < len; i += 4) {
              tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
              arr[curByte++] = tmp >> 16 & 0xFF;
              arr[curByte++] = tmp >> 8 & 0xFF;
              arr[curByte++] = tmp & 0xFF;
            }
            if (placeHoldersLen === 2) {
              tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
              arr[curByte++] = tmp & 0xFF;
            }
            if (placeHoldersLen === 1) {
              tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
              arr[curByte++] = tmp >> 8 & 0xFF;
              arr[curByte++] = tmp & 0xFF;
            }
            return arr;
          }
          function tripletToBase64(num) {
            return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
          }
          function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i = start; i < end; i += 3) {
              tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
              output.push(tripletToBase64(tmp));
            }
            return output.join('');
          }
          function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
            var parts = [];
            var maxChunkLength = 16383; // must be multiple of 3
            // go through the array every three bytes, we'll deal with trailing stuff later
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
              parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
            } // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
              tmp = uint8[len - 1];
              parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
            } else if (extraBytes === 2) {
              tmp = (uint8[len - 2] << 8) + uint8[len - 1];
              parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
            }
            return parts.join('');
          } /***/
        },
        /***/1048: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          /*!
          * The buffer module from node.js, for the browser.
          *
          * @author   Feross Aboukhadijeh <https://feross.org>
          * @license  MIT
          */ /* eslint-disable no-proto */
          var base64 = __webpack_require__(7991);
          var ieee754 = __webpack_require__(9318);
          var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
          ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
          : null;
          exports.hp = Buffer;
          exports.IS = 50;
          var K_MAX_LENGTH = 0x7fffffff; /**
                                         * If `Buffer.TYPED_ARRAY_SUPPORT`:
                                         *   === true    Use Uint8Array implementation (fastest)
                                         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
                                         *               implementation (most compatible, even IE6)
                                         *
                                         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                                         * Opera 11.6+, iOS 4.2+.
                                         *
                                         * We report that the browser does not support typed arrays if the are not subclassable
                                         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
                                         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
                                         * for __proto__ and has a buggy typed array implementation.
                                         */
          Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
          if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
            console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
          }
          function typedArraySupport() {
            // Can typed array instances can be augmented?
            try {
              var arr = new Uint8Array(1);
              var proto = {
                foo: function () {
                  return 42;
                }
              };
              Object.setPrototypeOf(proto, Uint8Array.prototype);
              Object.setPrototypeOf(arr, proto);
              return arr.foo() === 42;
            } catch (e) {
              return false;
            }
          }
          Object.defineProperty(Buffer.prototype, 'parent', {
            enumerable: true,
            get: function () {
              if (!Buffer.isBuffer(this)) return undefined;
              return this.buffer;
            }
          });
          Object.defineProperty(Buffer.prototype, 'offset', {
            enumerable: true,
            get: function () {
              if (!Buffer.isBuffer(this)) return undefined;
              return this.byteOffset;
            }
          });
          function createBuffer(length) {
            if (length > K_MAX_LENGTH) {
              throw new RangeError('The value "' + length + '" is invalid for option "size"');
            } // Return an augmented `Uint8Array` instance
            var buf = new Uint8Array(length);
            Object.setPrototypeOf(buf, Buffer.prototype);
            return buf;
          } /**
            * The Buffer constructor returns instances of `Uint8Array` that have their
            * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
            * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
            * and the `Uint8Array` methods. Square bracket notation works as expected -- it
            * returns a single octet.
            *
            * The `Uint8Array` prototype remains unmodified.
            */
          function Buffer(arg, encodingOrOffset, length) {
            // Common case.
            if (typeof arg === 'number') {
              if (typeof encodingOrOffset === 'string') {
                throw new TypeError('The "string" argument must be of type string. Received type number');
              }
              return allocUnsafe(arg);
            }
            return from(arg, encodingOrOffset, length);
          }
          Buffer.poolSize = 8192; // not used by this implementation
          function from(value, encodingOrOffset, length) {
            if (typeof value === 'string') {
              return fromString(value, encodingOrOffset);
            }
            if (ArrayBuffer.isView(value)) {
              return fromArrayView(value);
            }
            if (value == null) {
              throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
            }
            if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
              return fromArrayBuffer(value, encodingOrOffset, length);
            }
            if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
              return fromArrayBuffer(value, encodingOrOffset, length);
            }
            if (typeof value === 'number') {
              throw new TypeError('The "value" argument must not be of type number. Received type number');
            }
            var valueOf = value.valueOf && value.valueOf();
            if (valueOf != null && valueOf !== value) {
              return Buffer.from(valueOf, encodingOrOffset, length);
            }
            var b = fromObject(value);
            if (b) return b;
            if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
              return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
            }
            throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
          } /**
            * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
            * if value is a number.
            * Buffer.from(str[, encoding])
            * Buffer.from(array)
            * Buffer.from(buffer)
            * Buffer.from(arrayBuffer[, byteOffset[, length]])
            **/
          Buffer.from = function (value, encodingOrOffset, length) {
            return from(value, encodingOrOffset, length);
          }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
          // https://github.com/feross/buffer/pull/148
          Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
          Object.setPrototypeOf(Buffer, Uint8Array);
          function assertSize(size) {
            if (typeof size !== 'number') {
              throw new TypeError('"size" argument must be of type number');
            } else if (size < 0) {
              throw new RangeError('The value "' + size + '" is invalid for option "size"');
            }
          }
          function alloc(size, fill, encoding) {
            assertSize(size);
            if (size <= 0) {
              return createBuffer(size);
            }
            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpreted as a start offset.
              return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
            }
            return createBuffer(size);
          } /**
            * Creates a new filled Buffer instance.
            * alloc(size[, fill[, encoding]])
            **/
          Buffer.alloc = function (size, fill, encoding) {
            return alloc(size, fill, encoding);
          };
          function allocUnsafe(size) {
            assertSize(size);
            return createBuffer(size < 0 ? 0 : checked(size) | 0);
          } /**
            * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
            * */
          Buffer.allocUnsafe = function (size) {
            return allocUnsafe(size);
          }; /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
          Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(size);
          };
          function fromString(string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
              encoding = 'utf8';
            }
            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }
            var length = byteLength(string, encoding) | 0;
            var buf = createBuffer(length);
            var actual = buf.write(string, encoding);
            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              buf = buf.slice(0, actual);
            }
            return buf;
          }
          function fromArrayLike(array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0;
            var buf = createBuffer(length);
            for (var i = 0; i < length; i += 1) {
              buf[i] = array[i] & 255;
            }
            return buf;
          }
          function fromArrayView(arrayView) {
            if (isInstance(arrayView, Uint8Array)) {
              var copy = new Uint8Array(arrayView);
              return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
            }
            return fromArrayLike(arrayView);
          }
          function fromArrayBuffer(array, byteOffset, length) {
            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError('"offset" is outside of buffer bounds');
            }
            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError('"length" is outside of buffer bounds');
            }
            var buf;
            if (byteOffset === undefined && length === undefined) {
              buf = new Uint8Array(array);
            } else if (length === undefined) {
              buf = new Uint8Array(array, byteOffset);
            } else {
              buf = new Uint8Array(array, byteOffset, length);
            } // Return an augmented `Uint8Array` instance
            Object.setPrototypeOf(buf, Buffer.prototype);
            return buf;
          }
          function fromObject(obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0;
              var buf = createBuffer(len);
              if (buf.length === 0) {
                return buf;
              }
              obj.copy(buf, 0, 0, len);
              return buf;
            }
            if (obj.length !== undefined) {
              if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                return createBuffer(0);
              }
              return fromArrayLike(obj);
            }
            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
              return fromArrayLike(obj.data);
            }
          }
          function checked(length) {
            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= K_MAX_LENGTH) {
              throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
            }
            return length | 0;
          }
          Buffer.isBuffer = function isBuffer(b) {
            return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
          };
          Buffer.compare = function compare(a, b) {
            if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
            if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
            }
            if (a === b) return 0;
            var x = a.length;
            var y = b.length;
            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }
            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };
          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case 'hex':
              case 'utf8':
              case 'utf-8':
              case 'ascii':
              case 'latin1':
              case 'binary':
              case 'base64':
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return true;
              default:
                return false;
            }
          };
          Buffer.concat = function concat(list, length) {
            if (!Array.isArray(list)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }
            if (list.length === 0) {
              return Buffer.alloc(0);
            }
            var i;
            if (length === undefined) {
              length = 0;
              for (i = 0; i < list.length; ++i) {
                length += list[i].length;
              }
            }
            var buffer = Buffer.allocUnsafe(length);
            var pos = 0;
            for (i = 0; i < list.length; ++i) {
              var buf = list[i];
              if (isInstance(buf, Uint8Array)) {
                if (pos + buf.length > buffer.length) {
                  Buffer.from(buf).copy(buffer, pos);
                } else {
                  Uint8Array.prototype.set.call(buffer, buf, pos);
                }
              } else if (!Buffer.isBuffer(buf)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              } else {
                buf.copy(buffer, pos);
              }
              pos += buf.length;
            }
            return buffer;
          };
          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length;
            }
            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
              return string.byteLength;
            }
            if (typeof string !== 'string') {
              throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
            }
            var len = string.length;
            var mustMatch = arguments.length > 2 && arguments[2] === true;
            if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion
            var loweredCase = false;
            for (;;) {
              switch (encoding) {
                case 'ascii':
                case 'latin1':
                case 'binary':
                  return len;
                case 'utf8':
                case 'utf-8':
                  return utf8ToBytes(string).length;
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return len * 2;
                case 'hex':
                  return len >>> 1;
                case 'base64':
                  return base64ToBytes(string).length;
                default:
                  if (loweredCase) {
                    return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                  }
                  encoding = ('' + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          }
          Buffer.byteLength = byteLength;
          function slowToString(encoding, start, end) {
            var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.
            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
              start = 0;
            } // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
              return '';
            }
            if (end === undefined || end > this.length) {
              end = this.length;
            }
            if (end <= 0) {
              return '';
            } // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0;
            start >>>= 0;
            if (end <= start) {
              return '';
            }
            if (!encoding) encoding = 'utf8';
            while (true) {
              switch (encoding) {
                case 'hex':
                  return hexSlice(this, start, end);
                case 'utf8':
                case 'utf-8':
                  return utf8Slice(this, start, end);
                case 'ascii':
                  return asciiSlice(this, start, end);
                case 'latin1':
                case 'binary':
                  return latin1Slice(this, start, end);
                case 'base64':
                  return base64Slice(this, start, end);
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return utf16leSlice(this, start, end);
                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                  encoding = (encoding + '').toLowerCase();
                  loweredCase = true;
              }
            }
          } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
          // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
          // reliably in a browserify context because there could be multiple different
          // copies of the 'buffer' package in use. This method works even for Buffer
          // instances that were created from another copy of the `buffer` package.
          // See: https://github.com/feross/buffer/issues/154
          Buffer.prototype._isBuffer = true;
          function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m];
            b[m] = i;
          }
          Buffer.prototype.swap16 = function swap16() {
            var len = this.length;
            if (len % 2 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 16-bits');
            }
            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1);
            }
            return this;
          };
          Buffer.prototype.swap32 = function swap32() {
            var len = this.length;
            if (len % 4 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 32-bits');
            }
            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3);
              swap(this, i + 1, i + 2);
            }
            return this;
          };
          Buffer.prototype.swap64 = function swap64() {
            var len = this.length;
            if (len % 8 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 64-bits');
            }
            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7);
              swap(this, i + 1, i + 6);
              swap(this, i + 2, i + 5);
              swap(this, i + 3, i + 4);
            }
            return this;
          };
          Buffer.prototype.toString = function toString() {
            var length = this.length;
            if (length === 0) return '';
            if (arguments.length === 0) return utf8Slice(this, 0, length);
            return slowToString.apply(this, arguments);
          };
          Buffer.prototype.toLocaleString = Buffer.prototype.toString;
          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
            if (this === b) return true;
            return Buffer.compare(this, b) === 0;
          };
          Buffer.prototype.inspect = function inspect() {
            var str = '';
            var max = exports.IS;
            str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
            if (this.length > max) str += ' ... ';
            return '<Buffer ' + str + '>';
          };
          if (customInspectSymbol) {
            Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
          }
          Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
            if (isInstance(target, Uint8Array)) {
              target = Buffer.from(target, target.offset, target.byteLength);
            }
            if (!Buffer.isBuffer(target)) {
              throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
            }
            if (start === undefined) {
              start = 0;
            }
            if (end === undefined) {
              end = target ? target.length : 0;
            }
            if (thisStart === undefined) {
              thisStart = 0;
            }
            if (thisEnd === undefined) {
              thisEnd = this.length;
            }
            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
              throw new RangeError('out of range index');
            }
            if (thisStart >= thisEnd && start >= end) {
              return 0;
            }
            if (thisStart >= thisEnd) {
              return -1;
            }
            if (start >= end) {
              return 1;
            }
            start >>>= 0;
            end >>>= 0;
            thisStart >>>= 0;
            thisEnd >>>= 0;
            if (this === target) return 0;
            var x = thisEnd - thisStart;
            var y = end - start;
            var len = Math.min(x, y);
            var thisCopy = this.slice(thisStart, thisEnd);
            var targetCopy = target.slice(start, end);
            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i];
                y = targetCopy[i];
                break;
              }
            }
            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf
          function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1; // Normalize byteOffset
            if (typeof byteOffset === 'string') {
              encoding = byteOffset;
              byteOffset = 0;
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff;
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000;
            }
            byteOffset = +byteOffset; // Coerce to Number.
            if (numberIsNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : buffer.length - 1;
            } // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
            if (byteOffset >= buffer.length) {
              if (dir) return -1;else byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0;else return -1;
            } // Normalize val
            if (typeof val === 'string') {
              val = Buffer.from(val, encoding);
            } // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1;
              }
              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            } else if (typeof val === 'number') {
              val = val & 0xFF; // Search for a byte value [0-255]
              if (typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                }
              }
              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
            }
            throw new TypeError('val must be string, number or Buffer');
          }
          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1;
            var arrLength = arr.length;
            var valLength = val.length;
            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase();
              if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                if (arr.length < 2 || val.length < 2) {
                  return -1;
                }
                indexSize = 2;
                arrLength /= 2;
                valLength /= 2;
                byteOffset /= 2;
              }
            }
            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i];
              } else {
                return buf.readUInt16BE(i * indexSize);
              }
            }
            var i;
            if (dir) {
              var foundIndex = -1;
              for (i = byteOffset; i < arrLength; i++) {
                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                  if (foundIndex === -1) foundIndex = i;
                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex;
                  foundIndex = -1;
                }
              }
            } else {
              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
              for (i = byteOffset; i >= 0; i--) {
                var found = true;
                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false;
                    break;
                  }
                }
                if (found) return i;
              }
            }
            return -1;
          }
          Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1;
          };
          Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
          };
          Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
          };
          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;
            if (!length) {
              length = remaining;
            } else {
              length = Number(length);
              if (length > remaining) {
                length = remaining;
              }
            }
            var strLen = string.length;
            if (length > strLen / 2) {
              length = strLen / 2;
            }
            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16);
              if (numberIsNaN(parsed)) return i;
              buf[offset + i] = parsed;
            }
            return i;
          }
          function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
          }
          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
          }
          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
          }
          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
          }
          Buffer.prototype.write = function write(string, offset, length, encoding) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = 'utf8';
              length = this.length;
              offset = 0; // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
              encoding = offset;
              length = this.length;
              offset = 0; // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset >>> 0;
              if (isFinite(length)) {
                length = length >>> 0;
                if (encoding === undefined) encoding = 'utf8';
              } else {
                encoding = length;
                length = undefined;
              }
            } else {
              throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
            }
            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;
            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
              throw new RangeError('Attempt to write outside buffer bounds');
            }
            if (!encoding) encoding = 'utf8';
            var loweredCase = false;
            for (;;) {
              switch (encoding) {
                case 'hex':
                  return hexWrite(this, string, offset, length);
                case 'utf8':
                case 'utf-8':
                  return utf8Write(this, string, offset, length);
                case 'ascii':
                case 'latin1':
                case 'binary':
                  return asciiWrite(this, string, offset, length);
                case 'base64':
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length);
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return ucs2Write(this, string, offset, length);
                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                  encoding = ('' + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          };
          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          };
          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf);
            } else {
              return base64.fromByteArray(buf.slice(start, end));
            }
          }
          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            var res = [];
            var i = start;
            while (i < end) {
              var firstByte = buf[i];
              var codePoint = null;
              var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint;
                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte;
                    }
                    break;
                  case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                      if (tempCodePoint > 0x7F) {
                        codePoint = tempCodePoint;
                      }
                    }
                    break;
                  case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                      if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                        codePoint = tempCodePoint;
                      }
                    }
                    break;
                  case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                      if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint;
                      }
                    }
                }
              }
              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xFFFD;
                bytesPerSequence = 1;
              } else if (codePoint > 0xFFFF) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000;
                res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                codePoint = 0xDC00 | codePoint & 0x3FF;
              }
              res.push(codePoint);
              i += bytesPerSequence;
            }
            return decodeCodePointsArray(res);
          } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety
          var MAX_ARGUMENTS_LENGTH = 0x1000;
          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;
            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
            } // Decode in chunks to avoid "call stack size exceeded".
            var res = '';
            var i = 0;
            while (i < len) {
              res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
            }
            return res;
          }
          function asciiSlice(buf, start, end) {
            var ret = '';
            end = Math.min(buf.length, end);
            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7F);
            }
            return ret;
          }
          function latin1Slice(buf, start, end) {
            var ret = '';
            end = Math.min(buf.length, end);
            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i]);
            }
            return ret;
          }
          function hexSlice(buf, start, end) {
            var len = buf.length;
            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;
            var out = '';
            for (var i = start; i < end; ++i) {
              out += hexSliceLookupTable[buf[i]];
            }
            return out;
          }
          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
            for (var i = 0; i < bytes.length - 1; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
            }
            return res;
          }
          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;
            if (start < 0) {
              start += len;
              if (start < 0) start = 0;
            } else if (start > len) {
              start = len;
            }
            if (end < 0) {
              end += len;
              if (end < 0) end = 0;
            } else if (end > len) {
              end = len;
            }
            if (end < start) end = start;
            var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance
            Object.setPrototypeOf(newBuf, Buffer.prototype);
            return newBuf;
          }; /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */
          function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
          }
          Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }
            return val;
          };
          Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
              checkOffset(offset, byteLength, this.length);
            }
            var val = this[offset + --byteLength];
            var mul = 1;
            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul;
            }
            return val;
          };
          Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
          };
          Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | this[offset + 1] << 8;
          };
          Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] << 8 | this[offset + 1];
          };
          Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
          };
          Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
          };
          Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }
            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };
          Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];
            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul;
            }
            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };
          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 0x80)) return this[offset];
            return (0xff - this[offset] + 1) * -1;
          };
          Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | this[offset + 1] << 8;
            return val & 0x8000 ? val | 0xFFFF0000 : val;
          };
          Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | this[offset] << 8;
            return val & 0x8000 ? val | 0xFFFF0000 : val;
          };
          Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
          };
          Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
          };
          Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, true, 23, 4);
          };
          Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, false, 23, 4);
          };
          Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, true, 52, 8);
          };
          Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, false, 52, 8);
          };
          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length) throw new RangeError('Index out of range');
          }
          Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }
            var mul = 1;
            var i = 0;
            this[offset] = value & 0xFF;
            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = value / mul & 0xFF;
            }
            return offset + byteLength;
          };
          Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }
            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 0xFF;
            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = value / mul & 0xFF;
            }
            return offset + byteLength;
          };
          Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
            this[offset] = value & 0xff;
            return offset + 1;
          };
          Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            return offset + 2;
          };
          Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
            return offset + 2;
          };
          Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
            return offset + 4;
          };
          Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
            return offset + 4;
          };
          Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }
            var i = 0;
            var mul = 1;
            var sub = 0;
            this[offset] = value & 0xFF;
            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1;
              }
              this[offset + i] = (value / mul >> 0) - sub & 0xFF;
            }
            return offset + byteLength;
          };
          Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }
            var i = byteLength - 1;
            var mul = 1;
            var sub = 0;
            this[offset + i] = value & 0xFF;
            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1;
              }
              this[offset + i] = (value / mul >> 0) - sub & 0xFF;
            }
            return offset + byteLength;
          };
          Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
            if (value < 0) value = 0xff + value + 1;
            this[offset] = value & 0xff;
            return offset + 1;
          };
          Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            return offset + 2;
          };
          Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
            return offset + 2;
          };
          Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
            return offset + 4;
          };
          Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (value < 0) value = 0xffffffff + value + 1;
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
            return offset + 4;
          };
          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError('Index out of range');
            if (offset < 0) throw new RangeError('Index out of range');
          }
          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 4);
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4;
          }
          Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert);
          };
          Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert);
          };
          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 8);
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8;
          }
          Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert);
          };
          Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert);
          }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
          Buffer.prototype.copy = function copy(target, targetStart, start, end) {
            if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done
            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions
            if (targetStart < 0) {
              throw new RangeError('targetStart out of bounds');
            }
            if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
            if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?
            if (end > this.length) end = this.length;
            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start;
            }
            var len = end - start;
            if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
              // Use built-in when available, missing from IE11
              this.copyWithin(targetStart, start, end);
            } else {
              Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
            }
            return len;
          }; // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])
          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
              if (typeof start === 'string') {
                encoding = start;
                start = 0;
                end = this.length;
              } else if (typeof end === 'string') {
                encoding = end;
                end = this.length;
              }
              if (encoding !== undefined && typeof encoding !== 'string') {
                throw new TypeError('encoding must be a string');
              }
              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding);
              }
              if (val.length === 1) {
                var code = val.charCodeAt(0);
                if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
                  // Fast path: If `val` fits into a single byte, use that numeric value.
                  val = code;
                }
              }
            } else if (typeof val === 'number') {
              val = val & 255;
            } else if (typeof val === 'boolean') {
              val = Number(val);
            } // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError('Out of range index');
            }
            if (end <= start) {
              return this;
            }
            start = start >>> 0;
            end = end === undefined ? this.length : end >>> 0;
            if (!val) val = 0;
            var i;
            if (typeof val === 'number') {
              for (i = start; i < end; ++i) {
                this[i] = val;
              }
            } else {
              var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
              var len = bytes.length;
              if (len === 0) {
                throw new TypeError('The value "' + val + '" is invalid for argument "value"');
              }
              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len];
              }
            }
            return this;
          }; // HELPER FUNCTIONS
          // ================
          var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
          function base64clean(str) {
            // Node takes equal signs as end of the Base64 encoding
            str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''
            if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
              str = str + '=';
            }
            return str;
          }
          function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];
            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i); // is surrogate component
              if (codePoint > 0xD7FF && codePoint < 0xE000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                  } // valid lead
                  leadSurrogate = codePoint;
                  continue;
                } // 2 leads in a row
                if (codePoint < 0xDC00) {
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  leadSurrogate = codePoint;
                  continue;
                } // valid surrogate pair
                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              }
              leadSurrogate = null; // encode utf8
              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break;
                bytes.push(codePoint);
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break;
                bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break;
                bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break;
                bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
              } else {
                throw new Error('Invalid code point');
              }
            }
            return bytes;
          }
          function asciiToBytes(str) {
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xFF);
            }
            return byteArray;
          }
          function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break;
              c = str.charCodeAt(i);
              hi = c >> 8;
              lo = c % 256;
              byteArray.push(lo);
              byteArray.push(hi);
            }
            return byteArray;
          }
          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str));
          }
          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if (i + offset >= dst.length || i >= src.length) break;
              dst[i + offset] = src[i];
            }
            return i;
          } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
          // the `instanceof` check but they should be treated as of that type.
          // See: https://github.com/feross/buffer/issues/166
          function isInstance(obj, type) {
            return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
          }
          function numberIsNaN(obj) {
            // For IE11 support
            return obj !== obj; // eslint-disable-line no-self-compare
          } // Create lookup table for `toString('hex')`
          // See: https://github.com/feross/buffer/issues/219
          var hexSliceLookupTable = function () {
            var alphabet = '0123456789abcdef';
            var table = new Array(256);
            for (var i = 0; i < 16; ++i) {
              var i16 = i * 16;
              for (var j = 0; j < 16; ++j) {
                table[i16 + j] = alphabet[i] + alphabet[j];
              }
            }
            return table;
          }(); /***/
        },
        /***/5033: /***/function (module) {
          /**
          * Copyright (c) 2019-present, GraphQL Foundation
          *
          * This source code is licensed under the MIT license found in the
          * LICENSE file in the root directory of this source tree.
          *
          * 
          */ // A Function, which when given an Array of keys, returns a Promise of an Array
          // of values or Errors.
          // Optionally turn off batching or caching or provide a cache key function or a
          // custom cache instance.
          // If a custom cache is provided, it must be of this type (a subset of ES6 Map).
          /**
           * A `DataLoader` creates a public API for loading data from a particular
           * data back-end with unique keys such as the `id` column of a SQL table or
           * document name in a MongoDB database, given a batch loading function.
           *
           * Each `DataLoader` instance contains a unique memoized cache. Use caution when
           * used in long-lived applications or those which serve many users with
           * different access permissions and consider creating a new instance per
           * web request.
           */
          var DataLoader = /*#__PURE__*/function () {
            function DataLoader(batchLoadFn, options) {
              if (typeof batchLoadFn !== 'function') {
                throw new TypeError('DataLoader must be constructed with a function which accepts ' + ("Array<key> and returns Promise<Array<value>>, but got: " + batchLoadFn + "."));
              }
              this._batchLoadFn = batchLoadFn;
              this._maxBatchSize = getValidMaxBatchSize(options);
              this._batchScheduleFn = getValidBatchScheduleFn(options);
              this._cacheKeyFn = getValidCacheKeyFn(options);
              this._cacheMap = getValidCacheMap(options);
              this._batch = null;
              this.name = getValidName(options);
            } // Private
            var _proto = DataLoader.prototype; /**
                                               * Loads a key, returning a `Promise` for the value represented by that key.
                                               */
            _proto.load = function load(key) {
              if (key === null || key === undefined) {
                throw new TypeError('The loader.load() function must be called with a value, ' + ("but got: " + String(key) + "."));
              }
              var batch = getCurrentBatch(this);
              var cacheMap = this._cacheMap;
              var cacheKey = this._cacheKeyFn(key); // If caching and there is a cache-hit, return cached Promise.
              if (cacheMap) {
                var cachedPromise = cacheMap.get(cacheKey);
                if (cachedPromise) {
                  var cacheHits = batch.cacheHits || (batch.cacheHits = []);
                  return new Promise(function (resolve) {
                    cacheHits.push(function () {
                      resolve(cachedPromise);
                    });
                  });
                }
              } // Otherwise, produce a new Promise for this key, and enqueue it to be
              // dispatched along with the current batch.
              batch.keys.push(key);
              var promise = new Promise(function (resolve, reject) {
                batch.callbacks.push({
                  resolve: resolve,
                  reject: reject
                });
              }); // If caching, cache this promise.
              if (cacheMap) {
                cacheMap.set(cacheKey, promise);
              }
              return promise;
            } /**
              * Loads multiple keys, promising an array of values:
              *
              *     var [ a, b ] = await myLoader.loadMany([ 'a', 'b' ]);
              *
              * This is similar to the more verbose:
              *
              *     var [ a, b ] = await Promise.all([
              *       myLoader.load('a'),
              *       myLoader.load('b')
              *     ]);
              *
              * However it is different in the case where any load fails. Where
              * Promise.all() would reject, loadMany() always resolves, however each result
              * is either a value or an Error instance.
              *
              *     var [ a, b, c ] = await myLoader.loadMany([ 'a', 'b', 'badkey' ]);
              *     // c instanceof Error
              *
              */;
            _proto.loadMany = function loadMany(keys) {
              if (!isArrayLike(keys)) {
                throw new TypeError('The loader.loadMany() function must be called with Array<key> ' + ("but got: " + keys + "."));
              } // Support ArrayLike by using only minimal property access
              var loadPromises = [];
              for (var i = 0; i < keys.length; i++) {
                loadPromises.push(this.load(keys[i])["catch"](function (error) {
                  return error;
                }));
              }
              return Promise.all(loadPromises);
            } /**
              * Clears the value at `key` from the cache, if it exists. Returns itself for
              * method chaining.
              */;
            _proto.clear = function clear(key) {
              var cacheMap = this._cacheMap;
              if (cacheMap) {
                var cacheKey = this._cacheKeyFn(key);
                cacheMap["delete"](cacheKey);
              }
              return this;
            } /**
              * Clears the entire cache. To be used when some event results in unknown
              * invalidations across this particular `DataLoader`. Returns itself for
              * method chaining.
              */;
            _proto.clearAll = function clearAll() {
              var cacheMap = this._cacheMap;
              if (cacheMap) {
                cacheMap.clear();
              }
              return this;
            } /**
              * Adds the provided key and value to the cache. If the key already
              * exists, no change is made. Returns itself for method chaining.
              *
              * To prime the cache with an error at a key, provide an Error instance.
              */;
            _proto.prime = function prime(key, value) {
              var cacheMap = this._cacheMap;
              if (cacheMap) {
                var cacheKey = this._cacheKeyFn(key); // Only add the key if it does not already exist.
                if (cacheMap.get(cacheKey) === undefined) {
                  // Cache a rejected promise if the value is an Error, in order to match
                  // the behavior of load(key).
                  var promise;
                  if (value instanceof Error) {
                    promise = Promise.reject(value); // Since this is a case where an Error is intentionally being primed
                    // for a given key, we want to disable unhandled promise rejection.
                    promise["catch"](function () {});
                  } else {
                    promise = Promise.resolve(value);
                  }
                  cacheMap.set(cacheKey, promise);
                }
              }
              return this;
            } /**
              * The name given to this `DataLoader` instance. Useful for APM tools.
              *
              * Is `null` if not set in the constructor.
              */;
            return DataLoader;
          }(); // Private: Enqueue a Job to be executed after all "PromiseJobs" Jobs.
          //
          // ES6 JavaScript uses the concepts Job and JobQueue to schedule work to occur
          // after the current execution context has completed:
          // http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues
          //
          // Node.js uses the `process.nextTick` mechanism to implement the concept of a
          // Job, maintaining a global FIFO JobQueue for all Jobs, which is flushed after
          // the current call stack ends.
          //
          // When calling `then` on a Promise, it enqueues a Job on a specific
          // "PromiseJobs" JobQueue which is flushed in Node as a single Job on the
          // global JobQueue.
          //
          // DataLoader batches all loads which occur in a single frame of execution, but
          // should include in the batch all loads which occur during the flushing of the
          // "PromiseJobs" JobQueue after that same execution frame.
          //
          // In order to avoid the DataLoader dispatch Job occuring before "PromiseJobs",
          // A Promise Job is created with the sole purpose of enqueuing a global Job,
          // ensuring that it always occurs after "PromiseJobs" ends.
          //
          // Node.js's job queue is unique. Browsers do not have an equivalent mechanism
          // for enqueuing a job to be performed after promise microtasks and before the
          // next macrotask. For browser environments, a macrotask is used (via
          // setImmediate or setTimeout) at a potential performance penalty.
          var enqueuePostPromiseJob = typeof process === 'object' && typeof process.nextTick === 'function' ? function (fn) {
            if (!resolvedPromise) {
              resolvedPromise = Promise.resolve();
            }
            resolvedPromise.then(function () {
              process.nextTick(fn);
            });
          } : typeof setImmediate === 'function' ? function (fn) {
            setImmediate(fn);
          } : function (fn) {
            setTimeout(fn);
          }; // Private: cached resolved Promise instance
          var resolvedPromise; // Private: Describes a batch of requests
          // Private: Either returns the current batch, or creates and schedules a
          // dispatch of a new batch for the given loader.
          function getCurrentBatch(loader) {
            // If there is an existing batch which has not yet dispatched and is within
            // the limit of the batch size, then return it.
            var existingBatch = loader._batch;
            if (existingBatch !== null && !existingBatch.hasDispatched && existingBatch.keys.length < loader._maxBatchSize) {
              return existingBatch;
            } // Otherwise, create a new batch for this loader.
            var newBatch = {
              hasDispatched: false,
              keys: [],
              callbacks: []
            }; // Store it on the loader so it may be reused.
            loader._batch = newBatch; // Then schedule a task to dispatch this batch of requests.
            loader._batchScheduleFn(function () {
              dispatchBatch(loader, newBatch);
            });
            return newBatch;
          }
          function dispatchBatch(loader, batch) {
            // Mark this batch as having been dispatched.
            batch.hasDispatched = true; // If there's nothing to load, resolve any cache hits and return early.
            if (batch.keys.length === 0) {
              resolveCacheHits(batch);
              return;
            } // Call the provided batchLoadFn for this loader with the batch's keys and
            // with the loader as the `this` context.
            var batchPromise;
            try {
              batchPromise = loader._batchLoadFn(batch.keys);
            } catch (e) {
              return failedDispatch(loader, batch, new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function ' + ("errored synchronously: " + String(e) + ".")));
            } // Assert the expected response from batchLoadFn
            if (!batchPromise || typeof batchPromise.then !== 'function') {
              return failedDispatch(loader, batch, new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + ("not return a Promise: " + String(batchPromise) + ".")));
            } // Await the resolution of the call to batchLoadFn.
            batchPromise.then(function (values) {
              // Assert the expected resolution from batchLoadFn.
              if (!isArrayLike(values)) {
                throw new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + ("not return a Promise of an Array: " + String(values) + "."));
              }
              if (values.length !== batch.keys.length) {
                throw new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + 'not return a Promise of an Array of the same length as the Array ' + 'of keys.' + ("\n\nKeys:\n" + String(batch.keys)) + ("\n\nValues:\n" + String(values)));
              } // Resolve all cache hits in the same micro-task as freshly loaded values.
              resolveCacheHits(batch); // Step through values, resolving or rejecting each Promise in the batch.
              for (var i = 0; i < batch.callbacks.length; i++) {
                var value = values[i];
                if (value instanceof Error) {
                  batch.callbacks[i].reject(value);
                } else {
                  batch.callbacks[i].resolve(value);
                }
              }
            })["catch"](function (error) {
              failedDispatch(loader, batch, error);
            });
          } // Private: do not cache individual loads if the entire batch dispatch fails,
          // but still reject each request so they do not hang.
          function failedDispatch(loader, batch, error) {
            // Cache hits are resolved, even though the batch failed.
            resolveCacheHits(batch);
            for (var i = 0; i < batch.keys.length; i++) {
              loader.clear(batch.keys[i]);
              batch.callbacks[i].reject(error);
            }
          } // Private: Resolves the Promises for any cache hits in this batch.
          function resolveCacheHits(batch) {
            if (batch.cacheHits) {
              for (var i = 0; i < batch.cacheHits.length; i++) {
                batch.cacheHits[i]();
              }
            }
          } // Private: given the DataLoader's options, produce a valid max batch size.
          function getValidMaxBatchSize(options) {
            var shouldBatch = !options || options.batch !== false;
            if (!shouldBatch) {
              return 1;
            }
            var maxBatchSize = options && options.maxBatchSize;
            if (maxBatchSize === undefined) {
              return Infinity;
            }
            if (typeof maxBatchSize !== 'number' || maxBatchSize < 1) {
              throw new TypeError("maxBatchSize must be a positive number: " + maxBatchSize);
            }
            return maxBatchSize;
          } // Private
          function getValidBatchScheduleFn(options) {
            var batchScheduleFn = options && options.batchScheduleFn;
            if (batchScheduleFn === undefined) {
              return enqueuePostPromiseJob;
            }
            if (typeof batchScheduleFn !== 'function') {
              throw new TypeError("batchScheduleFn must be a function: " + batchScheduleFn);
            }
            return batchScheduleFn;
          } // Private: given the DataLoader's options, produce a cache key function.
          function getValidCacheKeyFn(options) {
            var cacheKeyFn = options && options.cacheKeyFn;
            if (cacheKeyFn === undefined) {
              return function (key) {
                return key;
              };
            }
            if (typeof cacheKeyFn !== 'function') {
              throw new TypeError("cacheKeyFn must be a function: " + cacheKeyFn);
            }
            return cacheKeyFn;
          } // Private: given the DataLoader's options, produce a CacheMap to be used.
          function getValidCacheMap(options) {
            var shouldCache = !options || options.cache !== false;
            if (!shouldCache) {
              return null;
            }
            var cacheMap = options && options.cacheMap;
            if (cacheMap === undefined) {
              return new Map();
            }
            if (cacheMap !== null) {
              var cacheFunctions = ['get', 'set', 'delete', 'clear'];
              var missingFunctions = cacheFunctions.filter(function (fnName) {
                return cacheMap && typeof cacheMap[fnName] !== 'function';
              });
              if (missingFunctions.length !== 0) {
                throw new TypeError('Custom cacheMap missing methods: ' + missingFunctions.join(', '));
              }
            }
            return cacheMap;
          }
          function getValidName(options) {
            if (options && options.name) {
              return options.name;
            }
            return null;
          } // Private
          function isArrayLike(x) {
            return typeof x === 'object' && x !== null && typeof x.length === 'number' && (x.length === 0 || x.length > 0 && Object.prototype.hasOwnProperty.call(x, x.length - 1));
          }
          module.exports = DataLoader; /***/
        },
        /***/2743: /***/function (module) {
          var isMergeableObject = function isMergeableObject(value) {
            return isNonNullObject(value) && !isSpecial(value);
          };
          function isNonNullObject(value) {
            return !!value && typeof value === 'object';
          }
          function isSpecial(value) {
            var stringValue = Object.prototype.toString.call(value);
            return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
          } // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
          var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
          var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
          function isReactElement(value) {
            return value.$$typeof === REACT_ELEMENT_TYPE;
          }
          function emptyTarget(val) {
            return Array.isArray(val) ? [] : {};
          }
          function cloneUnlessOtherwiseSpecified(value, options) {
            return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
          }
          function defaultArrayMerge(target, source, options) {
            return target.concat(source).map(function (element) {
              return cloneUnlessOtherwiseSpecified(element, options);
            });
          }
          function getMergeFunction(key, options) {
            if (!options.customMerge) {
              return deepmerge;
            }
            var customMerge = options.customMerge(key);
            return typeof customMerge === 'function' ? customMerge : deepmerge;
          }
          function getEnumerableOwnPropertySymbols(target) {
            return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
              return Object.propertyIsEnumerable.call(target, symbol);
            }) : [];
          }
          function getKeys(target) {
            return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
          }
          function propertyIsOnObject(object, property) {
            try {
              return property in object;
            } catch (_) {
              return false;
            }
          } // Protects from prototype poisoning and unexpected merging up the prototype chain.
          function propertyIsUnsafe(target, key) {
            return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
            && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
            && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
          }
          function mergeObject(target, source, options) {
            var destination = {};
            if (options.isMergeableObject(target)) {
              getKeys(target).forEach(function (key) {
                destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
              });
            }
            getKeys(source).forEach(function (key) {
              if (propertyIsUnsafe(target, key)) {
                return;
              }
              if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
                destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
              } else {
                destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
              }
            });
            return destination;
          }
          function deepmerge(target, source, options) {
            options = options || {};
            options.arrayMerge = options.arrayMerge || defaultArrayMerge;
            options.isMergeableObject = options.isMergeableObject || isMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
            // implementations can use it. The caller may not replace it.
            options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
            var sourceIsArray = Array.isArray(source);
            var targetIsArray = Array.isArray(target);
            var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
            if (!sourceAndTargetTypesMatch) {
              return cloneUnlessOtherwiseSpecified(source, options);
            } else if (sourceIsArray) {
              return options.arrayMerge(target, source, options);
            } else {
              return mergeObject(target, source, options);
            }
          }
          deepmerge.all = function deepmergeAll(array, options) {
            if (!Array.isArray(array)) {
              throw new Error('first argument should be an array');
            }
            return array.reduce(function (prev, next) {
              return deepmerge(prev, next, options);
            }, {});
          };
          var deepmerge_1 = deepmerge;
          module.exports = deepmerge_1; /***/
        },
        /***/9318: /***/function (__unused_webpack_module, exports) {
          /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & (1 << -nBits) - 1;
            s >>= -nBits;
            nBits += eLen;
            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          };
          exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }
              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }
              if (value * c >= 2) {
                e++;
                c /= 2;
              }
              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }
            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
            e = e << mLen | m;
            eLen += mLen;
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
            buffer[offset + i - d] |= s * 128;
          }; /***/
        },
        /***/3493: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          // the whatwg-fetch polyfill installs the fetch() function
          // on the global object (window or self)
          //
          // Return that as the export for use in Webpack, Browserify etc.
          __webpack_require__(6603);
          module.exports = self.fetch.bind(self); /***/
        },
        /***/5548: /***/function (module) {
          /**
          * A JavaScript implementation of the SHA family of hashes - defined in FIPS PUB 180-4, FIPS PUB 202,
          * and SP 800-185 - as well as the corresponding HMAC implementation as defined in FIPS PUB 198-1.
          *
          * Copyright 2008-2020 Brian Turek, 1998-2009 Paul Johnston & Contributors
          * Distributed under the BSD License
          * See http://caligatio.github.com/jsSHA/ for more information
          *
          * Two ECMAScript polyfill functions carry the following license:
          *
          * Copyright (c) Microsoft Corporation. All rights reserved.
          * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
          * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
          *
          * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
          * INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
          * MERCHANTABLITY OR NON-INFRINGEMENT.
          *
          * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
          */
          !function (n, r) {
            module.exports = r();
          }(this, function () {
            var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            function r(n, r, t, e) {
              var i,
                o,
                u,
                f = r || [0],
                w = (t = t || 0) >>> 3,
                s = -1 === e ? 3 : 0;
              for (i = 0; i < n.length; i += 1) o = (u = i + w) >>> 2, f.length <= o && f.push(0), f[o] |= n[i] << 8 * (s + e * (u % 4));
              return {
                value: f,
                binLen: 8 * n.length + t
              };
            }
            function t(t, e, i) {
              switch (e) {
                case "UTF8":
                case "UTF16BE":
                case "UTF16LE":
                  break;
                default:
                  throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE");
              }
              switch (t) {
                case "HEX":
                  return function (n, r, t) {
                    return function (n, r, t, e) {
                      var i, o, u, f;
                      if (0 != n.length % 2) throw new Error("String of HEX type must be in byte increments");
                      var w = r || [0],
                        s = (t = t || 0) >>> 3,
                        a = -1 === e ? 3 : 0;
                      for (i = 0; i < n.length; i += 2) {
                        if (o = parseInt(n.substr(i, 2), 16), isNaN(o)) throw new Error("String of HEX type contains invalid characters");
                        for (u = (f = (i >>> 1) + s) >>> 2; w.length <= u;) w.push(0);
                        w[u] |= o << 8 * (a + e * (f % 4));
                      }
                      return {
                        value: w,
                        binLen: 4 * n.length + t
                      };
                    }(n, r, t, i);
                  };
                case "TEXT":
                  return function (n, r, t) {
                    return function (n, r, t, e, i) {
                      var o,
                        u,
                        f,
                        w,
                        s,
                        a,
                        h,
                        c,
                        v = 0,
                        A = t || [0],
                        E = (e = e || 0) >>> 3;
                      if ("UTF8" === r) for (h = -1 === i ? 3 : 0, f = 0; f < n.length; f += 1) for (u = [], 128 > (o = n.charCodeAt(f)) ? u.push(o) : 2048 > o ? (u.push(192 | o >>> 6), u.push(128 | 63 & o)) : 55296 > o || 57344 <= o ? u.push(224 | o >>> 12, 128 | o >>> 6 & 63, 128 | 63 & o) : (f += 1, o = 65536 + ((1023 & o) << 10 | 1023 & n.charCodeAt(f)), u.push(240 | o >>> 18, 128 | o >>> 12 & 63, 128 | o >>> 6 & 63, 128 | 63 & o)), w = 0; w < u.length; w += 1) {
                        for (s = (a = v + E) >>> 2; A.length <= s;) A.push(0);
                        A[s] |= u[w] << 8 * (h + i * (a % 4)), v += 1;
                      } else for (h = -1 === i ? 2 : 0, c = "UTF16LE" === r && 1 !== i || "UTF16LE" !== r && 1 === i, f = 0; f < n.length; f += 1) {
                        for (o = n.charCodeAt(f), !0 === c && (o = (w = 255 & o) << 8 | o >>> 8), s = (a = v + E) >>> 2; A.length <= s;) A.push(0);
                        A[s] |= o << 8 * (h + i * (a % 4)), v += 2;
                      }
                      return {
                        value: A,
                        binLen: 8 * v + e
                      };
                    }(n, e, r, t, i);
                  };
                case "B64":
                  return function (r, t, e) {
                    return function (r, t, e, i) {
                      var o,
                        u,
                        f,
                        w,
                        s,
                        a,
                        h = 0,
                        c = t || [0],
                        v = (e = e || 0) >>> 3,
                        A = -1 === i ? 3 : 0,
                        E = r.indexOf("=");
                      if (-1 === r.search(/^[a-zA-Z0-9=+/]+$/)) throw new Error("Invalid character in base-64 string");
                      if (r = r.replace(/=/g, ""), -1 !== E && E < r.length) throw new Error("Invalid '=' found in base-64 string");
                      for (o = 0; o < r.length; o += 4) {
                        for (w = r.substr(o, 4), f = 0, u = 0; u < w.length; u += 1) f |= n.indexOf(w.charAt(u)) << 18 - 6 * u;
                        for (u = 0; u < w.length - 1; u += 1) {
                          for (s = (a = h + v) >>> 2; c.length <= s;) c.push(0);
                          c[s] |= (f >>> 16 - 8 * u & 255) << 8 * (A + i * (a % 4)), h += 1;
                        }
                      }
                      return {
                        value: c,
                        binLen: 8 * h + e
                      };
                    }(r, t, e, i);
                  };
                case "BYTES":
                  return function (n, r, t) {
                    return function (n, r, t, e) {
                      var i,
                        o,
                        u,
                        f,
                        w = r || [0],
                        s = (t = t || 0) >>> 3,
                        a = -1 === e ? 3 : 0;
                      for (o = 0; o < n.length; o += 1) i = n.charCodeAt(o), u = (f = o + s) >>> 2, w.length <= u && w.push(0), w[u] |= i << 8 * (a + e * (f % 4));
                      return {
                        value: w,
                        binLen: 8 * n.length + t
                      };
                    }(n, r, t, i);
                  };
                case "ARRAYBUFFER":
                  try {
                    new ArrayBuffer(0);
                  } catch (n) {
                    throw new Error("ARRAYBUFFER not supported by this environment");
                  }
                  return function (n, t, e) {
                    return function (n, t, e, i) {
                      return r(new Uint8Array(n), t, e, i);
                    }(n, t, e, i);
                  };
                case "UINT8ARRAY":
                  try {
                    new Uint8Array(0);
                  } catch (n) {
                    throw new Error("UINT8ARRAY not supported by this environment");
                  }
                  return function (n, t, e) {
                    return r(n, t, e, i);
                  };
                default:
                  throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
              }
            }
            function e(r, t, e, i) {
              switch (r) {
                case "HEX":
                  return function (n) {
                    return function (n, r, t, e) {
                      var i,
                        o,
                        u = "",
                        f = r / 8,
                        w = -1 === t ? 3 : 0;
                      for (i = 0; i < f; i += 1) o = n[i >>> 2] >>> 8 * (w + t * (i % 4)), u += "0123456789abcdef".charAt(o >>> 4 & 15) + "0123456789abcdef".charAt(15 & o);
                      return e.outputUpper ? u.toUpperCase() : u;
                    }(n, t, e, i);
                  };
                case "B64":
                  return function (r) {
                    return function (r, t, e, i) {
                      var o,
                        u,
                        f,
                        w,
                        s,
                        a = "",
                        h = t / 8,
                        c = -1 === e ? 3 : 0;
                      for (o = 0; o < h; o += 3) for (w = o + 1 < h ? r[o + 1 >>> 2] : 0, s = o + 2 < h ? r[o + 2 >>> 2] : 0, f = (r[o >>> 2] >>> 8 * (c + e * (o % 4)) & 255) << 16 | (w >>> 8 * (c + e * ((o + 1) % 4)) & 255) << 8 | s >>> 8 * (c + e * ((o + 2) % 4)) & 255, u = 0; u < 4; u += 1) a += 8 * o + 6 * u <= t ? n.charAt(f >>> 6 * (3 - u) & 63) : i.b64Pad;
                      return a;
                    }(r, t, e, i);
                  };
                case "BYTES":
                  return function (n) {
                    return function (n, r, t) {
                      var e,
                        i,
                        o = "",
                        u = r / 8,
                        f = -1 === t ? 3 : 0;
                      for (e = 0; e < u; e += 1) i = n[e >>> 2] >>> 8 * (f + t * (e % 4)) & 255, o += String.fromCharCode(i);
                      return o;
                    }(n, t, e);
                  };
                case "ARRAYBUFFER":
                  try {
                    new ArrayBuffer(0);
                  } catch (n) {
                    throw new Error("ARRAYBUFFER not supported by this environment");
                  }
                  return function (n) {
                    return function (n, r, t) {
                      var e,
                        i = r / 8,
                        o = new ArrayBuffer(i),
                        u = new Uint8Array(o),
                        f = -1 === t ? 3 : 0;
                      for (e = 0; e < i; e += 1) u[e] = n[e >>> 2] >>> 8 * (f + t * (e % 4)) & 255;
                      return o;
                    }(n, t, e);
                  };
                case "UINT8ARRAY":
                  try {
                    new Uint8Array(0);
                  } catch (n) {
                    throw new Error("UINT8ARRAY not supported by this environment");
                  }
                  return function (n) {
                    return function (n, r, t) {
                      var e,
                        i = r / 8,
                        o = -1 === t ? 3 : 0,
                        u = new Uint8Array(i);
                      for (e = 0; e < i; e += 1) u[e] = n[e >>> 2] >>> 8 * (o + t * (e % 4)) & 255;
                      return u;
                    }(n, t, e);
                  };
                default:
                  throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
              }
            }
            var i = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298],
              o = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428],
              u = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225],
              f = "Chosen SHA variant is not supported";
            function w(n, r) {
              var t,
                e,
                i = n.binLen >>> 3,
                o = r.binLen >>> 3,
                u = i << 3,
                f = 4 - i << 3;
              if (i % 4 != 0) {
                for (t = 0; t < o; t += 4) e = i + t >>> 2, n.value[e] |= r.value[t >>> 2] << u, n.value.push(0), n.value[e + 1] |= r.value[t >>> 2] >>> f;
                return (n.value.length << 2) - 4 >= o + i && n.value.pop(), {
                  value: n.value,
                  binLen: n.binLen + r.binLen
                };
              }
              return {
                value: n.value.concat(r.value),
                binLen: n.binLen + r.binLen
              };
            }
            function s(n) {
              var r = {
                  outputUpper: !1,
                  b64Pad: "=",
                  outputLen: -1
                },
                t = n || {},
                e = "Output length must be a multiple of 8";
              if (r.outputUpper = t.outputUpper || !1, t.b64Pad && (r.b64Pad = t.b64Pad), t.outputLen) {
                if (t.outputLen % 8 != 0) throw new Error(e);
                r.outputLen = t.outputLen;
              } else if (t.shakeLen) {
                if (t.shakeLen % 8 != 0) throw new Error(e);
                r.outputLen = t.shakeLen;
              }
              if ("boolean" != typeof r.outputUpper) throw new Error("Invalid outputUpper formatting option");
              if ("string" != typeof r.b64Pad) throw new Error("Invalid b64Pad formatting option");
              return r;
            }
            function a(n, r, e, i) {
              var o = n + " must include a value and format";
              if (!r) {
                if (!i) throw new Error(o);
                return i;
              }
              if (void 0 === r.value || !r.format) throw new Error(o);
              return t(r.format, r.encoding || "UTF8", e)(r.value);
            }
            var h = function () {
                function n(n, r, t) {
                  var e = t || {};
                  if (this.t = r, this.i = e.encoding || "UTF8", this.numRounds = e.numRounds || 1, isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds) throw new Error("numRounds must a integer >= 1");
                  this.o = n, this.u = [], this.s = 0, this.h = !1, this.v = 0, this.A = !1, this.l = [], this.H = [];
                }
                return n.prototype.update = function (n) {
                  var r,
                    t = 0,
                    e = this.S >>> 5,
                    i = this.p(n, this.u, this.s),
                    o = i.binLen,
                    u = i.value,
                    f = o >>> 5;
                  for (r = 0; r < f; r += e) t + this.S <= o && (this.m = this.R(u.slice(r, r + e), this.m), t += this.S);
                  this.v += t, this.u = u.slice(t >>> 5), this.s = o % this.S, this.h = !0;
                }, n.prototype.getHash = function (n, r) {
                  var t,
                    i,
                    o = this.U,
                    u = s(r);
                  if (this.T) {
                    if (-1 === u.outputLen) throw new Error("Output length must be specified in options");
                    o = u.outputLen;
                  }
                  var f = e(n, o, this.C, u);
                  if (this.A && this.F) return f(this.F(u));
                  for (i = this.K(this.u.slice(), this.s, this.v, this.B(this.m), o), t = 1; t < this.numRounds; t += 1) this.T && o % 32 != 0 && (i[i.length - 1] &= 16777215 >>> 24 - o % 32), i = this.K(i, o, 0, this.L(this.o), o);
                  return f(i);
                }, n.prototype.setHMACKey = function (n, r, e) {
                  if (!this.g) throw new Error("Variant does not support HMAC");
                  if (this.h) throw new Error("Cannot set MAC key after calling update");
                  var i = t(r, (e || {}).encoding || "UTF8", this.C);
                  this.k(i(n));
                }, n.prototype.k = function (n) {
                  var r,
                    t = this.S >>> 3,
                    e = t / 4 - 1;
                  if (1 !== this.numRounds) throw new Error("Cannot set numRounds with MAC");
                  if (this.A) throw new Error("MAC key already set");
                  for (t < n.binLen / 8 && (n.value = this.K(n.value, n.binLen, 0, this.L(this.o), this.U)); n.value.length <= e;) n.value.push(0);
                  for (r = 0; r <= e; r += 1) this.l[r] = 909522486 ^ n.value[r], this.H[r] = 1549556828 ^ n.value[r];
                  this.m = this.R(this.l, this.m), this.v = this.S, this.A = !0;
                }, n.prototype.getHMAC = function (n, r) {
                  var t = s(r);
                  return e(n, this.U, this.C, t)(this.Y());
                }, n.prototype.Y = function () {
                  var n;
                  if (!this.A) throw new Error("Cannot call getHMAC without first setting MAC key");
                  var r = this.K(this.u.slice(), this.s, this.v, this.B(this.m), this.U);
                  return n = this.R(this.H, this.L(this.o)), n = this.K(r, this.U, this.S, n, this.U);
                }, n;
              }(),
              c = function (n, r) {
                return (c = Object.setPrototypeOf || {
                  __proto__: []
                } instanceof Array && function (n, r) {
                  n.__proto__ = r;
                } || function (n, r) {
                  for (var t in r) Object.prototype.hasOwnProperty.call(r, t) && (n[t] = r[t]);
                })(n, r);
              };
            function v(n, r) {
              function t() {
                this.constructor = n;
              }
              c(n, r), n.prototype = null === r ? Object.create(r) : (t.prototype = r.prototype, new t());
            }
            function A(n, r) {
              return n << r | n >>> 32 - r;
            }
            function E(n, r) {
              return n >>> r | n << 32 - r;
            }
            function l(n, r) {
              return n >>> r;
            }
            function b(n, r, t) {
              return n ^ r ^ t;
            }
            function H(n, r, t) {
              return n & r ^ ~n & t;
            }
            function d(n, r, t) {
              return n & r ^ n & t ^ r & t;
            }
            function S(n) {
              return E(n, 2) ^ E(n, 13) ^ E(n, 22);
            }
            function p(n, r) {
              var t = (65535 & n) + (65535 & r);
              return (65535 & (n >>> 16) + (r >>> 16) + (t >>> 16)) << 16 | 65535 & t;
            }
            function m(n, r, t, e) {
              var i = (65535 & n) + (65535 & r) + (65535 & t) + (65535 & e);
              return (65535 & (n >>> 16) + (r >>> 16) + (t >>> 16) + (e >>> 16) + (i >>> 16)) << 16 | 65535 & i;
            }
            function y(n, r, t, e, i) {
              var o = (65535 & n) + (65535 & r) + (65535 & t) + (65535 & e) + (65535 & i);
              return (65535 & (n >>> 16) + (r >>> 16) + (t >>> 16) + (e >>> 16) + (i >>> 16) + (o >>> 16)) << 16 | 65535 & o;
            }
            function R(n) {
              return E(n, 7) ^ E(n, 18) ^ l(n, 3);
            }
            function U(n) {
              return E(n, 6) ^ E(n, 11) ^ E(n, 25);
            }
            function T(n) {
              return [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
            }
            function C(n, r) {
              var t,
                e,
                i,
                o,
                u,
                f,
                w,
                s = [];
              for (t = r[0], e = r[1], i = r[2], o = r[3], u = r[4], w = 0; w < 80; w += 1) s[w] = w < 16 ? n[w] : A(s[w - 3] ^ s[w - 8] ^ s[w - 14] ^ s[w - 16], 1), f = w < 20 ? y(A(t, 5), H(e, i, o), u, 1518500249, s[w]) : w < 40 ? y(A(t, 5), b(e, i, o), u, 1859775393, s[w]) : w < 60 ? y(A(t, 5), d(e, i, o), u, 2400959708, s[w]) : y(A(t, 5), b(e, i, o), u, 3395469782, s[w]), u = o, o = i, i = A(e, 30), e = t, t = f;
              return r[0] = p(t, r[0]), r[1] = p(e, r[1]), r[2] = p(i, r[2]), r[3] = p(o, r[3]), r[4] = p(u, r[4]), r;
            }
            function F(n, r, t, e) {
              for (var i, o = 15 + (r + 65 >>> 9 << 4), u = r + t; n.length <= o;) n.push(0);
              for (n[r >>> 5] |= 128 << 24 - r % 32, n[o] = 4294967295 & u, n[o - 1] = u / 4294967296 | 0, i = 0; i < n.length; i += 16) e = C(n.slice(i, i + 16), e);
              return e;
            }
            var K = function (n) {
              function r(r, e, i) {
                var o = this;
                if ("SHA-1" !== r) throw new Error(f);
                var u = i || {};
                return (o = n.call(this, r, e, i) || this).g = !0, o.F = o.Y, o.C = -1, o.p = t(o.t, o.i, o.C), o.R = C, o.B = function (n) {
                  return n.slice();
                }, o.L = T, o.K = F, o.m = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], o.S = 512, o.U = 160, o.T = !1, u.hmacKey && o.k(a("hmacKey", u.hmacKey, o.C)), o;
              }
              return v(r, n), r;
            }(h);
            function B(n) {
              return "SHA-224" == n ? o.slice() : u.slice();
            }
            function L(n, r) {
              var t,
                e,
                o,
                u,
                f,
                w,
                s,
                a,
                h,
                c,
                v,
                A,
                b = [];
              for (t = r[0], e = r[1], o = r[2], u = r[3], f = r[4], w = r[5], s = r[6], a = r[7], v = 0; v < 64; v += 1) b[v] = v < 16 ? n[v] : m(E(A = b[v - 2], 17) ^ E(A, 19) ^ l(A, 10), b[v - 7], R(b[v - 15]), b[v - 16]), h = y(a, U(f), H(f, w, s), i[v], b[v]), c = p(S(t), d(t, e, o)), a = s, s = w, w = f, f = p(u, h), u = o, o = e, e = t, t = p(h, c);
              return r[0] = p(t, r[0]), r[1] = p(e, r[1]), r[2] = p(o, r[2]), r[3] = p(u, r[3]), r[4] = p(f, r[4]), r[5] = p(w, r[5]), r[6] = p(s, r[6]), r[7] = p(a, r[7]), r;
            }
            var g = function (n) {
                function r(r, e, i) {
                  var o = this;
                  if ("SHA-224" !== r && "SHA-256" !== r) throw new Error(f);
                  var u = i || {};
                  return (o = n.call(this, r, e, i) || this).F = o.Y, o.g = !0, o.C = -1, o.p = t(o.t, o.i, o.C), o.R = L, o.B = function (n) {
                    return n.slice();
                  }, o.L = B, o.K = function (n, t, e, i) {
                    return function (n, r, t, e, i) {
                      for (var o, u = 15 + (r + 65 >>> 9 << 4), f = r + t; n.length <= u;) n.push(0);
                      for (n[r >>> 5] |= 128 << 24 - r % 32, n[u] = 4294967295 & f, n[u - 1] = f / 4294967296 | 0, o = 0; o < n.length; o += 16) e = L(n.slice(o, o + 16), e);
                      return "SHA-224" === i ? [e[0], e[1], e[2], e[3], e[4], e[5], e[6]] : e;
                    }(n, t, e, i, r);
                  }, o.m = B(r), o.S = 512, o.U = "SHA-224" === r ? 224 : 256, o.T = !1, u.hmacKey && o.k(a("hmacKey", u.hmacKey, o.C)), o;
                }
                return v(r, n), r;
              }(h),
              k = function (n, r) {
                this.N = n, this.I = r;
              };
            function Y(n, r) {
              var t;
              return r > 32 ? (t = 64 - r, new k(n.I << r | n.N >>> t, n.N << r | n.I >>> t)) : 0 !== r ? (t = 32 - r, new k(n.N << r | n.I >>> t, n.I << r | n.N >>> t)) : n;
            }
            function N(n, r) {
              var t;
              return r < 32 ? (t = 32 - r, new k(n.N >>> r | n.I << t, n.I >>> r | n.N << t)) : (t = 64 - r, new k(n.I >>> r | n.N << t, n.N >>> r | n.I << t));
            }
            function I(n, r) {
              return new k(n.N >>> r, n.I >>> r | n.N << 32 - r);
            }
            function M(n, r, t) {
              return new k(n.N & r.N ^ ~n.N & t.N, n.I & r.I ^ ~n.I & t.I);
            }
            function X(n, r, t) {
              return new k(n.N & r.N ^ n.N & t.N ^ r.N & t.N, n.I & r.I ^ n.I & t.I ^ r.I & t.I);
            }
            function z(n) {
              var r = N(n, 28),
                t = N(n, 34),
                e = N(n, 39);
              return new k(r.N ^ t.N ^ e.N, r.I ^ t.I ^ e.I);
            }
            function O(n, r) {
              var t, e;
              t = (65535 & n.I) + (65535 & r.I);
              var i = (65535 & (e = (n.I >>> 16) + (r.I >>> 16) + (t >>> 16))) << 16 | 65535 & t;
              return t = (65535 & n.N) + (65535 & r.N) + (e >>> 16), e = (n.N >>> 16) + (r.N >>> 16) + (t >>> 16), new k((65535 & e) << 16 | 65535 & t, i);
            }
            function j(n, r, t, e) {
              var i, o;
              i = (65535 & n.I) + (65535 & r.I) + (65535 & t.I) + (65535 & e.I);
              var u = (65535 & (o = (n.I >>> 16) + (r.I >>> 16) + (t.I >>> 16) + (e.I >>> 16) + (i >>> 16))) << 16 | 65535 & i;
              return i = (65535 & n.N) + (65535 & r.N) + (65535 & t.N) + (65535 & e.N) + (o >>> 16), o = (n.N >>> 16) + (r.N >>> 16) + (t.N >>> 16) + (e.N >>> 16) + (i >>> 16), new k((65535 & o) << 16 | 65535 & i, u);
            }
            function _(n, r, t, e, i) {
              var o, u;
              o = (65535 & n.I) + (65535 & r.I) + (65535 & t.I) + (65535 & e.I) + (65535 & i.I);
              var f = (65535 & (u = (n.I >>> 16) + (r.I >>> 16) + (t.I >>> 16) + (e.I >>> 16) + (i.I >>> 16) + (o >>> 16))) << 16 | 65535 & o;
              return o = (65535 & n.N) + (65535 & r.N) + (65535 & t.N) + (65535 & e.N) + (65535 & i.N) + (u >>> 16), u = (n.N >>> 16) + (r.N >>> 16) + (t.N >>> 16) + (e.N >>> 16) + (i.N >>> 16) + (o >>> 16), new k((65535 & u) << 16 | 65535 & o, f);
            }
            function P(n, r) {
              return new k(n.N ^ r.N, n.I ^ r.I);
            }
            function x(n) {
              var r = N(n, 1),
                t = N(n, 8),
                e = I(n, 7);
              return new k(r.N ^ t.N ^ e.N, r.I ^ t.I ^ e.I);
            }
            function V(n) {
              var r = N(n, 14),
                t = N(n, 18),
                e = N(n, 41);
              return new k(r.N ^ t.N ^ e.N, r.I ^ t.I ^ e.I);
            }
            var Z = [new k(i[0], 3609767458), new k(i[1], 602891725), new k(i[2], 3964484399), new k(i[3], 2173295548), new k(i[4], 4081628472), new k(i[5], 3053834265), new k(i[6], 2937671579), new k(i[7], 3664609560), new k(i[8], 2734883394), new k(i[9], 1164996542), new k(i[10], 1323610764), new k(i[11], 3590304994), new k(i[12], 4068182383), new k(i[13], 991336113), new k(i[14], 633803317), new k(i[15], 3479774868), new k(i[16], 2666613458), new k(i[17], 944711139), new k(i[18], 2341262773), new k(i[19], 2007800933), new k(i[20], 1495990901), new k(i[21], 1856431235), new k(i[22], 3175218132), new k(i[23], 2198950837), new k(i[24], 3999719339), new k(i[25], 766784016), new k(i[26], 2566594879), new k(i[27], 3203337956), new k(i[28], 1034457026), new k(i[29], 2466948901), new k(i[30], 3758326383), new k(i[31], 168717936), new k(i[32], 1188179964), new k(i[33], 1546045734), new k(i[34], 1522805485), new k(i[35], 2643833823), new k(i[36], 2343527390), new k(i[37], 1014477480), new k(i[38], 1206759142), new k(i[39], 344077627), new k(i[40], 1290863460), new k(i[41], 3158454273), new k(i[42], 3505952657), new k(i[43], 106217008), new k(i[44], 3606008344), new k(i[45], 1432725776), new k(i[46], 1467031594), new k(i[47], 851169720), new k(i[48], 3100823752), new k(i[49], 1363258195), new k(i[50], 3750685593), new k(i[51], 3785050280), new k(i[52], 3318307427), new k(i[53], 3812723403), new k(i[54], 2003034995), new k(i[55], 3602036899), new k(i[56], 1575990012), new k(i[57], 1125592928), new k(i[58], 2716904306), new k(i[59], 442776044), new k(i[60], 593698344), new k(i[61], 3733110249), new k(i[62], 2999351573), new k(i[63], 3815920427), new k(3391569614, 3928383900), new k(3515267271, 566280711), new k(3940187606, 3454069534), new k(4118630271, 4000239992), new k(116418474, 1914138554), new k(174292421, 2731055270), new k(289380356, 3203993006), new k(460393269, 320620315), new k(685471733, 587496836), new k(852142971, 1086792851), new k(1017036298, 365543100), new k(1126000580, 2618297676), new k(1288033470, 3409855158), new k(1501505948, 4234509866), new k(1607167915, 987167468), new k(1816402316, 1246189591)];
            function q(n) {
              return "SHA-384" === n ? [new k(3418070365, o[0]), new k(1654270250, o[1]), new k(2438529370, o[2]), new k(355462360, o[3]), new k(1731405415, o[4]), new k(41048885895, o[5]), new k(3675008525, o[6]), new k(1203062813, o[7])] : [new k(u[0], 4089235720), new k(u[1], 2227873595), new k(u[2], 4271175723), new k(u[3], 1595750129), new k(u[4], 2917565137), new k(u[5], 725511199), new k(u[6], 4215389547), new k(u[7], 327033209)];
            }
            function D(n, r) {
              var t,
                e,
                i,
                o,
                u,
                f,
                w,
                s,
                a,
                h,
                c,
                v,
                A,
                E,
                l,
                b,
                H = [];
              for (t = r[0], e = r[1], i = r[2], o = r[3], u = r[4], f = r[5], w = r[6], s = r[7], c = 0; c < 80; c += 1) c < 16 ? (v = 2 * c, H[c] = new k(n[v], n[v + 1])) : H[c] = j((A = H[c - 2], E = void 0, l = void 0, b = void 0, E = N(A, 19), l = N(A, 61), b = I(A, 6), new k(E.N ^ l.N ^ b.N, E.I ^ l.I ^ b.I)), H[c - 7], x(H[c - 15]), H[c - 16]), a = _(s, V(u), M(u, f, w), Z[c], H[c]), h = O(z(t), X(t, e, i)), s = w, w = f, f = u, u = O(o, a), o = i, i = e, e = t, t = O(a, h);
              return r[0] = O(t, r[0]), r[1] = O(e, r[1]), r[2] = O(i, r[2]), r[3] = O(o, r[3]), r[4] = O(u, r[4]), r[5] = O(f, r[5]), r[6] = O(w, r[6]), r[7] = O(s, r[7]), r;
            }
            var G = function (n) {
                function r(r, e, i) {
                  var o = this;
                  if ("SHA-384" !== r && "SHA-512" !== r) throw new Error(f);
                  var u = i || {};
                  return (o = n.call(this, r, e, i) || this).F = o.Y, o.g = !0, o.C = -1, o.p = t(o.t, o.i, o.C), o.R = D, o.B = function (n) {
                    return n.slice();
                  }, o.L = q, o.K = function (n, t, e, i) {
                    return function (n, r, t, e, i) {
                      for (var o, u = 31 + (r + 129 >>> 10 << 5), f = r + t; n.length <= u;) n.push(0);
                      for (n[r >>> 5] |= 128 << 24 - r % 32, n[u] = 4294967295 & f, n[u - 1] = f / 4294967296 | 0, o = 0; o < n.length; o += 32) e = D(n.slice(o, o + 32), e);
                      return "SHA-384" === i ? [(e = e)[0].N, e[0].I, e[1].N, e[1].I, e[2].N, e[2].I, e[3].N, e[3].I, e[4].N, e[4].I, e[5].N, e[5].I] : [e[0].N, e[0].I, e[1].N, e[1].I, e[2].N, e[2].I, e[3].N, e[3].I, e[4].N, e[4].I, e[5].N, e[5].I, e[6].N, e[6].I, e[7].N, e[7].I];
                    }(n, t, e, i, r);
                  }, o.m = q(r), o.S = 1024, o.U = "SHA-384" === r ? 384 : 512, o.T = !1, u.hmacKey && o.k(a("hmacKey", u.hmacKey, o.C)), o;
                }
                return v(r, n), r;
              }(h),
              J = [new k(0, 1), new k(0, 32898), new k(2147483648, 32906), new k(2147483648, 2147516416), new k(0, 32907), new k(0, 2147483649), new k(2147483648, 2147516545), new k(2147483648, 32777), new k(0, 138), new k(0, 136), new k(0, 2147516425), new k(0, 2147483658), new k(0, 2147516555), new k(2147483648, 139), new k(2147483648, 32905), new k(2147483648, 32771), new k(2147483648, 32770), new k(2147483648, 128), new k(0, 32778), new k(2147483648, 2147483658), new k(2147483648, 2147516545), new k(2147483648, 32896), new k(0, 2147483649), new k(2147483648, 2147516424)],
              Q = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]];
            function W(n) {
              var r,
                t = [];
              for (r = 0; r < 5; r += 1) t[r] = [new k(0, 0), new k(0, 0), new k(0, 0), new k(0, 0), new k(0, 0)];
              return t;
            }
            function $(n) {
              var r,
                t = [];
              for (r = 0; r < 5; r += 1) t[r] = n[r].slice();
              return t;
            }
            function nn(n, r) {
              var t,
                e,
                i,
                o,
                u,
                f,
                w,
                s,
                a,
                h = [],
                c = [];
              if (null !== n) for (e = 0; e < n.length; e += 2) r[(e >>> 1) % 5][(e >>> 1) / 5 | 0] = P(r[(e >>> 1) % 5][(e >>> 1) / 5 | 0], new k(n[e + 1], n[e]));
              for (t = 0; t < 24; t += 1) {
                for (o = W(), e = 0; e < 5; e += 1) h[e] = (u = r[e][0], f = r[e][1], w = r[e][2], s = r[e][3], a = r[e][4], new k(u.N ^ f.N ^ w.N ^ s.N ^ a.N, u.I ^ f.I ^ w.I ^ s.I ^ a.I));
                for (e = 0; e < 5; e += 1) c[e] = P(h[(e + 4) % 5], Y(h[(e + 1) % 5], 1));
                for (e = 0; e < 5; e += 1) for (i = 0; i < 5; i += 1) r[e][i] = P(r[e][i], c[e]);
                for (e = 0; e < 5; e += 1) for (i = 0; i < 5; i += 1) o[i][(2 * e + 3 * i) % 5] = Y(r[e][i], Q[e][i]);
                for (e = 0; e < 5; e += 1) for (i = 0; i < 5; i += 1) r[e][i] = P(o[e][i], new k(~o[(e + 1) % 5][i].N & o[(e + 2) % 5][i].N, ~o[(e + 1) % 5][i].I & o[(e + 2) % 5][i].I));
                r[0][0] = P(r[0][0], J[t]);
              }
              return r;
            }
            function rn(n) {
              var r,
                t,
                e = 0,
                i = [0, 0],
                o = [4294967295 & n, n / 4294967296 & 2097151];
              for (r = 6; r >= 0; r--) 0 === (t = o[r >> 2] >>> 8 * r & 255) && 0 === e || (i[e + 1 >> 2] |= t << 8 * (e + 1), e += 1);
              return e = 0 !== e ? e : 1, i[0] |= e, {
                value: e + 1 > 4 ? i : [i[0]],
                binLen: 8 + 8 * e
              };
            }
            function tn(n) {
              return w(rn(n.binLen), n);
            }
            function en(n, r) {
              var t,
                e = rn(r),
                i = r >>> 2,
                o = (i - (e = w(e, n)).value.length % i) % i;
              for (t = 0; t < o; t++) e.value.push(0);
              return e.value;
            }
            var on = function (n) {
              function r(r, e, i) {
                var o = this,
                  u = 6,
                  w = 0,
                  s = i || {};
                if (1 !== (o = n.call(this, r, e, i) || this).numRounds) {
                  if (s.kmacKey || s.hmacKey) throw new Error("Cannot set numRounds with MAC");
                  if ("CSHAKE128" === o.o || "CSHAKE256" === o.o) throw new Error("Cannot set numRounds for CSHAKE variants");
                }
                switch (o.C = 1, o.p = t(o.t, o.i, o.C), o.R = nn, o.B = $, o.L = W, o.m = W(), o.T = !1, r) {
                  case "SHA3-224":
                    o.S = w = 1152, o.U = 224, o.g = !0, o.F = o.Y;
                    break;
                  case "SHA3-256":
                    o.S = w = 1088, o.U = 256, o.g = !0, o.F = o.Y;
                    break;
                  case "SHA3-384":
                    o.S = w = 832, o.U = 384, o.g = !0, o.F = o.Y;
                    break;
                  case "SHA3-512":
                    o.S = w = 576, o.U = 512, o.g = !0, o.F = o.Y;
                    break;
                  case "SHAKE128":
                    u = 31, o.S = w = 1344, o.U = -1, o.T = !0, o.g = !1, o.F = null;
                    break;
                  case "SHAKE256":
                    u = 31, o.S = w = 1088, o.U = -1, o.T = !0, o.g = !1, o.F = null;
                    break;
                  case "KMAC128":
                    u = 4, o.S = w = 1344, o.M(i), o.U = -1, o.T = !0, o.g = !1, o.F = o.X;
                    break;
                  case "KMAC256":
                    u = 4, o.S = w = 1088, o.M(i), o.U = -1, o.T = !0, o.g = !1, o.F = o.X;
                    break;
                  case "CSHAKE128":
                    o.S = w = 1344, u = o.O(i), o.U = -1, o.T = !0, o.g = !1, o.F = null;
                    break;
                  case "CSHAKE256":
                    o.S = w = 1088, u = o.O(i), o.U = -1, o.T = !0, o.g = !1, o.F = null;
                    break;
                  default:
                    throw new Error(f);
                }
                return o.K = function (n, r, t, e, i) {
                  return function (n, r, t, e, i, o, u) {
                    var f,
                      w,
                      s = 0,
                      a = [],
                      h = i >>> 5,
                      c = r >>> 5;
                    for (f = 0; f < c && r >= i; f += h) e = nn(n.slice(f, f + h), e), r -= i;
                    for (n = n.slice(f), r %= i; n.length < h;) n.push(0);
                    for (n[(f = r >>> 3) >> 2] ^= o << f % 4 * 8, n[h - 1] ^= 2147483648, e = nn(n, e); 32 * a.length < u && (w = e[s % 5][s / 5 | 0], a.push(w.I), !(32 * a.length >= u));) a.push(w.N), 0 == 64 * (s += 1) % i && (nn(null, e), s = 0);
                    return a;
                  }(n, r, 0, e, w, u, i);
                }, s.hmacKey && o.k(a("hmacKey", s.hmacKey, o.C)), o;
              }
              return v(r, n), r.prototype.O = function (n, r) {
                var t = function (n) {
                  var r = n || {};
                  return {
                    funcName: a("funcName", r.funcName, 1, {
                      value: [],
                      binLen: 0
                    }),
                    customization: a("Customization", r.customization, 1, {
                      value: [],
                      binLen: 0
                    })
                  };
                }(n || {});
                r && (t.funcName = r);
                var e = w(tn(t.funcName), tn(t.customization));
                if (0 !== t.customization.binLen || 0 !== t.funcName.binLen) {
                  for (var i = en(e, this.S >>> 3), o = 0; o < i.length; o += this.S >>> 5) this.m = this.R(i.slice(o, o + (this.S >>> 5)), this.m), this.v += this.S;
                  return 4;
                }
                return 31;
              }, r.prototype.M = function (n) {
                var r = function (n) {
                  var r = n || {};
                  return {
                    kmacKey: a("kmacKey", r.kmacKey, 1),
                    funcName: {
                      value: [1128353099],
                      binLen: 32
                    },
                    customization: a("Customization", r.customization, 1, {
                      value: [],
                      binLen: 0
                    })
                  };
                }(n || {});
                this.O(n, r.funcName);
                for (var t = en(tn(r.kmacKey), this.S >>> 3), e = 0; e < t.length; e += this.S >>> 5) this.m = this.R(t.slice(e, e + (this.S >>> 5)), this.m), this.v += this.S;
                this.A = !0;
              }, r.prototype.X = function (n) {
                var r = w({
                  value: this.u.slice(),
                  binLen: this.s
                }, function (n) {
                  var r,
                    t,
                    e = 0,
                    i = [0, 0],
                    o = [4294967295 & n, n / 4294967296 & 2097151];
                  for (r = 6; r >= 0; r--) 0 == (t = o[r >> 2] >>> 8 * r & 255) && 0 === e || (i[e >> 2] |= t << 8 * e, e += 1);
                  return i[(e = 0 !== e ? e : 1) >> 2] |= e << 8 * e, {
                    value: e + 1 > 4 ? i : [i[0]],
                    binLen: 8 + 8 * e
                  };
                }(n.outputLen));
                return this.K(r.value, r.binLen, this.v, this.B(this.m), n.outputLen);
              }, r;
            }(h);
            return function () {
              function n(n, r, t) {
                if ("SHA-1" == n) this.j = new K(n, r, t);else if ("SHA-224" == n || "SHA-256" == n) this.j = new g(n, r, t);else if ("SHA-384" == n || "SHA-512" == n) this.j = new G(n, r, t);else {
                  if ("SHA3-224" != n && "SHA3-256" != n && "SHA3-384" != n && "SHA3-512" != n && "SHAKE128" != n && "SHAKE256" != n && "CSHAKE128" != n && "CSHAKE256" != n && "KMAC128" != n && "KMAC256" != n) throw new Error(f);
                  this.j = new on(n, r, t);
                }
              }
              return n.prototype.update = function (n) {
                this.j.update(n);
              }, n.prototype.getHash = function (n, r) {
                return this.j.getHash(n, r);
              }, n.prototype.setHMACKey = function (n, r, t) {
                this.j.setHMACKey(n, r, t);
              }, n.prototype.getHMAC = function (n, r) {
                return this.j.getHMAC(n, r);
              }, n;
            }();
          }); /***/
        },
        /***/4700: /***/function (module) {
          /**
          * <symbol> that can be used to declare custom inspect functions.
          *
          * same as Symbol.for('nodejs.util.inspect.custom')
          * same as util.inspect.custom
          */
          const SymbolInspect = Symbol.for('nodejs.util.inspect.custom');
          module.exports = SymbolInspect; /***/
        },
        /***/665: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(6928)["Buffer"]; // Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.
          // Public domain.
          (function (root, f) {
            if (module.exports) module.exports = f();else if (root.nacl) root.nacl.util = f();else {
              root.nacl = {};
              root.nacl.util = f();
            }
          })(this, function () {
            var util = {};
            function validateBase64(s) {
              if (!/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s)) {
                throw new TypeError('invalid encoding');
              }
            }
            util.decodeUTF8 = function (s) {
              if (typeof s !== 'string') throw new TypeError('expected string');
              var i,
                d = unescape(encodeURIComponent(s)),
                b = new Uint8Array(d.length);
              for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
              return b;
            };
            util.encodeUTF8 = function (arr) {
              var i,
                s = [];
              for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));
              return decodeURIComponent(escape(s.join('')));
            };
            if (typeof atob === 'undefined') {
              // Node.js
              if (typeof Buffer.from !== 'undefined') {
                // Node v6 and later
                util.encodeBase64 = function (arr) {
                  // v6 and later
                  return Buffer.from(arr).toString('base64');
                };
                util.decodeBase64 = function (s) {
                  validateBase64(s);
                  return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));
                };
              } else {
                // Node earlier than v6
                util.encodeBase64 = function (arr) {
                  // v6 and later
                  return new Buffer(arr).toString('base64');
                };
                util.decodeBase64 = function (s) {
                  validateBase64(s);
                  return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));
                };
              }
            } else {
              // Browsers
              util.encodeBase64 = function (arr) {
                var i,
                  s = [],
                  len = arr.length;
                for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));
                return btoa(s.join(''));
              };
              util.decodeBase64 = function (s) {
                validateBase64(s);
                var i,
                  d = atob(s),
                  b = new Uint8Array(d.length);
                for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
                return b;
              };
            }
            return util;
          }); /***/
        },
        /***/2926: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          (function (nacl) {
            // Public domain.
            //
            // Implementation derived from TweetNaCl version 20140427.
            // See for details: http://tweetnacl.cr.yp.to/
            var gf = function (init) {
              var i,
                r = new Float64Array(16);
              if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
              return r;
            }; //  Pluggable, initialized in high-level API below.
            var randombytes = function /* x, n */ () {
              throw new Error('no PRNG');
            };
            var _0 = new Uint8Array(16);
            var _9 = new Uint8Array(32);
            _9[0] = 9;
            var gf0 = gf(),
              gf1 = gf([1]),
              _121665 = gf([0xdb41, 1]),
              D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
              D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
              X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
              Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
              I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
            function ts64(x, i, h, l) {
              x[i] = h >> 24 & 0xff;
              x[i + 1] = h >> 16 & 0xff;
              x[i + 2] = h >> 8 & 0xff;
              x[i + 3] = h & 0xff;
              x[i + 4] = l >> 24 & 0xff;
              x[i + 5] = l >> 16 & 0xff;
              x[i + 6] = l >> 8 & 0xff;
              x[i + 7] = l & 0xff;
            }
            function vn(x, xi, y, yi, n) {
              var i,
                d = 0;
              for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
              return (1 & d - 1 >>> 8) - 1;
            }
            function crypto_verify_16(x, xi, y, yi) {
              return vn(x, xi, y, yi, 16);
            }
            function crypto_verify_32(x, xi, y, yi) {
              return vn(x, xi, y, yi, 32);
            }
            function core_salsa20(o, p, k, c) {
              var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
                j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
                j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
                j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
                j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
                j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
                j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
                j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
                j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
                j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
                j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
                j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
                j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
                j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
                j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
                j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
              var x0 = j0,
                x1 = j1,
                x2 = j2,
                x3 = j3,
                x4 = j4,
                x5 = j5,
                x6 = j6,
                x7 = j7,
                x8 = j8,
                x9 = j9,
                x10 = j10,
                x11 = j11,
                x12 = j12,
                x13 = j13,
                x14 = j14,
                x15 = j15,
                u;
              for (var i = 0; i < 20; i += 2) {
                u = x0 + x12 | 0;
                x4 ^= u << 7 | u >>> 32 - 7;
                u = x4 + x0 | 0;
                x8 ^= u << 9 | u >>> 32 - 9;
                u = x8 + x4 | 0;
                x12 ^= u << 13 | u >>> 32 - 13;
                u = x12 + x8 | 0;
                x0 ^= u << 18 | u >>> 32 - 18;
                u = x5 + x1 | 0;
                x9 ^= u << 7 | u >>> 32 - 7;
                u = x9 + x5 | 0;
                x13 ^= u << 9 | u >>> 32 - 9;
                u = x13 + x9 | 0;
                x1 ^= u << 13 | u >>> 32 - 13;
                u = x1 + x13 | 0;
                x5 ^= u << 18 | u >>> 32 - 18;
                u = x10 + x6 | 0;
                x14 ^= u << 7 | u >>> 32 - 7;
                u = x14 + x10 | 0;
                x2 ^= u << 9 | u >>> 32 - 9;
                u = x2 + x14 | 0;
                x6 ^= u << 13 | u >>> 32 - 13;
                u = x6 + x2 | 0;
                x10 ^= u << 18 | u >>> 32 - 18;
                u = x15 + x11 | 0;
                x3 ^= u << 7 | u >>> 32 - 7;
                u = x3 + x15 | 0;
                x7 ^= u << 9 | u >>> 32 - 9;
                u = x7 + x3 | 0;
                x11 ^= u << 13 | u >>> 32 - 13;
                u = x11 + x7 | 0;
                x15 ^= u << 18 | u >>> 32 - 18;
                u = x0 + x3 | 0;
                x1 ^= u << 7 | u >>> 32 - 7;
                u = x1 + x0 | 0;
                x2 ^= u << 9 | u >>> 32 - 9;
                u = x2 + x1 | 0;
                x3 ^= u << 13 | u >>> 32 - 13;
                u = x3 + x2 | 0;
                x0 ^= u << 18 | u >>> 32 - 18;
                u = x5 + x4 | 0;
                x6 ^= u << 7 | u >>> 32 - 7;
                u = x6 + x5 | 0;
                x7 ^= u << 9 | u >>> 32 - 9;
                u = x7 + x6 | 0;
                x4 ^= u << 13 | u >>> 32 - 13;
                u = x4 + x7 | 0;
                x5 ^= u << 18 | u >>> 32 - 18;
                u = x10 + x9 | 0;
                x11 ^= u << 7 | u >>> 32 - 7;
                u = x11 + x10 | 0;
                x8 ^= u << 9 | u >>> 32 - 9;
                u = x8 + x11 | 0;
                x9 ^= u << 13 | u >>> 32 - 13;
                u = x9 + x8 | 0;
                x10 ^= u << 18 | u >>> 32 - 18;
                u = x15 + x14 | 0;
                x12 ^= u << 7 | u >>> 32 - 7;
                u = x12 + x15 | 0;
                x13 ^= u << 9 | u >>> 32 - 9;
                u = x13 + x12 | 0;
                x14 ^= u << 13 | u >>> 32 - 13;
                u = x14 + x13 | 0;
                x15 ^= u << 18 | u >>> 32 - 18;
              }
              x0 = x0 + j0 | 0;
              x1 = x1 + j1 | 0;
              x2 = x2 + j2 | 0;
              x3 = x3 + j3 | 0;
              x4 = x4 + j4 | 0;
              x5 = x5 + j5 | 0;
              x6 = x6 + j6 | 0;
              x7 = x7 + j7 | 0;
              x8 = x8 + j8 | 0;
              x9 = x9 + j9 | 0;
              x10 = x10 + j10 | 0;
              x11 = x11 + j11 | 0;
              x12 = x12 + j12 | 0;
              x13 = x13 + j13 | 0;
              x14 = x14 + j14 | 0;
              x15 = x15 + j15 | 0;
              o[0] = x0 >>> 0 & 0xff;
              o[1] = x0 >>> 8 & 0xff;
              o[2] = x0 >>> 16 & 0xff;
              o[3] = x0 >>> 24 & 0xff;
              o[4] = x1 >>> 0 & 0xff;
              o[5] = x1 >>> 8 & 0xff;
              o[6] = x1 >>> 16 & 0xff;
              o[7] = x1 >>> 24 & 0xff;
              o[8] = x2 >>> 0 & 0xff;
              o[9] = x2 >>> 8 & 0xff;
              o[10] = x2 >>> 16 & 0xff;
              o[11] = x2 >>> 24 & 0xff;
              o[12] = x3 >>> 0 & 0xff;
              o[13] = x3 >>> 8 & 0xff;
              o[14] = x3 >>> 16 & 0xff;
              o[15] = x3 >>> 24 & 0xff;
              o[16] = x4 >>> 0 & 0xff;
              o[17] = x4 >>> 8 & 0xff;
              o[18] = x4 >>> 16 & 0xff;
              o[19] = x4 >>> 24 & 0xff;
              o[20] = x5 >>> 0 & 0xff;
              o[21] = x5 >>> 8 & 0xff;
              o[22] = x5 >>> 16 & 0xff;
              o[23] = x5 >>> 24 & 0xff;
              o[24] = x6 >>> 0 & 0xff;
              o[25] = x6 >>> 8 & 0xff;
              o[26] = x6 >>> 16 & 0xff;
              o[27] = x6 >>> 24 & 0xff;
              o[28] = x7 >>> 0 & 0xff;
              o[29] = x7 >>> 8 & 0xff;
              o[30] = x7 >>> 16 & 0xff;
              o[31] = x7 >>> 24 & 0xff;
              o[32] = x8 >>> 0 & 0xff;
              o[33] = x8 >>> 8 & 0xff;
              o[34] = x8 >>> 16 & 0xff;
              o[35] = x8 >>> 24 & 0xff;
              o[36] = x9 >>> 0 & 0xff;
              o[37] = x9 >>> 8 & 0xff;
              o[38] = x9 >>> 16 & 0xff;
              o[39] = x9 >>> 24 & 0xff;
              o[40] = x10 >>> 0 & 0xff;
              o[41] = x10 >>> 8 & 0xff;
              o[42] = x10 >>> 16 & 0xff;
              o[43] = x10 >>> 24 & 0xff;
              o[44] = x11 >>> 0 & 0xff;
              o[45] = x11 >>> 8 & 0xff;
              o[46] = x11 >>> 16 & 0xff;
              o[47] = x11 >>> 24 & 0xff;
              o[48] = x12 >>> 0 & 0xff;
              o[49] = x12 >>> 8 & 0xff;
              o[50] = x12 >>> 16 & 0xff;
              o[51] = x12 >>> 24 & 0xff;
              o[52] = x13 >>> 0 & 0xff;
              o[53] = x13 >>> 8 & 0xff;
              o[54] = x13 >>> 16 & 0xff;
              o[55] = x13 >>> 24 & 0xff;
              o[56] = x14 >>> 0 & 0xff;
              o[57] = x14 >>> 8 & 0xff;
              o[58] = x14 >>> 16 & 0xff;
              o[59] = x14 >>> 24 & 0xff;
              o[60] = x15 >>> 0 & 0xff;
              o[61] = x15 >>> 8 & 0xff;
              o[62] = x15 >>> 16 & 0xff;
              o[63] = x15 >>> 24 & 0xff;
            }
            function core_hsalsa20(o, p, k, c) {
              var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
                j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
                j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
                j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
                j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
                j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
                j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
                j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
                j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
                j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
                j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
                j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
                j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
                j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
                j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
                j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
              var x0 = j0,
                x1 = j1,
                x2 = j2,
                x3 = j3,
                x4 = j4,
                x5 = j5,
                x6 = j6,
                x7 = j7,
                x8 = j8,
                x9 = j9,
                x10 = j10,
                x11 = j11,
                x12 = j12,
                x13 = j13,
                x14 = j14,
                x15 = j15,
                u;
              for (var i = 0; i < 20; i += 2) {
                u = x0 + x12 | 0;
                x4 ^= u << 7 | u >>> 32 - 7;
                u = x4 + x0 | 0;
                x8 ^= u << 9 | u >>> 32 - 9;
                u = x8 + x4 | 0;
                x12 ^= u << 13 | u >>> 32 - 13;
                u = x12 + x8 | 0;
                x0 ^= u << 18 | u >>> 32 - 18;
                u = x5 + x1 | 0;
                x9 ^= u << 7 | u >>> 32 - 7;
                u = x9 + x5 | 0;
                x13 ^= u << 9 | u >>> 32 - 9;
                u = x13 + x9 | 0;
                x1 ^= u << 13 | u >>> 32 - 13;
                u = x1 + x13 | 0;
                x5 ^= u << 18 | u >>> 32 - 18;
                u = x10 + x6 | 0;
                x14 ^= u << 7 | u >>> 32 - 7;
                u = x14 + x10 | 0;
                x2 ^= u << 9 | u >>> 32 - 9;
                u = x2 + x14 | 0;
                x6 ^= u << 13 | u >>> 32 - 13;
                u = x6 + x2 | 0;
                x10 ^= u << 18 | u >>> 32 - 18;
                u = x15 + x11 | 0;
                x3 ^= u << 7 | u >>> 32 - 7;
                u = x3 + x15 | 0;
                x7 ^= u << 9 | u >>> 32 - 9;
                u = x7 + x3 | 0;
                x11 ^= u << 13 | u >>> 32 - 13;
                u = x11 + x7 | 0;
                x15 ^= u << 18 | u >>> 32 - 18;
                u = x0 + x3 | 0;
                x1 ^= u << 7 | u >>> 32 - 7;
                u = x1 + x0 | 0;
                x2 ^= u << 9 | u >>> 32 - 9;
                u = x2 + x1 | 0;
                x3 ^= u << 13 | u >>> 32 - 13;
                u = x3 + x2 | 0;
                x0 ^= u << 18 | u >>> 32 - 18;
                u = x5 + x4 | 0;
                x6 ^= u << 7 | u >>> 32 - 7;
                u = x6 + x5 | 0;
                x7 ^= u << 9 | u >>> 32 - 9;
                u = x7 + x6 | 0;
                x4 ^= u << 13 | u >>> 32 - 13;
                u = x4 + x7 | 0;
                x5 ^= u << 18 | u >>> 32 - 18;
                u = x10 + x9 | 0;
                x11 ^= u << 7 | u >>> 32 - 7;
                u = x11 + x10 | 0;
                x8 ^= u << 9 | u >>> 32 - 9;
                u = x8 + x11 | 0;
                x9 ^= u << 13 | u >>> 32 - 13;
                u = x9 + x8 | 0;
                x10 ^= u << 18 | u >>> 32 - 18;
                u = x15 + x14 | 0;
                x12 ^= u << 7 | u >>> 32 - 7;
                u = x12 + x15 | 0;
                x13 ^= u << 9 | u >>> 32 - 9;
                u = x13 + x12 | 0;
                x14 ^= u << 13 | u >>> 32 - 13;
                u = x14 + x13 | 0;
                x15 ^= u << 18 | u >>> 32 - 18;
              }
              o[0] = x0 >>> 0 & 0xff;
              o[1] = x0 >>> 8 & 0xff;
              o[2] = x0 >>> 16 & 0xff;
              o[3] = x0 >>> 24 & 0xff;
              o[4] = x5 >>> 0 & 0xff;
              o[5] = x5 >>> 8 & 0xff;
              o[6] = x5 >>> 16 & 0xff;
              o[7] = x5 >>> 24 & 0xff;
              o[8] = x10 >>> 0 & 0xff;
              o[9] = x10 >>> 8 & 0xff;
              o[10] = x10 >>> 16 & 0xff;
              o[11] = x10 >>> 24 & 0xff;
              o[12] = x15 >>> 0 & 0xff;
              o[13] = x15 >>> 8 & 0xff;
              o[14] = x15 >>> 16 & 0xff;
              o[15] = x15 >>> 24 & 0xff;
              o[16] = x6 >>> 0 & 0xff;
              o[17] = x6 >>> 8 & 0xff;
              o[18] = x6 >>> 16 & 0xff;
              o[19] = x6 >>> 24 & 0xff;
              o[20] = x7 >>> 0 & 0xff;
              o[21] = x7 >>> 8 & 0xff;
              o[22] = x7 >>> 16 & 0xff;
              o[23] = x7 >>> 24 & 0xff;
              o[24] = x8 >>> 0 & 0xff;
              o[25] = x8 >>> 8 & 0xff;
              o[26] = x8 >>> 16 & 0xff;
              o[27] = x8 >>> 24 & 0xff;
              o[28] = x9 >>> 0 & 0xff;
              o[29] = x9 >>> 8 & 0xff;
              o[30] = x9 >>> 16 & 0xff;
              o[31] = x9 >>> 24 & 0xff;
            }
            function crypto_core_salsa20(out, inp, k, c) {
              core_salsa20(out, inp, k, c);
            }
            function crypto_core_hsalsa20(out, inp, k, c) {
              core_hsalsa20(out, inp, k, c);
            }
            var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]); // "expand 32-byte k"
            function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
              var z = new Uint8Array(16),
                x = new Uint8Array(64);
              var u, i;
              for (i = 0; i < 16; i++) z[i] = 0;
              for (i = 0; i < 8; i++) z[i] = n[i];
              while (b >= 64) {
                crypto_core_salsa20(x, z, k, sigma);
                for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
                u = 1;
                for (i = 8; i < 16; i++) {
                  u = u + (z[i] & 0xff) | 0;
                  z[i] = u & 0xff;
                  u >>>= 8;
                }
                b -= 64;
                cpos += 64;
                mpos += 64;
              }
              if (b > 0) {
                crypto_core_salsa20(x, z, k, sigma);
                for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
              }
              return 0;
            }
            function crypto_stream_salsa20(c, cpos, b, n, k) {
              var z = new Uint8Array(16),
                x = new Uint8Array(64);
              var u, i;
              for (i = 0; i < 16; i++) z[i] = 0;
              for (i = 0; i < 8; i++) z[i] = n[i];
              while (b >= 64) {
                crypto_core_salsa20(x, z, k, sigma);
                for (i = 0; i < 64; i++) c[cpos + i] = x[i];
                u = 1;
                for (i = 8; i < 16; i++) {
                  u = u + (z[i] & 0xff) | 0;
                  z[i] = u & 0xff;
                  u >>>= 8;
                }
                b -= 64;
                cpos += 64;
              }
              if (b > 0) {
                crypto_core_salsa20(x, z, k, sigma);
                for (i = 0; i < b; i++) c[cpos + i] = x[i];
              }
              return 0;
            }
            function crypto_stream(c, cpos, d, n, k) {
              var s = new Uint8Array(32);
              crypto_core_hsalsa20(s, n, k, sigma);
              var sn = new Uint8Array(8);
              for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
              return crypto_stream_salsa20(c, cpos, d, sn, s);
            }
            function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
              var s = new Uint8Array(32);
              crypto_core_hsalsa20(s, n, k, sigma);
              var sn = new Uint8Array(8);
              for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
              return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
            } /*
              * Port of Andrew Moon's Poly1305-donna-16. Public domain.
              * https://github.com/floodyberry/poly1305-donna
              */
            var poly1305 = function (key) {
              this.buffer = new Uint8Array(16);
              this.r = new Uint16Array(10);
              this.h = new Uint16Array(10);
              this.pad = new Uint16Array(8);
              this.leftover = 0;
              this.fin = 0;
              var t0, t1, t2, t3, t4, t5, t6, t7;
              t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
              this.r[0] = t0 & 0x1fff;
              t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
              this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
              t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
              this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
              t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
              this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
              t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
              this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
              this.r[5] = t4 >>> 1 & 0x1ffe;
              t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
              this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
              t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
              this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
              t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
              this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
              this.r[9] = t7 >>> 5 & 0x007f;
              this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
              this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
              this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
              this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
              this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
              this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
              this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
              this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
            };
            poly1305.prototype.blocks = function (m, mpos, bytes) {
              var hibit = this.fin ? 0 : 1 << 11;
              var t0, t1, t2, t3, t4, t5, t6, t7, c;
              var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
              var h0 = this.h[0],
                h1 = this.h[1],
                h2 = this.h[2],
                h3 = this.h[3],
                h4 = this.h[4],
                h5 = this.h[5],
                h6 = this.h[6],
                h7 = this.h[7],
                h8 = this.h[8],
                h9 = this.h[9];
              var r0 = this.r[0],
                r1 = this.r[1],
                r2 = this.r[2],
                r3 = this.r[3],
                r4 = this.r[4],
                r5 = this.r[5],
                r6 = this.r[6],
                r7 = this.r[7],
                r8 = this.r[8],
                r9 = this.r[9];
              while (bytes >= 16) {
                t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
                h0 += t0 & 0x1fff;
                t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
                h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
                t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
                h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
                t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
                h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
                t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
                h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
                h5 += t4 >>> 1 & 0x1fff;
                t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
                h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
                t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
                h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
                t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
                h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
                h9 += t7 >>> 5 | hibit;
                c = 0;
                d0 = c;
                d0 += h0 * r0;
                d0 += h1 * (5 * r9);
                d0 += h2 * (5 * r8);
                d0 += h3 * (5 * r7);
                d0 += h4 * (5 * r6);
                c = d0 >>> 13;
                d0 &= 0x1fff;
                d0 += h5 * (5 * r5);
                d0 += h6 * (5 * r4);
                d0 += h7 * (5 * r3);
                d0 += h8 * (5 * r2);
                d0 += h9 * (5 * r1);
                c += d0 >>> 13;
                d0 &= 0x1fff;
                d1 = c;
                d1 += h0 * r1;
                d1 += h1 * r0;
                d1 += h2 * (5 * r9);
                d1 += h3 * (5 * r8);
                d1 += h4 * (5 * r7);
                c = d1 >>> 13;
                d1 &= 0x1fff;
                d1 += h5 * (5 * r6);
                d1 += h6 * (5 * r5);
                d1 += h7 * (5 * r4);
                d1 += h8 * (5 * r3);
                d1 += h9 * (5 * r2);
                c += d1 >>> 13;
                d1 &= 0x1fff;
                d2 = c;
                d2 += h0 * r2;
                d2 += h1 * r1;
                d2 += h2 * r0;
                d2 += h3 * (5 * r9);
                d2 += h4 * (5 * r8);
                c = d2 >>> 13;
                d2 &= 0x1fff;
                d2 += h5 * (5 * r7);
                d2 += h6 * (5 * r6);
                d2 += h7 * (5 * r5);
                d2 += h8 * (5 * r4);
                d2 += h9 * (5 * r3);
                c += d2 >>> 13;
                d2 &= 0x1fff;
                d3 = c;
                d3 += h0 * r3;
                d3 += h1 * r2;
                d3 += h2 * r1;
                d3 += h3 * r0;
                d3 += h4 * (5 * r9);
                c = d3 >>> 13;
                d3 &= 0x1fff;
                d3 += h5 * (5 * r8);
                d3 += h6 * (5 * r7);
                d3 += h7 * (5 * r6);
                d3 += h8 * (5 * r5);
                d3 += h9 * (5 * r4);
                c += d3 >>> 13;
                d3 &= 0x1fff;
                d4 = c;
                d4 += h0 * r4;
                d4 += h1 * r3;
                d4 += h2 * r2;
                d4 += h3 * r1;
                d4 += h4 * r0;
                c = d4 >>> 13;
                d4 &= 0x1fff;
                d4 += h5 * (5 * r9);
                d4 += h6 * (5 * r8);
                d4 += h7 * (5 * r7);
                d4 += h8 * (5 * r6);
                d4 += h9 * (5 * r5);
                c += d4 >>> 13;
                d4 &= 0x1fff;
                d5 = c;
                d5 += h0 * r5;
                d5 += h1 * r4;
                d5 += h2 * r3;
                d5 += h3 * r2;
                d5 += h4 * r1;
                c = d5 >>> 13;
                d5 &= 0x1fff;
                d5 += h5 * r0;
                d5 += h6 * (5 * r9);
                d5 += h7 * (5 * r8);
                d5 += h8 * (5 * r7);
                d5 += h9 * (5 * r6);
                c += d5 >>> 13;
                d5 &= 0x1fff;
                d6 = c;
                d6 += h0 * r6;
                d6 += h1 * r5;
                d6 += h2 * r4;
                d6 += h3 * r3;
                d6 += h4 * r2;
                c = d6 >>> 13;
                d6 &= 0x1fff;
                d6 += h5 * r1;
                d6 += h6 * r0;
                d6 += h7 * (5 * r9);
                d6 += h8 * (5 * r8);
                d6 += h9 * (5 * r7);
                c += d6 >>> 13;
                d6 &= 0x1fff;
                d7 = c;
                d7 += h0 * r7;
                d7 += h1 * r6;
                d7 += h2 * r5;
                d7 += h3 * r4;
                d7 += h4 * r3;
                c = d7 >>> 13;
                d7 &= 0x1fff;
                d7 += h5 * r2;
                d7 += h6 * r1;
                d7 += h7 * r0;
                d7 += h8 * (5 * r9);
                d7 += h9 * (5 * r8);
                c += d7 >>> 13;
                d7 &= 0x1fff;
                d8 = c;
                d8 += h0 * r8;
                d8 += h1 * r7;
                d8 += h2 * r6;
                d8 += h3 * r5;
                d8 += h4 * r4;
                c = d8 >>> 13;
                d8 &= 0x1fff;
                d8 += h5 * r3;
                d8 += h6 * r2;
                d8 += h7 * r1;
                d8 += h8 * r0;
                d8 += h9 * (5 * r9);
                c += d8 >>> 13;
                d8 &= 0x1fff;
                d9 = c;
                d9 += h0 * r9;
                d9 += h1 * r8;
                d9 += h2 * r7;
                d9 += h3 * r6;
                d9 += h4 * r5;
                c = d9 >>> 13;
                d9 &= 0x1fff;
                d9 += h5 * r4;
                d9 += h6 * r3;
                d9 += h7 * r2;
                d9 += h8 * r1;
                d9 += h9 * r0;
                c += d9 >>> 13;
                d9 &= 0x1fff;
                c = (c << 2) + c | 0;
                c = c + d0 | 0;
                d0 = c & 0x1fff;
                c = c >>> 13;
                d1 += c;
                h0 = d0;
                h1 = d1;
                h2 = d2;
                h3 = d3;
                h4 = d4;
                h5 = d5;
                h6 = d6;
                h7 = d7;
                h8 = d8;
                h9 = d9;
                mpos += 16;
                bytes -= 16;
              }
              this.h[0] = h0;
              this.h[1] = h1;
              this.h[2] = h2;
              this.h[3] = h3;
              this.h[4] = h4;
              this.h[5] = h5;
              this.h[6] = h6;
              this.h[7] = h7;
              this.h[8] = h8;
              this.h[9] = h9;
            };
            poly1305.prototype.finish = function (mac, macpos) {
              var g = new Uint16Array(10);
              var c, mask, f, i;
              if (this.leftover) {
                i = this.leftover;
                this.buffer[i++] = 1;
                for (; i < 16; i++) this.buffer[i] = 0;
                this.fin = 1;
                this.blocks(this.buffer, 0, 16);
              }
              c = this.h[1] >>> 13;
              this.h[1] &= 0x1fff;
              for (i = 2; i < 10; i++) {
                this.h[i] += c;
                c = this.h[i] >>> 13;
                this.h[i] &= 0x1fff;
              }
              this.h[0] += c * 5;
              c = this.h[0] >>> 13;
              this.h[0] &= 0x1fff;
              this.h[1] += c;
              c = this.h[1] >>> 13;
              this.h[1] &= 0x1fff;
              this.h[2] += c;
              g[0] = this.h[0] + 5;
              c = g[0] >>> 13;
              g[0] &= 0x1fff;
              for (i = 1; i < 10; i++) {
                g[i] = this.h[i] + c;
                c = g[i] >>> 13;
                g[i] &= 0x1fff;
              }
              g[9] -= 1 << 13;
              mask = (c ^ 1) - 1;
              for (i = 0; i < 10; i++) g[i] &= mask;
              mask = ~mask;
              for (i = 0; i < 10; i++) this.h[i] = this.h[i] & mask | g[i];
              this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
              this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
              this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
              this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
              this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
              this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
              this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
              this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;
              f = this.h[0] + this.pad[0];
              this.h[0] = f & 0xffff;
              for (i = 1; i < 8; i++) {
                f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
                this.h[i] = f & 0xffff;
              }
              mac[macpos + 0] = this.h[0] >>> 0 & 0xff;
              mac[macpos + 1] = this.h[0] >>> 8 & 0xff;
              mac[macpos + 2] = this.h[1] >>> 0 & 0xff;
              mac[macpos + 3] = this.h[1] >>> 8 & 0xff;
              mac[macpos + 4] = this.h[2] >>> 0 & 0xff;
              mac[macpos + 5] = this.h[2] >>> 8 & 0xff;
              mac[macpos + 6] = this.h[3] >>> 0 & 0xff;
              mac[macpos + 7] = this.h[3] >>> 8 & 0xff;
              mac[macpos + 8] = this.h[4] >>> 0 & 0xff;
              mac[macpos + 9] = this.h[4] >>> 8 & 0xff;
              mac[macpos + 10] = this.h[5] >>> 0 & 0xff;
              mac[macpos + 11] = this.h[5] >>> 8 & 0xff;
              mac[macpos + 12] = this.h[6] >>> 0 & 0xff;
              mac[macpos + 13] = this.h[6] >>> 8 & 0xff;
              mac[macpos + 14] = this.h[7] >>> 0 & 0xff;
              mac[macpos + 15] = this.h[7] >>> 8 & 0xff;
            };
            poly1305.prototype.update = function (m, mpos, bytes) {
              var i, want;
              if (this.leftover) {
                want = 16 - this.leftover;
                if (want > bytes) want = bytes;
                for (i = 0; i < want; i++) this.buffer[this.leftover + i] = m[mpos + i];
                bytes -= want;
                mpos += want;
                this.leftover += want;
                if (this.leftover < 16) return;
                this.blocks(this.buffer, 0, 16);
                this.leftover = 0;
              }
              if (bytes >= 16) {
                want = bytes - bytes % 16;
                this.blocks(m, mpos, want);
                mpos += want;
                bytes -= want;
              }
              if (bytes) {
                for (i = 0; i < bytes; i++) this.buffer[this.leftover + i] = m[mpos + i];
                this.leftover += bytes;
              }
            };
            function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
              var s = new poly1305(k);
              s.update(m, mpos, n);
              s.finish(out, outpos);
              return 0;
            }
            function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
              var x = new Uint8Array(16);
              crypto_onetimeauth(x, 0, m, mpos, n, k);
              return crypto_verify_16(h, hpos, x, 0);
            }
            function crypto_secretbox(c, m, d, n, k) {
              var i;
              if (d < 32) return -1;
              crypto_stream_xor(c, 0, m, 0, d, n, k);
              crypto_onetimeauth(c, 16, c, 32, d - 32, c);
              for (i = 0; i < 16; i++) c[i] = 0;
              return 0;
            }
            function crypto_secretbox_open(m, c, d, n, k) {
              var i;
              var x = new Uint8Array(32);
              if (d < 32) return -1;
              crypto_stream(x, 0, 32, n, k);
              if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
              crypto_stream_xor(m, 0, c, 0, d, n, k);
              for (i = 0; i < 32; i++) m[i] = 0;
              return 0;
            }
            function set25519(r, a) {
              var i;
              for (i = 0; i < 16; i++) r[i] = a[i] | 0;
            }
            function car25519(o) {
              var i,
                v,
                c = 1;
              for (i = 0; i < 16; i++) {
                v = o[i] + c + 65535;
                c = Math.floor(v / 65536);
                o[i] = v - c * 65536;
              }
              o[0] += c - 1 + 37 * (c - 1);
            }
            function sel25519(p, q, b) {
              var t,
                c = ~(b - 1);
              for (var i = 0; i < 16; i++) {
                t = c & (p[i] ^ q[i]);
                p[i] ^= t;
                q[i] ^= t;
              }
            }
            function pack25519(o, n) {
              var i, j, b;
              var m = gf(),
                t = gf();
              for (i = 0; i < 16; i++) t[i] = n[i];
              car25519(t);
              car25519(t);
              car25519(t);
              for (j = 0; j < 2; j++) {
                m[0] = t[0] - 0xffed;
                for (i = 1; i < 15; i++) {
                  m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
                  m[i - 1] &= 0xffff;
                }
                m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
                b = m[15] >> 16 & 1;
                m[14] &= 0xffff;
                sel25519(t, m, 1 - b);
              }
              for (i = 0; i < 16; i++) {
                o[2 * i] = t[i] & 0xff;
                o[2 * i + 1] = t[i] >> 8;
              }
            }
            function neq25519(a, b) {
              var c = new Uint8Array(32),
                d = new Uint8Array(32);
              pack25519(c, a);
              pack25519(d, b);
              return crypto_verify_32(c, 0, d, 0);
            }
            function par25519(a) {
              var d = new Uint8Array(32);
              pack25519(d, a);
              return d[0] & 1;
            }
            function unpack25519(o, n) {
              var i;
              for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
              o[15] &= 0x7fff;
            }
            function A(o, a, b) {
              for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
            }
            function Z(o, a, b) {
              for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
            }
            function M(o, a, b) {
              var v,
                c,
                t0 = 0,
                t1 = 0,
                t2 = 0,
                t3 = 0,
                t4 = 0,
                t5 = 0,
                t6 = 0,
                t7 = 0,
                t8 = 0,
                t9 = 0,
                t10 = 0,
                t11 = 0,
                t12 = 0,
                t13 = 0,
                t14 = 0,
                t15 = 0,
                t16 = 0,
                t17 = 0,
                t18 = 0,
                t19 = 0,
                t20 = 0,
                t21 = 0,
                t22 = 0,
                t23 = 0,
                t24 = 0,
                t25 = 0,
                t26 = 0,
                t27 = 0,
                t28 = 0,
                t29 = 0,
                t30 = 0,
                b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5],
                b6 = b[6],
                b7 = b[7],
                b8 = b[8],
                b9 = b[9],
                b10 = b[10],
                b11 = b[11],
                b12 = b[12],
                b13 = b[13],
                b14 = b[14],
                b15 = b[15];
              v = a[0];
              t0 += v * b0;
              t1 += v * b1;
              t2 += v * b2;
              t3 += v * b3;
              t4 += v * b4;
              t5 += v * b5;
              t6 += v * b6;
              t7 += v * b7;
              t8 += v * b8;
              t9 += v * b9;
              t10 += v * b10;
              t11 += v * b11;
              t12 += v * b12;
              t13 += v * b13;
              t14 += v * b14;
              t15 += v * b15;
              v = a[1];
              t1 += v * b0;
              t2 += v * b1;
              t3 += v * b2;
              t4 += v * b3;
              t5 += v * b4;
              t6 += v * b5;
              t7 += v * b6;
              t8 += v * b7;
              t9 += v * b8;
              t10 += v * b9;
              t11 += v * b10;
              t12 += v * b11;
              t13 += v * b12;
              t14 += v * b13;
              t15 += v * b14;
              t16 += v * b15;
              v = a[2];
              t2 += v * b0;
              t3 += v * b1;
              t4 += v * b2;
              t5 += v * b3;
              t6 += v * b4;
              t7 += v * b5;
              t8 += v * b6;
              t9 += v * b7;
              t10 += v * b8;
              t11 += v * b9;
              t12 += v * b10;
              t13 += v * b11;
              t14 += v * b12;
              t15 += v * b13;
              t16 += v * b14;
              t17 += v * b15;
              v = a[3];
              t3 += v * b0;
              t4 += v * b1;
              t5 += v * b2;
              t6 += v * b3;
              t7 += v * b4;
              t8 += v * b5;
              t9 += v * b6;
              t10 += v * b7;
              t11 += v * b8;
              t12 += v * b9;
              t13 += v * b10;
              t14 += v * b11;
              t15 += v * b12;
              t16 += v * b13;
              t17 += v * b14;
              t18 += v * b15;
              v = a[4];
              t4 += v * b0;
              t5 += v * b1;
              t6 += v * b2;
              t7 += v * b3;
              t8 += v * b4;
              t9 += v * b5;
              t10 += v * b6;
              t11 += v * b7;
              t12 += v * b8;
              t13 += v * b9;
              t14 += v * b10;
              t15 += v * b11;
              t16 += v * b12;
              t17 += v * b13;
              t18 += v * b14;
              t19 += v * b15;
              v = a[5];
              t5 += v * b0;
              t6 += v * b1;
              t7 += v * b2;
              t8 += v * b3;
              t9 += v * b4;
              t10 += v * b5;
              t11 += v * b6;
              t12 += v * b7;
              t13 += v * b8;
              t14 += v * b9;
              t15 += v * b10;
              t16 += v * b11;
              t17 += v * b12;
              t18 += v * b13;
              t19 += v * b14;
              t20 += v * b15;
              v = a[6];
              t6 += v * b0;
              t7 += v * b1;
              t8 += v * b2;
              t9 += v * b3;
              t10 += v * b4;
              t11 += v * b5;
              t12 += v * b6;
              t13 += v * b7;
              t14 += v * b8;
              t15 += v * b9;
              t16 += v * b10;
              t17 += v * b11;
              t18 += v * b12;
              t19 += v * b13;
              t20 += v * b14;
              t21 += v * b15;
              v = a[7];
              t7 += v * b0;
              t8 += v * b1;
              t9 += v * b2;
              t10 += v * b3;
              t11 += v * b4;
              t12 += v * b5;
              t13 += v * b6;
              t14 += v * b7;
              t15 += v * b8;
              t16 += v * b9;
              t17 += v * b10;
              t18 += v * b11;
              t19 += v * b12;
              t20 += v * b13;
              t21 += v * b14;
              t22 += v * b15;
              v = a[8];
              t8 += v * b0;
              t9 += v * b1;
              t10 += v * b2;
              t11 += v * b3;
              t12 += v * b4;
              t13 += v * b5;
              t14 += v * b6;
              t15 += v * b7;
              t16 += v * b8;
              t17 += v * b9;
              t18 += v * b10;
              t19 += v * b11;
              t20 += v * b12;
              t21 += v * b13;
              t22 += v * b14;
              t23 += v * b15;
              v = a[9];
              t9 += v * b0;
              t10 += v * b1;
              t11 += v * b2;
              t12 += v * b3;
              t13 += v * b4;
              t14 += v * b5;
              t15 += v * b6;
              t16 += v * b7;
              t17 += v * b8;
              t18 += v * b9;
              t19 += v * b10;
              t20 += v * b11;
              t21 += v * b12;
              t22 += v * b13;
              t23 += v * b14;
              t24 += v * b15;
              v = a[10];
              t10 += v * b0;
              t11 += v * b1;
              t12 += v * b2;
              t13 += v * b3;
              t14 += v * b4;
              t15 += v * b5;
              t16 += v * b6;
              t17 += v * b7;
              t18 += v * b8;
              t19 += v * b9;
              t20 += v * b10;
              t21 += v * b11;
              t22 += v * b12;
              t23 += v * b13;
              t24 += v * b14;
              t25 += v * b15;
              v = a[11];
              t11 += v * b0;
              t12 += v * b1;
              t13 += v * b2;
              t14 += v * b3;
              t15 += v * b4;
              t16 += v * b5;
              t17 += v * b6;
              t18 += v * b7;
              t19 += v * b8;
              t20 += v * b9;
              t21 += v * b10;
              t22 += v * b11;
              t23 += v * b12;
              t24 += v * b13;
              t25 += v * b14;
              t26 += v * b15;
              v = a[12];
              t12 += v * b0;
              t13 += v * b1;
              t14 += v * b2;
              t15 += v * b3;
              t16 += v * b4;
              t17 += v * b5;
              t18 += v * b6;
              t19 += v * b7;
              t20 += v * b8;
              t21 += v * b9;
              t22 += v * b10;
              t23 += v * b11;
              t24 += v * b12;
              t25 += v * b13;
              t26 += v * b14;
              t27 += v * b15;
              v = a[13];
              t13 += v * b0;
              t14 += v * b1;
              t15 += v * b2;
              t16 += v * b3;
              t17 += v * b4;
              t18 += v * b5;
              t19 += v * b6;
              t20 += v * b7;
              t21 += v * b8;
              t22 += v * b9;
              t23 += v * b10;
              t24 += v * b11;
              t25 += v * b12;
              t26 += v * b13;
              t27 += v * b14;
              t28 += v * b15;
              v = a[14];
              t14 += v * b0;
              t15 += v * b1;
              t16 += v * b2;
              t17 += v * b3;
              t18 += v * b4;
              t19 += v * b5;
              t20 += v * b6;
              t21 += v * b7;
              t22 += v * b8;
              t23 += v * b9;
              t24 += v * b10;
              t25 += v * b11;
              t26 += v * b12;
              t27 += v * b13;
              t28 += v * b14;
              t29 += v * b15;
              v = a[15];
              t15 += v * b0;
              t16 += v * b1;
              t17 += v * b2;
              t18 += v * b3;
              t19 += v * b4;
              t20 += v * b5;
              t21 += v * b6;
              t22 += v * b7;
              t23 += v * b8;
              t24 += v * b9;
              t25 += v * b10;
              t26 += v * b11;
              t27 += v * b12;
              t28 += v * b13;
              t29 += v * b14;
              t30 += v * b15;
              t0 += 38 * t16;
              t1 += 38 * t17;
              t2 += 38 * t18;
              t3 += 38 * t19;
              t4 += 38 * t20;
              t5 += 38 * t21;
              t6 += 38 * t22;
              t7 += 38 * t23;
              t8 += 38 * t24;
              t9 += 38 * t25;
              t10 += 38 * t26;
              t11 += 38 * t27;
              t12 += 38 * t28;
              t13 += 38 * t29;
              t14 += 38 * t30; // t15 left as is
              // first car
              c = 1;
              v = t0 + c + 65535;
              c = Math.floor(v / 65536);
              t0 = v - c * 65536;
              v = t1 + c + 65535;
              c = Math.floor(v / 65536);
              t1 = v - c * 65536;
              v = t2 + c + 65535;
              c = Math.floor(v / 65536);
              t2 = v - c * 65536;
              v = t3 + c + 65535;
              c = Math.floor(v / 65536);
              t3 = v - c * 65536;
              v = t4 + c + 65535;
              c = Math.floor(v / 65536);
              t4 = v - c * 65536;
              v = t5 + c + 65535;
              c = Math.floor(v / 65536);
              t5 = v - c * 65536;
              v = t6 + c + 65535;
              c = Math.floor(v / 65536);
              t6 = v - c * 65536;
              v = t7 + c + 65535;
              c = Math.floor(v / 65536);
              t7 = v - c * 65536;
              v = t8 + c + 65535;
              c = Math.floor(v / 65536);
              t8 = v - c * 65536;
              v = t9 + c + 65535;
              c = Math.floor(v / 65536);
              t9 = v - c * 65536;
              v = t10 + c + 65535;
              c = Math.floor(v / 65536);
              t10 = v - c * 65536;
              v = t11 + c + 65535;
              c = Math.floor(v / 65536);
              t11 = v - c * 65536;
              v = t12 + c + 65535;
              c = Math.floor(v / 65536);
              t12 = v - c * 65536;
              v = t13 + c + 65535;
              c = Math.floor(v / 65536);
              t13 = v - c * 65536;
              v = t14 + c + 65535;
              c = Math.floor(v / 65536);
              t14 = v - c * 65536;
              v = t15 + c + 65535;
              c = Math.floor(v / 65536);
              t15 = v - c * 65536;
              t0 += c - 1 + 37 * (c - 1); // second car
              c = 1;
              v = t0 + c + 65535;
              c = Math.floor(v / 65536);
              t0 = v - c * 65536;
              v = t1 + c + 65535;
              c = Math.floor(v / 65536);
              t1 = v - c * 65536;
              v = t2 + c + 65535;
              c = Math.floor(v / 65536);
              t2 = v - c * 65536;
              v = t3 + c + 65535;
              c = Math.floor(v / 65536);
              t3 = v - c * 65536;
              v = t4 + c + 65535;
              c = Math.floor(v / 65536);
              t4 = v - c * 65536;
              v = t5 + c + 65535;
              c = Math.floor(v / 65536);
              t5 = v - c * 65536;
              v = t6 + c + 65535;
              c = Math.floor(v / 65536);
              t6 = v - c * 65536;
              v = t7 + c + 65535;
              c = Math.floor(v / 65536);
              t7 = v - c * 65536;
              v = t8 + c + 65535;
              c = Math.floor(v / 65536);
              t8 = v - c * 65536;
              v = t9 + c + 65535;
              c = Math.floor(v / 65536);
              t9 = v - c * 65536;
              v = t10 + c + 65535;
              c = Math.floor(v / 65536);
              t10 = v - c * 65536;
              v = t11 + c + 65535;
              c = Math.floor(v / 65536);
              t11 = v - c * 65536;
              v = t12 + c + 65535;
              c = Math.floor(v / 65536);
              t12 = v - c * 65536;
              v = t13 + c + 65535;
              c = Math.floor(v / 65536);
              t13 = v - c * 65536;
              v = t14 + c + 65535;
              c = Math.floor(v / 65536);
              t14 = v - c * 65536;
              v = t15 + c + 65535;
              c = Math.floor(v / 65536);
              t15 = v - c * 65536;
              t0 += c - 1 + 37 * (c - 1);
              o[0] = t0;
              o[1] = t1;
              o[2] = t2;
              o[3] = t3;
              o[4] = t4;
              o[5] = t5;
              o[6] = t6;
              o[7] = t7;
              o[8] = t8;
              o[9] = t9;
              o[10] = t10;
              o[11] = t11;
              o[12] = t12;
              o[13] = t13;
              o[14] = t14;
              o[15] = t15;
            }
            function S(o, a) {
              M(o, a, a);
            }
            function inv25519(o, i) {
              var c = gf();
              var a;
              for (a = 0; a < 16; a++) c[a] = i[a];
              for (a = 253; a >= 0; a--) {
                S(c, c);
                if (a !== 2 && a !== 4) M(c, c, i);
              }
              for (a = 0; a < 16; a++) o[a] = c[a];
            }
            function pow2523(o, i) {
              var c = gf();
              var a;
              for (a = 0; a < 16; a++) c[a] = i[a];
              for (a = 250; a >= 0; a--) {
                S(c, c);
                if (a !== 1) M(c, c, i);
              }
              for (a = 0; a < 16; a++) o[a] = c[a];
            }
            function crypto_scalarmult(q, n, p) {
              var z = new Uint8Array(32);
              var x = new Float64Array(80),
                r,
                i;
              var a = gf(),
                b = gf(),
                c = gf(),
                d = gf(),
                e = gf(),
                f = gf();
              for (i = 0; i < 31; i++) z[i] = n[i];
              z[31] = n[31] & 127 | 64;
              z[0] &= 248;
              unpack25519(x, p);
              for (i = 0; i < 16; i++) {
                b[i] = x[i];
                d[i] = a[i] = c[i] = 0;
              }
              a[0] = d[0] = 1;
              for (i = 254; i >= 0; --i) {
                r = z[i >>> 3] >>> (i & 7) & 1;
                sel25519(a, b, r);
                sel25519(c, d, r);
                A(e, a, c);
                Z(a, a, c);
                A(c, b, d);
                Z(b, b, d);
                S(d, e);
                S(f, a);
                M(a, c, a);
                M(c, b, e);
                A(e, a, c);
                Z(a, a, c);
                S(b, a);
                Z(c, d, f);
                M(a, c, _121665);
                A(a, a, d);
                M(c, c, a);
                M(a, d, f);
                M(d, b, x);
                S(b, e);
                sel25519(a, b, r);
                sel25519(c, d, r);
              }
              for (i = 0; i < 16; i++) {
                x[i + 16] = a[i];
                x[i + 32] = c[i];
                x[i + 48] = b[i];
                x[i + 64] = d[i];
              }
              var x32 = x.subarray(32);
              var x16 = x.subarray(16);
              inv25519(x32, x32);
              M(x16, x16, x32);
              pack25519(q, x16);
              return 0;
            }
            function crypto_scalarmult_base(q, n) {
              return crypto_scalarmult(q, n, _9);
            }
            function crypto_box_keypair(y, x) {
              randombytes(x, 32);
              return crypto_scalarmult_base(y, x);
            }
            function crypto_box_beforenm(k, y, x) {
              var s = new Uint8Array(32);
              crypto_scalarmult(s, x, y);
              return crypto_core_hsalsa20(k, _0, s, sigma);
            }
            var crypto_box_afternm = crypto_secretbox;
            var crypto_box_open_afternm = crypto_secretbox_open;
            function crypto_box(c, m, d, n, y, x) {
              var k = new Uint8Array(32);
              crypto_box_beforenm(k, y, x);
              return crypto_box_afternm(c, m, d, n, k);
            }
            function crypto_box_open(m, c, d, n, y, x) {
              var k = new Uint8Array(32);
              crypto_box_beforenm(k, y, x);
              return crypto_box_open_afternm(m, c, d, n, k);
            }
            var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
            function crypto_hashblocks_hl(hh, hl, m, n) {
              var wh = new Int32Array(16),
                wl = new Int32Array(16),
                bh0,
                bh1,
                bh2,
                bh3,
                bh4,
                bh5,
                bh6,
                bh7,
                bl0,
                bl1,
                bl2,
                bl3,
                bl4,
                bl5,
                bl6,
                bl7,
                th,
                tl,
                i,
                j,
                h,
                l,
                a,
                b,
                c,
                d;
              var ah0 = hh[0],
                ah1 = hh[1],
                ah2 = hh[2],
                ah3 = hh[3],
                ah4 = hh[4],
                ah5 = hh[5],
                ah6 = hh[6],
                ah7 = hh[7],
                al0 = hl[0],
                al1 = hl[1],
                al2 = hl[2],
                al3 = hl[3],
                al4 = hl[4],
                al5 = hl[5],
                al6 = hl[6],
                al7 = hl[7];
              var pos = 0;
              while (n >= 128) {
                for (i = 0; i < 16; i++) {
                  j = 8 * i + pos;
                  wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
                  wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
                }
                for (i = 0; i < 80; i++) {
                  bh0 = ah0;
                  bh1 = ah1;
                  bh2 = ah2;
                  bh3 = ah3;
                  bh4 = ah4;
                  bh5 = ah5;
                  bh6 = ah6;
                  bh7 = ah7;
                  bl0 = al0;
                  bl1 = al1;
                  bl2 = al2;
                  bl3 = al3;
                  bl4 = al4;
                  bl5 = al5;
                  bl6 = al6;
                  bl7 = al7; // add
                  h = ah7;
                  l = al7;
                  a = l & 0xffff;
                  b = l >>> 16;
                  c = h & 0xffff;
                  d = h >>> 16; // Sigma1
                  h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
                  l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
                  a += l & 0xffff;
                  b += l >>> 16;
                  c += h & 0xffff;
                  d += h >>> 16; // Ch
                  h = ah4 & ah5 ^ ~ah4 & ah6;
                  l = al4 & al5 ^ ~al4 & al6;
                  a += l & 0xffff;
                  b += l >>> 16;
                  c += h & 0xffff;
                  d += h >>> 16; // K
                  h = K[i * 2];
                  l = K[i * 2 + 1];
                  a += l & 0xffff;
                  b += l >>> 16;
                  c += h & 0xffff;
                  d += h >>> 16; // w
                  h = wh[i % 16];
                  l = wl[i % 16];
                  a += l & 0xffff;
                  b += l >>> 16;
                  c += h & 0xffff;
                  d += h >>> 16;
                  b += a >>> 16;
                  c += b >>> 16;
                  d += c >>> 16;
                  th = c & 0xffff | d << 16;
                  tl = a & 0xffff | b << 16; // add
                  h = th;
                  l = tl;
                  a = l & 0xffff;
                  b = l >>> 16;
                  c = h & 0xffff;
                  d = h >>> 16; // Sigma0
                  h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
                  l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
                  a += l & 0xffff;
                  b += l >>> 16;
                  c += h & 0xffff;
                  d += h >>> 16; // Maj
                  h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
                  l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
                  a += l & 0xffff;
                  b += l >>> 16;
                  c += h & 0xffff;
                  d += h >>> 16;
                  b += a >>> 16;
                  c += b >>> 16;
                  d += c >>> 16;
                  bh7 = c & 0xffff | d << 16;
                  bl7 = a & 0xffff | b << 16; // add
                  h = bh3;
                  l = bl3;
                  a = l & 0xffff;
                  b = l >>> 16;
                  c = h & 0xffff;
                  d = h >>> 16;
                  h = th;
                  l = tl;
                  a += l & 0xffff;
                  b += l >>> 16;
                  c += h & 0xffff;
                  d += h >>> 16;
                  b += a >>> 16;
                  c += b >>> 16;
                  d += c >>> 16;
                  bh3 = c & 0xffff | d << 16;
                  bl3 = a & 0xffff | b << 16;
                  ah1 = bh0;
                  ah2 = bh1;
                  ah3 = bh2;
                  ah4 = bh3;
                  ah5 = bh4;
                  ah6 = bh5;
                  ah7 = bh6;
                  ah0 = bh7;
                  al1 = bl0;
                  al2 = bl1;
                  al3 = bl2;
                  al4 = bl3;
                  al5 = bl4;
                  al6 = bl5;
                  al7 = bl6;
                  al0 = bl7;
                  if (i % 16 === 15) {
                    for (j = 0; j < 16; j++) {
                      // add
                      h = wh[j];
                      l = wl[j];
                      a = l & 0xffff;
                      b = l >>> 16;
                      c = h & 0xffff;
                      d = h >>> 16;
                      h = wh[(j + 9) % 16];
                      l = wl[(j + 9) % 16];
                      a += l & 0xffff;
                      b += l >>> 16;
                      c += h & 0xffff;
                      d += h >>> 16; // sigma0
                      th = wh[(j + 1) % 16];
                      tl = wl[(j + 1) % 16];
                      h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                      l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                      a += l & 0xffff;
                      b += l >>> 16;
                      c += h & 0xffff;
                      d += h >>> 16; // sigma1
                      th = wh[(j + 14) % 16];
                      tl = wl[(j + 14) % 16];
                      h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                      l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                      a += l & 0xffff;
                      b += l >>> 16;
                      c += h & 0xffff;
                      d += h >>> 16;
                      b += a >>> 16;
                      c += b >>> 16;
                      d += c >>> 16;
                      wh[j] = c & 0xffff | d << 16;
                      wl[j] = a & 0xffff | b << 16;
                    }
                  }
                } // add
                h = ah0;
                l = al0;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[0];
                l = hl[0];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[0] = ah0 = c & 0xffff | d << 16;
                hl[0] = al0 = a & 0xffff | b << 16;
                h = ah1;
                l = al1;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[1];
                l = hl[1];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[1] = ah1 = c & 0xffff | d << 16;
                hl[1] = al1 = a & 0xffff | b << 16;
                h = ah2;
                l = al2;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[2];
                l = hl[2];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[2] = ah2 = c & 0xffff | d << 16;
                hl[2] = al2 = a & 0xffff | b << 16;
                h = ah3;
                l = al3;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[3];
                l = hl[3];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[3] = ah3 = c & 0xffff | d << 16;
                hl[3] = al3 = a & 0xffff | b << 16;
                h = ah4;
                l = al4;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[4];
                l = hl[4];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[4] = ah4 = c & 0xffff | d << 16;
                hl[4] = al4 = a & 0xffff | b << 16;
                h = ah5;
                l = al5;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[5];
                l = hl[5];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[5] = ah5 = c & 0xffff | d << 16;
                hl[5] = al5 = a & 0xffff | b << 16;
                h = ah6;
                l = al6;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[6];
                l = hl[6];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[6] = ah6 = c & 0xffff | d << 16;
                hl[6] = al6 = a & 0xffff | b << 16;
                h = ah7;
                l = al7;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = hh[7];
                l = hl[7];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[7] = ah7 = c & 0xffff | d << 16;
                hl[7] = al7 = a & 0xffff | b << 16;
                pos += 128;
                n -= 128;
              }
              return n;
            }
            function crypto_hash(out, m, n) {
              var hh = new Int32Array(8),
                hl = new Int32Array(8),
                x = new Uint8Array(256),
                i,
                b = n;
              hh[0] = 0x6a09e667;
              hh[1] = 0xbb67ae85;
              hh[2] = 0x3c6ef372;
              hh[3] = 0xa54ff53a;
              hh[4] = 0x510e527f;
              hh[5] = 0x9b05688c;
              hh[6] = 0x1f83d9ab;
              hh[7] = 0x5be0cd19;
              hl[0] = 0xf3bcc908;
              hl[1] = 0x84caa73b;
              hl[2] = 0xfe94f82b;
              hl[3] = 0x5f1d36f1;
              hl[4] = 0xade682d1;
              hl[5] = 0x2b3e6c1f;
              hl[6] = 0xfb41bd6b;
              hl[7] = 0x137e2179;
              crypto_hashblocks_hl(hh, hl, m, n);
              n %= 128;
              for (i = 0; i < n; i++) x[i] = m[b - n + i];
              x[n] = 128;
              n = 256 - 128 * (n < 112 ? 1 : 0);
              x[n - 9] = 0;
              ts64(x, n - 8, b / 0x20000000 | 0, b << 3);
              crypto_hashblocks_hl(hh, hl, x, n);
              for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);
              return 0;
            }
            function add(p, q) {
              var a = gf(),
                b = gf(),
                c = gf(),
                d = gf(),
                e = gf(),
                f = gf(),
                g = gf(),
                h = gf(),
                t = gf();
              Z(a, p[1], p[0]);
              Z(t, q[1], q[0]);
              M(a, a, t);
              A(b, p[0], p[1]);
              A(t, q[0], q[1]);
              M(b, b, t);
              M(c, p[3], q[3]);
              M(c, c, D2);
              M(d, p[2], q[2]);
              A(d, d, d);
              Z(e, b, a);
              Z(f, d, c);
              A(g, d, c);
              A(h, b, a);
              M(p[0], e, f);
              M(p[1], h, g);
              M(p[2], g, f);
              M(p[3], e, h);
            }
            function cswap(p, q, b) {
              var i;
              for (i = 0; i < 4; i++) {
                sel25519(p[i], q[i], b);
              }
            }
            function pack(r, p) {
              var tx = gf(),
                ty = gf(),
                zi = gf();
              inv25519(zi, p[2]);
              M(tx, p[0], zi);
              M(ty, p[1], zi);
              pack25519(r, ty);
              r[31] ^= par25519(tx) << 7;
            }
            function scalarmult(p, q, s) {
              var b, i;
              set25519(p[0], gf0);
              set25519(p[1], gf1);
              set25519(p[2], gf1);
              set25519(p[3], gf0);
              for (i = 255; i >= 0; --i) {
                b = s[i / 8 | 0] >> (i & 7) & 1;
                cswap(p, q, b);
                add(q, p);
                add(p, p);
                cswap(p, q, b);
              }
            }
            function scalarbase(p, s) {
              var q = [gf(), gf(), gf(), gf()];
              set25519(q[0], X);
              set25519(q[1], Y);
              set25519(q[2], gf1);
              M(q[3], X, Y);
              scalarmult(p, q, s);
            }
            function crypto_sign_keypair(pk, sk, seeded) {
              var d = new Uint8Array(64);
              var p = [gf(), gf(), gf(), gf()];
              var i;
              if (!seeded) randombytes(sk, 32);
              crypto_hash(d, sk, 32);
              d[0] &= 248;
              d[31] &= 127;
              d[31] |= 64;
              scalarbase(p, d);
              pack(pk, p);
              for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
              return 0;
            }
            var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
            function modL(r, x) {
              var carry, i, j, k;
              for (i = 63; i >= 32; --i) {
                carry = 0;
                for (j = i - 32, k = i - 12; j < k; ++j) {
                  x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                  carry = Math.floor((x[j] + 128) / 256);
                  x[j] -= carry * 256;
                }
                x[j] += carry;
                x[i] = 0;
              }
              carry = 0;
              for (j = 0; j < 32; j++) {
                x[j] += carry - (x[31] >> 4) * L[j];
                carry = x[j] >> 8;
                x[j] &= 255;
              }
              for (j = 0; j < 32; j++) x[j] -= carry * L[j];
              for (i = 0; i < 32; i++) {
                x[i + 1] += x[i] >> 8;
                r[i] = x[i] & 255;
              }
            }
            function reduce(r) {
              var x = new Float64Array(64),
                i;
              for (i = 0; i < 64; i++) x[i] = r[i];
              for (i = 0; i < 64; i++) r[i] = 0;
              modL(r, x);
            } // Note: difference from C - smlen returned, not passed as argument.
            function crypto_sign(sm, m, n, sk) {
              var d = new Uint8Array(64),
                h = new Uint8Array(64),
                r = new Uint8Array(64);
              var i,
                j,
                x = new Float64Array(64);
              var p = [gf(), gf(), gf(), gf()];
              crypto_hash(d, sk, 32);
              d[0] &= 248;
              d[31] &= 127;
              d[31] |= 64;
              var smlen = n + 64;
              for (i = 0; i < n; i++) sm[64 + i] = m[i];
              for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];
              crypto_hash(r, sm.subarray(32), n + 32);
              reduce(r);
              scalarbase(p, r);
              pack(sm, p);
              for (i = 32; i < 64; i++) sm[i] = sk[i];
              crypto_hash(h, sm, n + 64);
              reduce(h);
              for (i = 0; i < 64; i++) x[i] = 0;
              for (i = 0; i < 32; i++) x[i] = r[i];
              for (i = 0; i < 32; i++) {
                for (j = 0; j < 32; j++) {
                  x[i + j] += h[i] * d[j];
                }
              }
              modL(sm.subarray(32), x);
              return smlen;
            }
            function unpackneg(r, p) {
              var t = gf(),
                chk = gf(),
                num = gf(),
                den = gf(),
                den2 = gf(),
                den4 = gf(),
                den6 = gf();
              set25519(r[2], gf1);
              unpack25519(r[1], p);
              S(num, r[1]);
              M(den, num, D);
              Z(num, num, r[2]);
              A(den, r[2], den);
              S(den2, den);
              S(den4, den2);
              M(den6, den4, den2);
              M(t, den6, num);
              M(t, t, den);
              pow2523(t, t);
              M(t, t, num);
              M(t, t, den);
              M(t, t, den);
              M(r[0], t, den);
              S(chk, r[0]);
              M(chk, chk, den);
              if (neq25519(chk, num)) M(r[0], r[0], I);
              S(chk, r[0]);
              M(chk, chk, den);
              if (neq25519(chk, num)) return -1;
              if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
              M(r[3], r[0], r[1]);
              return 0;
            }
            function crypto_sign_open(m, sm, n, pk) {
              var i;
              var t = new Uint8Array(32),
                h = new Uint8Array(64);
              var p = [gf(), gf(), gf(), gf()],
                q = [gf(), gf(), gf(), gf()];
              if (n < 64) return -1;
              if (unpackneg(q, pk)) return -1;
              for (i = 0; i < n; i++) m[i] = sm[i];
              for (i = 0; i < 32; i++) m[i + 32] = pk[i];
              crypto_hash(h, m, n);
              reduce(h);
              scalarmult(p, q, h);
              scalarbase(q, sm.subarray(32));
              add(p, q);
              pack(t, p);
              n -= 64;
              if (crypto_verify_32(sm, 0, t, 0)) {
                for (i = 0; i < n; i++) m[i] = 0;
                return -1;
              }
              for (i = 0; i < n; i++) m[i] = sm[i + 64];
              return n;
            }
            var crypto_secretbox_KEYBYTES = 32,
              crypto_secretbox_NONCEBYTES = 24,
              crypto_secretbox_ZEROBYTES = 32,
              crypto_secretbox_BOXZEROBYTES = 16,
              crypto_scalarmult_BYTES = 32,
              crypto_scalarmult_SCALARBYTES = 32,
              crypto_box_PUBLICKEYBYTES = 32,
              crypto_box_SECRETKEYBYTES = 32,
              crypto_box_BEFORENMBYTES = 32,
              crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
              crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
              crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
              crypto_sign_BYTES = 64,
              crypto_sign_PUBLICKEYBYTES = 32,
              crypto_sign_SECRETKEYBYTES = 64,
              crypto_sign_SEEDBYTES = 32,
              crypto_hash_BYTES = 64;
            nacl.lowlevel = {
              crypto_core_hsalsa20: crypto_core_hsalsa20,
              crypto_stream_xor: crypto_stream_xor,
              crypto_stream: crypto_stream,
              crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
              crypto_stream_salsa20: crypto_stream_salsa20,
              crypto_onetimeauth: crypto_onetimeauth,
              crypto_onetimeauth_verify: crypto_onetimeauth_verify,
              crypto_verify_16: crypto_verify_16,
              crypto_verify_32: crypto_verify_32,
              crypto_secretbox: crypto_secretbox,
              crypto_secretbox_open: crypto_secretbox_open,
              crypto_scalarmult: crypto_scalarmult,
              crypto_scalarmult_base: crypto_scalarmult_base,
              crypto_box_beforenm: crypto_box_beforenm,
              crypto_box_afternm: crypto_box_afternm,
              crypto_box: crypto_box,
              crypto_box_open: crypto_box_open,
              crypto_box_keypair: crypto_box_keypair,
              crypto_hash: crypto_hash,
              crypto_sign: crypto_sign,
              crypto_sign_keypair: crypto_sign_keypair,
              crypto_sign_open: crypto_sign_open,
              crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
              crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
              crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
              crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
              crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
              crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
              crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
              crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
              crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
              crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
              crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
              crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
              crypto_sign_BYTES: crypto_sign_BYTES,
              crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
              crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
              crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
              crypto_hash_BYTES: crypto_hash_BYTES,
              gf: gf,
              D: D,
              L: L,
              pack25519: pack25519,
              unpack25519: unpack25519,
              M: M,
              A: A,
              S: S,
              Z: Z,
              pow2523: pow2523,
              add: add,
              set25519: set25519,
              modL: modL,
              scalarmult: scalarmult,
              scalarbase: scalarbase
            }; /* High-level API */
            function checkLengths(k, n) {
              if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
              if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
            }
            function checkBoxLengths(pk, sk) {
              if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
              if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
            }
            function checkArrayTypes() {
              for (var i = 0; i < arguments.length; i++) {
                if (!(arguments[i] instanceof Uint8Array)) throw new TypeError('unexpected type, use Uint8Array');
              }
            }
            function cleanup(arr) {
              for (var i = 0; i < arr.length; i++) arr[i] = 0;
            }
            nacl.randomBytes = function (n) {
              var b = new Uint8Array(n);
              randombytes(b, n);
              return b;
            };
            nacl.secretbox = function (msg, nonce, key) {
              checkArrayTypes(msg, nonce, key);
              checkLengths(key, nonce);
              var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
              var c = new Uint8Array(m.length);
              for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
              crypto_secretbox(c, m, m.length, nonce, key);
              return c.subarray(crypto_secretbox_BOXZEROBYTES);
            };
            nacl.secretbox.open = function (box, nonce, key) {
              checkArrayTypes(box, nonce, key);
              checkLengths(key, nonce);
              var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
              var m = new Uint8Array(c.length);
              for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
              if (c.length < 32) return null;
              if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
              return m.subarray(crypto_secretbox_ZEROBYTES);
            };
            nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
            nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
            nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
            nacl.scalarMult = function (n, p) {
              checkArrayTypes(n, p);
              if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
              if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
              var q = new Uint8Array(crypto_scalarmult_BYTES);
              crypto_scalarmult(q, n, p);
              return q;
            };
            nacl.scalarMult.base = function (n) {
              checkArrayTypes(n);
              if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
              var q = new Uint8Array(crypto_scalarmult_BYTES);
              crypto_scalarmult_base(q, n);
              return q;
            };
            nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
            nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
            nacl.box = function (msg, nonce, publicKey, secretKey) {
              var k = nacl.box.before(publicKey, secretKey);
              return nacl.secretbox(msg, nonce, k);
            };
            nacl.box.before = function (publicKey, secretKey) {
              checkArrayTypes(publicKey, secretKey);
              checkBoxLengths(publicKey, secretKey);
              var k = new Uint8Array(crypto_box_BEFORENMBYTES);
              crypto_box_beforenm(k, publicKey, secretKey);
              return k;
            };
            nacl.box.after = nacl.secretbox;
            nacl.box.open = function (msg, nonce, publicKey, secretKey) {
              var k = nacl.box.before(publicKey, secretKey);
              return nacl.secretbox.open(msg, nonce, k);
            };
            nacl.box.open.after = nacl.secretbox.open;
            nacl.box.keyPair = function () {
              var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
              var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
              crypto_box_keypair(pk, sk);
              return {
                publicKey: pk,
                secretKey: sk
              };
            };
            nacl.box.keyPair.fromSecretKey = function (secretKey) {
              checkArrayTypes(secretKey);
              if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
              var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
              crypto_scalarmult_base(pk, secretKey);
              return {
                publicKey: pk,
                secretKey: new Uint8Array(secretKey)
              };
            };
            nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
            nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
            nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
            nacl.box.nonceLength = crypto_box_NONCEBYTES;
            nacl.box.overheadLength = nacl.secretbox.overheadLength;
            nacl.sign = function (msg, secretKey) {
              checkArrayTypes(msg, secretKey);
              if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
              var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
              crypto_sign(signedMsg, msg, msg.length, secretKey);
              return signedMsg;
            };
            nacl.sign.open = function (signedMsg, publicKey) {
              checkArrayTypes(signedMsg, publicKey);
              if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
              var tmp = new Uint8Array(signedMsg.length);
              var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
              if (mlen < 0) return null;
              var m = new Uint8Array(mlen);
              for (var i = 0; i < m.length; i++) m[i] = tmp[i];
              return m;
            };
            nacl.sign.detached = function (msg, secretKey) {
              var signedMsg = nacl.sign(msg, secretKey);
              var sig = new Uint8Array(crypto_sign_BYTES);
              for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
              return sig;
            };
            nacl.sign.detached.verify = function (msg, sig, publicKey) {
              checkArrayTypes(msg, sig, publicKey);
              if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
              if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
              var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
              var m = new Uint8Array(crypto_sign_BYTES + msg.length);
              var i;
              for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
              for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
              return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
            };
            nacl.sign.keyPair = function () {
              var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
              var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
              crypto_sign_keypair(pk, sk);
              return {
                publicKey: pk,
                secretKey: sk
              };
            };
            nacl.sign.keyPair.fromSecretKey = function (secretKey) {
              checkArrayTypes(secretKey);
              if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
              var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
              for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
              return {
                publicKey: pk,
                secretKey: new Uint8Array(secretKey)
              };
            };
            nacl.sign.keyPair.fromSeed = function (seed) {
              checkArrayTypes(seed);
              if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
              var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
              var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
              for (var i = 0; i < 32; i++) sk[i] = seed[i];
              crypto_sign_keypair(pk, sk, true);
              return {
                publicKey: pk,
                secretKey: sk
              };
            };
            nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
            nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
            nacl.sign.seedLength = crypto_sign_SEEDBYTES;
            nacl.sign.signatureLength = crypto_sign_BYTES;
            nacl.hash = function (msg) {
              checkArrayTypes(msg);
              var h = new Uint8Array(crypto_hash_BYTES);
              crypto_hash(h, msg, msg.length);
              return h;
            };
            nacl.hash.hashLength = crypto_hash_BYTES;
            nacl.verify = function (x, y) {
              checkArrayTypes(x, y); // Zero length arguments are considered not equal.
              if (x.length === 0 || y.length === 0) return false;
              if (x.length !== y.length) return false;
              return vn(x, 0, y, 0, x.length) === 0 ? true : false;
            };
            nacl.setPRNG = function (fn) {
              randombytes = fn;
            };
            (function () {
              // Initialize PRNG if environment provides CSPRNG.
              // If not, methods calling randombytes will throw.
              var crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;
              if (crypto && crypto.getRandomValues) {
                // Browsers.
                var QUOTA = 65536;
                nacl.setPRNG(function (x, n) {
                  var i,
                    v = new Uint8Array(n);
                  for (i = 0; i < n; i += QUOTA) {
                    crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                  }
                  for (i = 0; i < n; i++) x[i] = v[i];
                  cleanup(v);
                });
              } else {
                // Node.js.
                crypto = __webpack_require__(7976);
                if (crypto && crypto.randomBytes) {
                  nacl.setPRNG(function (x, n) {
                    var i,
                      v = crypto.randomBytes(n);
                    for (i = 0; i < n; i++) x[i] = v[i];
                    cleanup(v);
                  });
                }
              }
            })();
          })(module.exports ? module.exports : self.nacl = self.nacl || {}); /***/
        },
        /***/8047: /***/function (module, exports, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_RESULT__; /////////////////////////////////////////////////////////////////////////////////
          /* UAParser.js v1.0.37
             Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
             MIT License */ /*
                            Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
                            Supports browser & node.js environment. 
                            Demo   : https://faisalman.github.io/ua-parser-js
                            Source : https://github.com/faisalman/ua-parser-js */ /////////////////////////////////////////////////////////////////////////////////
          (function (window, undefined$1) {
            // Constants
            /////////////
            var LIBVERSION = '1.0.37',
              EMPTY = '',
              UNKNOWN = '?',
              FUNC_TYPE = 'function',
              UNDEF_TYPE = 'undefined',
              OBJ_TYPE = 'object',
              STR_TYPE = 'string',
              MAJOR = 'major',
              MODEL = 'model',
              NAME = 'name',
              TYPE = 'type',
              VENDOR = 'vendor',
              VERSION = 'version',
              ARCHITECTURE = 'architecture',
              CONSOLE = 'console',
              MOBILE = 'mobile',
              TABLET = 'tablet',
              SMARTTV = 'smarttv',
              WEARABLE = 'wearable',
              EMBEDDED = 'embedded',
              UA_MAX_LENGTH = 500;
            var AMAZON = 'Amazon',
              APPLE = 'Apple',
              ASUS = 'ASUS',
              BLACKBERRY = 'BlackBerry',
              BROWSER = 'Browser',
              CHROME = 'Chrome',
              EDGE = 'Edge',
              FIREFOX = 'Firefox',
              GOOGLE = 'Google',
              HUAWEI = 'Huawei',
              LG = 'LG',
              MICROSOFT = 'Microsoft',
              MOTOROLA = 'Motorola',
              OPERA = 'Opera',
              SAMSUNG = 'Samsung',
              SHARP = 'Sharp',
              SONY = 'Sony',
              XIAOMI = 'Xiaomi',
              ZEBRA = 'Zebra',
              FACEBOOK = 'Facebook',
              CHROMIUM_OS = 'Chromium OS',
              MAC_OS = 'Mac OS'; ///////////
            // Helper
            //////////
            var extend = function (regexes, extensions) {
                var mergedRegexes = {};
                for (var i in regexes) {
                  if (extensions[i] && extensions[i].length % 2 === 0) {
                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                  } else {
                    mergedRegexes[i] = regexes[i];
                  }
                }
                return mergedRegexes;
              },
              enumerize = function (arr) {
                var enums = {};
                for (var i = 0; i < arr.length; i++) {
                  enums[arr[i].toUpperCase()] = arr[i];
                }
                return enums;
              },
              has = function (str1, str2) {
                return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
              },
              lowerize = function (str) {
                return str.toLowerCase();
              },
              majorize = function (version) {
                return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined$1;
              },
              trim = function (str, len) {
                if (typeof str === STR_TYPE) {
                  str = str.replace(/^\s\s*/, EMPTY);
                  return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
                }
              }; ///////////////
            // Map helper
            //////////////
            var rgxMapper = function (ua, arrays) {
                var i = 0,
                  j,
                  k,
                  p,
                  q,
                  matches,
                  match; // loop through all regexes maps
                while (i < arrays.length && !matches) {
                  var regex = arrays[i],
                    // even sequence (0,2,4,..)
                    props = arrays[i + 1]; // odd sequence (1,3,5,..)
                  j = k = 0; // try matching uastring with regexes
                  while (j < regex.length && !matches) {
                    if (!regex[j]) {
                      break;
                    }
                    matches = regex[j++].exec(ua);
                    if (!!matches) {
                      for (p = 0; p < props.length; p++) {
                        match = matches[++k];
                        q = props[p]; // check if given property is actually array
                        if (typeof q === OBJ_TYPE && q.length > 0) {
                          if (q.length === 2) {
                            if (typeof q[1] == FUNC_TYPE) {
                              // assign modified match
                              this[q[0]] = q[1].call(this, match);
                            } else {
                              // assign given value, ignore regex match
                              this[q[0]] = q[1];
                            }
                          } else if (q.length === 3) {
                            // check whether function or regex
                            if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                              // call function (usually string mapper)
                              this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined$1;
                            } else {
                              // sanitize match using given regex
                              this[q[0]] = match ? match.replace(q[1], q[2]) : undefined$1;
                            }
                          } else if (q.length === 4) {
                            this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined$1;
                          }
                        } else {
                          this[q] = match ? match : undefined$1;
                        }
                      }
                    }
                  }
                  i += 2;
                }
              },
              strMapper = function (str, map) {
                for (var i in map) {
                  // check if current value is array
                  if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                      if (has(map[i][j], str)) {
                        return i === UNKNOWN ? undefined$1 : i;
                      }
                    }
                  } else if (has(map[i], str)) {
                    return i === UNKNOWN ? undefined$1 : i;
                  }
                }
                return str;
              }; ///////////////
            // String map
            //////////////
            // Safari < 3.0
            var oldSafariMap = {
                '1.0': '/8',
                '1.2': '/1',
                '1.3': '/3',
                '2.0': '/412',
                '2.0.2': '/416',
                '2.0.3': '/417',
                '2.0.4': '/419',
                '?': '/'
              },
              windowsVersionMap = {
                'ME': '4.90',
                'NT 3.11': 'NT3.51',
                'NT 4.0': 'NT4.0',
                '2000': 'NT 5.0',
                'XP': ['NT 5.1', 'NT 5.2'],
                'Vista': 'NT 6.0',
                '7': 'NT 6.1',
                '8': 'NT 6.2',
                '8.1': 'NT 6.3',
                '10': ['NT 6.4', 'NT 10.0'],
                'RT': 'ARM'
              }; //////////////
            // Regex map
            /////////////
            var regexes = {
              browser: [[/\b(?:crmo|crios)\/([\w\.]+)/i // Chrome for Android/iOS
              ], [VERSION, [NAME, 'Chrome']], [/edg(?:e|ios|a)?\/([\w\.]+)/i // Microsoft Edge
              ], [VERSION, [NAME, 'Edge']], [
              // Presto based
              /(opera mini)\/([-\w\.]+)/i,
              // Opera Mini
              /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
              // Opera Mobi/Tablet
              /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i // Opera
              ], [NAME, VERSION], [/opios[\/ ]+([\w\.]+)/i // Opera mini on iphone >= 8.0
              ], [VERSION, [NAME, OPERA + ' Mini']], [/\bopr\/([\w\.]+)/i // Opera Webkit
              ], [VERSION, [NAME, OPERA]], [
              // Mixed
              /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i // Baidu
              ], [VERSION, [NAME, 'Baidu']], [/(kindle)\/([\w\.]+)/i,
              // Kindle
              /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
              // Lunascape/Maxthon/Netfront/Jasmine/Blazer
              // Trident based
              /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
              // Avant/IEMobile/SlimBrowser
              /(?:ms|\()(ie) ([\w\.]+)/i,
              // Internet Explorer
              // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
              /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
              // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
              /(heytap|ovi)browser\/([\d\.]+)/i,
              // Heytap/Ovi
              /(weibo)__([\d\.]+)/i // Weibo
              ], [NAME, VERSION], [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i // UCBrowser
              ], [VERSION, [NAME, 'UC' + BROWSER]], [/microm.+\bqbcore\/([\w\.]+)/i,
              // WeChat Desktop for Windows Built-in Browser
              /\bqbcore\/([\w\.]+).+microm/i, /micromessenger\/([\w\.]+)/i // WeChat
              ], [VERSION, [NAME, 'WeChat']], [/konqueror\/([\w\.]+)/i // Konqueror
              ], [VERSION, [NAME, 'Konqueror']], [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i // IE11
              ], [VERSION, [NAME, 'IE']], [/ya(?:search)?browser\/([\w\.]+)/i // Yandex
              ], [VERSION, [NAME, 'Yandex']], [/slbrowser\/([\w\.]+)/i // Smart Lenovo Browser
              ], [VERSION, [NAME, 'Smart Lenovo ' + BROWSER]], [/(avast|avg)\/([\w\.]+)/i // Avast/AVG Secure Browser
              ], [[NAME, /(.+)/, '$1 Secure ' + BROWSER], VERSION], [/\bfocus\/([\w\.]+)/i // Firefox Focus
              ], [VERSION, [NAME, FIREFOX + ' Focus']], [/\bopt\/([\w\.]+)/i // Opera Touch
              ], [VERSION, [NAME, OPERA + ' Touch']], [/coc_coc\w+\/([\w\.]+)/i // Coc Coc Browser
              ], [VERSION, [NAME, 'Coc Coc']], [/dolfin\/([\w\.]+)/i // Dolphin
              ], [VERSION, [NAME, 'Dolphin']], [/coast\/([\w\.]+)/i // Opera Coast
              ], [VERSION, [NAME, OPERA + ' Coast']], [/miuibrowser\/([\w\.]+)/i // MIUI Browser
              ], [VERSION, [NAME, 'MIUI ' + BROWSER]], [/fxios\/([-\w\.]+)/i // Firefox for iOS
              ], [VERSION, [NAME, FIREFOX]], [/\bqihu|(qi?ho?o?|360)browser/i // 360
              ], [[NAME, '360 ' + BROWSER]], [/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i], [[NAME, /(.+)/, '$1 ' + BROWSER], VERSION], [
              // Oculus/Sailfish/HuaweiBrowser/VivoBrowser
              /samsungbrowser\/([\w\.]+)/i // Samsung Internet
              ], [VERSION, [NAME, SAMSUNG + ' Internet']], [/(comodo_dragon)\/([\w\.]+)/i // Comodo Dragon
              ], [[NAME, /_/g, ' '], VERSION], [/metasr[\/ ]?([\d\.]+)/i // Sogou Explorer
              ], [VERSION, [NAME, 'Sogou Explorer']], [/(sogou)mo\w+\/([\d\.]+)/i // Sogou Mobile
              ], [[NAME, 'Sogou Mobile'], VERSION], [/(electron)\/([\w\.]+) safari/i,
              // Electron-based App
              /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
              // Tesla
              /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i // QQBrowser/2345 Browser
              ], [NAME, VERSION], [/(lbbrowser)/i,
              // LieBao Browser
              /\[(linkedin)app\]/i // LinkedIn App for iOS & Android
              ], [NAME], [
              // WebView
              /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i // Facebook App for iOS & Android
              ], [[NAME, FACEBOOK], VERSION], [/(Klarna)\/([\w\.]+)/i,
              // Klarna Shopping Browser for iOS & Android
              /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
              // Kakao App
              /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
              // Naver InApp
              /safari (line)\/([\w\.]+)/i,
              // Line App for iOS
              /\b(line)\/([\w\.]+)\/iab/i,
              // Line App for Android
              /(alipay)client\/([\w\.]+)/i,
              // Alipay
              /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i // Chromium/Instagram/Snapchat
              ], [NAME, VERSION], [/\bgsa\/([\w\.]+) .*safari\//i // Google Search Appliance on iOS
              ], [VERSION, [NAME, 'GSA']], [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i // TikTok
              ], [VERSION, [NAME, 'TikTok']], [/headlesschrome(?:\/([\w\.]+)| )/i // Chrome Headless
              ], [VERSION, [NAME, CHROME + ' Headless']], [/ wv\).+(chrome)\/([\w\.]+)/i // Chrome WebView
              ], [[NAME, CHROME + ' WebView'], VERSION], [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i // Android Browser
              ], [VERSION, [NAME, 'Android ' + BROWSER]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia
              ], [NAME, VERSION], [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i // Mobile Safari
              ], [VERSION, [NAME, 'Mobile Safari']], [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile
              ], [VERSION, NAME], [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i // Safari < 3.0
              ], [NAME, [VERSION, strMapper, oldSafariMap]], [/(webkit|khtml)\/([\w\.]+)/i], [NAME, VERSION], [
              // Gecko based
              /(navigator|netscape\d?)\/([-\w\.]+)/i // Netscape
              ], [[NAME, 'Netscape'], VERSION], [/mobile vr; rv:([\w\.]+)\).+firefox/i // Firefox Reality
              ], [VERSION, [NAME, FIREFOX + ' Reality']], [/ekiohf.+(flow)\/([\w\.]+)/i,
              // Flow
              /(swiftfox)/i,
              // Swiftfox
              /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
              // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
              /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
              // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
              /(firefox)\/([\w\.]+)/i,
              // Other Firefox-based
              /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
              // Mozilla
              // Other
              /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
              // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
              /(links) \(([\w\.]+)/i,
              // Links
              /panasonic;(viera)/i // Panasonic Viera
              ], [NAME, VERSION], [/(cobalt)\/([\w\.]+)/i // Cobalt
              ], [NAME, [VERSION, /master.|lts./, ""]]],
              cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i // AMD64 (x64)
              ], [[ARCHITECTURE, 'amd64']], [/(ia32(?=;))/i // IA32 (quicktime)
              ], [[ARCHITECTURE, lowerize]], [/((?:i[346]|x)86)[;\)]/i // IA32 (x86)
              ], [[ARCHITECTURE, 'ia32']], [/\b(aarch64|arm(v?8e?l?|_?64))\b/i // ARM64
              ], [[ARCHITECTURE, 'arm64']], [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i // ARMHF
              ], [[ARCHITECTURE, 'armhf']], [
              // PocketPC mistakenly identified as PowerPC
              /windows (ce|mobile); ppc;/i], [[ARCHITECTURE, 'arm']], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i // PowerPC
              ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [/(sun4\w)[;\)]/i // SPARC
              ], [[ARCHITECTURE, 'sparc']], [/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
              ], [[ARCHITECTURE, lowerize]]],
              device: [[
              //////////////////////////
              // MOBILES & TABLETS
              /////////////////////////
              // Samsung
              /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i, /samsung[- ]([-\w]+)/i, /sec-(sgh\w+)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [
              // Apple
              /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i // iPod/iPhone
              ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [/\((ipad);[-\w\),; ]+apple/i,
              // iPad
              /applecoremedia\/[\w\.]+ \((ipad)/i, /\b(ipad)\d\d?,\d\d?[;\]].+ios/i], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [/(macintosh);/i], [MODEL, [VENDOR, APPLE]], [
              // Sharp
              /\b(sh-?[altvz]?\d\d[a-ekm]?)/i], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [
              // Huawei
              /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [/(?:huawei|honor)([-\w ]+)[;\)]/i, /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [
              // Xiaomi
              /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
              // Xiaomi POCO
              /\b; (\w+) build\/hm\1/i,
              // Xiaomi Hongmi 'numeric' models
              /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
              // Xiaomi Hongmi
              /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
              // Xiaomi Redmi
              /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
              // Xiaomi Redmi 'numeric' models
              /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
              ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [/oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
              // Redmi Pad
              /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i // Mi Pad tablets
              ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [
              // OPPO
              /; (\w+) bui.+ oppo/i, /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
              // Vivo
              /vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [
              // Realme
              /\b(rmx[1-3]\d{3})(?: bui|;|\))/i], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [
              // Motorola
              /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i, /\bmot(?:orola)?[- ](\w*)/i, /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [/\b(mz60\d|xoom[2 ]{0,2}) build\//i], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [
              // LG
              /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i, /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i, /\blg-?([\d\w]+) bui/i], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [
              // Lenovo
              /(ideatab[-\w ]+)/i, /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
              // Nokia
              /(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [
              // Google
              /(pixel c)\b/i // Google Pixel C
              ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i // Google Pixel
              ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [
              // Sony
              /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [
              // OnePlus
              / (kb2005|in20[12]5|be20[12][59])\b/i, /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [
              // Amazon
              /(alexa)webm/i, /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
              // Kindle Fire without Silk / Echo Show
              /(kf[a-z]+)( bui|\)).+silk\//i // Kindle Fire HD
              ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i // Fire Phone
              ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [
              // BlackBerry
              /(playbook);[-\w\),; ]+(rim)/i // BlackBerry PlayBook
              ], [MODEL, VENDOR, [TYPE, TABLET]], [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i // BlackBerry 10
              ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [
              // Asus
              /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [
              // HTC
              /(nexus 9)/i // HTC Nexus 9
              ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
              // HTC
              // ZTE
              /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i, /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
              ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [
              // Acer
              /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [
              // Meizu
              /droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
              // Ulefone
              /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [
              // MIXED
              /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
              // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
              /(hp) ([\w ]+\w)/i,
              // HP iPAQ
              /(asus)-?(\w+)/i,
              // Asus
              /(microsoft); (lumia[\w ]+)/i,
              // Microsoft Lumia
              /(lenovo)[-_ ]?([-\w]+)/i,
              // Lenovo
              /(jolla)/i,
              // Jolla
              /(oppo) ?([\w ]+) bui/i // OPPO
              ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(kobo)\s(ereader|touch)/i,
              // Kobo
              /(archos) (gamepad2?)/i,
              // Archos
              /(hp).+(touchpad(?!.+tablet)|tablet)/i,
              // HP TouchPad
              /(kindle)\/([\w\.]+)/i,
              // Kindle
              /(nook)[\w ]+build\/(\w+)/i,
              // Nook
              /(dell) (strea[kpr\d ]*[\dko])/i,
              // Dell Streak
              /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
              // Le Pan Tablets
              /(trinity)[- ]*(t\d{3}) bui/i,
              // Trinity Tablets
              /(gigaset)[- ]+(q\w{1,9}) bui/i,
              // Gigaset Tablets
              /(vodafone) ([\w ]+)(?:\)| bui)/i // Vodafone
              ], [VENDOR, MODEL, [TYPE, TABLET]], [/(surface duo)/i // Surface Duo
              ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [/droid [\d\.]+; (fp\du?)(?: b|\))/i // Fairphone
              ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [/(u304aa)/i // AT&T
              ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [/\bsie-(\w*)/i // Siemens
              ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [/\b(rct\w+) b/i // RCA Tablets
              ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [/\b(venue[\d ]{2,7}) b/i // Dell Venue Tablets
              ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [/\b(q(?:mv|ta)\w+) b/i // Verizon Tablet
              ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i // Barnes & Noble Tablet
              ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [/\b(tm\d{3}\w+) b/i], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [/\b(k88) b/i // ZTE K Series Tablet
              ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [/\b(nx\d{3}j) b/i // ZTE Nubia
              ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [/\b(gen\d{3}) b.+49h/i // Swiss GEN Mobile
              ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [/\b(zur\d{3}) b/i // Swiss ZUR Tablet
              ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [/\b((zeki)?tb.*\b) b/i // Zeki Tablets
              ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i // Dragon Touch Tablet
              ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [/\b(ns-?\w{0,9}) b/i // Insignia Tablets
              ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [/\b((nxa|next)-?\w{0,9}) b/i // NextBook Tablets
              ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones
              ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [/\b(lvtel\-)?(v1[12]) b/i // LvTel Phones
              ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [/\b(ph-1) /i // Essential PH-1
              ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [/\b(v(100md|700na|7011|917g).*\b) b/i // Envizen Tablets
              ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [/\b(trio[-\w\. ]+) b/i // MachSpeed Tablets
              ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [/\btu_(1491) b/i // Rotor Tablets
              ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [/(shield[\w ]+) b/i // Nvidia Shield Tablets
              ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [/(sprint) (\w+)/i // Sprint Phones
              ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(kin\.[onetw]{3})/i // Microsoft Kin
              ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i // Zebra
              ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [
              ///////////////////
              // SMARTTVS
              ///////////////////
              /smart-tv.+(samsung)/i // Samsung
              ], [VENDOR, [TYPE, SMARTTV]], [/hbbtv.+maple;(\d+)/i], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i // LG SmartTV
              ], [[VENDOR, LG], [TYPE, SMARTTV]], [/(apple) ?tv/i // Apple TV
              ], [VENDOR, [MODEL, APPLE + ' TV'], [TYPE, SMARTTV]], [/crkey/i // Google Chromecast
              ], [[MODEL, CHROME + 'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [/droid.+aft(\w+)( bui|\))/i // Fire TV
              ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i // Sharp
              ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]], [/(bravia[\w ]+)( bui|\))/i // Sony
              ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [/(mitv-\w{5}) bui/i // Xiaomi
              ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [/Hbbtv.*(technisat) (.*);/i // TechniSAT
              ], [VENDOR, MODEL, [TYPE, SMARTTV]], [/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
              // Roku
              /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i // HbbTV devices
              ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i // SmartTV from Unidentified Vendors
              ], [[TYPE, SMARTTV]], [
              ///////////////////
              // CONSOLES
              ///////////////////
              /(ouya)/i,
              // Ouya
              /(nintendo) ([wids3utch]+)/i // Nintendo
              ], [VENDOR, MODEL, [TYPE, CONSOLE]], [/droid.+; (shield) bui/i // Nvidia
              ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [/(playstation [345portablevi]+)/i // Playstation
              ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [/\b(xbox(?: one)?(?!; xbox))[\); ]/i // Microsoft Xbox
              ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [
              ///////////////////
              // WEARABLES
              ///////////////////
              /((pebble))app/i // Pebble
              ], [VENDOR, MODEL, [TYPE, WEARABLE]], [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i // Apple Watch
              ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [/droid.+; (glass) \d/i // Google Glass
              ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [/droid.+; (wt63?0{2,3})\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [/(quest( 2| pro)?)/i // Oculus Quest
              ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [
              ///////////////////
              // EMBEDDED
              ///////////////////
              /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i // Tesla
              ], [VENDOR, [TYPE, EMBEDDED]], [/(aeobc)\b/i // Echo Dot
              ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [
              ////////////////////
              // MIXED (GENERIC)
              ///////////////////
              /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors
              ], [MODEL, [TYPE, MOBILE]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors
              ], [MODEL, [TYPE, TABLET]], [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i // Unidentifiable Tablet
              ], [[TYPE, TABLET]], [/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile
              ], [[TYPE, MOBILE]], [/(android[-\w\. ]{0,9});.+buil/i // Generic Android Device
              ], [MODEL, [VENDOR, 'Generic']]],
              engine: [[/windows.+ edge\/([\w\.]+)/i // EdgeHTML
              ], [VERSION, [NAME, EDGE + 'HTML']], [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i // Blink
              ], [VERSION, [NAME, 'Blink']], [/(presto)\/([\w\.]+)/i,
              // Presto
              /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
              // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
              /ekioh(flow)\/([\w\.]+)/i,
              // Flow
              /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
              // KHTML/Tasman/Links
              /(icab)[\/ ]([23]\.[\d\.]+)/i,
              // iCab
              /\b(libweb)/i], [NAME, VERSION], [/rv\:([\w\.]{1,9})\b.+(gecko)/i // Gecko
              ], [VERSION, NAME]],
              os: [[
              // Windows
              /microsoft (windows) (vista|xp)/i // Windows (iTunes)
              ], [NAME, VERSION], [/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i // Windows Phone
              ], [NAME, [VERSION, strMapper, windowsVersionMap]], [/windows nt 6\.2; (arm)/i,
              // Windows RT
              /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i, /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [
              // iOS/macOS
              /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
              // iOS
              /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i, /cfnetwork\/.+darwin/i], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i // Mac OS
              ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [
              // Mobile OSes
              /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i // Android-x86/HarmonyOS
              ], [VERSION, NAME], [
              // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
              /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i, /(blackberry)\w*\/([\w\.]*)/i,
              // Blackberry
              /(tizen|kaios)[\/ ]([\w\.]+)/i,
              // Tizen/KaiOS
              /\((series40);/i // Series 40
              ], [NAME, VERSION], [/\(bb(10);/i // BlackBerry 10
              ], [VERSION, [NAME, BLACKBERRY]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i // Symbian
              ], [VERSION, [NAME, 'Symbian']], [/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
              ], [VERSION, [NAME, FIREFOX + ' OS']], [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i // WebOS
              ], [VERSION, [NAME, 'webOS']], [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i // watchOS
              ], [VERSION, [NAME, 'watchOS']], [
              // Google Chromecast
              /crkey\/([\d\.]+)/i // Google Chromecast
              ], [VERSION, [NAME, CHROME + 'cast']], [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i // Chromium OS
              ], [[NAME, CHROMIUM_OS], VERSION], [
              // Smart TVs
              /panasonic;(viera)/i,
              // Panasonic Viera
              /(netrange)mmh/i,
              // Netrange
              /(nettv)\/(\d+\.[\w\.]+)/i,
              // NetTV
              // Console
              /(nintendo|playstation) ([wids345portablevuch]+)/i,
              // Nintendo/Playstation
              /(xbox); +xbox ([^\);]+)/i,
              // Microsoft Xbox (360, One, X, S, Series X, Series S)
              // Other
              /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
              // Joli/Palm
              /(mint)[\/\(\) ]?(\w*)/i,
              // Mint
              /(mageia|vectorlinux)[; ]/i,
              // Mageia/VectorLinux
              /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
              // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
              /(hurd|linux) ?([\w\.]*)/i,
              // Hurd/Linux
              /(gnu) ?([\w\.]*)/i,
              // GNU
              /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
              // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
              /(haiku) (\w+)/i // Haiku
              ], [NAME, VERSION], [/(sunos) ?([\w\.\d]*)/i // Solaris
              ], [[NAME, 'Solaris'], VERSION], [/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
              // Solaris
              /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
              // AIX
              /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
              // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
              /(unix) ?([\w\.]*)/i // UNIX
              ], [NAME, VERSION]]
            }; /////////////////
            // Constructor
            ////////////////
            var UAParser = function (ua, extensions) {
              if (typeof ua === OBJ_TYPE) {
                extensions = ua;
                ua = undefined$1;
              }
              if (!(this instanceof UAParser)) {
                return new UAParser(ua, extensions).getResult();
              }
              var _navigator = typeof window !== UNDEF_TYPE && window.navigator ? window.navigator : undefined$1;
              var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
              var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined$1;
              var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
              var _isSelfNav = _navigator && _navigator.userAgent == _ua;
              this.getBrowser = function () {
                var _browser = {};
                _browser[NAME] = undefined$1;
                _browser[VERSION] = undefined$1;
                rgxMapper.call(_browser, _ua, _rgxmap.browser);
                _browser[MAJOR] = majorize(_browser[VERSION]); // Brave-specific detection
                if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
                  _browser[NAME] = 'Brave';
                }
                return _browser;
              };
              this.getCPU = function () {
                var _cpu = {};
                _cpu[ARCHITECTURE] = undefined$1;
                rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
                return _cpu;
              };
              this.getDevice = function () {
                var _device = {};
                _device[VENDOR] = undefined$1;
                _device[MODEL] = undefined$1;
                _device[TYPE] = undefined$1;
                rgxMapper.call(_device, _ua, _rgxmap.device);
                if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                  _device[TYPE] = MOBILE;
                } // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
                if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                  _device[MODEL] = 'iPad';
                  _device[TYPE] = TABLET;
                }
                return _device;
              };
              this.getEngine = function () {
                var _engine = {};
                _engine[NAME] = undefined$1;
                _engine[VERSION] = undefined$1;
                rgxMapper.call(_engine, _ua, _rgxmap.engine);
                return _engine;
              };
              this.getOS = function () {
                var _os = {};
                _os[NAME] = undefined$1;
                _os[VERSION] = undefined$1;
                rgxMapper.call(_os, _ua, _rgxmap.os);
                if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != 'Unknown') {
                  _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS); // backward compatibility
                }
                return _os;
              };
              this.getResult = function () {
                return {
                  ua: this.getUA(),
                  browser: this.getBrowser(),
                  engine: this.getEngine(),
                  os: this.getOS(),
                  device: this.getDevice(),
                  cpu: this.getCPU()
                };
              };
              this.getUA = function () {
                return _ua;
              };
              this.setUA = function (ua) {
                _ua = typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;
                return this;
              };
              this.setUA(_ua);
              return this;
            };
            UAParser.VERSION = LIBVERSION;
            UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
            UAParser.CPU = enumerize([ARCHITECTURE]);
            UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
            UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]); ///////////
            // Export
            //////////
            // check js environment
            if (typeof exports !== UNDEF_TYPE) {
              // nodejs env
              if (module.exports) {
                exports = module.exports = UAParser;
              }
              exports.UAParser = UAParser;
            } else {
              // requirejs env (optional)
              if (__webpack_require__.amdO) {
                !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                  return UAParser;
                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined$1 && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else if (typeof window !== UNDEF_TYPE) {
                // browser env
                window.UAParser = UAParser;
              }
            } // jQuery/Zepto specific (optional)
            // Note:
            //   In AMD env the global scope should be kept clean, but jQuery is an exception.
            //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
            //   and we should catch that.
            var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
            if ($ && !$.ua) {
              var parser = new UAParser();
              $.ua = parser.getResult();
              $.ua.get = function () {
                return parser.getUA();
              };
              $.ua.set = function (ua) {
                parser.setUA(ua);
                var result = parser.getResult();
                for (var prop in result) {
                  $.ua[prop] = result[prop];
                }
              };
            }
          })(typeof window === 'object' ? window : this); /***/
        },
        /***/6603: /***/function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__); /* harmony export */
          __webpack_require__.d(__webpack_exports__, {
            /* harmony export */DOMException: function () {
              return (/* binding */DOMException
              );
            },
            /* harmony export */Headers: function () {
              return (/* binding */Headers
              );
            },
            /* harmony export */Request: function () {
              return (/* binding */Request
              );
            },
            /* harmony export */Response: function () {
              return (/* binding */Response
              );
            },
            /* harmony export */fetch: function () {
              return (/* binding */fetch
              );
            } /* harmony export */
          }); /* eslint-disable no-prototype-builtins */
          var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self ||
          // eslint-disable-next-line no-undef
          typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g || {};
          var support = {
            searchParams: 'URLSearchParams' in g,
            iterable: 'Symbol' in g && 'iterator' in Symbol,
            blob: 'FileReader' in g && 'Blob' in g && function () {
              try {
                new Blob();
                return true;
              } catch (e) {
                return false;
              }
            }(),
            formData: 'FormData' in g,
            arrayBuffer: 'ArrayBuffer' in g
          };
          function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
          }
          if (support.arrayBuffer) {
            var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
            var isArrayBufferView = ArrayBuffer.isView || function (obj) {
              return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
          }
          function normalizeName(name) {
            if (typeof name !== 'string') {
              name = String(name);
            }
            if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
              throw new TypeError('Invalid character in header field name: "' + name + '"');
            }
            return name.toLowerCase();
          }
          function normalizeValue(value) {
            if (typeof value !== 'string') {
              value = String(value);
            }
            return value;
          } // Build a destructive iterator for the value list
          function iteratorFor(items) {
            var iterator = {
              next: function () {
                var value = items.shift();
                return {
                  done: value === undefined,
                  value: value
                };
              }
            };
            if (support.iterable) {
              iterator[Symbol.iterator] = function () {
                return iterator;
              };
            }
            return iterator;
          }
          function Headers(headers) {
            this.map = {};
            if (headers instanceof Headers) {
              headers.forEach(function (value, name) {
                this.append(name, value);
              }, this);
            } else if (Array.isArray(headers)) {
              headers.forEach(function (header) {
                if (header.length != 2) {
                  throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
                }
                this.append(header[0], header[1]);
              }, this);
            } else if (headers) {
              Object.getOwnPropertyNames(headers).forEach(function (name) {
                this.append(name, headers[name]);
              }, this);
            }
          }
          Headers.prototype.append = function (name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ', ' + value : value;
          };
          Headers.prototype['delete'] = function (name) {
            delete this.map[normalizeName(name)];
          };
          Headers.prototype.get = function (name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null;
          };
          Headers.prototype.has = function (name) {
            return this.map.hasOwnProperty(normalizeName(name));
          };
          Headers.prototype.set = function (name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
          };
          Headers.prototype.forEach = function (callback, thisArg) {
            for (var name in this.map) {
              if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
              }
            }
          };
          Headers.prototype.keys = function () {
            var items = [];
            this.forEach(function (value, name) {
              items.push(name);
            });
            return iteratorFor(items);
          };
          Headers.prototype.values = function () {
            var items = [];
            this.forEach(function (value) {
              items.push(value);
            });
            return iteratorFor(items);
          };
          Headers.prototype.entries = function () {
            var items = [];
            this.forEach(function (value, name) {
              items.push([name, value]);
            });
            return iteratorFor(items);
          };
          if (support.iterable) {
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
          }
          function consumed(body) {
            if (body._noBody) return;
            if (body.bodyUsed) {
              return Promise.reject(new TypeError('Already read'));
            }
            body.bodyUsed = true;
          }
          function fileReaderReady(reader) {
            return new Promise(function (resolve, reject) {
              reader.onload = function () {
                resolve(reader.result);
              };
              reader.onerror = function () {
                reject(reader.error);
              };
            });
          }
          function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
          }
          function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
            var encoding = match ? match[1] : 'utf-8';
            reader.readAsText(blob, encoding);
            return promise;
          }
          function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);
            for (var i = 0; i < view.length; i++) {
              chars[i] = String.fromCharCode(view[i]);
            }
            return chars.join('');
          }
          function bufferClone(buf) {
            if (buf.slice) {
              return buf.slice(0);
            } else {
              var view = new Uint8Array(buf.byteLength);
              view.set(new Uint8Array(buf));
              return view.buffer;
            }
          }
          function Body() {
            this.bodyUsed = false;
            this._initBody = function (body) {
              /*
              fetch-mock wraps the Response object in an ES6 Proxy to
              provide useful test harness features such as flush. However, on
              ES5 browsers without fetch or Proxy support pollyfills must be used;
              the proxy-pollyfill is unable to proxy an attribute unless it exists
              on the object before the Proxy is created. This change ensures
              Response.bodyUsed exists on the instance, while maintaining the
              semantic of setting Request.bodyUsed in the constructor before
              _initBody is called.
              */ // eslint-disable-next-line no-self-assign
              this.bodyUsed = this.bodyUsed;
              this._bodyInit = body;
              if (!body) {
                this._noBody = true;
                this._bodyText = '';
              } else if (typeof body === 'string') {
                this._bodyText = body;
              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
              } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
              } else {
                this._bodyText = body = Object.prototype.toString.call(body);
              }
              if (!this.headers.get('content-type')) {
                if (typeof body === 'string') {
                  this.headers.set('content-type', 'text/plain;charset=UTF-8');
                } else if (this._bodyBlob && this._bodyBlob.type) {
                  this.headers.set('content-type', this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                }
              }
            };
            if (support.blob) {
              this.blob = function () {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }
                if (this._bodyBlob) {
                  return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                } else if (this._bodyFormData) {
                  throw new Error('could not read FormData body as blob');
                } else {
                  return Promise.resolve(new Blob([this._bodyText]));
                }
              };
            }
            this.arrayBuffer = function () {
              if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) {
                  return isConsumed;
                } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                  return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                } else {
                  return Promise.resolve(this._bodyArrayBuffer);
                }
              } else if (support.blob) {
                return this.blob().then(readBlobAsArrayBuffer);
              } else {
                throw new Error('could not read as ArrayBuffer');
              }
            };
            this.text = function () {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as text');
              } else {
                return Promise.resolve(this._bodyText);
              }
            };
            if (support.formData) {
              this.formData = function () {
                return this.text().then(decode);
              };
            }
            this.json = function () {
              return this.text().then(JSON.parse);
            };
            return this;
          } // HTTP methods whose capitalization should be normalized
          var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];
          function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method;
          }
          function Request(input, options) {
            if (!(this instanceof Request)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            }
            options = options || {};
            var body = options.body;
            if (input instanceof Request) {
              if (input.bodyUsed) {
                throw new TypeError('Already read');
              }
              this.url = input.url;
              this.credentials = input.credentials;
              if (!options.headers) {
                this.headers = new Headers(input.headers);
              }
              this.method = input.method;
              this.mode = input.mode;
              this.signal = input.signal;
              if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
              }
            } else {
              this.url = String(input);
            }
            this.credentials = options.credentials || this.credentials || 'same-origin';
            if (options.headers || !this.headers) {
              this.headers = new Headers(options.headers);
            }
            this.method = normalizeMethod(options.method || this.method || 'GET');
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal || function () {
              if ('AbortController' in g) {
                var ctrl = new AbortController();
                return ctrl.signal;
              }
            }();
            this.referrer = null;
            if ((this.method === 'GET' || this.method === 'HEAD') && body) {
              throw new TypeError('Body not allowed for GET or HEAD requests');
            }
            this._initBody(body);
            if (this.method === 'GET' || this.method === 'HEAD') {
              if (options.cache === 'no-store' || options.cache === 'no-cache') {
                // Search for a '_' parameter in the query string
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                  // If it already exists then set the value with the current time
                  this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                } else {
                  // Otherwise add a new '_' parameter to the end with the current time
                  var reQueryString = /\?/;
                  this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                }
              }
            }
          }
          Request.prototype.clone = function () {
            return new Request(this, {
              body: this._bodyInit
            });
          };
          function decode(body) {
            var form = new FormData();
            body.trim().split('&').forEach(function (bytes) {
              if (bytes) {
                var split = bytes.split('=');
                var name = split.shift().replace(/\+/g, ' ');
                var value = split.join('=').replace(/\+/g, ' ');
                form.append(decodeURIComponent(name), decodeURIComponent(value));
              }
            });
            return form;
          }
          function parseHeaders(rawHeaders) {
            var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
            // https://tools.ietf.org/html/rfc7230#section-3.2
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' '); // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
            // https://github.com/github/fetch/issues/748
            // https://github.com/zloirock/core-js/issues/751
            preProcessedHeaders.split('\r').map(function (header) {
              return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
            }).forEach(function (line) {
              var parts = line.split(':');
              var key = parts.shift().trim();
              if (key) {
                var value = parts.join(':').trim();
                try {
                  headers.append(key, value);
                } catch (error) {
                  console.warn('Response ' + error.message);
                }
              }
            });
            return headers;
          }
          Body.call(Request.prototype);
          function Response(bodyInit, options) {
            if (!(this instanceof Response)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            }
            if (!options) {
              options = {};
            }
            this.type = 'default';
            this.status = options.status === undefined ? 200 : options.status;
            if (this.status < 200 || this.status > 599) {
              throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
            }
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
            this.headers = new Headers(options.headers);
            this.url = options.url || '';
            this._initBody(bodyInit);
          }
          Body.call(Response.prototype);
          Response.prototype.clone = function () {
            return new Response(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new Headers(this.headers),
              url: this.url
            });
          };
          Response.error = function () {
            var response = new Response(null, {
              status: 200,
              statusText: ''
            });
            response.ok = false;
            response.status = 0;
            response.type = 'error';
            return response;
          };
          var redirectStatuses = [301, 302, 303, 307, 308];
          Response.redirect = function (url, status) {
            if (redirectStatuses.indexOf(status) === -1) {
              throw new RangeError('Invalid status code');
            }
            return new Response(null, {
              status: status,
              headers: {
                location: url
              }
            });
          };
          var DOMException = g.DOMException;
          try {
            new DOMException();
          } catch (err) {
            DOMException = function (message, name) {
              this.message = message;
              this.name = name;
              var error = Error(message);
              this.stack = error.stack;
            };
            DOMException.prototype = Object.create(Error.prototype);
            DOMException.prototype.constructor = DOMException;
          }
          function fetch(input, init) {
            return new Promise(function (resolve, reject) {
              var request = new Request(input, init);
              if (request.signal && request.signal.aborted) {
                return reject(new DOMException('Aborted', 'AbortError'));
              }
              var xhr = new XMLHttpRequest();
              function abortXhr() {
                xhr.abort();
              }
              xhr.onload = function () {
                var options = {
                  statusText: xhr.statusText,
                  headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                }; // This check if specifically for when a user fetches a file locally from the file system
                // Only if the status is out of a normal range
                if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
                  options.status = 200;
                } else {
                  options.status = xhr.status;
                }
                options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                var body = 'response' in xhr ? xhr.response : xhr.responseText;
                setTimeout(function () {
                  resolve(new Response(body, options));
                }, 0);
              };
              xhr.onerror = function () {
                setTimeout(function () {
                  reject(new TypeError('Network request failed'));
                }, 0);
              };
              xhr.ontimeout = function () {
                setTimeout(function () {
                  reject(new TypeError('Network request timed out'));
                }, 0);
              };
              xhr.onabort = function () {
                setTimeout(function () {
                  reject(new DOMException('Aborted', 'AbortError'));
                }, 0);
              };
              function fixUrl(url) {
                try {
                  return url === '' && g.location.href ? g.location.href : url;
                } catch (e) {
                  return url;
                }
              }
              xhr.open(request.method, fixUrl(request.url), true);
              if (request.credentials === 'include') {
                xhr.withCredentials = true;
              } else if (request.credentials === 'omit') {
                xhr.withCredentials = false;
              }
              if ('responseType' in xhr) {
                if (support.blob) {
                  xhr.responseType = 'blob';
                } else if (support.arrayBuffer) {
                  xhr.responseType = 'arraybuffer';
                }
              }
              if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
                var names = [];
                Object.getOwnPropertyNames(init.headers).forEach(function (name) {
                  names.push(normalizeName(name));
                  xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
                request.headers.forEach(function (value, name) {
                  if (names.indexOf(name) === -1) {
                    xhr.setRequestHeader(name, value);
                  }
                });
              } else {
                request.headers.forEach(function (value, name) {
                  xhr.setRequestHeader(name, value);
                });
              }
              if (request.signal) {
                request.signal.addEventListener('abort', abortXhr);
                xhr.onreadystatechange = function () {
                  // DONE (success or failure)
                  if (xhr.readyState === 4) {
                    request.signal.removeEventListener('abort', abortXhr);
                  }
                };
              }
              xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
            });
          }
          fetch.polyfill = true;
          if (!g.fetch) {
            g.fetch = fetch;
            g.Headers = Headers;
            g.Request = Request;
            g.Response = Response;
          } /***/
        },
        /***/7442: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
          const util_1 = __webpack_require__(4705);
          exports.ZodIssueCode = util_1.util.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"]);
          const quotelessJson = obj => {
            const json = JSON.stringify(obj, null, 2);
            return json.replace(/"([^"]+)":/g, "$1:");
          };
          exports.quotelessJson = quotelessJson;
          class ZodError extends Error {
            constructor(issues) {
              var _this4;
              super();
              _this4 = this;
              this.issues = [];
              this.addIssue = sub => {
                this.issues = [...this.issues, sub];
              };
              this.addIssues = function (subs) {
                if (subs === void 0) {
                  subs = [];
                }
                _this4.issues = [..._this4.issues, ...subs];
              };
              const actualProto = new.target.prototype;
              if (Object.setPrototypeOf) {
                // eslint-disable-next-line ban/ban
                Object.setPrototypeOf(this, actualProto);
              } else {
                this.__proto__ = actualProto;
              }
              this.name = "ZodError";
              this.issues = issues;
            }
            get errors() {
              return this.issues;
            }
            format(_mapper) {
              const mapper = _mapper || function (issue) {
                return issue.message;
              };
              const fieldErrors = {
                _errors: []
              };
              const processError = error => {
                for (const issue of error.issues) {
                  if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                  } else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                  } else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                  } else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                  } else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                      const el = issue.path[i];
                      const terminal = i === issue.path.length - 1;
                      if (!terminal) {
                        curr[el] = curr[el] || {
                          _errors: []
                        }; // if (typeof el === "string") {
                        //   curr[el] = curr[el] || { _errors: [] };
                        // } else if (typeof el === "number") {
                        //   const errorArray: any = [];
                        //   errorArray._errors = [];
                        //   curr[el] = curr[el] || errorArray;
                        // }
                      } else {
                        curr[el] = curr[el] || {
                          _errors: []
                        };
                        curr[el]._errors.push(mapper(issue));
                      }
                      curr = curr[el];
                      i++;
                    }
                  }
                }
              };
              processError(this);
              return fieldErrors;
            }
            toString() {
              return this.message;
            }
            get message() {
              return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
            }
            get isEmpty() {
              return this.issues.length === 0;
            }
            flatten(mapper) {
              if (mapper === void 0) {
                mapper = issue => issue.message;
              }
              const fieldErrors = {};
              const formErrors = [];
              for (const sub of this.issues) {
                if (sub.path.length > 0) {
                  fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                  fieldErrors[sub.path[0]].push(mapper(sub));
                } else {
                  formErrors.push(mapper(sub));
                }
              }
              return {
                formErrors,
                fieldErrors
              };
            }
            get formErrors() {
              return this.flatten();
            }
          }
          exports.ZodError = ZodError;
          ZodError.create = issues => {
            const error = new ZodError(issues);
            return error;
          }; /***/
        },
        /***/548: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = void 0;
          const en_1 = __importDefault(__webpack_require__(8412));
          exports.defaultErrorMap = en_1.default;
          let overrideErrorMap = en_1.default;
          function setErrorMap(map) {
            overrideErrorMap = map;
          }
          exports.setErrorMap = setErrorMap;
          function getErrorMap() {
            return overrideErrorMap;
          }
          exports.getErrorMap = getErrorMap; /***/
        },
        /***/6340: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              }
            });
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          });
          var __exportStar = this && this.__exportStar || function (m, exports) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          __exportStar(__webpack_require__(548), exports);
          __exportStar(__webpack_require__(6258), exports);
          __exportStar(__webpack_require__(9201), exports);
          __exportStar(__webpack_require__(4705), exports);
          __exportStar(__webpack_require__(5226), exports);
          __exportStar(__webpack_require__(7442), exports); /***/
        },
        /***/5759: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.errorUtil = void 0;
          (function (errorUtil) {
            errorUtil.errToObj = message => typeof message === "string" ? {
              message
            } : message || {};
            errorUtil.toString = message => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
          })(exports.errorUtil || (exports.errorUtil = {})); /***/
        },
        /***/6258: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
          const errors_1 = __webpack_require__(548);
          const en_1 = __importDefault(__webpack_require__(8412));
          const makeIssue = params => {
            const {
              data,
              path,
              errorMaps,
              issueData
            } = params;
            const fullPath = [...path, ...(issueData.path || [])];
            const fullIssue = {
              ...issueData,
              path: fullPath
            };
            let errorMessage = "";
            const maps = errorMaps.filter(m => !!m).slice().reverse();
            for (const map of maps) {
              errorMessage = map(fullIssue, {
                data,
                defaultError: errorMessage
              }).message;
            }
            return {
              ...issueData,
              path: fullPath,
              message: issueData.message || errorMessage
            };
          };
          exports.makeIssue = makeIssue;
          exports.EMPTY_PATH = [];
          function addIssueToContext(ctx, issueData) {
            const issue = (0, exports.makeIssue)({
              issueData: issueData,
              data: ctx.data,
              path: ctx.path,
              errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_1.getErrorMap)(), en_1.default // then global default map
              ].filter(x => !!x)
            });
            ctx.common.issues.push(issue);
          }
          exports.addIssueToContext = addIssueToContext;
          class ParseStatus {
            constructor() {
              this.value = "valid";
            }
            dirty() {
              if (this.value === "valid") this.value = "dirty";
            }
            abort() {
              if (this.value !== "aborted") this.value = "aborted";
            }
            static mergeArray(status, results) {
              const arrayValue = [];
              for (const s of results) {
                if (s.status === "aborted") return exports.INVALID;
                if (s.status === "dirty") status.dirty();
                arrayValue.push(s.value);
              }
              return {
                status: status.value,
                value: arrayValue
              };
            }
            static async mergeObjectAsync(status, pairs) {
              const syncPairs = [];
              for (const pair of pairs) {
                syncPairs.push({
                  key: await pair.key,
                  value: await pair.value
                });
              }
              return ParseStatus.mergeObjectSync(status, syncPairs);
            }
            static mergeObjectSync(status, pairs) {
              const finalObject = {};
              for (const pair of pairs) {
                const {
                  key,
                  value
                } = pair;
                if (key.status === "aborted") return exports.INVALID;
                if (value.status === "aborted") return exports.INVALID;
                if (key.status === "dirty") status.dirty();
                if (value.status === "dirty") status.dirty();
                if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
                  finalObject[key.value] = value.value;
                }
              }
              return {
                status: status.value,
                value: finalObject
              };
            }
          }
          exports.ParseStatus = ParseStatus;
          exports.INVALID = Object.freeze({
            status: "aborted"
          });
          const DIRTY = value => ({
            status: "dirty",
            value
          });
          exports.DIRTY = DIRTY;
          const OK = value => ({
            status: "valid",
            value
          });
          exports.OK = OK;
          const isAborted = x => x.status === "aborted";
          exports.isAborted = isAborted;
          const isDirty = x => x.status === "dirty";
          exports.isDirty = isDirty;
          const isValid = x => x.status === "valid";
          exports.isValid = isValid;
          const isAsync = x => typeof Promise !== "undefined" && x instanceof Promise;
          exports.isAsync = isAsync; /***/
        },
        /***/9201: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          }); /***/
        },
        /***/4705: /***/function (__unused_webpack_module, exports) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
          var util;
          (function (util) {
            util.assertEqual = val => val;
            function assertIs(_arg) {}
            util.assertIs = assertIs;
            function assertNever(_x) {
              throw new Error();
            }
            util.assertNever = assertNever;
            util.arrayToEnum = items => {
              const obj = {};
              for (const item of items) {
                obj[item] = item;
              }
              return obj;
            };
            util.getValidEnumValues = obj => {
              const validKeys = util.objectKeys(obj).filter(k => typeof obj[obj[k]] !== "number");
              const filtered = {};
              for (const k of validKeys) {
                filtered[k] = obj[k];
              }
              return util.objectValues(filtered);
            };
            util.objectValues = obj => {
              return util.objectKeys(obj).map(function (e) {
                return obj[e];
              });
            };
            util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
            ? obj => Object.keys(obj) // eslint-disable-line ban/ban
            : object => {
              const keys = [];
              for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                  keys.push(key);
                }
              }
              return keys;
            };
            util.find = (arr, checker) => {
              for (const item of arr) {
                if (checker(item)) return item;
              }
              return undefined;
            };
            util.isInteger = typeof Number.isInteger === "function" ? val => Number.isInteger(val) // eslint-disable-line ban/ban
            : val => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
            function joinValues(array, separator) {
              if (separator === void 0) {
                separator = " | ";
              }
              return array.map(val => typeof val === "string" ? `'${val}'` : val).join(separator);
            }
            util.joinValues = joinValues;
            util.jsonStringifyReplacer = (_, value) => {
              if (typeof value === "bigint") {
                return value.toString();
              }
              return value;
            };
          })(util = exports.util || (exports.util = {}));
          (function (objectUtil) {
            objectUtil.mergeShapes = (first, second) => {
              return {
                ...first,
                ...second // second overwrites first
              };
            };
          })(exports.objectUtil || (exports.objectUtil = {}));
          exports.ZodParsedType = util.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"]);
          const getParsedType = data => {
            const t = typeof data;
            switch (t) {
              case "undefined":
                return exports.ZodParsedType.undefined;
              case "string":
                return exports.ZodParsedType.string;
              case "number":
                return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
              case "boolean":
                return exports.ZodParsedType.boolean;
              case "function":
                return exports.ZodParsedType.function;
              case "bigint":
                return exports.ZodParsedType.bigint;
              case "symbol":
                return exports.ZodParsedType.symbol;
              case "object":
                if (Array.isArray(data)) {
                  return exports.ZodParsedType.array;
                }
                if (data === null) {
                  return exports.ZodParsedType.null;
                }
                if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
                  return exports.ZodParsedType.promise;
                }
                if (typeof Map !== "undefined" && data instanceof Map) {
                  return exports.ZodParsedType.map;
                }
                if (typeof Set !== "undefined" && data instanceof Set) {
                  return exports.ZodParsedType.set;
                }
                if (typeof Date !== "undefined" && data instanceof Date) {
                  return exports.ZodParsedType.date;
                }
                return exports.ZodParsedType.object;
              default:
                return exports.ZodParsedType.unknown;
            }
          };
          exports.getParsedType = getParsedType; /***/
        },
        /***/5995: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              }
            });
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          });
          var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          });
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
            __setModuleDefault(result, mod);
            return result;
          };
          var __exportStar = this && this.__exportStar || function (m, exports) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
          };
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.z = void 0;
          const z = __importStar(__webpack_require__(6340));
          exports.z = z;
          __exportStar(__webpack_require__(6340), exports);
          exports["default"] = z; /***/
        },
        /***/8412: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          const util_1 = __webpack_require__(4705);
          const ZodError_1 = __webpack_require__(7442);
          const errorMap = (issue, _ctx) => {
            let message;
            switch (issue.code) {
              case ZodError_1.ZodIssueCode.invalid_type:
                if (issue.received === util_1.ZodParsedType.undefined) {
                  message = "Required";
                } else {
                  message = `Expected ${issue.expected}, received ${issue.received}`;
                }
                break;
              case ZodError_1.ZodIssueCode.invalid_literal:
                message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
                break;
              case ZodError_1.ZodIssueCode.unrecognized_keys:
                message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
                break;
              case ZodError_1.ZodIssueCode.invalid_union:
                message = `Invalid input`;
                break;
              case ZodError_1.ZodIssueCode.invalid_union_discriminator:
                message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
                break;
              case ZodError_1.ZodIssueCode.invalid_enum_value:
                message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
                break;
              case ZodError_1.ZodIssueCode.invalid_arguments:
                message = `Invalid function arguments`;
                break;
              case ZodError_1.ZodIssueCode.invalid_return_type:
                message = `Invalid function return type`;
                break;
              case ZodError_1.ZodIssueCode.invalid_date:
                message = `Invalid date`;
                break;
              case ZodError_1.ZodIssueCode.invalid_string:
                if (typeof issue.validation === "object") {
                  if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                      message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                  } else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                  } else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                  } else {
                    util_1.util.assertNever(issue.validation);
                  }
                } else if (issue.validation !== "regex") {
                  message = `Invalid ${issue.validation}`;
                } else {
                  message = "Invalid";
                }
                break;
              case ZodError_1.ZodIssueCode.too_small:
                if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;else message = "Invalid input";
                break;
              case ZodError_1.ZodIssueCode.too_big:
                if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;else message = "Invalid input";
                break;
              case ZodError_1.ZodIssueCode.custom:
                message = `Invalid input`;
                break;
              case ZodError_1.ZodIssueCode.invalid_intersection_types:
                message = `Intersection results could not be merged`;
                break;
              case ZodError_1.ZodIssueCode.not_multiple_of:
                message = `Number must be a multiple of ${issue.multipleOf}`;
                break;
              case ZodError_1.ZodIssueCode.not_finite:
                message = "Number must be finite";
                break;
              default:
                message = _ctx.defaultError;
                util_1.util.assertNever(issue);
            }
            return {
              message
            };
          };
          exports["default"] = errorMap; /***/
        },
        /***/5226: /***/function (__unused_webpack_module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.date = exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.ZodType = void 0;
          exports.NEVER = exports["void"] = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports["null"] = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports["instanceof"] = exports["function"] = exports["enum"] = exports.effect = exports.discriminatedUnion = void 0;
          const errors_1 = __webpack_require__(548);
          const errorUtil_1 = __webpack_require__(5759);
          const parseUtil_1 = __webpack_require__(6258);
          const util_1 = __webpack_require__(4705);
          const ZodError_1 = __webpack_require__(7442);
          class ParseInputLazyPath {
            constructor(parent, value, path, key) {
              this._cachedPath = [];
              this.parent = parent;
              this.data = value;
              this._path = path;
              this._key = key;
            }
            get path() {
              if (!this._cachedPath.length) {
                if (this._key instanceof Array) {
                  this._cachedPath.push(...this._path, ...this._key);
                } else {
                  this._cachedPath.push(...this._path, this._key);
                }
              }
              return this._cachedPath;
            }
          }
          const handleResult = (ctx, result) => {
            if ((0, parseUtil_1.isValid)(result)) {
              return {
                success: true,
                data: result.value
              };
            } else {
              if (!ctx.common.issues.length) {
                throw new Error("Validation failed but no issues detected.");
              }
              return {
                success: false,
                get error() {
                  if (this._error) return this._error;
                  const error = new ZodError_1.ZodError(ctx.common.issues);
                  this._error = error;
                  return this._error;
                }
              };
            }
          };
          function processCreateParams(params) {
            if (!params) return {};
            const {
              errorMap,
              invalid_type_error,
              required_error,
              description
            } = params;
            if (errorMap && (invalid_type_error || required_error)) {
              throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
            }
            if (errorMap) return {
              errorMap: errorMap,
              description
            };
            const customMap = (iss, ctx) => {
              if (iss.code !== "invalid_type") return {
                message: ctx.defaultError
              };
              if (typeof ctx.data === "undefined") {
                return {
                  message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError
                };
              }
              return {
                message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError
              };
            };
            return {
              errorMap: customMap,
              description
            };
          }
          class ZodType {
            constructor(def) {
              /** Alias of safeParseAsync */this.spa = this.safeParseAsync;
              this._def = def;
              this.parse = this.parse.bind(this);
              this.safeParse = this.safeParse.bind(this);
              this.parseAsync = this.parseAsync.bind(this);
              this.safeParseAsync = this.safeParseAsync.bind(this);
              this.spa = this.spa.bind(this);
              this.refine = this.refine.bind(this);
              this.refinement = this.refinement.bind(this);
              this.superRefine = this.superRefine.bind(this);
              this.optional = this.optional.bind(this);
              this.nullable = this.nullable.bind(this);
              this.nullish = this.nullish.bind(this);
              this.array = this.array.bind(this);
              this.promise = this.promise.bind(this);
              this.or = this.or.bind(this);
              this.and = this.and.bind(this);
              this.transform = this.transform.bind(this);
              this.brand = this.brand.bind(this);
              this.default = this.default.bind(this);
              this.catch = this.catch.bind(this);
              this.describe = this.describe.bind(this);
              this.pipe = this.pipe.bind(this);
              this.readonly = this.readonly.bind(this);
              this.isNullable = this.isNullable.bind(this);
              this.isOptional = this.isOptional.bind(this);
            }
            get description() {
              return this._def.description;
            }
            _getType(input) {
              return (0, util_1.getParsedType)(input.data);
            }
            _getOrReturnCtx(input, ctx) {
              return ctx || {
                common: input.parent.common,
                data: input.data,
                parsedType: (0, util_1.getParsedType)(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
              };
            }
            _processInputParams(input) {
              return {
                status: new parseUtil_1.ParseStatus(),
                ctx: {
                  common: input.parent.common,
                  data: input.data,
                  parsedType: (0, util_1.getParsedType)(input.data),
                  schemaErrorMap: this._def.errorMap,
                  path: input.path,
                  parent: input.parent
                }
              };
            }
            _parseSync(input) {
              const result = this._parse(input);
              if ((0, parseUtil_1.isAsync)(result)) {
                throw new Error("Synchronous parse encountered promise.");
              }
              return result;
            }
            _parseAsync(input) {
              const result = this._parse(input);
              return Promise.resolve(result);
            }
            parse(data, params) {
              const result = this.safeParse(data, params);
              if (result.success) return result.data;
              throw result.error;
            }
            safeParse(data, params) {
              var _a;
              const ctx = {
                common: {
                  issues: [],
                  async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                  contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
                },
                path: (params === null || params === void 0 ? void 0 : params.path) || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data,
                parsedType: (0, util_1.getParsedType)(data)
              };
              const result = this._parseSync({
                data,
                path: ctx.path,
                parent: ctx
              });
              return handleResult(ctx, result);
            }
            async parseAsync(data, params) {
              const result = await this.safeParseAsync(data, params);
              if (result.success) return result.data;
              throw result.error;
            }
            async safeParseAsync(data, params) {
              const ctx = {
                common: {
                  issues: [],
                  contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                  async: true
                },
                path: (params === null || params === void 0 ? void 0 : params.path) || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data,
                parsedType: (0, util_1.getParsedType)(data)
              };
              const maybeAsyncResult = this._parse({
                data,
                path: ctx.path,
                parent: ctx
              });
              const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
              return handleResult(ctx, result);
            }
            refine(check, message) {
              const getIssueProperties = val => {
                if (typeof message === "string" || typeof message === "undefined") {
                  return {
                    message
                  };
                } else if (typeof message === "function") {
                  return message(val);
                } else {
                  return message;
                }
              };
              return this._refinement((val, ctx) => {
                const result = check(val);
                const setError = () => ctx.addIssue({
                  code: ZodError_1.ZodIssueCode.custom,
                  ...getIssueProperties(val)
                });
                if (typeof Promise !== "undefined" && result instanceof Promise) {
                  return result.then(data => {
                    if (!data) {
                      setError();
                      return false;
                    } else {
                      return true;
                    }
                  });
                }
                if (!result) {
                  setError();
                  return false;
                } else {
                  return true;
                }
              });
            }
            refinement(check, refinementData) {
              return this._refinement((val, ctx) => {
                if (!check(val)) {
                  ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                  return false;
                } else {
                  return true;
                }
              });
            }
            _refinement(refinement) {
              return new ZodEffects({
                schema: this,
                typeName: ZodFirstPartyTypeKind.ZodEffects,
                effect: {
                  type: "refinement",
                  refinement
                }
              });
            }
            superRefine(refinement) {
              return this._refinement(refinement);
            }
            optional() {
              return ZodOptional.create(this, this._def);
            }
            nullable() {
              return ZodNullable.create(this, this._def);
            }
            nullish() {
              return this.nullable().optional();
            }
            array() {
              return ZodArray.create(this, this._def);
            }
            promise() {
              return ZodPromise.create(this, this._def);
            }
            or(option) {
              return ZodUnion.create([this, option], this._def);
            }
            and(incoming) {
              return ZodIntersection.create(this, incoming, this._def);
            }
            transform(transform) {
              return new ZodEffects({
                ...processCreateParams(this._def),
                schema: this,
                typeName: ZodFirstPartyTypeKind.ZodEffects,
                effect: {
                  type: "transform",
                  transform
                }
              });
            }
            default(def) {
              const defaultValueFunc = typeof def === "function" ? def : () => def;
              return new ZodDefault({
                ...processCreateParams(this._def),
                innerType: this,
                defaultValue: defaultValueFunc,
                typeName: ZodFirstPartyTypeKind.ZodDefault
              });
            }
            brand() {
              return new ZodBranded({
                typeName: ZodFirstPartyTypeKind.ZodBranded,
                type: this,
                ...processCreateParams(this._def)
              });
            }
            catch(def) {
              const catchValueFunc = typeof def === "function" ? def : () => def;
              return new ZodCatch({
                ...processCreateParams(this._def),
                innerType: this,
                catchValue: catchValueFunc,
                typeName: ZodFirstPartyTypeKind.ZodCatch
              });
            }
            describe(description) {
              const This = this.constructor;
              return new This({
                ...this._def,
                description
              });
            }
            pipe(target) {
              return ZodPipeline.create(this, target);
            }
            readonly() {
              return ZodReadonly.create(this);
            }
            isOptional() {
              return this.safeParse(undefined).success;
            }
            isNullable() {
              return this.safeParse(null).success;
            }
          }
          exports.ZodType = ZodType;
          exports.Schema = ZodType;
          exports.ZodSchema = ZodType;
          const cuidRegex = /^c[^\s-]{8,}$/i;
          const cuid2Regex = /^[a-z][a-z0-9]*$/;
          const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/; // const uuidRegex =
          //   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
          const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i; // from https://stackoverflow.com/a/46181/1550155
          // old version: too slow, didn't support unicode
          // const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
          //old email regex
          // const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
          // eslint-disable-next-line
          // const emailRegex =
          //   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
          // const emailRegex =
          //   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
          // const emailRegex =
          //   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
          const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i; // const emailRegex =
          //   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
          // from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
          const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
          let emojiRegex;
          const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
          const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/; // Adapted from https://stackoverflow.com/a/3143231
          const datetimeRegex = args => {
            if (args.precision) {
              if (args.offset) {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
              } else {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
              }
            } else if (args.precision === 0) {
              if (args.offset) {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
              } else {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
              }
            } else {
              if (args.offset) {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
              } else {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
              }
            }
          };
          function isValidIP(ip, version) {
            if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
              return true;
            }
            if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
              return true;
            }
            return false;
          }
          class ZodString extends ZodType {
            _parse(input) {
              if (this._def.coerce) {
                input.data = String(input.data);
              }
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.string) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.string,
                  received: ctx.parsedType
                } //
                );
                return parseUtil_1.INVALID;
              }
              const status = new parseUtil_1.ParseStatus();
              let ctx = undefined;
              for (const check of this._def.checks) {
                if (check.kind === "min") {
                  if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_small,
                      minimum: check.value,
                      type: "string",
                      inclusive: true,
                      exact: false,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "max") {
                  if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_big,
                      maximum: check.value,
                      type: "string",
                      inclusive: true,
                      exact: false,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "length") {
                  const tooBig = input.data.length > check.value;
                  const tooSmall = input.data.length < check.value;
                  if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                      (0, parseUtil_1.addIssueToContext)(ctx, {
                        code: ZodError_1.ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                      });
                    } else if (tooSmall) {
                      (0, parseUtil_1.addIssueToContext)(ctx, {
                        code: ZodError_1.ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                      });
                    }
                    status.dirty();
                  }
                } else if (check.kind === "email") {
                  if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "email",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "emoji") {
                  if (!emojiRegex) {
                    emojiRegex = new RegExp(_emojiRegex, "u");
                  }
                  if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "emoji",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "uuid") {
                  if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "uuid",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "cuid") {
                  if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "cuid",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "cuid2") {
                  if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "cuid2",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "ulid") {
                  if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "ulid",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "url") {
                  try {
                    new URL(input.data);
                  } catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "url",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "regex") {
                  check.regex.lastIndex = 0;
                  const testResult = check.regex.test(input.data);
                  if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "regex",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "trim") {
                  input.data = input.data.trim();
                } else if (check.kind === "includes") {
                  if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      validation: {
                        includes: check.value,
                        position: check.position
                      },
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "toLowerCase") {
                  input.data = input.data.toLowerCase();
                } else if (check.kind === "toUpperCase") {
                  input.data = input.data.toUpperCase();
                } else if (check.kind === "startsWith") {
                  if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      validation: {
                        startsWith: check.value
                      },
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "endsWith") {
                  if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      validation: {
                        endsWith: check.value
                      },
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "datetime") {
                  const regex = datetimeRegex(check);
                  if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      validation: "datetime",
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "ip") {
                  if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      validation: "ip",
                      code: ZodError_1.ZodIssueCode.invalid_string,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else {
                  util_1.util.assertNever(check);
                }
              }
              return {
                status: status.value,
                value: input.data
              };
            }
            _regex(regex, validation, message) {
              return this.refinement(data => regex.test(data), {
                validation,
                code: ZodError_1.ZodIssueCode.invalid_string,
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            _addCheck(check) {
              return new ZodString({
                ...this._def,
                checks: [...this._def.checks, check]
              });
            }
            email(message) {
              return this._addCheck({
                kind: "email",
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            url(message) {
              return this._addCheck({
                kind: "url",
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            emoji(message) {
              return this._addCheck({
                kind: "emoji",
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            uuid(message) {
              return this._addCheck({
                kind: "uuid",
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            cuid(message) {
              return this._addCheck({
                kind: "cuid",
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            cuid2(message) {
              return this._addCheck({
                kind: "cuid2",
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            ulid(message) {
              return this._addCheck({
                kind: "ulid",
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            ip(options) {
              return this._addCheck({
                kind: "ip",
                ...errorUtil_1.errorUtil.errToObj(options)
              });
            }
            datetime(options) {
              var _a;
              if (typeof options === "string") {
                return this._addCheck({
                  kind: "datetime",
                  precision: null,
                  offset: false,
                  message: options
                });
              }
              return this._addCheck({
                kind: "datetime",
                precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
                offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
                ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
              });
            }
            regex(regex, message) {
              return this._addCheck({
                kind: "regex",
                regex: regex,
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            includes(value, options) {
              return this._addCheck({
                kind: "includes",
                value: value,
                position: options === null || options === void 0 ? void 0 : options.position,
                ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
              });
            }
            startsWith(value, message) {
              return this._addCheck({
                kind: "startsWith",
                value: value,
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            endsWith(value, message) {
              return this._addCheck({
                kind: "endsWith",
                value: value,
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            min(minLength, message) {
              return this._addCheck({
                kind: "min",
                value: minLength,
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            max(maxLength, message) {
              return this._addCheck({
                kind: "max",
                value: maxLength,
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            }
            length(len, message) {
              return this._addCheck({
                kind: "length",
                value: len,
                ...errorUtil_1.errorUtil.errToObj(message)
              });
            } /**
              * @deprecated Use z.string().min(1) instead.
              * @see {@link ZodString.min}
              */
            nonempty(message) {
              return this.min(1, errorUtil_1.errorUtil.errToObj(message));
            }
            trim() {
              return new ZodString({
                ...this._def,
                checks: [...this._def.checks, {
                  kind: "trim"
                }]
              });
            }
            toLowerCase() {
              return new ZodString({
                ...this._def,
                checks: [...this._def.checks, {
                  kind: "toLowerCase"
                }]
              });
            }
            toUpperCase() {
              return new ZodString({
                ...this._def,
                checks: [...this._def.checks, {
                  kind: "toUpperCase"
                }]
              });
            }
            get isDatetime() {
              return !!this._def.checks.find(ch => ch.kind === "datetime");
            }
            get isEmail() {
              return !!this._def.checks.find(ch => ch.kind === "email");
            }
            get isURL() {
              return !!this._def.checks.find(ch => ch.kind === "url");
            }
            get isEmoji() {
              return !!this._def.checks.find(ch => ch.kind === "emoji");
            }
            get isUUID() {
              return !!this._def.checks.find(ch => ch.kind === "uuid");
            }
            get isCUID() {
              return !!this._def.checks.find(ch => ch.kind === "cuid");
            }
            get isCUID2() {
              return !!this._def.checks.find(ch => ch.kind === "cuid2");
            }
            get isULID() {
              return !!this._def.checks.find(ch => ch.kind === "ulid");
            }
            get isIP() {
              return !!this._def.checks.find(ch => ch.kind === "ip");
            }
            get minLength() {
              let min = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                  if (min === null || ch.value > min) min = ch.value;
                }
              }
              return min;
            }
            get maxLength() {
              let max = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                  if (max === null || ch.value < max) max = ch.value;
                }
              }
              return max;
            }
          }
          exports.ZodString = ZodString;
          ZodString.create = params => {
            var _a;
            return new ZodString({
              checks: [],
              typeName: ZodFirstPartyTypeKind.ZodString,
              coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
              ...processCreateParams(params)
            });
          }; // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
          function floatSafeRemainder(val, step) {
            const valDecCount = (val.toString().split(".")[1] || "").length;
            const stepDecCount = (step.toString().split(".")[1] || "").length;
            const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
            const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
            const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
            return valInt % stepInt / Math.pow(10, decCount);
          }
          class ZodNumber extends ZodType {
            constructor() {
              super(...arguments);
              this.min = this.gte;
              this.max = this.lte;
              this.step = this.multipleOf;
            }
            _parse(input) {
              if (this._def.coerce) {
                input.data = Number(input.data);
              }
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.number) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.number,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              let ctx = undefined;
              const status = new parseUtil_1.ParseStatus();
              for (const check of this._def.checks) {
                if (check.kind === "int") {
                  if (!util_1.util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.invalid_type,
                      expected: "integer",
                      received: "float",
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "min") {
                  const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                  if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_small,
                      minimum: check.value,
                      type: "number",
                      inclusive: check.inclusive,
                      exact: false,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "max") {
                  const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                  if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_big,
                      maximum: check.value,
                      type: "number",
                      inclusive: check.inclusive,
                      exact: false,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "multipleOf") {
                  if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.not_multiple_of,
                      multipleOf: check.value,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "finite") {
                  if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.not_finite,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else {
                  util_1.util.assertNever(check);
                }
              }
              return {
                status: status.value,
                value: input.data
              };
            }
            gte(value, message) {
              return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
            }
            gt(value, message) {
              return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
            }
            lte(value, message) {
              return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
            }
            lt(value, message) {
              return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
            }
            setLimit(kind, value, inclusive, message) {
              return new ZodNumber({
                ...this._def,
                checks: [...this._def.checks, {
                  kind,
                  value,
                  inclusive,
                  message: errorUtil_1.errorUtil.toString(message)
                }]
              });
            }
            _addCheck(check) {
              return new ZodNumber({
                ...this._def,
                checks: [...this._def.checks, check]
              });
            }
            int(message) {
              return this._addCheck({
                kind: "int",
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            positive(message) {
              return this._addCheck({
                kind: "min",
                value: 0,
                inclusive: false,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            negative(message) {
              return this._addCheck({
                kind: "max",
                value: 0,
                inclusive: false,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            nonpositive(message) {
              return this._addCheck({
                kind: "max",
                value: 0,
                inclusive: true,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            nonnegative(message) {
              return this._addCheck({
                kind: "min",
                value: 0,
                inclusive: true,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            multipleOf(value, message) {
              return this._addCheck({
                kind: "multipleOf",
                value: value,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            finite(message) {
              return this._addCheck({
                kind: "finite",
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            safe(message) {
              return this._addCheck({
                kind: "min",
                inclusive: true,
                value: Number.MIN_SAFE_INTEGER,
                message: errorUtil_1.errorUtil.toString(message)
              })._addCheck({
                kind: "max",
                inclusive: true,
                value: Number.MAX_SAFE_INTEGER,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            get minValue() {
              let min = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                  if (min === null || ch.value > min) min = ch.value;
                }
              }
              return min;
            }
            get maxValue() {
              let max = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                  if (max === null || ch.value < max) max = ch.value;
                }
              }
              return max;
            }
            get isInt() {
              return !!this._def.checks.find(ch => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
            }
            get isFinite() {
              let max = null,
                min = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
                  return true;
                } else if (ch.kind === "min") {
                  if (min === null || ch.value > min) min = ch.value;
                } else if (ch.kind === "max") {
                  if (max === null || ch.value < max) max = ch.value;
                }
              }
              return Number.isFinite(min) && Number.isFinite(max);
            }
          }
          exports.ZodNumber = ZodNumber;
          ZodNumber.create = params => {
            return new ZodNumber({
              checks: [],
              typeName: ZodFirstPartyTypeKind.ZodNumber,
              coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
              ...processCreateParams(params)
            });
          };
          class ZodBigInt extends ZodType {
            constructor() {
              super(...arguments);
              this.min = this.gte;
              this.max = this.lte;
            }
            _parse(input) {
              if (this._def.coerce) {
                input.data = BigInt(input.data);
              }
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.bigint) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.bigint,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              let ctx = undefined;
              const status = new parseUtil_1.ParseStatus();
              for (const check of this._def.checks) {
                if (check.kind === "min") {
                  const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                  if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_small,
                      type: "bigint",
                      minimum: check.value,
                      inclusive: check.inclusive,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "max") {
                  const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                  if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_big,
                      type: "bigint",
                      maximum: check.value,
                      inclusive: check.inclusive,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else if (check.kind === "multipleOf") {
                  if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.not_multiple_of,
                      multipleOf: check.value,
                      message: check.message
                    });
                    status.dirty();
                  }
                } else {
                  util_1.util.assertNever(check);
                }
              }
              return {
                status: status.value,
                value: input.data
              };
            }
            gte(value, message) {
              return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
            }
            gt(value, message) {
              return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
            }
            lte(value, message) {
              return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
            }
            lt(value, message) {
              return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
            }
            setLimit(kind, value, inclusive, message) {
              return new ZodBigInt({
                ...this._def,
                checks: [...this._def.checks, {
                  kind,
                  value,
                  inclusive,
                  message: errorUtil_1.errorUtil.toString(message)
                }]
              });
            }
            _addCheck(check) {
              return new ZodBigInt({
                ...this._def,
                checks: [...this._def.checks, check]
              });
            }
            positive(message) {
              return this._addCheck({
                kind: "min",
                value: BigInt(0),
                inclusive: false,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            negative(message) {
              return this._addCheck({
                kind: "max",
                value: BigInt(0),
                inclusive: false,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            nonpositive(message) {
              return this._addCheck({
                kind: "max",
                value: BigInt(0),
                inclusive: true,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            nonnegative(message) {
              return this._addCheck({
                kind: "min",
                value: BigInt(0),
                inclusive: true,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            multipleOf(value, message) {
              return this._addCheck({
                kind: "multipleOf",
                value,
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            get minValue() {
              let min = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                  if (min === null || ch.value > min) min = ch.value;
                }
              }
              return min;
            }
            get maxValue() {
              let max = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                  if (max === null || ch.value < max) max = ch.value;
                }
              }
              return max;
            }
          }
          exports.ZodBigInt = ZodBigInt;
          ZodBigInt.create = params => {
            var _a;
            return new ZodBigInt({
              checks: [],
              typeName: ZodFirstPartyTypeKind.ZodBigInt,
              coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
              ...processCreateParams(params)
            });
          };
          class ZodBoolean extends ZodType {
            _parse(input) {
              if (this._def.coerce) {
                input.data = Boolean(input.data);
              }
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.boolean) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.boolean,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              return (0, parseUtil_1.OK)(input.data);
            }
          }
          exports.ZodBoolean = ZodBoolean;
          ZodBoolean.create = params => {
            return new ZodBoolean({
              typeName: ZodFirstPartyTypeKind.ZodBoolean,
              coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
              ...processCreateParams(params)
            });
          };
          class ZodDate extends ZodType {
            _parse(input) {
              if (this._def.coerce) {
                input.data = new Date(input.data);
              }
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.date) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.date,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              if (isNaN(input.data.getTime())) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_date
                });
                return parseUtil_1.INVALID;
              }
              const status = new parseUtil_1.ParseStatus();
              let ctx = undefined;
              for (const check of this._def.checks) {
                if (check.kind === "min") {
                  if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_small,
                      message: check.message,
                      inclusive: true,
                      exact: false,
                      minimum: check.value,
                      type: "date"
                    });
                    status.dirty();
                  }
                } else if (check.kind === "max") {
                  if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.too_big,
                      message: check.message,
                      inclusive: true,
                      exact: false,
                      maximum: check.value,
                      type: "date"
                    });
                    status.dirty();
                  }
                } else {
                  util_1.util.assertNever(check);
                }
              }
              return {
                status: status.value,
                value: new Date(input.data.getTime())
              };
            }
            _addCheck(check) {
              return new ZodDate({
                ...this._def,
                checks: [...this._def.checks, check]
              });
            }
            min(minDate, message) {
              return this._addCheck({
                kind: "min",
                value: minDate.getTime(),
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            max(maxDate, message) {
              return this._addCheck({
                kind: "max",
                value: maxDate.getTime(),
                message: errorUtil_1.errorUtil.toString(message)
              });
            }
            get minDate() {
              let min = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                  if (min === null || ch.value > min) min = ch.value;
                }
              }
              return min != null ? new Date(min) : null;
            }
            get maxDate() {
              let max = null;
              for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                  if (max === null || ch.value < max) max = ch.value;
                }
              }
              return max != null ? new Date(max) : null;
            }
          }
          exports.ZodDate = ZodDate;
          ZodDate.create = params => {
            return new ZodDate({
              checks: [],
              coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
              typeName: ZodFirstPartyTypeKind.ZodDate,
              ...processCreateParams(params)
            });
          };
          class ZodSymbol extends ZodType {
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.symbol) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.symbol,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              return (0, parseUtil_1.OK)(input.data);
            }
          }
          exports.ZodSymbol = ZodSymbol;
          ZodSymbol.create = params => {
            return new ZodSymbol({
              typeName: ZodFirstPartyTypeKind.ZodSymbol,
              ...processCreateParams(params)
            });
          };
          class ZodUndefined extends ZodType {
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.undefined) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.undefined,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              return (0, parseUtil_1.OK)(input.data);
            }
          }
          exports.ZodUndefined = ZodUndefined;
          ZodUndefined.create = params => {
            return new ZodUndefined({
              typeName: ZodFirstPartyTypeKind.ZodUndefined,
              ...processCreateParams(params)
            });
          };
          class ZodNull extends ZodType {
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.null) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.null,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              return (0, parseUtil_1.OK)(input.data);
            }
          }
          exports.ZodNull = ZodNull;
          ZodNull.create = params => {
            return new ZodNull({
              typeName: ZodFirstPartyTypeKind.ZodNull,
              ...processCreateParams(params)
            });
          };
          class ZodAny extends ZodType {
            constructor() {
              super(...arguments); // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
              this._any = true;
            }
            _parse(input) {
              return (0, parseUtil_1.OK)(input.data);
            }
          }
          exports.ZodAny = ZodAny;
          ZodAny.create = params => {
            return new ZodAny({
              typeName: ZodFirstPartyTypeKind.ZodAny,
              ...processCreateParams(params)
            });
          };
          class ZodUnknown extends ZodType {
            constructor() {
              super(...arguments); // required
              this._unknown = true;
            }
            _parse(input) {
              return (0, parseUtil_1.OK)(input.data);
            }
          }
          exports.ZodUnknown = ZodUnknown;
          ZodUnknown.create = params => {
            return new ZodUnknown({
              typeName: ZodFirstPartyTypeKind.ZodUnknown,
              ...processCreateParams(params)
            });
          };
          class ZodNever extends ZodType {
            _parse(input) {
              const ctx = this._getOrReturnCtx(input);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.never,
                received: ctx.parsedType
              });
              return parseUtil_1.INVALID;
            }
          }
          exports.ZodNever = ZodNever;
          ZodNever.create = params => {
            return new ZodNever({
              typeName: ZodFirstPartyTypeKind.ZodNever,
              ...processCreateParams(params)
            });
          };
          class ZodVoid extends ZodType {
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.undefined) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.void,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              return (0, parseUtil_1.OK)(input.data);
            }
          }
          exports.ZodVoid = ZodVoid;
          ZodVoid.create = params => {
            return new ZodVoid({
              typeName: ZodFirstPartyTypeKind.ZodVoid,
              ...processCreateParams(params)
            });
          };
          class ZodArray extends ZodType {
            _parse(input) {
              const {
                ctx,
                status
              } = this._processInputParams(input);
              const def = this._def;
              if (ctx.parsedType !== util_1.ZodParsedType.array) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.array,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              if (def.exactLength !== null) {
                const tooBig = ctx.data.length > def.exactLength.value;
                const tooSmall = ctx.data.length < def.exactLength.value;
                if (tooBig || tooSmall) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
                    minimum: tooSmall ? def.exactLength.value : undefined,
                    maximum: tooBig ? def.exactLength.value : undefined,
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message
                  });
                  status.dirty();
                }
              }
              if (def.minLength !== null) {
                if (ctx.data.length < def.minLength.value) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message
                  });
                  status.dirty();
                }
              }
              if (def.maxLength !== null) {
                if (ctx.data.length > def.maxLength.value) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message
                  });
                  status.dirty();
                }
              }
              if (ctx.common.async) {
                return Promise.all([...ctx.data].map((item, i) => {
                  return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
                })).then(result => {
                  return parseUtil_1.ParseStatus.mergeArray(status, result);
                });
              }
              const result = [...ctx.data].map((item, i) => {
                return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
              });
              return parseUtil_1.ParseStatus.mergeArray(status, result);
            }
            get element() {
              return this._def.type;
            }
            min(minLength, message) {
              return new ZodArray({
                ...this._def,
                minLength: {
                  value: minLength,
                  message: errorUtil_1.errorUtil.toString(message)
                }
              });
            }
            max(maxLength, message) {
              return new ZodArray({
                ...this._def,
                maxLength: {
                  value: maxLength,
                  message: errorUtil_1.errorUtil.toString(message)
                }
              });
            }
            length(len, message) {
              return new ZodArray({
                ...this._def,
                exactLength: {
                  value: len,
                  message: errorUtil_1.errorUtil.toString(message)
                }
              });
            }
            nonempty(message) {
              return this.min(1, message);
            }
          }
          exports.ZodArray = ZodArray;
          ZodArray.create = (schema, params) => {
            return new ZodArray({
              type: schema,
              minLength: null,
              maxLength: null,
              exactLength: null,
              typeName: ZodFirstPartyTypeKind.ZodArray,
              ...processCreateParams(params)
            });
          };
          function deepPartialify(schema) {
            if (schema instanceof ZodObject) {
              const newShape = {};
              for (const key in schema.shape) {
                const fieldSchema = schema.shape[key];
                newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
              }
              return new ZodObject({
                ...schema._def,
                shape: () => newShape
              });
            } else if (schema instanceof ZodArray) {
              return new ZodArray({
                ...schema._def,
                type: deepPartialify(schema.element)
              });
            } else if (schema instanceof ZodOptional) {
              return ZodOptional.create(deepPartialify(schema.unwrap()));
            } else if (schema instanceof ZodNullable) {
              return ZodNullable.create(deepPartialify(schema.unwrap()));
            } else if (schema instanceof ZodTuple) {
              return ZodTuple.create(schema.items.map(item => deepPartialify(item)));
            } else {
              return schema;
            }
          }
          class ZodObject extends ZodType {
            constructor() {
              super(...arguments);
              this._cached = null; /**
                                   * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
                                   * If you want to pass through unknown properties, use `.passthrough()` instead.
                                   */
              this.nonstrict = this.passthrough; // extend<
              //   Augmentation extends ZodRawShape,
              //   NewOutput extends util.flatten<{
              //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
              //       ? Augmentation[k]["_output"]
              //       : k extends keyof Output
              //       ? Output[k]
              //       : never;
              //   }>,
              //   NewInput extends util.flatten<{
              //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
              //       ? Augmentation[k]["_input"]
              //       : k extends keyof Input
              //       ? Input[k]
              //       : never;
              //   }>
              // >(
              //   augmentation: Augmentation
              // ): ZodObject<
              //   extendShape<T, Augmentation>,
              //   UnknownKeys,
              //   Catchall,
              //   NewOutput,
              //   NewInput
              // > {
              //   return new ZodObject({
              //     ...this._def,
              //     shape: () => ({
              //       ...this._def.shape(),
              //       ...augmentation,
              //     }),
              //   }) as any;
              // }
              /**
                       * @deprecated Use `.extend` instead
                       *  */
              this.augment = this.extend;
            }
            _getCached() {
              if (this._cached !== null) return this._cached;
              const shape = this._def.shape();
              const keys = util_1.util.objectKeys(shape);
              return this._cached = {
                shape,
                keys
              };
            }
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.object) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.object,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              const {
                status,
                ctx
              } = this._processInputParams(input);
              const {
                shape,
                keys: shapeKeys
              } = this._getCached();
              const extraKeys = [];
              if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
                for (const key in ctx.data) {
                  if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                  }
                }
              }
              const pairs = [];
              for (const key of shapeKeys) {
                const keyValidator = shape[key];
                const value = ctx.data[key];
                pairs.push({
                  key: {
                    status: "valid",
                    value: key
                  },
                  value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                  alwaysSet: key in ctx.data
                });
              }
              if (this._def.catchall instanceof ZodNever) {
                const unknownKeys = this._def.unknownKeys;
                if (unknownKeys === "passthrough") {
                  for (const key of extraKeys) {
                    pairs.push({
                      key: {
                        status: "valid",
                        value: key
                      },
                      value: {
                        status: "valid",
                        value: ctx.data[key]
                      }
                    });
                  }
                } else if (unknownKeys === "strict") {
                  if (extraKeys.length > 0) {
                    (0, parseUtil_1.addIssueToContext)(ctx, {
                      code: ZodError_1.ZodIssueCode.unrecognized_keys,
                      keys: extraKeys
                    });
                    status.dirty();
                  }
                } else if (unknownKeys === "strip") ;else {
                  throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
                }
              } else {
                // run catchall validation
                const catchall = this._def.catchall;
                for (const key of extraKeys) {
                  const value = ctx.data[key];
                  pairs.push({
                    key: {
                      status: "valid",
                      value: key
                    },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data
                  });
                }
              }
              if (ctx.common.async) {
                return Promise.resolve().then(async () => {
                  const syncPairs = [];
                  for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                      key,
                      value: await pair.value,
                      alwaysSet: pair.alwaysSet
                    });
                  }
                  return syncPairs;
                }).then(syncPairs => {
                  return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
                });
              } else {
                return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
              }
            }
            get shape() {
              return this._def.shape();
            }
            strict(message) {
              errorUtil_1.errorUtil.errToObj;
              return new ZodObject({
                ...this._def,
                unknownKeys: "strict",
                ...(message !== undefined ? {
                  errorMap: (issue, ctx) => {
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                      message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                      message: defaultError
                    };
                  }
                } : {})
              });
            }
            strip() {
              return new ZodObject({
                ...this._def,
                unknownKeys: "strip"
              });
            }
            passthrough() {
              return new ZodObject({
                ...this._def,
                unknownKeys: "passthrough"
              });
            } // const AugmentFactory =
            //   <Def extends ZodObjectDef>(def: Def) =>
            //   <Augmentation extends ZodRawShape>(
            //     augmentation: Augmentation
            //   ): ZodObject<
            //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
            //     Def["unknownKeys"],
            //     Def["catchall"]
            //   > => {
            //     return new ZodObject({
            //       ...def,
            //       shape: () => ({
            //         ...def.shape(),
            //         ...augmentation,
            //       }),
            //     }) as any;
            //   };
            extend(augmentation) {
              return new ZodObject({
                ...this._def,
                shape: () => ({
                  ...this._def.shape(),
                  ...augmentation
                })
              });
            } /**
              * Prior to zod@1.0.12 there was a bug in the
              * inferred type of merged objects. Please
              * upgrade if you are experiencing issues.
              */
            merge(merging) {
              const merged = new ZodObject({
                unknownKeys: merging._def.unknownKeys,
                catchall: merging._def.catchall,
                shape: () => ({
                  ...this._def.shape(),
                  ...merging._def.shape()
                }),
                typeName: ZodFirstPartyTypeKind.ZodObject
              });
              return merged;
            } // merge<
            //   Incoming extends AnyZodObject,
            //   Augmentation extends Incoming["shape"],
            //   NewOutput extends {
            //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
            //       ? Augmentation[k]["_output"]
            //       : k extends keyof Output
            //       ? Output[k]
            //       : never;
            //   },
            //   NewInput extends {
            //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
            //       ? Augmentation[k]["_input"]
            //       : k extends keyof Input
            //       ? Input[k]
            //       : never;
            //   }
            // >(
            //   merging: Incoming
            // ): ZodObject<
            //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
            //   Incoming["_def"]["unknownKeys"],
            //   Incoming["_def"]["catchall"],
            //   NewOutput,
            //   NewInput
            // > {
            //   const merged: any = new ZodObject({
            //     unknownKeys: merging._def.unknownKeys,
            //     catchall: merging._def.catchall,
            //     shape: () =>
            //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
            //     typeName: ZodFirstPartyTypeKind.ZodObject,
            //   }) as any;
            //   return merged;
            // }
            setKey(key, schema) {
              return this.augment({
                [key]: schema
              });
            } // merge<Incoming extends AnyZodObject>(
            //   merging: Incoming
            // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
            // ZodObject<
            //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
            //   Incoming["_def"]["unknownKeys"],
            //   Incoming["_def"]["catchall"]
            // > {
            //   // const mergedShape = objectUtil.mergeShapes(
            //   //   this._def.shape(),
            //   //   merging._def.shape()
            //   // );
            //   const merged: any = new ZodObject({
            //     unknownKeys: merging._def.unknownKeys,
            //     catchall: merging._def.catchall,
            //     shape: () =>
            //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
            //     typeName: ZodFirstPartyTypeKind.ZodObject,
            //   }) as any;
            //   return merged;
            // }
            catchall(index) {
              return new ZodObject({
                ...this._def,
                catchall: index
              });
            }
            pick(mask) {
              const shape = {};
              util_1.util.objectKeys(mask).forEach(key => {
                if (mask[key] && this.shape[key]) {
                  shape[key] = this.shape[key];
                }
              });
              return new ZodObject({
                ...this._def,
                shape: () => shape
              });
            }
            omit(mask) {
              const shape = {};
              util_1.util.objectKeys(this.shape).forEach(key => {
                if (!mask[key]) {
                  shape[key] = this.shape[key];
                }
              });
              return new ZodObject({
                ...this._def,
                shape: () => shape
              });
            } /**
              * @deprecated
              */
            deepPartial() {
              return deepPartialify(this);
            }
            partial(mask) {
              const newShape = {};
              util_1.util.objectKeys(this.shape).forEach(key => {
                const fieldSchema = this.shape[key];
                if (mask && !mask[key]) {
                  newShape[key] = fieldSchema;
                } else {
                  newShape[key] = fieldSchema.optional();
                }
              });
              return new ZodObject({
                ...this._def,
                shape: () => newShape
              });
            }
            required(mask) {
              const newShape = {};
              util_1.util.objectKeys(this.shape).forEach(key => {
                if (mask && !mask[key]) {
                  newShape[key] = this.shape[key];
                } else {
                  const fieldSchema = this.shape[key];
                  let newField = fieldSchema;
                  while (newField instanceof ZodOptional) {
                    newField = newField._def.innerType;
                  }
                  newShape[key] = newField;
                }
              });
              return new ZodObject({
                ...this._def,
                shape: () => newShape
              });
            }
            keyof() {
              return createZodEnum(util_1.util.objectKeys(this.shape));
            }
          }
          exports.ZodObject = ZodObject;
          ZodObject.create = (shape, params) => {
            return new ZodObject({
              shape: () => shape,
              unknownKeys: "strip",
              catchall: ZodNever.create(),
              typeName: ZodFirstPartyTypeKind.ZodObject,
              ...processCreateParams(params)
            });
          };
          ZodObject.strictCreate = (shape, params) => {
            return new ZodObject({
              shape: () => shape,
              unknownKeys: "strict",
              catchall: ZodNever.create(),
              typeName: ZodFirstPartyTypeKind.ZodObject,
              ...processCreateParams(params)
            });
          };
          ZodObject.lazycreate = (shape, params) => {
            return new ZodObject({
              shape,
              unknownKeys: "strip",
              catchall: ZodNever.create(),
              typeName: ZodFirstPartyTypeKind.ZodObject,
              ...processCreateParams(params)
            });
          };
          class ZodUnion extends ZodType {
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input);
              const options = this._def.options;
              function handleResults(results) {
                // return first issue-free validation if it exists
                for (const result of results) {
                  if (result.result.status === "valid") {
                    return result.result;
                  }
                }
                for (const result of results) {
                  if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                  }
                } // return invalid
                const unionErrors = results.map(result => new ZodError_1.ZodError(result.ctx.common.issues));
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_union,
                  unionErrors
                });
                return parseUtil_1.INVALID;
              }
              if (ctx.common.async) {
                return Promise.all(options.map(async option => {
                  const childCtx = {
                    ...ctx,
                    common: {
                      ...ctx.common,
                      issues: []
                    },
                    parent: null
                  };
                  return {
                    result: await option._parseAsync({
                      data: ctx.data,
                      path: ctx.path,
                      parent: childCtx
                    }),
                    ctx: childCtx
                  };
                })).then(handleResults);
              } else {
                let dirty = undefined;
                const issues = [];
                for (const option of options) {
                  const childCtx = {
                    ...ctx,
                    common: {
                      ...ctx.common,
                      issues: []
                    },
                    parent: null
                  };
                  const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                  });
                  if (result.status === "valid") {
                    return result;
                  } else if (result.status === "dirty" && !dirty) {
                    dirty = {
                      result,
                      ctx: childCtx
                    };
                  }
                  if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                  }
                }
                if (dirty) {
                  ctx.common.issues.push(...dirty.ctx.common.issues);
                  return dirty.result;
                }
                const unionErrors = issues.map(issues => new ZodError_1.ZodError(issues));
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_union,
                  unionErrors
                });
                return parseUtil_1.INVALID;
              }
            }
            get options() {
              return this._def.options;
            }
          }
          exports.ZodUnion = ZodUnion;
          ZodUnion.create = (types, params) => {
            return new ZodUnion({
              options: types,
              typeName: ZodFirstPartyTypeKind.ZodUnion,
              ...processCreateParams(params)
            });
          }; /////////////////////////////////////////////////////
          /////////////////////////////////////////////////////
          //////////                                 //////////
          //////////      ZodDiscriminatedUnion      //////////
          //////////                                 //////////
          /////////////////////////////////////////////////////
          /////////////////////////////////////////////////////
          const getDiscriminator = type => {
            if (type instanceof ZodLazy) {
              return getDiscriminator(type.schema);
            } else if (type instanceof ZodEffects) {
              return getDiscriminator(type.innerType());
            } else if (type instanceof ZodLiteral) {
              return [type.value];
            } else if (type instanceof ZodEnum) {
              return type.options;
            } else if (type instanceof ZodNativeEnum) {
              // eslint-disable-next-line ban/ban
              return Object.keys(type.enum);
            } else if (type instanceof ZodDefault) {
              return getDiscriminator(type._def.innerType);
            } else if (type instanceof ZodUndefined) {
              return [undefined];
            } else if (type instanceof ZodNull) {
              return [null];
            } else {
              return null;
            }
          };
          class ZodDiscriminatedUnion extends ZodType {
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input);
              if (ctx.parsedType !== util_1.ZodParsedType.object) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.object,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              const discriminator = this.discriminator;
              const discriminatorValue = ctx.data[discriminator];
              const option = this.optionsMap.get(discriminatorValue);
              if (!option) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
                  options: Array.from(this.optionsMap.keys()),
                  path: [discriminator]
                });
                return parseUtil_1.INVALID;
              }
              if (ctx.common.async) {
                return option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx
                });
              } else {
                return option._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx
                });
              }
            }
            get discriminator() {
              return this._def.discriminator;
            }
            get options() {
              return this._def.options;
            }
            get optionsMap() {
              return this._def.optionsMap;
            } /**
              * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
              * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
              * have a different value for each object in the union.
              * @param discriminator the name of the discriminator property
              * @param types an array of object schemas
              * @param params
              */
            static create(discriminator, options, params) {
              // Get all the valid discriminator values
              const optionsMap = new Map(); // try {
              for (const type of options) {
                const discriminatorValues = getDiscriminator(type.shape[discriminator]);
                if (!discriminatorValues) {
                  throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
                }
                for (const value of discriminatorValues) {
                  if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                  }
                  optionsMap.set(value, type);
                }
              }
              return new ZodDiscriminatedUnion({
                typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
                discriminator,
                options,
                optionsMap,
                ...processCreateParams(params)
              });
            }
          }
          exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
          function mergeValues(a, b) {
            const aType = (0, util_1.getParsedType)(a);
            const bType = (0, util_1.getParsedType)(b);
            if (a === b) {
              return {
                valid: true,
                data: a
              };
            } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
              const bKeys = util_1.util.objectKeys(b);
              const sharedKeys = util_1.util.objectKeys(a).filter(key => bKeys.indexOf(key) !== -1);
              const newObj = {
                ...a,
                ...b
              };
              for (const key of sharedKeys) {
                const sharedValue = mergeValues(a[key], b[key]);
                if (!sharedValue.valid) {
                  return {
                    valid: false
                  };
                }
                newObj[key] = sharedValue.data;
              }
              return {
                valid: true,
                data: newObj
              };
            } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
              if (a.length !== b.length) {
                return {
                  valid: false
                };
              }
              const newArray = [];
              for (let index = 0; index < a.length; index++) {
                const itemA = a[index];
                const itemB = b[index];
                const sharedValue = mergeValues(itemA, itemB);
                if (!sharedValue.valid) {
                  return {
                    valid: false
                  };
                }
                newArray.push(sharedValue.data);
              }
              return {
                valid: true,
                data: newArray
              };
            } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
              return {
                valid: true,
                data: a
              };
            } else {
              return {
                valid: false
              };
            }
          }
          class ZodIntersection extends ZodType {
            _parse(input) {
              const {
                status,
                ctx
              } = this._processInputParams(input);
              const handleParsed = (parsedLeft, parsedRight) => {
                if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
                  return parseUtil_1.INVALID;
                }
                const merged = mergeValues(parsedLeft.value, parsedRight.value);
                if (!merged.valid) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.invalid_intersection_types
                  });
                  return parseUtil_1.INVALID;
                }
                if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
                  status.dirty();
                }
                return {
                  status: status.value,
                  value: merged.data
                };
              };
              if (ctx.common.async) {
                return Promise.all([this._def.left._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx
                }), this._def.right._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx
                })]).then(_ref2 => {
                  let [left, right] = _ref2;
                  return handleParsed(left, right);
                });
              } else {
                return handleParsed(this._def.left._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx
                }), this._def.right._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx
                }));
              }
            }
          }
          exports.ZodIntersection = ZodIntersection;
          ZodIntersection.create = (left, right, params) => {
            return new ZodIntersection({
              left: left,
              right: right,
              typeName: ZodFirstPartyTypeKind.ZodIntersection,
              ...processCreateParams(params)
            });
          };
          class ZodTuple extends ZodType {
            _parse(input) {
              const {
                status,
                ctx
              } = this._processInputParams(input);
              if (ctx.parsedType !== util_1.ZodParsedType.array) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.array,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              if (ctx.data.length < this._def.items.length) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: this._def.items.length,
                  inclusive: true,
                  exact: false,
                  type: "array"
                });
                return parseUtil_1.INVALID;
              }
              const rest = this._def.rest;
              if (!rest && ctx.data.length > this._def.items.length) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: this._def.items.length,
                  inclusive: true,
                  exact: false,
                  type: "array"
                });
                status.dirty();
              }
              const items = [...ctx.data].map((item, itemIndex) => {
                const schema = this._def.items[itemIndex] || this._def.rest;
                if (!schema) return null;
                return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
              }).filter(x => !!x); // filter nulls
              if (ctx.common.async) {
                return Promise.all(items).then(results => {
                  return parseUtil_1.ParseStatus.mergeArray(status, results);
                });
              } else {
                return parseUtil_1.ParseStatus.mergeArray(status, items);
              }
            }
            get items() {
              return this._def.items;
            }
            rest(rest) {
              return new ZodTuple({
                ...this._def,
                rest
              });
            }
          }
          exports.ZodTuple = ZodTuple;
          ZodTuple.create = (schemas, params) => {
            if (!Array.isArray(schemas)) {
              throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
            }
            return new ZodTuple({
              items: schemas,
              typeName: ZodFirstPartyTypeKind.ZodTuple,
              rest: null,
              ...processCreateParams(params)
            });
          };
          class ZodRecord extends ZodType {
            get keySchema() {
              return this._def.keyType;
            }
            get valueSchema() {
              return this._def.valueType;
            }
            _parse(input) {
              const {
                status,
                ctx
              } = this._processInputParams(input);
              if (ctx.parsedType !== util_1.ZodParsedType.object) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.object,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              const pairs = [];
              const keyType = this._def.keyType;
              const valueType = this._def.valueType;
              for (const key in ctx.data) {
                pairs.push({
                  key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                  value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
                });
              }
              if (ctx.common.async) {
                return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
              } else {
                return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
              }
            }
            get element() {
              return this._def.valueType;
            }
            static create(first, second, third) {
              if (second instanceof ZodType) {
                return new ZodRecord({
                  keyType: first,
                  valueType: second,
                  typeName: ZodFirstPartyTypeKind.ZodRecord,
                  ...processCreateParams(third)
                });
              }
              return new ZodRecord({
                keyType: ZodString.create(),
                valueType: first,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(second)
              });
            }
          }
          exports.ZodRecord = ZodRecord;
          class ZodMap extends ZodType {
            get keySchema() {
              return this._def.keyType;
            }
            get valueSchema() {
              return this._def.valueType;
            }
            _parse(input) {
              const {
                status,
                ctx
              } = this._processInputParams(input);
              if (ctx.parsedType !== util_1.ZodParsedType.map) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.map,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              const keyType = this._def.keyType;
              const valueType = this._def.valueType;
              const pairs = [...ctx.data.entries()].map((_ref3, index) => {
                let [key, value] = _ref3;
                return {
                  key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                  value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
                };
              });
              if (ctx.common.async) {
                const finalMap = new Map();
                return Promise.resolve().then(async () => {
                  for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                      return parseUtil_1.INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                      status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                  }
                  return {
                    status: status.value,
                    value: finalMap
                  };
                });
              } else {
                const finalMap = new Map();
                for (const pair of pairs) {
                  const key = pair.key;
                  const value = pair.value;
                  if (key.status === "aborted" || value.status === "aborted") {
                    return parseUtil_1.INVALID;
                  }
                  if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                  }
                  finalMap.set(key.value, value.value);
                }
                return {
                  status: status.value,
                  value: finalMap
                };
              }
            }
          }
          exports.ZodMap = ZodMap;
          ZodMap.create = (keyType, valueType, params) => {
            return new ZodMap({
              valueType,
              keyType,
              typeName: ZodFirstPartyTypeKind.ZodMap,
              ...processCreateParams(params)
            });
          };
          class ZodSet extends ZodType {
            _parse(input) {
              const {
                status,
                ctx
              } = this._processInputParams(input);
              if (ctx.parsedType !== util_1.ZodParsedType.set) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.set,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              const def = this._def;
              if (def.minSize !== null) {
                if (ctx.data.size < def.minSize.value) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message
                  });
                  status.dirty();
                }
              }
              if (def.maxSize !== null) {
                if (ctx.data.size > def.maxSize.value) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message
                  });
                  status.dirty();
                }
              }
              const valueType = this._def.valueType;
              function finalizeSet(elements) {
                const parsedSet = new Set();
                for (const element of elements) {
                  if (element.status === "aborted") return parseUtil_1.INVALID;
                  if (element.status === "dirty") status.dirty();
                  parsedSet.add(element.value);
                }
                return {
                  status: status.value,
                  value: parsedSet
                };
              }
              const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
              if (ctx.common.async) {
                return Promise.all(elements).then(elements => finalizeSet(elements));
              } else {
                return finalizeSet(elements);
              }
            }
            min(minSize, message) {
              return new ZodSet({
                ...this._def,
                minSize: {
                  value: minSize,
                  message: errorUtil_1.errorUtil.toString(message)
                }
              });
            }
            max(maxSize, message) {
              return new ZodSet({
                ...this._def,
                maxSize: {
                  value: maxSize,
                  message: errorUtil_1.errorUtil.toString(message)
                }
              });
            }
            size(size, message) {
              return this.min(size, message).max(size, message);
            }
            nonempty(message) {
              return this.min(1, message);
            }
          }
          exports.ZodSet = ZodSet;
          ZodSet.create = (valueType, params) => {
            return new ZodSet({
              valueType,
              minSize: null,
              maxSize: null,
              typeName: ZodFirstPartyTypeKind.ZodSet,
              ...processCreateParams(params)
            });
          };
          class ZodFunction extends ZodType {
            constructor() {
              super(...arguments);
              this.validate = this.implement;
            }
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input);
              if (ctx.parsedType !== util_1.ZodParsedType.function) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.function,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              function makeArgsIssue(args, error) {
                return (0, parseUtil_1.makeIssue)({
                  data: args,
                  path: ctx.path,
                  errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_1.getErrorMap)(), errors_1.defaultErrorMap].filter(x => !!x),
                  issueData: {
                    code: ZodError_1.ZodIssueCode.invalid_arguments,
                    argumentsError: error
                  }
                });
              }
              function makeReturnsIssue(returns, error) {
                return (0, parseUtil_1.makeIssue)({
                  data: returns,
                  path: ctx.path,
                  errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_1.getErrorMap)(), errors_1.defaultErrorMap].filter(x => !!x),
                  issueData: {
                    code: ZodError_1.ZodIssueCode.invalid_return_type,
                    returnTypeError: error
                  }
                });
              }
              const params = {
                errorMap: ctx.common.contextualErrorMap
              };
              const fn = ctx.data;
              if (this._def.returns instanceof ZodPromise) {
                // Would love a way to avoid disabling this rule, but we need
                // an alias (using an arrow function was what caused 2651).
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                const me = this;
                return (0, parseUtil_1.OK)(async function () {
                  for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
                    args[_key3] = arguments[_key3];
                  }
                  const error = new ZodError_1.ZodError([]);
                  const parsedArgs = await me._def.args.parseAsync(args, params).catch(e => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                  });
                  const result = await Reflect.apply(fn, this, parsedArgs);
                  const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch(e => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                  });
                  return parsedReturns;
                });
              } else {
                // Would love a way to avoid disabling this rule, but we need
                // an alias (using an arrow function was what caused 2651).
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                const me = this;
                return (0, parseUtil_1.OK)(function () {
                  for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
                    args[_key4] = arguments[_key4];
                  }
                  const parsedArgs = me._def.args.safeParse(args, params);
                  if (!parsedArgs.success) {
                    throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
                  }
                  const result = Reflect.apply(fn, this, parsedArgs.data);
                  const parsedReturns = me._def.returns.safeParse(result, params);
                  if (!parsedReturns.success) {
                    throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                  }
                  return parsedReturns.data;
                });
              }
            }
            parameters() {
              return this._def.args;
            }
            returnType() {
              return this._def.returns;
            }
            args() {
              for (var _len4 = arguments.length, items = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {
                items[_key5] = arguments[_key5];
              }
              return new ZodFunction({
                ...this._def,
                args: ZodTuple.create(items).rest(ZodUnknown.create())
              });
            }
            returns(returnType) {
              return new ZodFunction({
                ...this._def,
                returns: returnType
              });
            }
            implement(func) {
              const validatedFunc = this.parse(func);
              return validatedFunc;
            }
            strictImplement(func) {
              const validatedFunc = this.parse(func);
              return validatedFunc;
            }
            static create(args, returns, params) {
              return new ZodFunction({
                args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
                returns: returns || ZodUnknown.create(),
                typeName: ZodFirstPartyTypeKind.ZodFunction,
                ...processCreateParams(params)
              });
            }
          }
          exports.ZodFunction = ZodFunction;
          class ZodLazy extends ZodType {
            get schema() {
              return this._def.getter();
            }
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input);
              const lazySchema = this._def.getter();
              return lazySchema._parse({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
            }
          }
          exports.ZodLazy = ZodLazy;
          ZodLazy.create = (getter, params) => {
            return new ZodLazy({
              getter: getter,
              typeName: ZodFirstPartyTypeKind.ZodLazy,
              ...processCreateParams(params)
            });
          };
          class ZodLiteral extends ZodType {
            _parse(input) {
              if (input.data !== this._def.value) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  received: ctx.data,
                  code: ZodError_1.ZodIssueCode.invalid_literal,
                  expected: this._def.value
                });
                return parseUtil_1.INVALID;
              }
              return {
                status: "valid",
                value: input.data
              };
            }
            get value() {
              return this._def.value;
            }
          }
          exports.ZodLiteral = ZodLiteral;
          ZodLiteral.create = (value, params) => {
            return new ZodLiteral({
              value: value,
              typeName: ZodFirstPartyTypeKind.ZodLiteral,
              ...processCreateParams(params)
            });
          };
          function createZodEnum(values, params) {
            return new ZodEnum({
              values,
              typeName: ZodFirstPartyTypeKind.ZodEnum,
              ...processCreateParams(params)
            });
          }
          class ZodEnum extends ZodType {
            _parse(input) {
              if (typeof input.data !== "string") {
                const ctx = this._getOrReturnCtx(input);
                const expectedValues = this._def.values;
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  expected: util_1.util.joinValues(expectedValues),
                  received: ctx.parsedType,
                  code: ZodError_1.ZodIssueCode.invalid_type
                });
                return parseUtil_1.INVALID;
              }
              if (this._def.values.indexOf(input.data) === -1) {
                const ctx = this._getOrReturnCtx(input);
                const expectedValues = this._def.values;
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  received: ctx.data,
                  code: ZodError_1.ZodIssueCode.invalid_enum_value,
                  options: expectedValues
                });
                return parseUtil_1.INVALID;
              }
              return (0, parseUtil_1.OK)(input.data);
            }
            get options() {
              return this._def.values;
            }
            get enum() {
              const enumValues = {};
              for (const val of this._def.values) {
                enumValues[val] = val;
              }
              return enumValues;
            }
            get Values() {
              const enumValues = {};
              for (const val of this._def.values) {
                enumValues[val] = val;
              }
              return enumValues;
            }
            get Enum() {
              const enumValues = {};
              for (const val of this._def.values) {
                enumValues[val] = val;
              }
              return enumValues;
            }
            extract(values) {
              return ZodEnum.create(values);
            }
            exclude(values) {
              return ZodEnum.create(this.options.filter(opt => !values.includes(opt)));
            }
          }
          exports.ZodEnum = ZodEnum;
          ZodEnum.create = createZodEnum;
          class ZodNativeEnum extends ZodType {
            _parse(input) {
              const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
              const ctx = this._getOrReturnCtx(input);
              if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
                const expectedValues = util_1.util.objectValues(nativeEnumValues);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  expected: util_1.util.joinValues(expectedValues),
                  received: ctx.parsedType,
                  code: ZodError_1.ZodIssueCode.invalid_type
                });
                return parseUtil_1.INVALID;
              }
              if (nativeEnumValues.indexOf(input.data) === -1) {
                const expectedValues = util_1.util.objectValues(nativeEnumValues);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  received: ctx.data,
                  code: ZodError_1.ZodIssueCode.invalid_enum_value,
                  options: expectedValues
                });
                return parseUtil_1.INVALID;
              }
              return (0, parseUtil_1.OK)(input.data);
            }
            get enum() {
              return this._def.values;
            }
          }
          exports.ZodNativeEnum = ZodNativeEnum;
          ZodNativeEnum.create = (values, params) => {
            return new ZodNativeEnum({
              values: values,
              typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
              ...processCreateParams(params)
            });
          };
          class ZodPromise extends ZodType {
            unwrap() {
              return this._def.type;
            }
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input);
              if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.promise,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
              return (0, parseUtil_1.OK)(promisified.then(data => {
                return this._def.type.parseAsync(data, {
                  path: ctx.path,
                  errorMap: ctx.common.contextualErrorMap
                });
              }));
            }
          }
          exports.ZodPromise = ZodPromise;
          ZodPromise.create = (schema, params) => {
            return new ZodPromise({
              type: schema,
              typeName: ZodFirstPartyTypeKind.ZodPromise,
              ...processCreateParams(params)
            });
          };
          class ZodEffects extends ZodType {
            innerType() {
              return this._def.schema;
            }
            sourceType() {
              return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
            }
            _parse(input) {
              const {
                status,
                ctx
              } = this._processInputParams(input);
              const effect = this._def.effect || null;
              const checkCtx = {
                addIssue: arg => {
                  (0, parseUtil_1.addIssueToContext)(ctx, arg);
                  if (arg.fatal) {
                    status.abort();
                  } else {
                    status.dirty();
                  }
                },
                get path() {
                  return ctx.path;
                }
              };
              checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
              if (effect.type === "preprocess") {
                const processed = effect.transform(ctx.data, checkCtx);
                if (ctx.common.issues.length) {
                  return {
                    status: "dirty",
                    value: ctx.data
                  };
                }
                if (ctx.common.async) {
                  return Promise.resolve(processed).then(processed => {
                    return this._def.schema._parseAsync({
                      data: processed,
                      path: ctx.path,
                      parent: ctx
                    });
                  });
                } else {
                  return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                  });
                }
              }
              if (effect.type === "refinement") {
                const executeRefinement = (acc // effect: RefinementEffect<any>
                ) => {
                  const result = effect.refinement(acc, checkCtx);
                  if (ctx.common.async) {
                    return Promise.resolve(result);
                  }
                  if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                  }
                  return acc;
                };
                if (ctx.common.async === false) {
                  const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                  });
                  if (inner.status === "aborted") return parseUtil_1.INVALID;
                  if (inner.status === "dirty") status.dirty(); // return value is ignored
                  executeRefinement(inner.value);
                  return {
                    status: status.value,
                    value: inner.value
                  };
                } else {
                  return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                  }).then(inner => {
                    if (inner.status === "aborted") return parseUtil_1.INVALID;
                    if (inner.status === "dirty") status.dirty();
                    return executeRefinement(inner.value).then(() => {
                      return {
                        status: status.value,
                        value: inner.value
                      };
                    });
                  });
                }
              }
              if (effect.type === "transform") {
                if (ctx.common.async === false) {
                  const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                  });
                  if (!(0, parseUtil_1.isValid)(base)) return base;
                  const result = effect.transform(base.value, checkCtx);
                  if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                  }
                  return {
                    status: status.value,
                    value: result
                  };
                } else {
                  return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                  }).then(base => {
                    if (!(0, parseUtil_1.isValid)(base)) return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then(result => ({
                      status: status.value,
                      value: result
                    }));
                  });
                }
              }
              util_1.util.assertNever(effect);
            }
          }
          exports.ZodEffects = ZodEffects;
          exports.ZodTransformer = ZodEffects;
          ZodEffects.create = (schema, effect, params) => {
            return new ZodEffects({
              schema,
              typeName: ZodFirstPartyTypeKind.ZodEffects,
              effect,
              ...processCreateParams(params)
            });
          };
          ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
            return new ZodEffects({
              schema,
              effect: {
                type: "preprocess",
                transform: preprocess
              },
              typeName: ZodFirstPartyTypeKind.ZodEffects,
              ...processCreateParams(params)
            });
          };
          class ZodOptional extends ZodType {
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType === util_1.ZodParsedType.undefined) {
                return (0, parseUtil_1.OK)(undefined);
              }
              return this._def.innerType._parse(input);
            }
            unwrap() {
              return this._def.innerType;
            }
          }
          exports.ZodOptional = ZodOptional;
          ZodOptional.create = (type, params) => {
            return new ZodOptional({
              innerType: type,
              typeName: ZodFirstPartyTypeKind.ZodOptional,
              ...processCreateParams(params)
            });
          };
          class ZodNullable extends ZodType {
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType === util_1.ZodParsedType.null) {
                return (0, parseUtil_1.OK)(null);
              }
              return this._def.innerType._parse(input);
            }
            unwrap() {
              return this._def.innerType;
            }
          }
          exports.ZodNullable = ZodNullable;
          ZodNullable.create = (type, params) => {
            return new ZodNullable({
              innerType: type,
              typeName: ZodFirstPartyTypeKind.ZodNullable,
              ...processCreateParams(params)
            });
          };
          class ZodDefault extends ZodType {
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input);
              let data = ctx.data;
              if (ctx.parsedType === util_1.ZodParsedType.undefined) {
                data = this._def.defaultValue();
              }
              return this._def.innerType._parse({
                data,
                path: ctx.path,
                parent: ctx
              });
            }
            removeDefault() {
              return this._def.innerType;
            }
          }
          exports.ZodDefault = ZodDefault;
          ZodDefault.create = (type, params) => {
            return new ZodDefault({
              innerType: type,
              typeName: ZodFirstPartyTypeKind.ZodDefault,
              defaultValue: typeof params.default === "function" ? params.default : () => params.default,
              ...processCreateParams(params)
            });
          };
          class ZodCatch extends ZodType {
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input); // newCtx is used to not collect issues from inner types in ctx
              const newCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                }
              };
              const result = this._def.innerType._parse({
                data: newCtx.data,
                path: newCtx.path,
                parent: {
                  ...newCtx
                }
              });
              if ((0, parseUtil_1.isAsync)(result)) {
                return result.then(result => {
                  return {
                    status: "valid",
                    value: result.status === "valid" ? result.value : this._def.catchValue({
                      get error() {
                        return new ZodError_1.ZodError(newCtx.common.issues);
                      },
                      input: newCtx.data
                    })
                  };
                });
              } else {
                return {
                  status: "valid",
                  value: result.status === "valid" ? result.value : this._def.catchValue({
                    get error() {
                      return new ZodError_1.ZodError(newCtx.common.issues);
                    },
                    input: newCtx.data
                  })
                };
              }
            }
            removeCatch() {
              return this._def.innerType;
            }
          }
          exports.ZodCatch = ZodCatch;
          ZodCatch.create = (type, params) => {
            return new ZodCatch({
              innerType: type,
              typeName: ZodFirstPartyTypeKind.ZodCatch,
              catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
              ...processCreateParams(params)
            });
          };
          class ZodNaN extends ZodType {
            _parse(input) {
              const parsedType = this._getType(input);
              if (parsedType !== util_1.ZodParsedType.nan) {
                const ctx = this._getOrReturnCtx(input);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: util_1.ZodParsedType.nan,
                  received: ctx.parsedType
                });
                return parseUtil_1.INVALID;
              }
              return {
                status: "valid",
                value: input.data
              };
            }
          }
          exports.ZodNaN = ZodNaN;
          ZodNaN.create = params => {
            return new ZodNaN({
              typeName: ZodFirstPartyTypeKind.ZodNaN,
              ...processCreateParams(params)
            });
          };
          exports.BRAND = Symbol("zod_brand");
          class ZodBranded extends ZodType {
            _parse(input) {
              const {
                ctx
              } = this._processInputParams(input);
              const data = ctx.data;
              return this._def.type._parse({
                data,
                path: ctx.path,
                parent: ctx
              });
            }
            unwrap() {
              return this._def.type;
            }
          }
          exports.ZodBranded = ZodBranded;
          class ZodPipeline extends ZodType {
            _parse(input) {
              const {
                status,
                ctx
              } = this._processInputParams(input);
              if (ctx.common.async) {
                const handleAsync = async () => {
                  const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                  });
                  if (inResult.status === "aborted") return parseUtil_1.INVALID;
                  if (inResult.status === "dirty") {
                    status.dirty();
                    return (0, parseUtil_1.DIRTY)(inResult.value);
                  } else {
                    return this._def.out._parseAsync({
                      data: inResult.value,
                      path: ctx.path,
                      parent: ctx
                    });
                  }
                };
                return handleAsync();
              } else {
                const inResult = this._def.in._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx
                });
                if (inResult.status === "aborted") return parseUtil_1.INVALID;
                if (inResult.status === "dirty") {
                  status.dirty();
                  return {
                    status: "dirty",
                    value: inResult.value
                  };
                } else {
                  return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx
                  });
                }
              }
            }
            static create(a, b) {
              return new ZodPipeline({
                in: a,
                out: b,
                typeName: ZodFirstPartyTypeKind.ZodPipeline
              });
            }
          }
          exports.ZodPipeline = ZodPipeline;
          class ZodReadonly extends ZodType {
            _parse(input) {
              const result = this._def.innerType._parse(input);
              if ((0, parseUtil_1.isValid)(result)) {
                result.value = Object.freeze(result.value);
              }
              return result;
            }
          }
          exports.ZodReadonly = ZodReadonly;
          ZodReadonly.create = (type, params) => {
            return new ZodReadonly({
              innerType: type,
              typeName: ZodFirstPartyTypeKind.ZodReadonly,
              ...processCreateParams(params)
            });
          };
          const custom = function (check, params,
          /**
          * @deprecated
          *
          * Pass `fatal` into the params object instead:
          *
          * ```ts
          * z.string().custom((val) => val.length > 5, { fatal: false })
          * ```
          *
          */
          fatal) {
            if (params === void 0) {
              params = {};
            }
            if (check) return ZodAny.create().superRefine((data, ctx) => {
              var _a, _b;
              if (!check(data)) {
                const p = typeof params === "function" ? params(data) : typeof params === "string" ? {
                  message: params
                } : params;
                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                const p2 = typeof p === "string" ? {
                  message: p
                } : p;
                ctx.addIssue({
                  code: "custom",
                  ...p2,
                  fatal: _fatal
                });
              }
            });
            return ZodAny.create();
          };
          exports.custom = custom;
          exports.late = {
            object: ZodObject.lazycreate
          };
          var ZodFirstPartyTypeKind;
          (function (ZodFirstPartyTypeKind) {
            ZodFirstPartyTypeKind["ZodString"] = "ZodString";
            ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
            ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
            ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
            ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
            ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
            ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
            ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
            ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
            ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
            ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
            ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
            ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
            ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
            ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
            ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
            ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
            ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
            ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
            ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
            ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
            ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
            ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
            ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
            ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
            ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
            ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
            ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
            ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
            ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
            ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
            ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
            ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
            ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
            ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
            ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
          })(ZodFirstPartyTypeKind = exports.ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = {})); // requires TS 4.4+
          const instanceOfType = function (
          // const instanceOfType = <T extends new (...args: any[]) => any>(
          cls, params) {
            if (params === void 0) {
              params = {
                message: `Input not instance of ${cls.name}`
              };
            }
            return (0, exports.custom)(data => data instanceof cls, params);
          };
          exports["instanceof"] = instanceOfType;
          const stringType = ZodString.create;
          exports.string = stringType;
          const numberType = ZodNumber.create;
          exports.number = numberType;
          const nanType = ZodNaN.create;
          exports.nan = nanType;
          const bigIntType = ZodBigInt.create;
          exports.bigint = bigIntType;
          const booleanType = ZodBoolean.create;
          exports.boolean = booleanType;
          const dateType = ZodDate.create;
          exports.date = dateType;
          const symbolType = ZodSymbol.create;
          exports.symbol = symbolType;
          const undefinedType = ZodUndefined.create;
          exports.undefined = undefinedType;
          const nullType = ZodNull.create;
          exports["null"] = nullType;
          const anyType = ZodAny.create;
          exports.any = anyType;
          const unknownType = ZodUnknown.create;
          exports.unknown = unknownType;
          const neverType = ZodNever.create;
          exports.never = neverType;
          const voidType = ZodVoid.create;
          exports["void"] = voidType;
          const arrayType = ZodArray.create;
          exports.array = arrayType;
          const objectType = ZodObject.create;
          exports.object = objectType;
          const strictObjectType = ZodObject.strictCreate;
          exports.strictObject = strictObjectType;
          const unionType = ZodUnion.create;
          exports.union = unionType;
          const discriminatedUnionType = ZodDiscriminatedUnion.create;
          exports.discriminatedUnion = discriminatedUnionType;
          const intersectionType = ZodIntersection.create;
          exports.intersection = intersectionType;
          const tupleType = ZodTuple.create;
          exports.tuple = tupleType;
          const recordType = ZodRecord.create;
          exports.record = recordType;
          const mapType = ZodMap.create;
          exports.map = mapType;
          const setType = ZodSet.create;
          exports.set = setType;
          const functionType = ZodFunction.create;
          exports["function"] = functionType;
          const lazyType = ZodLazy.create;
          exports.lazy = lazyType;
          const literalType = ZodLiteral.create;
          exports.literal = literalType;
          const enumType = ZodEnum.create;
          exports["enum"] = enumType;
          const nativeEnumType = ZodNativeEnum.create;
          exports.nativeEnum = nativeEnumType;
          const promiseType = ZodPromise.create;
          exports.promise = promiseType;
          const effectsType = ZodEffects.create;
          exports.effect = effectsType;
          exports.transformer = effectsType;
          const optionalType = ZodOptional.create;
          exports.optional = optionalType;
          const nullableType = ZodNullable.create;
          exports.nullable = nullableType;
          const preprocessType = ZodEffects.createWithPreprocess;
          exports.preprocess = preprocessType;
          const pipelineType = ZodPipeline.create;
          exports.pipeline = pipelineType;
          const ostring = () => stringType().optional();
          exports.ostring = ostring;
          const onumber = () => numberType().optional();
          exports.onumber = onumber;
          const oboolean = () => booleanType().optional();
          exports.oboolean = oboolean;
          exports.coerce = {
            string: arg => ZodString.create({
              ...arg,
              coerce: true
            }),
            number: arg => ZodNumber.create({
              ...arg,
              coerce: true
            }),
            boolean: arg => ZodBoolean.create({
              ...arg,
              coerce: true
            }),
            bigint: arg => ZodBigInt.create({
              ...arg,
              coerce: true
            }),
            date: arg => ZodDate.create({
              ...arg,
              coerce: true
            })
          };
          exports.NEVER = parseUtil_1.INVALID; /***/
        },
        /***/7616: /***/function () {/* (ignored) */ /***/},
        /***/2965: /***/function () {/* (ignored) */ /***/},
        /***/5041: /***/function () {/* (ignored) */ /***/},
        /***/6928: /***/function () {/* (ignored) */ /***/},
        /***/7976: /***/function () {/* (ignored) */ /***/},
        /***/2964: /***/function (module, __unused_webpack_exports, __webpack_require__) {
          /* provided dependency */var Buffer = __webpack_require__(1048)["hp"]; // Axios v1.6.7 Copyright (c) 2024 Matt Zabriskie and contributors
          function bind(fn, thisArg) {
            return function wrap() {
              return fn.apply(thisArg, arguments);
            };
          } // utils is a library of generic helper functions non-specific to axios
          const {
            toString
          } = Object.prototype;
          const {
            getPrototypeOf
          } = Object;
          const kindOf = (cache => thing => {
            const str = toString.call(thing);
            return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
          })(Object.create(null));
          const kindOfTest = type => {
            type = type.toLowerCase();
            return thing => kindOf(thing) === type;
          };
          const typeOfTest = type => thing => typeof thing === type; /**
                                                                     * Determine if a value is an Array
                                                                     *
                                                                     * @param {Object} val The value to test
                                                                     *
                                                                     * @returns {boolean} True if value is an Array, otherwise false
                                                                     */
          const {
            isArray
          } = Array; /**
                     * Determine if a value is undefined
                     *
                     * @param {*} val The value to test
                     *
                     * @returns {boolean} True if the value is undefined, otherwise false
                     */
          const isUndefined = typeOfTest('undefined'); /**
                                                       * Determine if a value is a Buffer
                                                       *
                                                       * @param {*} val The value to test
                                                       *
                                                       * @returns {boolean} True if value is a Buffer, otherwise false
                                                       */
          function isBuffer(val) {
            return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
          } /**
            * Determine if a value is an ArrayBuffer
            *
            * @param {*} val The value to test
            *
            * @returns {boolean} True if value is an ArrayBuffer, otherwise false
            */
          const isArrayBuffer = kindOfTest('ArrayBuffer'); /**
                                                           * Determine if a value is a view on an ArrayBuffer
                                                           *
                                                           * @param {*} val The value to test
                                                           *
                                                           * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
                                                           */
          function isArrayBufferView(val) {
            let result;
            if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
              result = ArrayBuffer.isView(val);
            } else {
              result = val && val.buffer && isArrayBuffer(val.buffer);
            }
            return result;
          } /**
            * Determine if a value is a String
            *
            * @param {*} val The value to test
            *
            * @returns {boolean} True if value is a String, otherwise false
            */
          const isString = typeOfTest('string'); /**
                                                 * Determine if a value is a Function
                                                 *
                                                 * @param {*} val The value to test
                                                 * @returns {boolean} True if value is a Function, otherwise false
                                                 */
          const isFunction = typeOfTest('function'); /**
                                                     * Determine if a value is a Number
                                                     *
                                                     * @param {*} val The value to test
                                                     *
                                                     * @returns {boolean} True if value is a Number, otherwise false
                                                     */
          const isNumber = typeOfTest('number'); /**
                                                 * Determine if a value is an Object
                                                 *
                                                 * @param {*} thing The value to test
                                                 *
                                                 * @returns {boolean} True if value is an Object, otherwise false
                                                 */
          const isObject = thing => thing !== null && typeof thing === 'object'; /**
                                                                                 * Determine if a value is a Boolean
                                                                                 *
                                                                                 * @param {*} thing The value to test
                                                                                 * @returns {boolean} True if value is a Boolean, otherwise false
                                                                                 */
          const isBoolean = thing => thing === true || thing === false; /**
                                                                        * Determine if a value is a plain Object
                                                                        *
                                                                        * @param {*} val The value to test
                                                                        *
                                                                        * @returns {boolean} True if value is a plain Object, otherwise false
                                                                        */
          const isPlainObject = val => {
            if (kindOf(val) !== 'object') {
              return false;
            }
            const prototype = getPrototypeOf(val);
            return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
          }; /**
             * Determine if a value is a Date
             *
             * @param {*} val The value to test
             *
             * @returns {boolean} True if value is a Date, otherwise false
             */
          const isDate = kindOfTest('Date'); /**
                                             * Determine if a value is a File
                                             *
                                             * @param {*} val The value to test
                                             *
                                             * @returns {boolean} True if value is a File, otherwise false
                                             */
          const isFile = kindOfTest('File'); /**
                                             * Determine if a value is a Blob
                                             *
                                             * @param {*} val The value to test
                                             *
                                             * @returns {boolean} True if value is a Blob, otherwise false
                                             */
          const isBlob = kindOfTest('Blob'); /**
                                             * Determine if a value is a FileList
                                             *
                                             * @param {*} val The value to test
                                             *
                                             * @returns {boolean} True if value is a File, otherwise false
                                             */
          const isFileList = kindOfTest('FileList'); /**
                                                     * Determine if a value is a Stream
                                                     *
                                                     * @param {*} val The value to test
                                                     *
                                                     * @returns {boolean} True if value is a Stream, otherwise false
                                                     */
          const isStream = val => isObject(val) && isFunction(val.pipe); /**
                                                                         * Determine if a value is a FormData
                                                                         *
                                                                         * @param {*} thing The value to test
                                                                         *
                                                                         * @returns {boolean} True if value is an FormData, otherwise false
                                                                         */
          const isFormData = thing => {
            let kind;
            return thing && (typeof FormData === 'function' && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === 'formdata' ||
            // detect form-data instance
            kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]'));
          }; /**
             * Determine if a value is a URLSearchParams object
             *
             * @param {*} val The value to test
             *
             * @returns {boolean} True if value is a URLSearchParams object, otherwise false
             */
          const isURLSearchParams = kindOfTest('URLSearchParams'); /**
                                                                   * Trim excess whitespace off the beginning and end of a string
                                                                   *
                                                                   * @param {String} str The String to trim
                                                                   *
                                                                   * @returns {String} The String freed of excess whitespace
                                                                   */
          const trim = str => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''); /**
                                                                                                             * Iterate over an Array or an Object invoking a function for each item.
                                                                                                             *
                                                                                                             * If `obj` is an Array callback will be called passing
                                                                                                             * the value, index, and complete array for each item.
                                                                                                             *
                                                                                                             * If 'obj' is an Object callback will be called passing
                                                                                                             * the value, key, and complete object for each property.
                                                                                                             *
                                                                                                             * @param {Object|Array} obj The object to iterate
                                                                                                             * @param {Function} fn The callback to invoke for each item
                                                                                                             *
                                                                                                             * @param {Boolean} [allOwnKeys = false]
                                                                                                             * @returns {any}
                                                                                                             */
          function forEach(obj, fn, _temp) {
            let {
              allOwnKeys = false
            } = _temp === void 0 ? {} : _temp; // Don't bother if no value provided
            if (obj === null || typeof obj === 'undefined') {
              return;
            }
            let i;
            let l; // Force an array if not already something iterable
            if (typeof obj !== 'object') {
              /*eslint no-param-reassign:0*/obj = [obj];
            }
            if (isArray(obj)) {
              // Iterate over array values
              for (i = 0, l = obj.length; i < l; i++) {
                fn.call(null, obj[i], i, obj);
              }
            } else {
              // Iterate over object keys
              const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
              const len = keys.length;
              let key;
              for (i = 0; i < len; i++) {
                key = keys[i];
                fn.call(null, obj[key], key, obj);
              }
            }
          }
          function findKey(obj, key) {
            key = key.toLowerCase();
            const keys = Object.keys(obj);
            let i = keys.length;
            let _key;
            while (i-- > 0) {
              _key = keys[i];
              if (key === _key.toLowerCase()) {
                return _key;
              }
            }
            return null;
          }
          const _global = (() => {
            /*eslint no-undef:0*/if (typeof globalThis !== "undefined") return globalThis;
            return typeof self !== "undefined" ? self : typeof window !== 'undefined' ? window : __webpack_require__.g;
          })();
          const isContextDefined = context => !isUndefined(context) && context !== _global; /**
                                                                                            * Accepts varargs expecting each argument to be an object, then
                                                                                            * immutably merges the properties of each object and returns result.
                                                                                            *
                                                                                            * When multiple objects contain the same key the later object in
                                                                                            * the arguments list will take precedence.
                                                                                            *
                                                                                            * Example:
                                                                                            *
                                                                                            * ```js
                                                                                            * var result = merge({foo: 123}, {foo: 456});
                                                                                            * console.log(result.foo); // outputs 456
                                                                                            * ```
                                                                                            *
                                                                                            * @param {Object} obj1 Object to merge
                                                                                            *
                                                                                            * @returns {Object} Result of all merge properties
                                                                                            */
          function merge( /* obj1, obj2, obj3, ... */) {
            const {
              caseless
            } = isContextDefined(this) && this || {};
            const result = {};
            const assignValue = (val, key) => {
              const targetKey = caseless && findKey(result, key) || key;
              if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
                result[targetKey] = merge(result[targetKey], val);
              } else if (isPlainObject(val)) {
                result[targetKey] = merge({}, val);
              } else if (isArray(val)) {
                result[targetKey] = val.slice();
              } else {
                result[targetKey] = val;
              }
            };
            for (let i = 0, l = arguments.length; i < l; i++) {
              arguments[i] && forEach(arguments[i], assignValue);
            }
            return result;
          } /**
            * Extends object a by mutably adding to it the properties of object b.
            *
            * @param {Object} a The object to be extended
            * @param {Object} b The object to copy properties from
            * @param {Object} thisArg The object to bind function to
            *
            * @param {Boolean} [allOwnKeys]
            * @returns {Object} The resulting value of object a
            */
          const extend = function (a, b, thisArg, _temp2) {
            let {
              allOwnKeys
            } = _temp2 === void 0 ? {} : _temp2;
            forEach(b, (val, key) => {
              if (thisArg && isFunction(val)) {
                a[key] = bind(val, thisArg);
              } else {
                a[key] = val;
              }
            }, {
              allOwnKeys
            });
            return a;
          }; /**
             * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
             *
             * @param {string} content with BOM
             *
             * @returns {string} content value without BOM
             */
          const stripBOM = content => {
            if (content.charCodeAt(0) === 0xFEFF) {
              content = content.slice(1);
            }
            return content;
          }; /**
             * Inherit the prototype methods from one constructor into another
             * @param {function} constructor
             * @param {function} superConstructor
             * @param {object} [props]
             * @param {object} [descriptors]
             *
             * @returns {void}
             */
          const inherits = (constructor, superConstructor, props, descriptors) => {
            constructor.prototype = Object.create(superConstructor.prototype, descriptors);
            constructor.prototype.constructor = constructor;
            Object.defineProperty(constructor, 'super', {
              value: superConstructor.prototype
            });
            props && Object.assign(constructor.prototype, props);
          }; /**
             * Resolve object with deep prototype chain to a flat object
             * @param {Object} sourceObj source object
             * @param {Object} [destObj]
             * @param {Function|Boolean} [filter]
             * @param {Function} [propFilter]
             *
             * @returns {Object}
             */
          const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
            let props;
            let i;
            let prop;
            const merged = {};
            destObj = destObj || {}; // eslint-disable-next-line no-eq-null,eqeqeq
            if (sourceObj == null) return destObj;
            do {
              props = Object.getOwnPropertyNames(sourceObj);
              i = props.length;
              while (i-- > 0) {
                prop = props[i];
                if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                  destObj[prop] = sourceObj[prop];
                  merged[prop] = true;
                }
              }
              sourceObj = filter !== false && getPrototypeOf(sourceObj);
            } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
            return destObj;
          }; /**
             * Determines whether a string ends with the characters of a specified string
             *
             * @param {String} str
             * @param {String} searchString
             * @param {Number} [position= 0]
             *
             * @returns {boolean}
             */
          const endsWith = (str, searchString, position) => {
            str = String(str);
            if (position === undefined || position > str.length) {
              position = str.length;
            }
            position -= searchString.length;
            const lastIndex = str.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
          }; /**
             * Returns new array from array like object or null if failed
             *
             * @param {*} [thing]
             *
             * @returns {?Array}
             */
          const toArray = thing => {
            if (!thing) return null;
            if (isArray(thing)) return thing;
            let i = thing.length;
            if (!isNumber(i)) return null;
            const arr = new Array(i);
            while (i-- > 0) {
              arr[i] = thing[i];
            }
            return arr;
          }; /**
             * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
             * thing passed in is an instance of Uint8Array
             *
             * @param {TypedArray}
             *
             * @returns {Array}
             */ // eslint-disable-next-line func-names
          const isTypedArray = (TypedArray => {
            // eslint-disable-next-line func-names
            return thing => {
              return TypedArray && thing instanceof TypedArray;
            };
          })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array)); /**
                                                                               * For each entry in the object, call the function with the key and value.
                                                                               *
                                                                               * @param {Object<any, any>} obj - The object to iterate over.
                                                                               * @param {Function} fn - The function to call for each entry.
                                                                               *
                                                                               * @returns {void}
                                                                               */
          const forEachEntry = (obj, fn) => {
            const generator = obj && obj[Symbol.iterator];
            const iterator = generator.call(obj);
            let result;
            while ((result = iterator.next()) && !result.done) {
              const pair = result.value;
              fn.call(obj, pair[0], pair[1]);
            }
          }; /**
             * It takes a regular expression and a string, and returns an array of all the matches
             *
             * @param {string} regExp - The regular expression to match against.
             * @param {string} str - The string to search.
             *
             * @returns {Array<boolean>}
             */
          const matchAll = (regExp, str) => {
            let matches;
            const arr = [];
            while ((matches = regExp.exec(str)) !== null) {
              arr.push(matches);
            }
            return arr;
          }; /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
          const isHTMLForm = kindOfTest('HTMLFormElement');
          const toCamelCase = str => {
            return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
              return p1.toUpperCase() + p2;
            });
          }; /* Creating a function that will check if an object has a property. */
          const hasOwnProperty = (_ref4 => {
            let {
              hasOwnProperty
            } = _ref4;
            return (obj, prop) => hasOwnProperty.call(obj, prop);
          })(Object.prototype); /**
                                * Determine if a value is a RegExp object
                                *
                                * @param {*} val The value to test
                                *
                                * @returns {boolean} True if value is a RegExp object, otherwise false
                                */
          const isRegExp = kindOfTest('RegExp');
          const reduceDescriptors = (obj, reducer) => {
            const descriptors = Object.getOwnPropertyDescriptors(obj);
            const reducedDescriptors = {};
            forEach(descriptors, (descriptor, name) => {
              let ret;
              if ((ret = reducer(descriptor, name, obj)) !== false) {
                reducedDescriptors[name] = ret || descriptor;
              }
            });
            Object.defineProperties(obj, reducedDescriptors);
          }; /**
             * Makes all methods read-only
             * @param {Object} obj
             */
          const freezeMethods = obj => {
            reduceDescriptors(obj, (descriptor, name) => {
              // skip restricted props in strict mode
              if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
                return false;
              }
              const value = obj[name];
              if (!isFunction(value)) return;
              descriptor.enumerable = false;
              if ('writable' in descriptor) {
                descriptor.writable = false;
                return;
              }
              if (!descriptor.set) {
                descriptor.set = () => {
                  throw Error('Can not rewrite read-only method \'' + name + '\'');
                };
              }
            });
          };
          const toObjectSet = (arrayOrString, delimiter) => {
            const obj = {};
            const define = arr => {
              arr.forEach(value => {
                obj[value] = true;
              });
            };
            isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
            return obj;
          };
          const noop = () => {};
          const toFiniteNumber = (value, defaultValue) => {
            value = +value;
            return Number.isFinite(value) ? value : defaultValue;
          };
          const ALPHA = 'abcdefghijklmnopqrstuvwxyz';
          const DIGIT = '0123456789';
          const ALPHABET = {
            DIGIT,
            ALPHA,
            ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
          };
          const generateString = function (size, alphabet) {
            if (size === void 0) {
              size = 16;
            }
            if (alphabet === void 0) {
              alphabet = ALPHABET.ALPHA_DIGIT;
            }
            let str = '';
            const {
              length
            } = alphabet;
            while (size--) {
              str += alphabet[Math.random() * length | 0];
            }
            return str;
          }; /**
             * If the thing is a FormData object, return true, otherwise return false.
             *
             * @param {unknown} thing - The thing to check.
             *
             * @returns {boolean}
             */
          function isSpecCompliantForm(thing) {
            return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
          }
          const toJSONObject = obj => {
            const stack = new Array(10);
            const visit = (source, i) => {
              if (isObject(source)) {
                if (stack.indexOf(source) >= 0) {
                  return;
                }
                if (!('toJSON' in source)) {
                  stack[i] = source;
                  const target = isArray(source) ? [] : {};
                  forEach(source, (value, key) => {
                    const reducedValue = visit(value, i + 1);
                    !isUndefined(reducedValue) && (target[key] = reducedValue);
                  });
                  stack[i] = undefined;
                  return target;
                }
              }
              return source;
            };
            return visit(obj, 0);
          };
          const isAsyncFn = kindOfTest('AsyncFunction');
          const isThenable = thing => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
          var utils$1 = {
            isArray,
            isArrayBuffer,
            isBuffer,
            isFormData,
            isArrayBufferView,
            isString,
            isNumber,
            isBoolean,
            isObject,
            isPlainObject,
            isUndefined,
            isDate,
            isFile,
            isBlob,
            isRegExp,
            isFunction,
            isStream,
            isURLSearchParams,
            isTypedArray,
            isFileList,
            forEach,
            merge,
            extend,
            trim,
            stripBOM,
            inherits,
            toFlatObject,
            kindOf,
            kindOfTest,
            endsWith,
            toArray,
            forEachEntry,
            matchAll,
            isHTMLForm,
            hasOwnProperty,
            hasOwnProp: hasOwnProperty,
            // an alias to avoid ESLint no-prototype-builtins detection
            reduceDescriptors,
            freezeMethods,
            toObjectSet,
            toCamelCase,
            noop,
            toFiniteNumber,
            findKey,
            global: _global,
            isContextDefined,
            ALPHABET,
            generateString,
            isSpecCompliantForm,
            toJSONObject,
            isAsyncFn,
            isThenable
          }; /**
             * Create an Error with the specified message, config, error code, request and response.
             *
             * @param {string} message The error message.
             * @param {string} [code] The error code (for example, 'ECONNABORTED').
             * @param {Object} [config] The config.
             * @param {Object} [request] The request.
             * @param {Object} [response] The response.
             *
             * @returns {Error} The created error.
             */
          function AxiosError(message, code, config, request, response) {
            Error.call(this);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            } else {
              this.stack = new Error().stack;
            }
            this.message = message;
            this.name = 'AxiosError';
            code && (this.code = code);
            config && (this.config = config);
            request && (this.request = request);
            response && (this.response = response);
          }
          utils$1.inherits(AxiosError, Error, {
            toJSON: function toJSON() {
              return {
                // Standard
                message: this.message,
                name: this.name,
                // Microsoft
                description: this.description,
                number: this.number,
                // Mozilla
                fileName: this.fileName,
                lineNumber: this.lineNumber,
                columnNumber: this.columnNumber,
                stack: this.stack,
                // Axios
                config: utils$1.toJSONObject(this.config),
                code: this.code,
                status: this.response && this.response.status ? this.response.status : null
              };
            }
          });
          const prototype$1 = AxiosError.prototype;
          const descriptors = {};
          ['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED', 'ERR_NOT_SUPPORT', 'ERR_INVALID_URL' // eslint-disable-next-line func-names
          ].forEach(code => {
            descriptors[code] = {
              value: code
            };
          });
          Object.defineProperties(AxiosError, descriptors);
          Object.defineProperty(prototype$1, 'isAxiosError', {
            value: true
          }); // eslint-disable-next-line func-names
          AxiosError.from = (error, code, config, request, response, customProps) => {
            const axiosError = Object.create(prototype$1);
            utils$1.toFlatObject(error, axiosError, function filter(obj) {
              return obj !== Error.prototype;
            }, prop => {
              return prop !== 'isAxiosError';
            });
            AxiosError.call(axiosError, error.message, code, config, request, response);
            axiosError.cause = error;
            axiosError.name = error.name;
            customProps && Object.assign(axiosError, customProps);
            return axiosError;
          }; // eslint-disable-next-line strict
          var httpAdapter = null; /**
                                  * Determines if the given thing is a array or js object.
                                  *
                                  * @param {string} thing - The object or array to be visited.
                                  *
                                  * @returns {boolean}
                                  */
          function isVisitable(thing) {
            return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
          } /**
            * It removes the brackets from the end of a string
            *
            * @param {string} key - The key of the parameter.
            *
            * @returns {string} the key without the brackets.
            */
          function removeBrackets(key) {
            return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
          } /**
            * It takes a path, a key, and a boolean, and returns a string
            *
            * @param {string} path - The path to the current key.
            * @param {string} key - The key of the current object being iterated over.
            * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
            *
            * @returns {string} The path to the current key.
            */
          function renderKey(path, key, dots) {
            if (!path) return key;
            return path.concat(key).map(function each(token, i) {
              // eslint-disable-next-line no-param-reassign
              token = removeBrackets(token);
              return !dots && i ? '[' + token + ']' : token;
            }).join(dots ? '.' : '');
          } /**
            * If the array is an array and none of its elements are visitable, then it's a flat array.
            *
            * @param {Array<any>} arr - The array to check
            *
            * @returns {boolean}
            */
          function isFlatArray(arr) {
            return utils$1.isArray(arr) && !arr.some(isVisitable);
          }
          const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
            return /^is[A-Z]/.test(prop);
          }); /**
              * Convert a data object to FormData
              *
              * @param {Object} obj
              * @param {?Object} [formData]
              * @param {?Object} [options]
              * @param {Function} [options.visitor]
              * @param {Boolean} [options.metaTokens = true]
              * @param {Boolean} [options.dots = false]
              * @param {?Boolean} [options.indexes = false]
              *
              * @returns {Object}
              **/ /**
                  * It converts an object into a FormData object
                  *
                  * @param {Object<any, any>} obj - The object to convert to form data.
                  * @param {string} formData - The FormData object to append to.
                  * @param {Object<string, any>} options
                  *
                  * @returns
                  */
          function toFormData(obj, formData, options) {
            if (!utils$1.isObject(obj)) {
              throw new TypeError('target must be an object');
            } // eslint-disable-next-line no-param-reassign
            formData = formData || new FormData(); // eslint-disable-next-line no-param-reassign
            options = utils$1.toFlatObject(options, {
              metaTokens: true,
              dots: false,
              indexes: false
            }, false, function defined(option, source) {
              // eslint-disable-next-line no-eq-null,eqeqeq
              return !utils$1.isUndefined(source[option]);
            });
            const metaTokens = options.metaTokens; // eslint-disable-next-line no-use-before-define
            const visitor = options.visitor || defaultVisitor;
            const dots = options.dots;
            const indexes = options.indexes;
            const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
            const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
            if (!utils$1.isFunction(visitor)) {
              throw new TypeError('visitor must be a function');
            }
            function convertValue(value) {
              if (value === null) return '';
              if (utils$1.isDate(value)) {
                return value.toISOString();
              }
              if (!useBlob && utils$1.isBlob(value)) {
                throw new AxiosError('Blob is not supported. Use a Buffer instead.');
              }
              if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
                return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
              }
              return value;
            } /**
              * Default visitor.
              *
              * @param {*} value
              * @param {String|Number} key
              * @param {Array<String|Number>} path
              * @this {FormData}
              *
              * @returns {boolean} return true to visit the each prop of the value recursively
              */
            function defaultVisitor(value, key, path) {
              let arr = value;
              if (value && !path && typeof value === 'object') {
                if (utils$1.endsWith(key, '{}')) {
                  // eslint-disable-next-line no-param-reassign
                  key = metaTokens ? key : key.slice(0, -2); // eslint-disable-next-line no-param-reassign
                  value = JSON.stringify(value);
                } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))) {
                  // eslint-disable-next-line no-param-reassign
                  key = removeBrackets(key);
                  arr.forEach(function each(el, index) {
                    !(utils$1.isUndefined(el) || el === null) && formData.append(
                    // eslint-disable-next-line no-nested-ternary
                    indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + '[]', convertValue(el));
                  });
                  return false;
                }
              }
              if (isVisitable(value)) {
                return true;
              }
              formData.append(renderKey(path, key, dots), convertValue(value));
              return false;
            }
            const stack = [];
            const exposedHelpers = Object.assign(predicates, {
              defaultVisitor,
              convertValue,
              isVisitable
            });
            function build(value, path) {
              if (utils$1.isUndefined(value)) return;
              if (stack.indexOf(value) !== -1) {
                throw Error('Circular reference detected in ' + path.join('.'));
              }
              stack.push(value);
              utils$1.forEach(value, function each(el, key) {
                const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers);
                if (result === true) {
                  build(el, path ? path.concat(key) : [key]);
                }
              });
              stack.pop();
            }
            if (!utils$1.isObject(obj)) {
              throw new TypeError('data must be an object');
            }
            build(obj);
            return formData;
          } /**
            * It encodes a string by replacing all characters that are not in the unreserved set with
            * their percent-encoded equivalents
            *
            * @param {string} str - The string to encode.
            *
            * @returns {string} The encoded string.
            */
          function encode$1(str) {
            const charMap = {
              '!': '%21',
              "'": '%27',
              '(': '%28',
              ')': '%29',
              '~': '%7E',
              '%20': '+',
              '%00': '\x00'
            };
            return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
              return charMap[match];
            });
          } /**
            * It takes a params object and converts it to a FormData object
            *
            * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
            * @param {Object<string, any>} options - The options object passed to the Axios constructor.
            *
            * @returns {void}
            */
          function AxiosURLSearchParams(params, options) {
            this._pairs = [];
            params && toFormData(params, this, options);
          }
          const prototype = AxiosURLSearchParams.prototype;
          prototype.append = function append(name, value) {
            this._pairs.push([name, value]);
          };
          prototype.toString = function toString(encoder) {
            const _encode = encoder ? function (value) {
              return encoder.call(this, value, encode$1);
            } : encode$1;
            return this._pairs.map(function each(pair) {
              return _encode(pair[0]) + '=' + _encode(pair[1]);
            }, '').join('&');
          }; /**
             * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
             * URI encoded counterparts
             *
             * @param {string} val The value to be encoded.
             *
             * @returns {string} The encoded value.
             */
          function encode(val) {
            return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
          } /**
            * Build a URL by appending params to the end
            *
            * @param {string} url The base of the url (e.g., http://www.google.com)
            * @param {object} [params] The params to be appended
            * @param {?object} options
            *
            * @returns {string} The formatted url
            */
          function buildURL(url, params, options) {
            /*eslint no-param-reassign:0*/if (!params) {
              return url;
            }
            const _encode = options && options.encode || encode;
            const serializeFn = options && options.serialize;
            let serializedParams;
            if (serializeFn) {
              serializedParams = serializeFn(params, options);
            } else {
              serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
            }
            if (serializedParams) {
              const hashmarkIndex = url.indexOf("#");
              if (hashmarkIndex !== -1) {
                url = url.slice(0, hashmarkIndex);
              }
              url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
            }
            return url;
          }
          class InterceptorManager {
            constructor() {
              this.handlers = [];
            } /**
              * Add a new interceptor to the stack
              *
              * @param {Function} fulfilled The function to handle `then` for a `Promise`
              * @param {Function} rejected The function to handle `reject` for a `Promise`
              *
              * @return {Number} An ID used to remove interceptor later
              */
            use(fulfilled, rejected, options) {
              this.handlers.push({
                fulfilled,
                rejected,
                synchronous: options ? options.synchronous : false,
                runWhen: options ? options.runWhen : null
              });
              return this.handlers.length - 1;
            } /**
              * Remove an interceptor from the stack
              *
              * @param {Number} id The ID that was returned by `use`
              *
              * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
              */
            eject(id) {
              if (this.handlers[id]) {
                this.handlers[id] = null;
              }
            } /**
              * Clear all interceptors from the stack
              *
              * @returns {void}
              */
            clear() {
              if (this.handlers) {
                this.handlers = [];
              }
            } /**
              * Iterate over all the registered interceptors
              *
              * This method is particularly useful for skipping over any
              * interceptors that may have become `null` calling `eject`.
              *
              * @param {Function} fn The function to call for each interceptor
              *
              * @returns {void}
              */
            forEach(fn) {
              utils$1.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                  fn(h);
                }
              });
            }
          }
          var InterceptorManager$1 = InterceptorManager;
          var transitionalDefaults = {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          };
          var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;
          var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;
          var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;
          var platform$1 = {
            isBrowser: true,
            classes: {
              URLSearchParams: URLSearchParams$1,
              FormData: FormData$1,
              Blob: Blob$1
            },
            protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
          };
          const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined'; /**
                                                                                                  * Determine if we're running in a standard browser environment
                                                                                                  *
                                                                                                  * This allows axios to run in a web worker, and react-native.
                                                                                                  * Both environments support XMLHttpRequest, but not fully standard globals.
                                                                                                  *
                                                                                                  * web workers:
                                                                                                  *  typeof window -> undefined
                                                                                                  *  typeof document -> undefined
                                                                                                  *
                                                                                                  * react-native:
                                                                                                  *  navigator.product -> 'ReactNative'
                                                                                                  * nativescript
                                                                                                  *  navigator.product -> 'NativeScript' or 'NS'
                                                                                                  *
                                                                                                  * @returns {boolean}
                                                                                                  */
          const hasStandardBrowserEnv = (product => {
            return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0;
          })(typeof navigator !== 'undefined' && navigator.product); /**
                                                                     * Determine if we're running in a standard browser webWorker environment
                                                                     *
                                                                     * Although the `isStandardBrowserEnv` method indicates that
                                                                     * `allows axios to run in a web worker`, the WebWorker will still be
                                                                     * filtered out due to its judgment standard
                                                                     * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
                                                                     * This leads to a problem when axios post `FormData` in webWorker
                                                                     */
          const hasStandardBrowserWebWorkerEnv = (() => {
            return typeof WorkerGlobalScope !== 'undefined' &&
            // eslint-disable-next-line no-undef
            self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';
          })();
          var utils = /*#__PURE__*/Object.freeze({
            __proto__: null,
            hasBrowserEnv: hasBrowserEnv,
            hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
            hasStandardBrowserEnv: hasStandardBrowserEnv
          });
          var platform = {
            ...utils,
            ...platform$1
          };
          function toURLEncodedForm(data, options) {
            return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
              visitor: function (value, key, path, helpers) {
                if (platform.isNode && utils$1.isBuffer(value)) {
                  this.append(key, value.toString('base64'));
                  return false;
                }
                return helpers.defaultVisitor.apply(this, arguments);
              }
            }, options));
          } /**
            * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
            *
            * @param {string} name - The name of the property to get.
            *
            * @returns An array of strings.
            */
          function parsePropPath(name) {
            // foo[x][y][z]
            // foo.x.y.z
            // foo-x-y-z
            // foo x y z
            return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
              return match[0] === '[]' ? '' : match[1] || match[0];
            });
          } /**
            * Convert an array to an object.
            *
            * @param {Array<any>} arr - The array to convert to an object.
            *
            * @returns An object with the same keys and values as the array.
            */
          function arrayToObject(arr) {
            const obj = {};
            const keys = Object.keys(arr);
            let i;
            const len = keys.length;
            let key;
            for (i = 0; i < len; i++) {
              key = keys[i];
              obj[key] = arr[key];
            }
            return obj;
          } /**
            * It takes a FormData object and returns a JavaScript object
            *
            * @param {string} formData The FormData object to convert to JSON.
            *
            * @returns {Object<string, any> | null} The converted object.
            */
          function formDataToJSON(formData) {
            function buildPath(path, value, target, index) {
              let name = path[index++];
              if (name === '__proto__') return true;
              const isNumericKey = Number.isFinite(+name);
              const isLast = index >= path.length;
              name = !name && utils$1.isArray(target) ? target.length : name;
              if (isLast) {
                if (utils$1.hasOwnProp(target, name)) {
                  target[name] = [target[name], value];
                } else {
                  target[name] = value;
                }
                return !isNumericKey;
              }
              if (!target[name] || !utils$1.isObject(target[name])) {
                target[name] = [];
              }
              const result = buildPath(path, value, target[name], index);
              if (result && utils$1.isArray(target[name])) {
                target[name] = arrayToObject(target[name]);
              }
              return !isNumericKey;
            }
            if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
              const obj = {};
              utils$1.forEachEntry(formData, (name, value) => {
                buildPath(parsePropPath(name), value, obj, 0);
              });
              return obj;
            }
            return null;
          } /**
            * It takes a string, tries to parse it, and if it fails, it returns the stringified version
            * of the input
            *
            * @param {any} rawValue - The value to be stringified.
            * @param {Function} parser - A function that parses a string into a JavaScript object.
            * @param {Function} encoder - A function that takes a value and returns a string.
            *
            * @returns {string} A stringified version of the rawValue.
            */
          function stringifySafely(rawValue, parser, encoder) {
            if (utils$1.isString(rawValue)) {
              try {
                (parser || JSON.parse)(rawValue);
                return utils$1.trim(rawValue);
              } catch (e) {
                if (e.name !== 'SyntaxError') {
                  throw e;
                }
              }
            }
            return (encoder || JSON.stringify)(rawValue);
          }
          const defaults = {
            transitional: transitionalDefaults,
            adapter: ['xhr', 'http'],
            transformRequest: [function transformRequest(data, headers) {
              const contentType = headers.getContentType() || '';
              const hasJSONContentType = contentType.indexOf('application/json') > -1;
              const isObjectPayload = utils$1.isObject(data);
              if (isObjectPayload && utils$1.isHTMLForm(data)) {
                data = new FormData(data);
              }
              const isFormData = utils$1.isFormData(data);
              if (isFormData) {
                return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
              }
              if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data)) {
                return data;
              }
              if (utils$1.isArrayBufferView(data)) {
                return data.buffer;
              }
              if (utils$1.isURLSearchParams(data)) {
                headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
                return data.toString();
              }
              let isFileList;
              if (isObjectPayload) {
                if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
                  return toURLEncodedForm(data, this.formSerializer).toString();
                }
                if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
                  const _FormData = this.env && this.env.FormData;
                  return toFormData(isFileList ? {
                    'files[]': data
                  } : data, _FormData && new _FormData(), this.formSerializer);
                }
              }
              if (isObjectPayload || hasJSONContentType) {
                headers.setContentType('application/json', false);
                return stringifySafely(data);
              }
              return data;
            }],
            transformResponse: [function transformResponse(data) {
              const transitional = this.transitional || defaults.transitional;
              const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
              const JSONRequested = this.responseType === 'json';
              if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
                const silentJSONParsing = transitional && transitional.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;
                try {
                  return JSON.parse(data);
                } catch (e) {
                  if (strictJSONParsing) {
                    if (e.name === 'SyntaxError') {
                      throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
                    }
                    throw e;
                  }
                }
              }
              return data;
            }],
            /**
            * A timeout in milliseconds to abort a request. If set to 0 (default) a
            * timeout is not created.
            */
            timeout: 0,
            xsrfCookieName: 'XSRF-TOKEN',
            xsrfHeaderName: 'X-XSRF-TOKEN',
            maxContentLength: -1,
            maxBodyLength: -1,
            env: {
              FormData: platform.classes.FormData,
              Blob: platform.classes.Blob
            },
            validateStatus: function validateStatus(status) {
              return status >= 200 && status < 300;
            },
            headers: {
              common: {
                'Accept': 'application/json, text/plain, */*',
                'Content-Type': undefined
              }
            }
          };
          utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], method => {
            defaults.headers[method] = {};
          });
          var defaults$1 = defaults; // RawAxiosHeaders whose duplicates are ignored by node
          // c.f. https://nodejs.org/api/http.html#http_message_headers
          const ignoreDuplicateOf = utils$1.toObjectSet(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']); /**
                                                                                                                                                                                                                                                                                                                * Parse headers into an object
                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                * ```
                                                                                                                                                                                                                                                                                                                * Date: Wed, 27 Aug 2014 08:58:49 GMT
                                                                                                                                                                                                                                                                                                                * Content-Type: application/json
                                                                                                                                                                                                                                                                                                                * Connection: keep-alive
                                                                                                                                                                                                                                                                                                                * Transfer-Encoding: chunked
                                                                                                                                                                                                                                                                                                                * ```
                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                * @param {String} rawHeaders Headers needing to be parsed
                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                * @returns {Object} Headers parsed into an object
                                                                                                                                                                                                                                                                                                                */
          var parseHeaders = rawHeaders => {
            const parsed = {};
            let key;
            let val;
            let i;
            rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
              i = line.indexOf(':');
              key = line.substring(0, i).trim().toLowerCase();
              val = line.substring(i + 1).trim();
              if (!key || parsed[key] && ignoreDuplicateOf[key]) {
                return;
              }
              if (key === 'set-cookie') {
                if (parsed[key]) {
                  parsed[key].push(val);
                } else {
                  parsed[key] = [val];
                }
              } else {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
              }
            });
            return parsed;
          };
          const $internals = Symbol('internals');
          function normalizeHeader(header) {
            return header && String(header).trim().toLowerCase();
          }
          function normalizeValue(value) {
            if (value === false || value == null) {
              return value;
            }
            return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
          }
          function parseTokens(str) {
            const tokens = Object.create(null);
            const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
            let match;
            while (match = tokensRE.exec(str)) {
              tokens[match[1]] = match[2];
            }
            return tokens;
          }
          const isValidHeaderName = str => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
          function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
            if (utils$1.isFunction(filter)) {
              return filter.call(this, value, header);
            }
            if (isHeaderNameFilter) {
              value = header;
            }
            if (!utils$1.isString(value)) return;
            if (utils$1.isString(filter)) {
              return value.indexOf(filter) !== -1;
            }
            if (utils$1.isRegExp(filter)) {
              return filter.test(value);
            }
          }
          function formatHeader(header) {
            return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
              return char.toUpperCase() + str;
            });
          }
          function buildAccessors(obj, header) {
            const accessorName = utils$1.toCamelCase(' ' + header);
            ['get', 'set', 'has'].forEach(methodName => {
              Object.defineProperty(obj, methodName + accessorName, {
                value: function (arg1, arg2, arg3) {
                  return this[methodName].call(this, header, arg1, arg2, arg3);
                },
                configurable: true
              });
            });
          }
          class AxiosHeaders {
            constructor(headers) {
              headers && this.set(headers);
            }
            set(header, valueOrRewrite, rewrite) {
              const self = this;
              function setHeader(_value, _header, _rewrite) {
                const lHeader = normalizeHeader(_header);
                if (!lHeader) {
                  throw new Error('header name must be a non-empty string');
                }
                const key = utils$1.findKey(self, lHeader);
                if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) {
                  self[key || _header] = normalizeValue(_value);
                }
              }
              const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
              if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
                setHeaders(header, valueOrRewrite);
              } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
                setHeaders(parseHeaders(header), valueOrRewrite);
              } else {
                header != null && setHeader(valueOrRewrite, header, rewrite);
              }
              return this;
            }
            get(header, parser) {
              header = normalizeHeader(header);
              if (header) {
                const key = utils$1.findKey(this, header);
                if (key) {
                  const value = this[key];
                  if (!parser) {
                    return value;
                  }
                  if (parser === true) {
                    return parseTokens(value);
                  }
                  if (utils$1.isFunction(parser)) {
                    return parser.call(this, value, key);
                  }
                  if (utils$1.isRegExp(parser)) {
                    return parser.exec(value);
                  }
                  throw new TypeError('parser must be boolean|regexp|function');
                }
              }
            }
            has(header, matcher) {
              header = normalizeHeader(header);
              if (header) {
                const key = utils$1.findKey(this, header);
                return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
              }
              return false;
            }
            delete(header, matcher) {
              const self = this;
              let deleted = false;
              function deleteHeader(_header) {
                _header = normalizeHeader(_header);
                if (_header) {
                  const key = utils$1.findKey(self, _header);
                  if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
                    delete self[key];
                    deleted = true;
                  }
                }
              }
              if (utils$1.isArray(header)) {
                header.forEach(deleteHeader);
              } else {
                deleteHeader(header);
              }
              return deleted;
            }
            clear(matcher) {
              const keys = Object.keys(this);
              let i = keys.length;
              let deleted = false;
              while (i--) {
                const key = keys[i];
                if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
                  delete this[key];
                  deleted = true;
                }
              }
              return deleted;
            }
            normalize(format) {
              const self = this;
              const headers = {};
              utils$1.forEach(this, (value, header) => {
                const key = utils$1.findKey(headers, header);
                if (key) {
                  self[key] = normalizeValue(value);
                  delete self[header];
                  return;
                }
                const normalized = format ? formatHeader(header) : String(header).trim();
                if (normalized !== header) {
                  delete self[header];
                }
                self[normalized] = normalizeValue(value);
                headers[normalized] = true;
              });
              return this;
            }
            concat() {
              for (var _len5 = arguments.length, targets = new Array(_len5), _key6 = 0; _key6 < _len5; _key6++) {
                targets[_key6] = arguments[_key6];
              }
              return this.constructor.concat(this, ...targets);
            }
            toJSON(asStrings) {
              const obj = Object.create(null);
              utils$1.forEach(this, (value, header) => {
                value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
              });
              return obj;
            }
            [Symbol.iterator]() {
              return Object.entries(this.toJSON())[Symbol.iterator]();
            }
            toString() {
              return Object.entries(this.toJSON()).map(_ref5 => {
                let [header, value] = _ref5;
                return header + ': ' + value;
              }).join('\n');
            }
            get [Symbol.toStringTag]() {
              return 'AxiosHeaders';
            }
            static from(thing) {
              return thing instanceof this ? thing : new this(thing);
            }
            static concat(first) {
              const computed = new this(first);
              for (var _len6 = arguments.length, targets = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {
                targets[_key7 - 1] = arguments[_key7];
              }
              targets.forEach(target => computed.set(target));
              return computed;
            }
            static accessor(header) {
              const internals = this[$internals] = this[$internals] = {
                accessors: {}
              };
              const accessors = internals.accessors;
              const prototype = this.prototype;
              function defineAccessor(_header) {
                const lHeader = normalizeHeader(_header);
                if (!accessors[lHeader]) {
                  buildAccessors(prototype, _header);
                  accessors[lHeader] = true;
                }
              }
              utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
              return this;
            }
          }
          AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']); // reserved names hotfix
          utils$1.reduceDescriptors(AxiosHeaders.prototype, (_ref6, key) => {
            let {
              value
            } = _ref6;
            let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
            return {
              get: () => value,
              set(headerValue) {
                this[mapped] = headerValue;
              }
            };
          });
          utils$1.freezeMethods(AxiosHeaders);
          var AxiosHeaders$1 = AxiosHeaders; /**
                                             * Transform the data for a request or a response
                                             *
                                             * @param {Array|Function} fns A single function or Array of functions
                                             * @param {?Object} response The response object
                                             *
                                             * @returns {*} The resulting transformed data
                                             */
          function transformData(fns, response) {
            const config = this || defaults$1;
            const context = response || config;
            const headers = AxiosHeaders$1.from(context.headers);
            let data = context.data;
            utils$1.forEach(fns, function transform(fn) {
              data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
            });
            headers.normalize();
            return data;
          }
          function isCancel(value) {
            return !!(value && value.__CANCEL__);
          } /**
            * A `CanceledError` is an object that is thrown when an operation is canceled.
            *
            * @param {string=} message The message.
            * @param {Object=} config The config.
            * @param {Object=} request The request.
            *
            * @returns {CanceledError} The created error.
            */
          function CanceledError(message, config, request) {
            // eslint-disable-next-line no-eq-null,eqeqeq
            AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
            this.name = 'CanceledError';
          }
          utils$1.inherits(CanceledError, AxiosError, {
            __CANCEL__: true
          }); /**
              * Resolve or reject a Promise based on response status.
              *
              * @param {Function} resolve A function that resolves the promise.
              * @param {Function} reject A function that rejects the promise.
              * @param {object} response The response.
              *
              * @returns {object} The response.
              */
          function settle(resolve, reject, response) {
            const validateStatus = response.config.validateStatus;
            if (!response.status || !validateStatus || validateStatus(response.status)) {
              resolve(response);
            } else {
              reject(new AxiosError('Request failed with status code ' + response.status, [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
            }
          }
          var cookies = platform.hasStandardBrowserEnv ?
          // Standard browser envs support document.cookie
          {
            write(name, value, expires, path, domain, secure) {
              const cookie = [name + '=' + encodeURIComponent(value)];
              utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());
              utils$1.isString(path) && cookie.push('path=' + path);
              utils$1.isString(domain) && cookie.push('domain=' + domain);
              secure === true && cookie.push('secure');
              document.cookie = cookie.join('; ');
            },
            read(name) {
              const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return match ? decodeURIComponent(match[3]) : null;
            },
            remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          } :
          // Non-standard browser env (web workers, react-native) lack needed support.
          {
            write() {},
            read() {
              return null;
            },
            remove() {}
          }; /**
             * Determines whether the specified URL is absolute
             *
             * @param {string} url The URL to test
             *
             * @returns {boolean} True if the specified URL is absolute, otherwise false
             */
          function isAbsoluteURL(url) {
            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
            // by any combination of letters, digits, plus, period, or hyphen.
            return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
          } /**
            * Creates a new URL by combining the specified URLs
            *
            * @param {string} baseURL The base URL
            * @param {string} relativeURL The relative URL
            *
            * @returns {string} The combined URL
            */
          function combineURLs(baseURL, relativeURL) {
            return relativeURL ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
          } /**
            * Creates a new URL by combining the baseURL with the requestedURL,
            * only when the requestedURL is not already an absolute URL.
            * If the requestURL is absolute, this function returns the requestedURL untouched.
            *
            * @param {string} baseURL The base URL
            * @param {string} requestedURL Absolute or relative URL to combine
            *
            * @returns {string} The combined full path
            */
          function buildFullPath(baseURL, requestedURL) {
            if (baseURL && !isAbsoluteURL(requestedURL)) {
              return combineURLs(baseURL, requestedURL);
            }
            return requestedURL;
          }
          var isURLSameOrigin = platform.hasStandardBrowserEnv ?
          // Standard browser envs have full support of the APIs needed to test
          // whether the request URL is of the same origin as current location.
          function standardBrowserEnv() {
            const msie = /(msie|trident)/i.test(navigator.userAgent);
            const urlParsingNode = document.createElement('a');
            let originURL; /**
                           * Parse a URL to discover its components
                           *
                           * @param {String} url The URL to be parsed
                           * @returns {Object}
                           */
            function resolveURL(url) {
              let href = url;
              if (msie) {
                // IE needs attribute set twice to normalize properties
                urlParsingNode.setAttribute('href', href);
                href = urlParsingNode.href;
              }
              urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
              return {
                href: urlParsingNode.href,
                protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                host: urlParsingNode.host,
                search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                hostname: urlParsingNode.hostname,
                port: urlParsingNode.port,
                pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
              };
            }
            originURL = resolveURL(window.location.href); /**
                                                          * Determine if a URL shares the same origin as the current location
                                                          *
                                                          * @param {String} requestURL The URL to test
                                                          * @returns {boolean} True if URL shares the same origin, otherwise false
                                                          */
            return function isURLSameOrigin(requestURL) {
              const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
              return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
            };
          }() :
          // Non standard browser envs (web workers, react-native) lack needed support.
          function nonStandardBrowserEnv() {
            return function isURLSameOrigin() {
              return true;
            };
          }();
          function parseProtocol(url) {
            const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
            return match && match[1] || '';
          } /**
            * Calculate data maxRate
            * @param {Number} [samplesCount= 10]
            * @param {Number} [min= 1000]
            * @returns {Function}
            */
          function speedometer(samplesCount, min) {
            samplesCount = samplesCount || 10;
            const bytes = new Array(samplesCount);
            const timestamps = new Array(samplesCount);
            let head = 0;
            let tail = 0;
            let firstSampleTS;
            min = min !== undefined ? min : 1000;
            return function push(chunkLength) {
              const now = Date.now();
              const startedAt = timestamps[tail];
              if (!firstSampleTS) {
                firstSampleTS = now;
              }
              bytes[head] = chunkLength;
              timestamps[head] = now;
              let i = tail;
              let bytesCount = 0;
              while (i !== head) {
                bytesCount += bytes[i++];
                i = i % samplesCount;
              }
              head = (head + 1) % samplesCount;
              if (head === tail) {
                tail = (tail + 1) % samplesCount;
              }
              if (now - firstSampleTS < min) {
                return;
              }
              const passed = startedAt && now - startedAt;
              return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
            };
          }
          function progressEventReducer(listener, isDownloadStream) {
            let bytesNotified = 0;
            const _speedometer = speedometer(50, 250);
            return e => {
              const loaded = e.loaded;
              const total = e.lengthComputable ? e.total : undefined;
              const progressBytes = loaded - bytesNotified;
              const rate = _speedometer(progressBytes);
              const inRange = loaded <= total;
              bytesNotified = loaded;
              const data = {
                loaded,
                total,
                progress: total ? loaded / total : undefined,
                bytes: progressBytes,
                rate: rate ? rate : undefined,
                estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
                event: e
              };
              data[isDownloadStream ? 'download' : 'upload'] = true;
              listener(data);
            };
          }
          const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';
          var xhrAdapter = isXHRAdapterSupported && function (config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
              let requestData = config.data;
              const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
              let {
                responseType,
                withXSRFToken
              } = config;
              let onCanceled;
              function done() {
                if (config.cancelToken) {
                  config.cancelToken.unsubscribe(onCanceled);
                }
                if (config.signal) {
                  config.signal.removeEventListener('abort', onCanceled);
                }
              }
              let contentType;
              if (utils$1.isFormData(requestData)) {
                if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
                  requestHeaders.setContentType(false); // Let the browser set it
                } else if ((contentType = requestHeaders.getContentType()) !== false) {
                  // fix semicolon duplication issue for ReactNative FormData implementation
                  const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
                  requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
                }
              }
              let request = new XMLHttpRequest(); // HTTP basic authentication
              if (config.auth) {
                const username = config.auth.username || '';
                const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
                requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
              }
              const fullPath = buildFullPath(config.baseURL, config.url);
              request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS
              request.timeout = config.timeout;
              function onloadend() {
                if (!request) {
                  return;
                } // Prepare the response
                const responseHeaders = AxiosHeaders$1.from('getAllResponseHeaders' in request && request.getAllResponseHeaders());
                const responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
                const response = {
                  data: responseData,
                  status: request.status,
                  statusText: request.statusText,
                  headers: responseHeaders,
                  config,
                  request
                };
                settle(function _resolve(value) {
                  resolve(value);
                  done();
                }, function _reject(err) {
                  reject(err);
                  done();
                }, response); // Clean up request
                request = null;
              }
              if ('onloadend' in request) {
                // Use onloadend if available
                request.onloadend = onloadend;
              } else {
                // Listen for ready state to emulate onloadend
                request.onreadystatechange = function handleLoad() {
                  if (!request || request.readyState !== 4) {
                    return;
                  } // The request errored out and we didn't get a response, this will be
                  // handled by onerror instead
                  // With one exception: request that using file: protocol, most browsers
                  // will return status as 0 even though it's a successful request
                  if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                    return;
                  } // readystate handler is calling before onerror or ontimeout handlers,
                  // so we should call onloadend on the next 'tick'
                  setTimeout(onloadend);
                };
              } // Handle browser request cancellation (as opposed to a manual cancellation)
              request.onabort = function handleAbort() {
                if (!request) {
                  return;
                }
                reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request)); // Clean up request
                request = null;
              }; // Handle low level network errors
              request.onerror = function handleError() {
                // Real errors are hidden from us by the browser
                // onerror should only fire if it's a network error
                reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request)); // Clean up request
                request = null;
              }; // Handle timeout
              request.ontimeout = function handleTimeout() {
                let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
                const transitional = config.transitional || transitionalDefaults;
                if (config.timeoutErrorMessage) {
                  timeoutErrorMessage = config.timeoutErrorMessage;
                }
                reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request)); // Clean up request
                request = null;
              }; // Add xsrf header
              // This is only done if running in a standard browser environment.
              // Specifically not if we're in a web worker, or react-native.
              if (platform.hasStandardBrowserEnv) {
                withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
                if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {
                  // Add xsrf header
                  const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
                  if (xsrfValue) {
                    requestHeaders.set(config.xsrfHeaderName, xsrfValue);
                  }
                }
              } // Remove Content-Type if data is undefined
              requestData === undefined && requestHeaders.setContentType(null); // Add headers to the request
              if ('setRequestHeader' in request) {
                utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
                  request.setRequestHeader(key, val);
                });
              } // Add withCredentials to request if needed
              if (!utils$1.isUndefined(config.withCredentials)) {
                request.withCredentials = !!config.withCredentials;
              } // Add responseType to request if needed
              if (responseType && responseType !== 'json') {
                request.responseType = config.responseType;
              } // Handle progress if needed
              if (typeof config.onDownloadProgress === 'function') {
                request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
              } // Not all browsers support upload events
              if (typeof config.onUploadProgress === 'function' && request.upload) {
                request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
              }
              if (config.cancelToken || config.signal) {
                // Handle cancellation
                // eslint-disable-next-line func-names
                onCanceled = cancel => {
                  if (!request) {
                    return;
                  }
                  reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
                  request.abort();
                  request = null;
                };
                config.cancelToken && config.cancelToken.subscribe(onCanceled);
                if (config.signal) {
                  config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
                }
              }
              const protocol = parseProtocol(fullPath);
              if (protocol && platform.protocols.indexOf(protocol) === -1) {
                reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
                return;
              } // Send the request
              request.send(requestData || null);
            });
          };
          const knownAdapters = {
            http: httpAdapter,
            xhr: xhrAdapter
          };
          utils$1.forEach(knownAdapters, (fn, value) => {
            if (fn) {
              try {
                Object.defineProperty(fn, 'name', {
                  value
                });
              } catch (e) {// eslint-disable-next-line no-empty
              }
              Object.defineProperty(fn, 'adapterName', {
                value
              });
            }
          });
          const renderReason = reason => `- ${reason}`;
          const isResolvedHandle = adapter => utils$1.isFunction(adapter) || adapter === null || adapter === false;
          var adapters = {
            getAdapter: adapters => {
              adapters = utils$1.isArray(adapters) ? adapters : [adapters];
              const {
                length
              } = adapters;
              let nameOrAdapter;
              let adapter;
              const rejectedReasons = {};
              for (let i = 0; i < length; i++) {
                nameOrAdapter = adapters[i];
                let id;
                adapter = nameOrAdapter;
                if (!isResolvedHandle(nameOrAdapter)) {
                  adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
                  if (adapter === undefined) {
                    throw new AxiosError(`Unknown adapter '${id}'`);
                  }
                }
                if (adapter) {
                  break;
                }
                rejectedReasons[id || '#' + i] = adapter;
              }
              if (!adapter) {
                const reasons = Object.entries(rejectedReasons).map(_ref7 => {
                  let [id, state] = _ref7;
                  return `adapter ${id} ` + (state === false ? 'is not supported by the environment' : 'is not available in the build');
                });
                let s = length ? reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0]) : 'as no adapter specified';
                throw new AxiosError(`There is no suitable adapter to dispatch the request ` + s, 'ERR_NOT_SUPPORT');
              }
              return adapter;
            },
            adapters: knownAdapters
          }; /**
             * Throws a `CanceledError` if cancellation has been requested.
             *
             * @param {Object} config The config that is to be used for the request
             *
             * @returns {void}
             */
          function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
              config.cancelToken.throwIfRequested();
            }
            if (config.signal && config.signal.aborted) {
              throw new CanceledError(null, config);
            }
          } /**
            * Dispatch a request to the server using the configured adapter.
            *
            * @param {object} config The config that is to be used for the request
            *
            * @returns {Promise} The Promise to be fulfilled
            */
          function dispatchRequest(config) {
            throwIfCancellationRequested(config);
            config.headers = AxiosHeaders$1.from(config.headers); // Transform request data
            config.data = transformData.call(config, config.transformRequest);
            if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
              config.headers.setContentType('application/x-www-form-urlencoded', false);
            }
            const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
            return adapter(config).then(function onAdapterResolution(response) {
              throwIfCancellationRequested(config); // Transform response data
              response.data = transformData.call(config, config.transformResponse, response);
              response.headers = AxiosHeaders$1.from(response.headers);
              return response;
            }, function onAdapterRejection(reason) {
              if (!isCancel(reason)) {
                throwIfCancellationRequested(config); // Transform response data
                if (reason && reason.response) {
                  reason.response.data = transformData.call(config, config.transformResponse, reason.response);
                  reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
                }
              }
              return Promise.reject(reason);
            });
          }
          const headersToObject = thing => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing; /**
                                                                                                     * Config-specific merge-function which creates a new config-object
                                                                                                     * by merging two configuration objects together.
                                                                                                     *
                                                                                                     * @param {Object} config1
                                                                                                     * @param {Object} config2
                                                                                                     *
                                                                                                     * @returns {Object} New object resulting from merging config2 to config1
                                                                                                     */
          function mergeConfig(config1, config2) {
            // eslint-disable-next-line no-param-reassign
            config2 = config2 || {};
            const config = {};
            function getMergedValue(target, source, caseless) {
              if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
                return utils$1.merge.call({
                  caseless
                }, target, source);
              } else if (utils$1.isPlainObject(source)) {
                return utils$1.merge({}, source);
              } else if (utils$1.isArray(source)) {
                return source.slice();
              }
              return source;
            } // eslint-disable-next-line consistent-return
            function mergeDeepProperties(a, b, caseless) {
              if (!utils$1.isUndefined(b)) {
                return getMergedValue(a, b, caseless);
              } else if (!utils$1.isUndefined(a)) {
                return getMergedValue(undefined, a, caseless);
              }
            } // eslint-disable-next-line consistent-return
            function valueFromConfig2(a, b) {
              if (!utils$1.isUndefined(b)) {
                return getMergedValue(undefined, b);
              }
            } // eslint-disable-next-line consistent-return
            function defaultToConfig2(a, b) {
              if (!utils$1.isUndefined(b)) {
                return getMergedValue(undefined, b);
              } else if (!utils$1.isUndefined(a)) {
                return getMergedValue(undefined, a);
              }
            } // eslint-disable-next-line consistent-return
            function mergeDirectKeys(a, b, prop) {
              if (prop in config2) {
                return getMergedValue(a, b);
              } else if (prop in config1) {
                return getMergedValue(undefined, a);
              }
            }
            const mergeMap = {
              url: valueFromConfig2,
              method: valueFromConfig2,
              data: valueFromConfig2,
              baseURL: defaultToConfig2,
              transformRequest: defaultToConfig2,
              transformResponse: defaultToConfig2,
              paramsSerializer: defaultToConfig2,
              timeout: defaultToConfig2,
              timeoutMessage: defaultToConfig2,
              withCredentials: defaultToConfig2,
              withXSRFToken: defaultToConfig2,
              adapter: defaultToConfig2,
              responseType: defaultToConfig2,
              xsrfCookieName: defaultToConfig2,
              xsrfHeaderName: defaultToConfig2,
              onUploadProgress: defaultToConfig2,
              onDownloadProgress: defaultToConfig2,
              decompress: defaultToConfig2,
              maxContentLength: defaultToConfig2,
              maxBodyLength: defaultToConfig2,
              beforeRedirect: defaultToConfig2,
              transport: defaultToConfig2,
              httpAgent: defaultToConfig2,
              httpsAgent: defaultToConfig2,
              cancelToken: defaultToConfig2,
              socketPath: defaultToConfig2,
              responseEncoding: defaultToConfig2,
              validateStatus: mergeDirectKeys,
              headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
            };
            utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
              const merge = mergeMap[prop] || mergeDeepProperties;
              const configValue = merge(config1[prop], config2[prop], prop);
              utils$1.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
            });
            return config;
          }
          const VERSION = "1.6.7";
          const validators$1 = {}; // eslint-disable-next-line func-names
          ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
            validators$1[type] = function validator(thing) {
              return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
            };
          });
          const deprecatedWarnings = {}; /**
                                         * Transitional option validator
                                         *
                                         * @param {function|boolean?} validator - set to false if the transitional option has been removed
                                         * @param {string?} version - deprecated version / removed since version
                                         * @param {string?} message - some message with additional info
                                         *
                                         * @returns {function}
                                         */
          validators$1.transitional = function transitional(validator, version, message) {
            function formatMessage(opt, desc) {
              return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
            } // eslint-disable-next-line func-names
            return (value, opt, opts) => {
              if (validator === false) {
                throw new AxiosError(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError.ERR_DEPRECATED);
              }
              if (version && !deprecatedWarnings[opt]) {
                deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console
                console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
              }
              return validator ? validator(value, opt, opts) : true;
            };
          }; /**
             * Assert object's properties type
             *
             * @param {object} options
             * @param {object} schema
             * @param {boolean?} allowUnknown
             *
             * @returns {object}
             */
          function assertOptions(options, schema, allowUnknown) {
            if (typeof options !== 'object') {
              throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
            }
            const keys = Object.keys(options);
            let i = keys.length;
            while (i-- > 0) {
              const opt = keys[i];
              const validator = schema[opt];
              if (validator) {
                const value = options[opt];
                const result = value === undefined || validator(value, opt, options);
                if (result !== true) {
                  throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
                }
                continue;
              }
              if (allowUnknown !== true) {
                throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
              }
            }
          }
          var validator = {
            assertOptions,
            validators: validators$1
          };
          const validators = validator.validators; /**
                                                   * Create a new instance of Axios
                                                   *
                                                   * @param {Object} instanceConfig The default config for the instance
                                                   *
                                                   * @return {Axios} A new instance of Axios
                                                   */
          class Axios {
            constructor(instanceConfig) {
              this.defaults = instanceConfig;
              this.interceptors = {
                request: new InterceptorManager$1(),
                response: new InterceptorManager$1()
              };
            } /**
              * Dispatch a request
              *
              * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
              * @param {?Object} config
              *
              * @returns {Promise} The Promise to be fulfilled
              */
            async request(configOrUrl, config) {
              try {
                return await this._request(configOrUrl, config);
              } catch (err) {
                if (err instanceof Error) {
                  let dummy;
                  Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error(); // slice off the Error: ... line
                  const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
                  if (!err.stack) {
                    err.stack = stack; // match without the 2 top stack lines
                  } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
                    err.stack += '\n' + stack;
                  }
                }
                throw err;
              }
            }
            _request(configOrUrl, config) {
              /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
              if (typeof configOrUrl === 'string') {
                config = config || {};
                config.url = configOrUrl;
              } else {
                config = configOrUrl || {};
              }
              config = mergeConfig(this.defaults, config);
              const {
                transitional,
                paramsSerializer,
                headers
              } = config;
              if (transitional !== undefined) {
                validator.assertOptions(transitional, {
                  silentJSONParsing: validators.transitional(validators.boolean),
                  forcedJSONParsing: validators.transitional(validators.boolean),
                  clarifyTimeoutError: validators.transitional(validators.boolean)
                }, false);
              }
              if (paramsSerializer != null) {
                if (utils$1.isFunction(paramsSerializer)) {
                  config.paramsSerializer = {
                    serialize: paramsSerializer
                  };
                } else {
                  validator.assertOptions(paramsSerializer, {
                    encode: validators.function,
                    serialize: validators.function
                  }, true);
                }
              } // Set config.method
              config.method = (config.method || this.defaults.method || 'get').toLowerCase(); // Flatten headers
              let contextHeaders = headers && utils$1.merge(headers.common, headers[config.method]);
              headers && utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], method => {
                delete headers[method];
              });
              config.headers = AxiosHeaders$1.concat(contextHeaders, headers); // filter out skipped interceptors
              const requestInterceptorChain = [];
              let synchronousRequestInterceptors = true;
              this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
                  return;
                }
                synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
                requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
              });
              const responseInterceptorChain = [];
              this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
              });
              let promise;
              let i = 0;
              let len;
              if (!synchronousRequestInterceptors) {
                const chain = [dispatchRequest.bind(this), undefined];
                chain.unshift.apply(chain, requestInterceptorChain);
                chain.push.apply(chain, responseInterceptorChain);
                len = chain.length;
                promise = Promise.resolve(config);
                while (i < len) {
                  promise = promise.then(chain[i++], chain[i++]);
                }
                return promise;
              }
              len = requestInterceptorChain.length;
              let newConfig = config;
              i = 0;
              while (i < len) {
                const onFulfilled = requestInterceptorChain[i++];
                const onRejected = requestInterceptorChain[i++];
                try {
                  newConfig = onFulfilled(newConfig);
                } catch (error) {
                  onRejected.call(this, error);
                  break;
                }
              }
              try {
                promise = dispatchRequest.call(this, newConfig);
              } catch (error) {
                return Promise.reject(error);
              }
              i = 0;
              len = responseInterceptorChain.length;
              while (i < len) {
                promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
              }
              return promise;
            }
            getUri(config) {
              config = mergeConfig(this.defaults, config);
              const fullPath = buildFullPath(config.baseURL, config.url);
              return buildURL(fullPath, config.params, config.paramsSerializer);
            }
          } // Provide aliases for supported request methods
          utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
            /*eslint func-names:0*/Axios.prototype[method] = function (url, config) {
              return this.request(mergeConfig(config || {}, {
                method,
                url,
                data: (config || {}).data
              }));
            };
          });
          utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            /*eslint func-names:0*/function generateHTTPMethod(isForm) {
              return function httpMethod(url, data, config) {
                return this.request(mergeConfig(config || {}, {
                  method,
                  headers: isForm ? {
                    'Content-Type': 'multipart/form-data'
                  } : {},
                  url,
                  data
                }));
              };
            }
            Axios.prototype[method] = generateHTTPMethod();
            Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
          });
          var Axios$1 = Axios; /**
                               * A `CancelToken` is an object that can be used to request cancellation of an operation.
                               *
                               * @param {Function} executor The executor function.
                               *
                               * @returns {CancelToken}
                               */
          class CancelToken {
            constructor(executor) {
              if (typeof executor !== 'function') {
                throw new TypeError('executor must be a function.');
              }
              let resolvePromise;
              this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
              });
              const token = this; // eslint-disable-next-line func-names
              this.promise.then(cancel => {
                if (!token._listeners) return;
                let i = token._listeners.length;
                while (i-- > 0) {
                  token._listeners[i](cancel);
                }
                token._listeners = null;
              }); // eslint-disable-next-line func-names
              this.promise.then = onfulfilled => {
                let _resolve; // eslint-disable-next-line func-names
                const promise = new Promise(resolve => {
                  token.subscribe(resolve);
                  _resolve = resolve;
                }).then(onfulfilled);
                promise.cancel = function reject() {
                  token.unsubscribe(_resolve);
                };
                return promise;
              };
              executor(function cancel(message, config, request) {
                if (token.reason) {
                  // Cancellation has already been requested
                  return;
                }
                token.reason = new CanceledError(message, config, request);
                resolvePromise(token.reason);
              });
            } /**
              * Throws a `CanceledError` if cancellation has been requested.
              */
            throwIfRequested() {
              if (this.reason) {
                throw this.reason;
              }
            } /**
              * Subscribe to the cancel signal
              */
            subscribe(listener) {
              if (this.reason) {
                listener(this.reason);
                return;
              }
              if (this._listeners) {
                this._listeners.push(listener);
              } else {
                this._listeners = [listener];
              }
            } /**
              * Unsubscribe from the cancel signal
              */
            unsubscribe(listener) {
              if (!this._listeners) {
                return;
              }
              const index = this._listeners.indexOf(listener);
              if (index !== -1) {
                this._listeners.splice(index, 1);
              }
            } /**
              * Returns an object that contains a new `CancelToken` and a function that, when called,
              * cancels the `CancelToken`.
              */
            static source() {
              let cancel;
              const token = new CancelToken(function executor(c) {
                cancel = c;
              });
              return {
                token,
                cancel
              };
            }
          }
          var CancelToken$1 = CancelToken; /**
                                           * Syntactic sugar for invoking a function and expanding an array for arguments.
                                           *
                                           * Common use case would be to use `Function.prototype.apply`.
                                           *
                                           *  ```js
                                           *  function f(x, y, z) {}
                                           *  var args = [1, 2, 3];
                                           *  f.apply(null, args);
                                           *  ```
                                           *
                                           * With `spread` this example can be re-written.
                                           *
                                           *  ```js
                                           *  spread(function(x, y, z) {})([1, 2, 3]);
                                           *  ```
                                           *
                                           * @param {Function} callback
                                           *
                                           * @returns {Function}
                                           */
          function spread(callback) {
            return function wrap(arr) {
              return callback.apply(null, arr);
            };
          } /**
            * Determines whether the payload is an error thrown by Axios
            *
            * @param {*} payload The value to test
            *
            * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
            */
          function isAxiosError(payload) {
            return utils$1.isObject(payload) && payload.isAxiosError === true;
          }
          const HttpStatusCode = {
            Continue: 100,
            SwitchingProtocols: 101,
            Processing: 102,
            EarlyHints: 103,
            Ok: 200,
            Created: 201,
            Accepted: 202,
            NonAuthoritativeInformation: 203,
            NoContent: 204,
            ResetContent: 205,
            PartialContent: 206,
            MultiStatus: 207,
            AlreadyReported: 208,
            ImUsed: 226,
            MultipleChoices: 300,
            MovedPermanently: 301,
            Found: 302,
            SeeOther: 303,
            NotModified: 304,
            UseProxy: 305,
            Unused: 306,
            TemporaryRedirect: 307,
            PermanentRedirect: 308,
            BadRequest: 400,
            Unauthorized: 401,
            PaymentRequired: 402,
            Forbidden: 403,
            NotFound: 404,
            MethodNotAllowed: 405,
            NotAcceptable: 406,
            ProxyAuthenticationRequired: 407,
            RequestTimeout: 408,
            Conflict: 409,
            Gone: 410,
            LengthRequired: 411,
            PreconditionFailed: 412,
            PayloadTooLarge: 413,
            UriTooLong: 414,
            UnsupportedMediaType: 415,
            RangeNotSatisfiable: 416,
            ExpectationFailed: 417,
            ImATeapot: 418,
            MisdirectedRequest: 421,
            UnprocessableEntity: 422,
            Locked: 423,
            FailedDependency: 424,
            TooEarly: 425,
            UpgradeRequired: 426,
            PreconditionRequired: 428,
            TooManyRequests: 429,
            RequestHeaderFieldsTooLarge: 431,
            UnavailableForLegalReasons: 451,
            InternalServerError: 500,
            NotImplemented: 501,
            BadGateway: 502,
            ServiceUnavailable: 503,
            GatewayTimeout: 504,
            HttpVersionNotSupported: 505,
            VariantAlsoNegotiates: 506,
            InsufficientStorage: 507,
            LoopDetected: 508,
            NotExtended: 510,
            NetworkAuthenticationRequired: 511
          };
          Object.entries(HttpStatusCode).forEach(_ref8 => {
            let [key, value] = _ref8;
            HttpStatusCode[value] = key;
          });
          var HttpStatusCode$1 = HttpStatusCode; /**
                                                 * Create an instance of Axios
                                                 *
                                                 * @param {Object} defaultConfig The default config for the instance
                                                 *
                                                 * @returns {Axios} A new instance of Axios
                                                 */
          function createInstance(defaultConfig) {
            const context = new Axios$1(defaultConfig);
            const instance = bind(Axios$1.prototype.request, context); // Copy axios.prototype to instance
            utils$1.extend(instance, Axios$1.prototype, context, {
              allOwnKeys: true
            }); // Copy context to instance
            utils$1.extend(instance, context, null, {
              allOwnKeys: true
            }); // Factory for creating new instances
            instance.create = function create(instanceConfig) {
              return createInstance(mergeConfig(defaultConfig, instanceConfig));
            };
            return instance;
          } // Create the default instance to be exported
          const axios = createInstance(defaults$1); // Expose Axios class to allow class inheritance
          axios.Axios = Axios$1; // Expose Cancel & CancelToken
          axios.CanceledError = CanceledError;
          axios.CancelToken = CancelToken$1;
          axios.isCancel = isCancel;
          axios.VERSION = VERSION;
          axios.toFormData = toFormData; // Expose AxiosError class
          axios.AxiosError = AxiosError; // alias for CanceledError for backward compatibility
          axios.Cancel = axios.CanceledError; // Expose all/spread
          axios.all = function all(promises) {
            return Promise.all(promises);
          };
          axios.spread = spread; // Expose isAxiosError
          axios.isAxiosError = isAxiosError; // Expose mergeConfig
          axios.mergeConfig = mergeConfig;
          axios.AxiosHeaders = AxiosHeaders$1;
          axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
          axios.getAdapter = adapters.getAdapter;
          axios.HttpStatusCode = HttpStatusCode$1;
          axios.default = axios;
          module.exports = axios; /***/
        },
        /***/3373: /***/function (module, exports) {
          var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*!
                                                                           Copyright (c) 2018 Jed Watson.
                                                                           Licensed under the MIT License (MIT), see
                                                                           http://jedwatson.github.io/classnames
                                                                           */ /* global define */
          (function () {
            var hasOwn = {}.hasOwnProperty;
            function classNames() {
              var classes = '';
              for (var i = 0; i < arguments.length; i++) {
                var arg = arguments[i];
                if (arg) {
                  classes = appendClass(classes, parseValue(arg));
                }
              }
              return classes;
            }
            function parseValue(arg) {
              if (typeof arg === 'string' || typeof arg === 'number') {
                return arg;
              }
              if (typeof arg !== 'object') {
                return '';
              }
              if (Array.isArray(arg)) {
                return classNames.apply(null, arg);
              }
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
                return arg.toString();
              }
              var classes = '';
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes = appendClass(classes, key);
                }
              }
              return classes;
            }
            function appendClass(value, newClass) {
              if (!newClass) {
                return value;
              }
              if (value) {
                return value + ' ' + newClass;
              }
              return value + newClass;
            }
            if (module.exports) {
              classNames.default = classNames;
              module.exports = classNames;
            } else {
              // register as 'classnames', consistent with npm package name
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return classNames;
              }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }
          })(); /***/
        },
        /***/9965: /***/function (module) {
          module.exports = /*#__PURE__*/JSON.parse('{"name":"@orbs-network/ton-access","version":"2.3.3","description":"Unthrottled anonymous RPC access to TON blockchain via a robust decentralized network","source":"lib/index.js","main":"lib/index.js","types":"lib/index.d.ts","files":["lib/**/*"],"scripts":{"test":"env mocha -r ts-node/register test/**/*.ts","test:v2":"env mocha -r ts-node/register test/ton-v2.ts","test:v4":"env mocha -r ts-node/register test/ton-v4.ts","cleanup":"rimraf ./lib","build:web:reg":"esbuild ./lib/web.js --bundle  --sourcemap --target=es2015 --outfile=./dist/index.js","build:web:min":"esbuild ./lib/web.js --bundle  --minify    --target=es2015 --outfile=./dist/index.min.js","build:web":"rimraf ./dist && npm run build:web:reg && npm run build:web:min","build":"npm run lint && rimraf ./lib && tsc && npm run build:web","format":"prettier --write \\"src/**/*.ts\\"","lint":"tslint -p tsconfig.json","prepare":"npm run build","prepublishOnly":"npm test && npm run lint","preversion":"npm run lint","version":"npm run format && git add -A src","postversion":"git push && git push --tags"},"repository":{"type":"git","url":"git+https://github.com/orbs-network/ton-access.git"},"author":"yuval@orbs.com","license":"MIT","bugs":{"url":"https://github.com/orbs-network/ton-access/issues"},"homepage":"https://github.com/orbs-network/ton-access#readme","dependencies":{"isomorphic-fetch":"^3.0.0"},"devDependencies":{"@types/bn.js":"^5.1.1","@types/chai":"^4.3.4","@types/isomorphic-fetch":"^0.0.36","@types/mocha":"^10.0.0","buffer":"^6.0.3","chai":"^4.3.7","esbuild":"^0.15.14","mocha":"^10.1.0","prettier":"^2.7.1","rimraf":"^3.0.2","ton":"^12.1.3","ton-lite-client":"npm:@truecarry/ton-lite-client@^1.6.1","tonweb":"^0.0.58","ts-node":"^10.9.1","tslib":"^2.4.0","tslint":"^6.1.3","tslint-config-prettier":"^1.18.0"}}'); /***/
        },
        /***/2302: /***/function (module) {
          module.exports = {
            "rE": "13.9.0"
          }; /***/
        } /******/
      }; /************************************************************************/ /******/ // The module cache
      /******/
      var __webpack_module_cache__ = {}; /******/ /******/ // The require function
      /******/
      function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/var cachedModule = __webpack_module_cache__[moduleId]; /******/
        if (cachedModule !== undefined) {
          /******/return cachedModule.exports; /******/
        } /******/ // Create a new module (and put it into the cache)
        /******/
        var module = __webpack_module_cache__[moduleId] = {
          /******/ // no module.id needed
          /******/ // no module.loaded needed
          /******/exports: {} /******/
        }; /******/ /******/ // Execute the module function
        /******/
        __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__); /******/ /******/ // Return the exports of the module
        /******/
        return module.exports; /******/
      } /******/ /************************************************************************/ /******/ /* webpack/runtime/amd options */ /******/
      !function () {
        /******/__webpack_require__.amdO = {}; /******/
      }(); /******/ /******/ /* webpack/runtime/define property getters */ /******/
      !function () {
        /******/ // define getter functions for harmony exports
        /******/__webpack_require__.d = function (exports, definition) {
          /******/for (var key in definition) {
            /******/if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
              /******/Object.defineProperty(exports, key, {
                enumerable: true,
                get: definition[key]
              }); /******/
            } /******/
          } /******/
        }; /******/
      }(); /******/ /******/ /* webpack/runtime/global */ /******/
      !function () {
        /******/__webpack_require__.g = function () {
          /******/if (typeof globalThis === 'object') return globalThis; /******/
          try {
            /******/return this || new Function('return this')(); /******/
          } catch (e) {
            /******/if (typeof window === 'object') return window; /******/
          } /******/
        }(); /******/
      }(); /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/
      !function () {
        /******/__webpack_require__.o = function (obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }; /******/
      }(); /******/ /******/ /* webpack/runtime/make namespace object */ /******/
      !function () {
        /******/ // define __esModule on exports
        /******/__webpack_require__.r = function (exports) {
          /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            /******/Object.defineProperty(exports, Symbol.toStringTag, {
              value: 'Module'
            }); /******/
          } /******/
          Object.defineProperty(exports, '__esModule', {
            value: true
          }); /******/
        }; /******/
      }(); /******/ /************************************************************************/
      var __webpack_exports__ = {}; // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        pV: function () {
          return (/* reexport */core_dist.Address
          );
        },
        sJ: function () {
          return (/* reexport */dist /* AssetsSDK */.sJ
          );
        },
        fh: function () {
          return (/* reexport */core_dist.Cell
          );
        },
        zh: function () {
          return (/* reexport */DefaultContentResolver
          );
        },
        ki: function () {
          return (/* reexport */GameFi
          );
        },
        pF: function () {
          return (/* reexport */GameFiBase
          );
        },
        A4: function () {
          return (/* reexport */ProxyContentResolver
          );
        },
        Ij: function () {
          return (/* reexport */core_dist.SendMode
          );
        },
        xq: function () {
          return (/* reexport */ton_dist.TonClient
          );
        },
        hh: function () {
          return (/* reexport */TonClient4
          );
        },
        i$: function () {
          return (/* reexport */TonConnectUI
          );
        },
        ci: function () {
          return (/* reexport */core_dist.beginCell
          );
        },
        nO: function () {
          return (/* reexport */core_dist.fromNano
          );
        },
        _O: function () {
          return (/* reexport */lib.getHttpV4Endpoint
          );
        },
        D$: function () {
          return (/* reexport */core_dist.storeStateInit
          );
        },
        IU: function () {
          return (/* reexport */core_dist.toNano
          );
        }
      }); /* provided dependency */
      var Buffer = __webpack_require__(1048)["hp"];
      class DefaultContentResolver {
        constructor(ipfsGateway) {
          this.ipfsGateway = void 0;
          this.ipfsGateway = ipfsGateway ?? (id => `https://ipfs.io/ipfs/${id}`);
        }
        async resolve(url) {
          if (url.startsWith('ipfs://')) {
            url = this.ipfsGateway(url.slice(7));
          }
          if (!(url.startsWith('https://') || url.startsWith('http://'))) {
            throw new Error('Unknown URL: ' + url);
          }
          return Buffer.from(await (await fetch(url)).arrayBuffer());
        }
      }
      class ProxyContentResolver extends DefaultContentResolver {
        constructor(_temp3) {
          let {
            ipfsGateway,
            urlProxy
          } = _temp3 === void 0 ? {} : _temp3;
          super(ipfsGateway);
          this.urlProxy = void 0;
          this.urlProxy = urlProxy == null ? url => url : urlProxy;
        }
        resolve(url) {
          return super.resolve(this.urlProxy(url));
        }
      } // EXTERNAL MODULE: ../../node_modules/@ton-community/assets-sdk/dist/index.js
      ProxyContentResolver.replaceable = '%URL%';
      var dist = __webpack_require__(4977); // EXTERNAL MODULE: ../../node_modules/@ton/core/dist/index.js
      var core_dist = __webpack_require__(6900); // EXTERNAL MODULE: ../../node_modules/@ton/ton/dist/index.js
      var ton_dist = __webpack_require__(6330); // EXTERNAL MODULE: ../../node_modules/tweetnacl-util/nacl-util.js
      var nacl_util = __webpack_require__(665); // EXTERNAL MODULE: ../../node_modules/tweetnacl/nacl-fast.js
      var nacl_fast = __webpack_require__(2926);
      var CONNECT_EVENT_ERROR_CODES;
      (function (CONNECT_EVENT_ERROR_CODES) {
        CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
        CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
        CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["MANIFEST_NOT_FOUND_ERROR"] = 2] = "MANIFEST_NOT_FOUND_ERROR";
        CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["MANIFEST_CONTENT_ERROR"] = 3] = "MANIFEST_CONTENT_ERROR";
        CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
        CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
        CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
      })(CONNECT_EVENT_ERROR_CODES || (CONNECT_EVENT_ERROR_CODES = {}));
      var CONNECT_ITEM_ERROR_CODES;
      (function (CONNECT_ITEM_ERROR_CODES) {
        CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
        CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
      })(CONNECT_ITEM_ERROR_CODES || (CONNECT_ITEM_ERROR_CODES = {}));
      var SEND_TRANSACTION_ERROR_CODES;
      (function (SEND_TRANSACTION_ERROR_CODES) {
        SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
        SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
        SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
        SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
        SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
      })(SEND_TRANSACTION_ERROR_CODES || (SEND_TRANSACTION_ERROR_CODES = {}));
      var SIGN_DATA_ERROR_CODES;
      (function (SIGN_DATA_ERROR_CODES) {
        SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
        SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
        SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
        SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
        SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
      })(SIGN_DATA_ERROR_CODES || (SIGN_DATA_ERROR_CODES = {}));
      var DISCONNECT_ERROR_CODES;
      (function (DISCONNECT_ERROR_CODES) {
        DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
        DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
        DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
        DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
      })(DISCONNECT_ERROR_CODES || (DISCONNECT_ERROR_CODES = {}));
      var CHAIN;
      (function (CHAIN) {
        CHAIN["MAINNET"] = "-239";
        CHAIN["TESTNET"] = "-3";
      })(CHAIN || (CHAIN = {}));
      function encodeUint8Array(value, urlSafe) {
        const encoded = nacl_util.encodeBase64(value);
        if (!urlSafe) {
          return encoded;
        }
        return encodeURIComponent(encoded);
      }
      function decodeToUint8Array(value, urlSafe) {
        if (urlSafe) {
          value = decodeURIComponent(value);
        }
        return nacl_util.decodeBase64(value);
      }
      function encode(value, urlSafe) {
        if (urlSafe === void 0) {
          urlSafe = false;
        }
        let uint8Array;
        if (value instanceof Uint8Array) {
          uint8Array = value;
        } else {
          if (typeof value !== 'string') {
            value = JSON.stringify(value);
          }
          uint8Array = nacl_util.decodeUTF8(value);
        }
        return encodeUint8Array(uint8Array, urlSafe);
      }
      function decode(value, urlSafe) {
        if (urlSafe === void 0) {
          urlSafe = false;
        }
        const decodedUint8Array = decodeToUint8Array(value, urlSafe);
        return {
          toString() {
            return nacl_util.encodeUTF8(decodedUint8Array);
          },
          toObject() {
            try {
              return JSON.parse(nacl_util.encodeUTF8(decodedUint8Array));
            } catch (e) {
              return null;
            }
          },
          toUint8Array() {
            return decodedUint8Array;
          }
        };
      }
      const Base64 = {
        encode,
        decode
      };
      function concatUint8Arrays(buffer1, buffer2) {
        const mergedArray = new Uint8Array(buffer1.length + buffer2.length);
        mergedArray.set(buffer1);
        mergedArray.set(buffer2, buffer1.length);
        return mergedArray;
      }
      function splitToUint8Arrays(array, index) {
        if (index >= array.length) {
          throw new Error('Index is out of buffer');
        }
        const subArray1 = array.slice(0, index);
        const subArray2 = array.slice(index);
        return [subArray1, subArray2];
      }
      function toHexString(byteArray) {
        let hexString = '';
        byteArray.forEach(byte => {
          hexString += ('0' + (byte & 0xff).toString(16)).slice(-2);
        });
        return hexString;
      }
      function hexToByteArray(hexString) {
        if (hexString.length % 2 !== 0) {
          throw new Error(`Cannot convert ${hexString} to bytesArray`);
        }
        const result = new Uint8Array(hexString.length / 2);
        for (let i = 0; i < hexString.length; i += 2) {
          result[i / 2] = parseInt(hexString.slice(i, i + 2), 16);
        }
        return result;
      }
      class SessionCrypto {
        constructor(keyPair) {
          this.nonceLength = 24;
          this.keyPair = keyPair ? this.createKeypairFromString(keyPair) : this.createKeypair();
          this.sessionId = toHexString(this.keyPair.publicKey);
        }
        createKeypair() {
          return nacl_fast.box.keyPair();
        }
        createKeypairFromString(keyPair) {
          return {
            publicKey: hexToByteArray(keyPair.publicKey),
            secretKey: hexToByteArray(keyPair.secretKey)
          };
        }
        createNonce() {
          return nacl_fast.randomBytes(this.nonceLength);
        }
        encrypt(message, receiverPublicKey) {
          const encodedMessage = new TextEncoder().encode(message);
          const nonce = this.createNonce();
          const encrypted = nacl_fast.box(encodedMessage, nonce, receiverPublicKey, this.keyPair.secretKey);
          return concatUint8Arrays(nonce, encrypted);
        }
        decrypt(message, senderPublicKey) {
          const [nonce, internalMessage] = splitToUint8Arrays(message, this.nonceLength);
          const decrypted = nacl_fast.box.open(internalMessage, nonce, senderPublicKey, this.keyPair.secretKey);
          if (!decrypted) {
            throw new Error(`Decryption error: \n message: ${message.toString()} \n sender pubkey: ${senderPublicKey.toString()} \n keypair pubkey: ${this.keyPair.publicKey.toString()} \n keypair secretkey: ${this.keyPair.secretKey.toString()}`);
          }
          return new TextDecoder().decode(decrypted);
        }
        stringifyKeypair() {
          return {
            publicKey: toHexString(this.keyPair.publicKey),
            secretKey: toHexString(this.keyPair.secretKey)
          };
        }
      } /*! *****************************************************************************
        Copyright (c) Microsoft Corporation.
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */
      function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
        return t;
      }
      function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      } /**
        * Base class for TonConnect errors. You can check if the error was triggered by the @tonconnect/sdk using `err instanceof TonConnectError`.
        */
      class TonConnectError extends Error {
        constructor(message, options) {
          super(message, options);
          this.message = `${TonConnectError.prefix} ${this.constructor.name}${this.info ? ': ' + this.info : ''}${message ? '\n' + message : ''}`;
          Object.setPrototypeOf(this, TonConnectError.prototype);
        }
        get info() {
          return '';
        }
      }
      TonConnectError.prefix = '[TON_CONNECT_SDK_ERROR]'; /**
                                                          * Thrown when passed DappMetadata is in incorrect format.
                                                          */
      class DappMetadataError extends TonConnectError {
        get info() {
          return 'Passed DappMetadata is in incorrect format.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, DappMetadataError.prototype);
        }
      } /**
        * Thrown when passed manifest contains errors.
        */
      class ManifestContentErrorError extends TonConnectError {
        get info() {
          return 'Passed `tonconnect-manifest.json` contains errors. Check format of your manifest. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, ManifestContentErrorError.prototype);
        }
      } /**
        * Thrown when wallet can't get manifest by passed manifestUrl.
        */
      class ManifestNotFoundError extends TonConnectError {
        get info() {
          return 'Manifest not found. Make sure you added `tonconnect-manifest.json` to the root of your app or passed correct manifestUrl. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, ManifestNotFoundError.prototype);
        }
      } /**
        * Thrown when wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.
        */
      class WalletAlreadyConnectedError extends TonConnectError {
        get info() {
          return 'Wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, WalletAlreadyConnectedError.prototype);
        }
      } /**
        * Thrown when send transaction or other protocol methods called while wallet is not connected.
        */
      class WalletNotConnectedError extends TonConnectError {
        get info() {
          return 'Send transaction or other protocol methods called while wallet is not connected.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, WalletNotConnectedError.prototype);
        }
      }
      function isWalletConnectionSourceJS(value) {
        return 'jsBridgeKey' in value;
      } /**
        * Thrown when user rejects the action in the wallet.
        */
      class UserRejectsError extends TonConnectError {
        get info() {
          return 'User rejects the action in the wallet.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, UserRejectsError.prototype);
        }
      } /**
        * Thrown when request to the wallet contains errors.
        */
      class BadRequestError extends TonConnectError {
        get info() {
          return 'Request to the wallet contains errors.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, BadRequestError.prototype);
        }
      } /**
        * Thrown when app tries to send rpc request to the injected wallet while not connected.
        */
      class UnknownAppError extends TonConnectError {
        get info() {
          return 'App tries to send rpc request to the injected wallet while not connected.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, UnknownAppError.prototype);
        }
      } /**
        * Thrown when there is an attempt to connect to the injected wallet while it is not exists in the webpage.
        */
      class WalletNotInjectedError extends TonConnectError {
        get info() {
          return 'There is an attempt to connect to the injected wallet while it is not exists in the webpage.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, WalletNotInjectedError.prototype);
        }
      } /**
        * Thrown when an error occurred while fetching the wallets list.
        */
      class FetchWalletsError extends TonConnectError {
        get info() {
          return 'An error occurred while fetching the wallets list.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, FetchWalletsError.prototype);
        }
      } /**
        * Thrown when passed address is in incorrect format.
        */
      class WrongAddressError extends TonConnectError {
        get info() {
          return 'Passed address is in incorrect format.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, WrongAddressError.prototype);
        }
      } /**
        * Thrown when passed hex is in incorrect format.
        */
      class ParseHexError extends TonConnectError {
        get info() {
          return 'Passed hex is in incorrect format.';
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, ParseHexError.prototype);
        }
      } /**
        * Unhanded unknown error.
        */
      class UnknownError extends TonConnectError {
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, UnknownError.prototype);
        }
      }
      const connectEventErrorsCodes = {
        [CONNECT_EVENT_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,
        [CONNECT_EVENT_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,
        [CONNECT_EVENT_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,
        [CONNECT_EVENT_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError,
        [CONNECT_EVENT_ERROR_CODES.MANIFEST_NOT_FOUND_ERROR]: ManifestNotFoundError,
        [CONNECT_EVENT_ERROR_CODES.MANIFEST_CONTENT_ERROR]: ManifestContentErrorError
      };
      class ConnectErrorsParser {
        parseError(error) {
          let ErrorConstructor = UnknownError;
          if (error.code in connectEventErrorsCodes) {
            ErrorConstructor = connectEventErrorsCodes[error.code] || UnknownError;
          }
          return new ErrorConstructor(error.message);
        }
      }
      const connectErrorsParser = new ConnectErrorsParser();
      class RpcParser {
        isError(response) {
          return 'error' in response;
        }
      }
      const sendTransactionErrors = {
        [SEND_TRANSACTION_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,
        [SEND_TRANSACTION_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,
        [SEND_TRANSACTION_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,
        [SEND_TRANSACTION_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError
      };
      class SendTransactionParser extends RpcParser {
        convertToRpcRequest(request) {
          return {
            method: 'sendTransaction',
            params: [JSON.stringify(request)]
          };
        }
        parseAndThrowError(response) {
          let ErrorConstructor = UnknownError;
          if (response.error.code in sendTransactionErrors) {
            ErrorConstructor = sendTransactionErrors[response.error.code] || UnknownError;
          }
          throw new ErrorConstructor(response.error.message);
        }
        convertFromRpcResponse(rpcResponse) {
          return {
            boc: rpcResponse.result
          };
        }
      }
      const sendTransactionParser = new SendTransactionParser();
      class HttpBridgeGatewayStorage {
        constructor(storage, bridgeUrl) {
          this.storage = storage;
          this.storeKey = 'ton-connect-storage_http-bridge-gateway::' + bridgeUrl;
        }
        storeLastEventId(lastEventId) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.storage.setItem(this.storeKey, lastEventId);
          });
        }
        removeLastEventId() {
          return __awaiter(this, void 0, void 0, function* () {
            return this.storage.removeItem(this.storeKey);
          });
        }
        getLastEventId() {
          return __awaiter(this, void 0, void 0, function* () {
            const stored = yield this.storage.getItem(this.storeKey);
            if (!stored) {
              return null;
            }
            return stored;
          });
        }
      }
      function removeUrlLastSlash(url) {
        if (url.slice(-1) === '/') {
          return url.slice(0, -1);
        }
        return url;
      }
      function addPathToUrl(url, path) {
        return removeUrlLastSlash(url) + '/' + path;
      }
      function isTelegramUrl(link) {
        if (!link) {
          return false;
        }
        const url = new URL(link);
        return url.protocol === 'tg:' || url.hostname === 't.me';
      }
      function encodeTelegramUrlParameters(parameters) {
        return parameters.replaceAll('.', '%2E').replaceAll('-', '%2D').replaceAll('_', '%5F').replaceAll('&', '-').replaceAll('=', '__').replaceAll('%', '--');
      }
      class BridgeGateway {
        constructor(storage, bridgeUrl, sessionId, listener, errorsListener) {
          this.bridgeUrl = bridgeUrl;
          this.sessionId = sessionId;
          this.listener = listener;
          this.errorsListener = errorsListener;
          this.ssePath = 'events';
          this.postPath = 'message';
          this.heartbeatMessage = 'heartbeat';
          this.defaultTtl = 300;
          this.isClosed = false;
          this.bridgeGatewayStorage = new HttpBridgeGatewayStorage(storage, bridgeUrl);
        }
        registerSession(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const url = new URL(addPathToUrl(this.bridgeUrl, this.ssePath));
            url.searchParams.append('client_id', this.sessionId);
            const lastEventId = yield this.bridgeGatewayStorage.getLastEventId();
            if (this.isClosed) {
              return;
            }
            if (lastEventId) {
              url.searchParams.append('last_event_id', lastEventId);
            }
            this.eventSource = new EventSource(url.toString());
            return new Promise((resolve, reject) => {
              const timeout = (options === null || options === void 0 ? void 0 : options.openingDeadlineMS) ? setTimeout(() => {
                var _a;
                if (((_a = this.eventSource) === null || _a === void 0 ? void 0 : _a.readyState) !== EventSource.OPEN) {
                  reject(new TonConnectError('Bridge connection timeout'));
                  this.close();
                }
              }, options.openingDeadlineMS) : undefined;
              this.eventSource.onerror = () => reject;
              this.eventSource.onopen = () => {
                clearTimeout(timeout);
                this.isClosed = false;
                this.eventSource.onerror = this.errorsHandler.bind(this);
                this.eventSource.onmessage = this.messagesHandler.bind(this);
                resolve();
              };
            });
          });
        }
        send(message, receiver, topic, ttl) {
          return __awaiter(this, void 0, void 0, function* () {
            const url = new URL(addPathToUrl(this.bridgeUrl, this.postPath));
            url.searchParams.append('client_id', this.sessionId);
            url.searchParams.append('to', receiver);
            url.searchParams.append('ttl', (ttl || this.defaultTtl).toString());
            url.searchParams.append('topic', topic);
            const response = yield fetch(url, {
              method: 'post',
              body: Base64.encode(message)
            });
            if (!response.ok) {
              throw new TonConnectError(`Bridge send failed, status ${response.status}`);
            }
          });
        }
        pause() {
          var _a;
          (_a = this.eventSource) === null || _a === void 0 ? void 0 : _a.close();
        }
        unPause() {
          return this.registerSession();
        }
        close() {
          var _a;
          this.isClosed = true;
          (_a = this.eventSource) === null || _a === void 0 ? void 0 : _a.close();
        }
        setListener(listener) {
          this.listener = listener;
        }
        setErrorsListener(errorsListener) {
          this.errorsListener = errorsListener;
        }
        errorsHandler(e) {
          var _a, _b;
          if (!this.isClosed) {
            if (((_a = this.eventSource) === null || _a === void 0 ? void 0 : _a.readyState) === EventSource.CLOSED) {
              this.eventSource.close();
              this.registerSession();
              return;
            }
            if (((_b = this.eventSource) === null || _b === void 0 ? void 0 : _b.readyState) === EventSource.CONNECTING) {
              console.debug('[TON_CONNET_SDK_ERROR]: Bridge error', JSON.stringify(e));
              return;
            }
            this.errorsListener(e);
          }
        }
        messagesHandler(e) {
          return __awaiter(this, void 0, void 0, function* () {
            if (e.data === this.heartbeatMessage) {
              return;
            }
            yield this.bridgeGatewayStorage.storeLastEventId(e.lastEventId);
            if (!this.isClosed) {
              let bridgeIncomingMessage;
              try {
                bridgeIncomingMessage = JSON.parse(e.data);
              } catch (e) {
                throw new TonConnectError(`Bridge message parse failed, message ${e.data}`);
              }
              this.listener(bridgeIncomingMessage);
            }
          });
        }
      }
      function isPendingConnectionHttp(connection) {
        return !('connectEvent' in connection);
      }
      class BridgeConnectionStorage {
        constructor(storage) {
          this.storage = storage;
          this.storeKey = 'ton-connect-storage_bridge-connection';
        }
        storeConnection(connection) {
          return __awaiter(this, void 0, void 0, function* () {
            if (connection.type === 'injected') {
              return this.storage.setItem(this.storeKey, JSON.stringify(connection));
            }
            if (!isPendingConnectionHttp(connection)) {
              const rawSession = {
                sessionKeyPair: connection.session.sessionCrypto.stringifyKeypair(),
                walletPublicKey: connection.session.walletPublicKey,
                bridgeUrl: connection.session.bridgeUrl
              };
              const rawConnection = {
                type: 'http',
                connectEvent: connection.connectEvent,
                session: rawSession,
                lastWalletEventId: connection.lastWalletEventId,
                nextRpcRequestId: connection.nextRpcRequestId
              };
              return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection));
            }
            const rawConnection = {
              type: 'http',
              connectionSource: connection.connectionSource,
              sessionCrypto: connection.sessionCrypto.stringifyKeypair()
            };
            return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection));
          });
        }
        removeConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            return this.storage.removeItem(this.storeKey);
          });
        }
        getConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            const stored = yield this.storage.getItem(this.storeKey);
            if (!stored) {
              return null;
            }
            const connection = JSON.parse(stored);
            if (connection.type === 'injected') {
              return connection;
            }
            if ('connectEvent' in connection) {
              const sessionCrypto = new SessionCrypto(connection.session.sessionKeyPair);
              return {
                type: 'http',
                connectEvent: connection.connectEvent,
                lastWalletEventId: connection.lastWalletEventId,
                nextRpcRequestId: connection.nextRpcRequestId,
                session: {
                  sessionCrypto,
                  bridgeUrl: connection.session.bridgeUrl,
                  walletPublicKey: connection.session.walletPublicKey
                }
              };
            }
            return {
              type: 'http',
              sessionCrypto: new SessionCrypto(connection.sessionCrypto),
              connectionSource: connection.connectionSource
            };
          });
        }
        getHttpConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            if (!connection) {
              throw new TonConnectError('Trying to read HTTP connection source while nothing is stored');
            }
            if (connection.type === 'injected') {
              throw new TonConnectError('Trying to read HTTP connection source while injected connection is stored');
            }
            return connection;
          });
        }
        getHttpPendingConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            if (!connection) {
              throw new TonConnectError('Trying to read HTTP connection source while nothing is stored');
            }
            if (connection.type === 'injected') {
              throw new TonConnectError('Trying to read HTTP connection source while injected connection is stored');
            }
            if (!isPendingConnectionHttp(connection)) {
              throw new TonConnectError('Trying to read HTTP-pending connection while http connection is stored');
            }
            return connection;
          });
        }
        getInjectedConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            if (!connection) {
              throw new TonConnectError('Trying to read Injected bridge connection source while nothing is stored');
            }
            if ((connection === null || connection === void 0 ? void 0 : connection.type) === 'http') {
              throw new TonConnectError('Trying to read Injected bridge connection source while HTTP connection is stored');
            }
            return connection;
          });
        }
        storedConnectionType() {
          return __awaiter(this, void 0, void 0, function* () {
            const stored = yield this.storage.getItem(this.storeKey);
            if (!stored) {
              return null;
            }
            const connection = JSON.parse(stored);
            return connection.type;
          });
        }
        storeLastWalletEventId(id) {
          return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            if (connection && connection.type === 'http' && !isPendingConnectionHttp(connection)) {
              connection.lastWalletEventId = id;
              return this.storeConnection(connection);
            }
          });
        }
        getLastWalletEventId() {
          return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            if (connection && 'lastWalletEventId' in connection) {
              return connection.lastWalletEventId;
            }
            return undefined;
          });
        }
        increaseNextRpcRequestId() {
          return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            if (connection && 'nextRpcRequestId' in connection) {
              const lastId = connection.nextRpcRequestId || 0;
              connection.nextRpcRequestId = lastId + 1;
              return this.storeConnection(connection);
            }
          });
        }
        getNextRpcRequestId() {
          return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            if (connection && 'nextRpcRequestId' in connection) {
              return connection.nextRpcRequestId || 0;
            }
            return 0;
          });
        }
      }
      const PROTOCOL_VERSION = 2;
      function logDebug() {
        {
          try {
            for (var _len7 = arguments.length, args = new Array(_len7), _key8 = 0; _key8 < _len7; _key8++) {
              args[_key8] = arguments[_key8];
            }
            console.debug('[TON_CONNECT_SDK]', ...args);
          } catch (_a) {}
        }
      }
      function logError() {
        {
          try {
            for (var _len8 = arguments.length, args = new Array(_len8), _key9 = 0; _key9 < _len8; _key9++) {
              args[_key9] = arguments[_key9];
            }
            console.error('[TON_CONNECT_SDK]', ...args);
          } catch (_a) {}
        }
      }
      function logWarning() {
        {
          try {
            for (var _len9 = arguments.length, args = new Array(_len9), _key10 = 0; _key10 < _len9; _key10++) {
              args[_key10] = arguments[_key10];
            }
            console.warn('[TON_CONNECT_SDK]', ...args);
          } catch (_a) {}
        }
      }
      class BridgeProvider {
        constructor(storage, walletConnectionSource) {
          this.storage = storage;
          this.walletConnectionSource = walletConnectionSource;
          this.type = 'http';
          this.standardUniversalLink = 'tc://';
          this.pendingRequests = new Map();
          this.session = null;
          this.gateway = null;
          this.pendingGateways = [];
          this.listeners = [];
          this.connectionStorage = new BridgeConnectionStorage(storage);
        }
        static fromStorage(storage) {
          return __awaiter(this, void 0, void 0, function* () {
            const bridgeConnectionStorage = new BridgeConnectionStorage(storage);
            const connection = yield bridgeConnectionStorage.getHttpConnection();
            if (isPendingConnectionHttp(connection)) {
              return new BridgeProvider(storage, connection.connectionSource);
            }
            return new BridgeProvider(storage, {
              bridgeUrl: connection.session.bridgeUrl
            });
          });
        }
        connect(message) {
          this.closeGateways();
          const sessionCrypto = new SessionCrypto();
          this.session = {
            sessionCrypto,
            bridgeUrl: 'bridgeUrl' in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ''
          };
          this.connectionStorage.storeConnection({
            type: 'http',
            connectionSource: this.walletConnectionSource,
            sessionCrypto
          }).then(() => this.openGateways(sessionCrypto));
          const universalLink = 'universalLink' in this.walletConnectionSource && this.walletConnectionSource.universalLink ? this.walletConnectionSource.universalLink : this.standardUniversalLink;
          return this.generateUniversalLink(universalLink, message);
        }
        restoreConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            this.closeGateways();
            const storedConnection = yield this.connectionStorage.getHttpConnection();
            if (!storedConnection) {
              return;
            }
            if (isPendingConnectionHttp(storedConnection)) {
              this.session = {
                sessionCrypto: storedConnection.sessionCrypto,
                bridgeUrl: 'bridgeUrl' in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ''
              };
              return this.openGateways(storedConnection.sessionCrypto, {
                openingDeadlineMS: 5000
              });
            }
            if (Array.isArray(this.walletConnectionSource)) {
              throw new TonConnectError('Internal error. Connection source is array while WalletConnectionSourceHTTP was expected.');
            }
            this.session = storedConnection.session;
            this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, storedConnection.session.sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
            try {
              yield this.gateway.registerSession({
                openingDeadlineMS: 5000
              });
            } catch (e) {
              yield this.disconnect();
              return;
            }
            this.listeners.forEach(listener => listener(storedConnection.connectEvent));
          });
        }
        sendRequest(request, onRequestSent) {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (!this.gateway || !this.session || !('walletPublicKey' in this.session)) {
              throw new TonConnectError('Trying to send bridge request without session');
            }
            const id = (yield this.connectionStorage.getNextRpcRequestId()).toString();
            yield this.connectionStorage.increaseNextRpcRequestId();
            logDebug('Send http-bridge request:', Object.assign(Object.assign({}, request), {
              id
            }));
            const encodedRequest = this.session.sessionCrypto.encrypt(JSON.stringify(Object.assign(Object.assign({}, request), {
              id
            })), hexToByteArray(this.session.walletPublicKey));
            try {
              yield this.gateway.send(encodedRequest, this.session.walletPublicKey, request.method);
              onRequestSent === null || onRequestSent === void 0 ? void 0 : onRequestSent();
              this.pendingRequests.set(id.toString(), resolve);
            } catch (e) {
              reject(e);
            }
          }));
        }
        closeConnection() {
          this.closeGateways();
          this.listeners = [];
          this.session = null;
          this.gateway = null;
        }
        disconnect() {
          return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {
              let called = false;
              const onRequestSent = () => {
                called = true;
                this.removeBridgeAndSession().then(resolve);
              };
              try {
                yield this.sendRequest({
                  method: 'disconnect',
                  params: []
                }, onRequestSent);
              } catch (e) {
                console.debug(e);
                if (!called) {
                  this.removeBridgeAndSession().then(resolve);
                }
              }
            }));
          });
        }
        listen(callback) {
          this.listeners.push(callback);
          return () => this.listeners = this.listeners.filter(listener => listener !== callback);
        }
        pause() {
          var _a;
          (_a = this.gateway) === null || _a === void 0 ? void 0 : _a.pause();
          this.pendingGateways.forEach(bridge => bridge.pause());
        }
        unPause() {
          return __awaiter(this, void 0, void 0, function* () {
            const promises = this.pendingGateways.map(bridge => bridge.unPause());
            if (this.gateway) {
              promises.push(this.gateway.unPause());
            }
            yield Promise.all(promises);
          });
        }
        pendingGatewaysListener(gateway, bridgeUrl, bridgeIncomingMessage) {
          return __awaiter(this, void 0, void 0, function* () {
            if (!this.pendingGateways.includes(gateway)) {
              gateway.close();
              return;
            }
            this.closeGateways({
              except: gateway
            });
            this.session.bridgeUrl = bridgeUrl;
            this.gateway = gateway;
            this.gateway.setErrorsListener(this.gatewayErrorsListener.bind(this));
            this.gateway.setListener(this.gatewayListener.bind(this));
            return this.gatewayListener(bridgeIncomingMessage);
          });
        }
        gatewayListener(bridgeIncomingMessage) {
          return __awaiter(this, void 0, void 0, function* () {
            const walletMessage = JSON.parse(this.session.sessionCrypto.decrypt(Base64.decode(bridgeIncomingMessage.message).toUint8Array(), hexToByteArray(bridgeIncomingMessage.from)));
            logDebug('Wallet message received:', walletMessage);
            if (!('event' in walletMessage)) {
              const id = walletMessage.id.toString();
              const resolve = this.pendingRequests.get(id);
              if (!resolve) {
                logDebug(`Response id ${id} doesn't match any request's id`);
                return;
              }
              resolve(walletMessage);
              this.pendingRequests.delete(id);
              return;
            }
            if (walletMessage.id !== undefined) {
              const lastId = yield this.connectionStorage.getLastWalletEventId();
              if (lastId !== undefined && walletMessage.id <= lastId) {
                logError(`Received event id (=${walletMessage.id}) must be greater than stored last wallet event id (=${lastId}) `);
                return;
              }
              if (walletMessage.event !== 'connect') {
                yield this.connectionStorage.storeLastWalletEventId(walletMessage.id);
              }
            } // `this.listeners` might be modified in the event handler
            const listeners = this.listeners;
            if (walletMessage.event === 'connect') {
              yield this.updateSession(walletMessage, bridgeIncomingMessage.from);
            }
            if (walletMessage.event === 'disconnect') {
              yield this.removeBridgeAndSession();
            }
            listeners.forEach(listener => listener(walletMessage));
          });
        }
        gatewayErrorsListener(e) {
          return __awaiter(this, void 0, void 0, function* () {
            throw new TonConnectError(`Bridge error ${JSON.stringify(e)}`);
          });
        }
        updateSession(connectEvent, walletPublicKey) {
          return __awaiter(this, void 0, void 0, function* () {
            this.session = Object.assign(Object.assign({}, this.session), {
              walletPublicKey
            });
            const tonAddrItem = connectEvent.payload.items.find(item => item.name === 'ton_addr');
            const connectEventToSave = Object.assign(Object.assign({}, connectEvent), {
              payload: Object.assign(Object.assign({}, connectEvent.payload), {
                items: [tonAddrItem]
              })
            });
            yield this.connectionStorage.storeConnection({
              type: 'http',
              session: this.session,
              lastWalletEventId: connectEvent.id,
              connectEvent: connectEventToSave,
              nextRpcRequestId: 0
            });
          });
        }
        removeBridgeAndSession() {
          return __awaiter(this, void 0, void 0, function* () {
            this.closeConnection();
            yield this.connectionStorage.removeConnection();
          });
        }
        generateUniversalLink(universalLink, message) {
          if (isTelegramUrl(universalLink)) {
            return this.generateTGUniversalLink(universalLink, message);
          }
          return this.generateRegularUniversalLink(universalLink, message);
        }
        generateRegularUniversalLink(universalLink, message) {
          const url = new URL(universalLink);
          url.searchParams.append('v', PROTOCOL_VERSION.toString());
          url.searchParams.append('id', this.session.sessionCrypto.sessionId);
          url.searchParams.append('r', JSON.stringify(message));
          return url.toString();
        }
        generateTGUniversalLink(universalLink, message) {
          const urlToWrap = this.generateRegularUniversalLink('about:blank', message);
          const linkParams = urlToWrap.split('?')[1];
          const startapp = 'tonconnect-' + encodeTelegramUrlParameters(linkParams); // TODO: Remove this line after all dApps and the wallets-list.json have been updated
          const updatedUniversalLink = this.convertToDirectLink(universalLink);
          const url = new URL(updatedUniversalLink);
          url.searchParams.append('startapp', startapp);
          return url.toString();
        } // TODO: Remove this method after all dApps and the wallets-list.json have been updated
        convertToDirectLink(universalLink) {
          const url = new URL(universalLink);
          if (url.searchParams.has('attach')) {
            url.searchParams.delete('attach');
            url.pathname += '/start';
          }
          return url.toString();
        }
        openGateways(sessionCrypto, options) {
          return __awaiter(this, void 0, void 0, function* () {
            if (Array.isArray(this.walletConnectionSource)) {
              this.pendingGateways = this.walletConnectionSource.map(source => {
                const gateway = new BridgeGateway(this.storage, source.bridgeUrl, sessionCrypto.sessionId, () => {}, e => {
                  console.error(e);
                });
                gateway.setListener(message => this.pendingGatewaysListener(gateway, source.bridgeUrl, message));
                return gateway;
              });
              yield Promise.allSettled(this.pendingGateways.map(bridge => bridge.registerSession(options)));
              return;
            } else {
              this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
              return this.gateway.registerSession(options);
            }
          });
        }
        closeGateways(options) {
          var _a;
          (_a = this.gateway) === null || _a === void 0 ? void 0 : _a.close();
          this.pendingGateways.filter(item => item !== (options === null || options === void 0 ? void 0 : options.except)).forEach(bridge => bridge.close());
          this.pendingGateways = [];
        }
      }
      function hasProperty(value, propertyKey) {
        return hasProperties(value, [propertyKey]);
      }
      function hasProperties(value, propertyKeys) {
        if (!value || typeof value !== 'object') {
          return false;
        }
        return propertyKeys.every(propertyKey => propertyKey in value);
      }
      function isJSBridgeWithMetadata(value) {
        try {
          if (!hasProperty(value, 'tonconnect') || !hasProperty(value.tonconnect, 'walletInfo')) {
            return false;
          }
          return hasProperties(value.tonconnect.walletInfo, ['name', 'app_name', 'image', 'about_url', 'platforms']);
        } catch (_a) {
          return false;
        }
      } /**
        * In memory storage like localStorage, but without persistence.
        * Uses as a fallback for localStorage in Safari's private mode.
        */
      class InMemoryStorage {
        constructor() {
          this.storage = {};
        }
        static getInstance() {
          if (!InMemoryStorage.instance) {
            InMemoryStorage.instance = new InMemoryStorage();
          }
          return InMemoryStorage.instance;
        }
        get length() {
          return Object.keys(this.storage).length;
        }
        clear() {
          this.storage = {};
        }
        getItem(key) {
          var _a;
          return (_a = this.storage[key]) !== null && _a !== void 0 ? _a : null;
        }
        key(index) {
          var _a;
          const keys = Object.keys(this.storage);
          if (index < 0 || index >= keys.length) {
            return null;
          }
          return (_a = keys[index]) !== null && _a !== void 0 ? _a : null;
        }
        removeItem(key) {
          delete this.storage[key];
        }
        setItem(key, value) {
          this.storage[key] = value;
        }
      }
      function getWindow() {
        if (typeof window === 'undefined') {
          return undefined;
        }
        return window;
      } /**
        * The function try to get window keys, if it is not available it returns empty array.
        * As an example, for Safari's private mode it returns empty array, because the browser does not allow to get window keys.
        */
      function tryGetWindowKeys() {
        const window = getWindow();
        if (!window) {
          return [];
        }
        try {
          return Object.keys(window);
        } catch (_a) {
          return [];
        }
      }
      function getDocument() {
        if (typeof document === 'undefined') {
          return undefined;
        }
        return document;
      }
      function getWebPageManifest() {
        var _a;
        const origin = (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.location.origin;
        if (origin) {
          return origin + '/tonconnect-manifest.json';
        }
        return '';
      } /**
        * Returns `localStorage` if it is available. In Safari's private mode, it returns `InMemoryStorage`. In Node.js, it throws an error.
        */
      function tryGetLocalStorage() {
        if (isLocalStorageAvailable()) {
          return localStorage;
        }
        if (isNodeJs()) {
          throw new TonConnectError('`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector');
        }
        return InMemoryStorage.getInstance();
      } /**
        * Checks if `localStorage` is available.
        */
      function isLocalStorageAvailable() {
        // We use a try/catch block because Safari's private mode throws an error when attempting to access localStorage.
        try {
          return typeof localStorage !== 'undefined';
        } catch (_a) {
          return false;
        }
      } /**
        * Checks if the environment is Node.js.
        */
      function isNodeJs() {
        return typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
      }
      class InjectedProvider {
        constructor(storage, injectedWalletKey) {
          this.injectedWalletKey = injectedWalletKey;
          this.type = 'injected';
          this.unsubscribeCallback = null;
          this.listenSubscriptions = false;
          this.listeners = [];
          const window = InjectedProvider.window;
          if (!InjectedProvider.isWindowContainsWallet(window, injectedWalletKey)) {
            throw new WalletNotInjectedError();
          }
          this.connectionStorage = new BridgeConnectionStorage(storage);
          this.injectedWallet = window[injectedWalletKey].tonconnect;
        }
        static fromStorage(storage) {
          return __awaiter(this, void 0, void 0, function* () {
            const bridgeConnectionStorage = new BridgeConnectionStorage(storage);
            const connection = yield bridgeConnectionStorage.getInjectedConnection();
            return new InjectedProvider(storage, connection.jsBridgeKey);
          });
        }
        static isWalletInjected(injectedWalletKey) {
          return InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey);
        }
        static isInsideWalletBrowser(injectedWalletKey) {
          if (InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey)) {
            return this.window[injectedWalletKey].tonconnect.isWalletBrowser;
          }
          return false;
        }
        static getCurrentlyInjectedWallets() {
          if (!this.window) {
            return [];
          }
          const windowKeys = tryGetWindowKeys();
          const wallets = windowKeys.filter(_ref9 => {
            let [_, value] = _ref9;
            return isJSBridgeWithMetadata(value);
          });
          return wallets.map(_ref10 => {
            let [jsBridgeKey, wallet] = _ref10;
            return {
              name: wallet.tonconnect.walletInfo.name,
              appName: wallet.tonconnect.walletInfo.app_name,
              aboutUrl: wallet.tonconnect.walletInfo.about_url,
              imageUrl: wallet.tonconnect.walletInfo.image,
              tondns: wallet.tonconnect.walletInfo.tondns,
              jsBridgeKey,
              injected: true,
              embedded: wallet.tonconnect.isWalletBrowser,
              platforms: wallet.tonconnect.walletInfo.platforms
            };
          });
        }
        static isWindowContainsWallet(window, injectedWalletKey) {
          return !!window && injectedWalletKey in window && typeof window[injectedWalletKey] === 'object' && 'tonconnect' in window[injectedWalletKey];
        }
        connect(message) {
          this._connect(PROTOCOL_VERSION, message);
        }
        restoreConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            try {
              logDebug(`Injected Provider restoring connection...`);
              const connectEvent = yield this.injectedWallet.restoreConnection();
              logDebug('Injected Provider restoring connection response', connectEvent);
              if (connectEvent.event === 'connect') {
                this.makeSubscriptions();
                this.listeners.forEach(listener => listener(connectEvent));
              } else {
                yield this.connectionStorage.removeConnection();
              }
            } catch (e) {
              yield this.connectionStorage.removeConnection();
              console.error(e);
            }
          });
        }
        closeConnection() {
          if (this.listenSubscriptions) {
            this.injectedWallet.disconnect();
          }
          this.closeAllListeners();
        }
        disconnect() {
          return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
              const onRequestSent = () => {
                this.closeAllListeners();
                this.connectionStorage.removeConnection().then(resolve);
              };
              try {
                this.injectedWallet.disconnect();
                onRequestSent();
              } catch (e) {
                logDebug(e);
                this.sendRequest({
                  method: 'disconnect',
                  params: []
                }, onRequestSent);
              }
            });
          });
        }
        closeAllListeners() {
          var _a;
          this.listenSubscriptions = false;
          this.listeners = [];
          (_a = this.unsubscribeCallback) === null || _a === void 0 ? void 0 : _a.call(this);
        }
        listen(eventsCallback) {
          this.listeners.push(eventsCallback);
          return () => this.listeners = this.listeners.filter(listener => listener !== eventsCallback);
        }
        sendRequest(request, onRequestSent) {
          return __awaiter(this, void 0, void 0, function* () {
            const id = (yield this.connectionStorage.getNextRpcRequestId()).toString();
            yield this.connectionStorage.increaseNextRpcRequestId();
            logDebug('Send injected-bridge request:', Object.assign(Object.assign({}, request), {
              id
            }));
            const result = this.injectedWallet.send(Object.assign(Object.assign({}, request), {
              id
            }));
            result.then(response => logDebug('Wallet message received:', response));
            onRequestSent === null || onRequestSent === void 0 ? void 0 : onRequestSent();
            return result;
          });
        }
        _connect(protocolVersion, message) {
          return __awaiter(this, void 0, void 0, function* () {
            try {
              logDebug(`Injected Provider connect request: protocolVersion: ${protocolVersion}, message:`, message);
              const connectEvent = yield this.injectedWallet.connect(protocolVersion, message);
              logDebug('Injected Provider connect response:', connectEvent);
              if (connectEvent.event === 'connect') {
                yield this.updateSession();
                this.makeSubscriptions();
              }
              this.listeners.forEach(listener => listener(connectEvent));
            } catch (e) {
              logDebug(e);
              const connectEventError = {
                event: 'connect_error',
                payload: {
                  code: 0,
                  message: e === null || e === void 0 ? void 0 : e.toString()
                }
              };
              this.listeners.forEach(listener => listener(connectEventError));
            }
          });
        }
        makeSubscriptions() {
          this.listenSubscriptions = true;
          this.unsubscribeCallback = this.injectedWallet.listen(e => {
            logDebug('Wallet message received:', e);
            if (this.listenSubscriptions) {
              this.listeners.forEach(listener => listener(e));
            }
            if (e.event === 'disconnect') {
              this.disconnect();
            }
          });
        }
        updateSession() {
          return this.connectionStorage.storeConnection({
            type: 'injected',
            jsBridgeKey: this.injectedWalletKey,
            nextRpcRequestId: 0
          });
        }
      }
      InjectedProvider.window = getWindow(); /**
                                             * Default storage to save protocol data, uses `localStorage` if it is available. In Safari's private mode, it uses `InMemoryStorage`. In Node.js, it throws an error.
                                             */
      class DefaultStorage {
        constructor() {
          this.localStorage = tryGetLocalStorage();
        }
        getItem(key) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.localStorage.getItem(key);
          });
        }
        removeItem(key) {
          return __awaiter(this, void 0, void 0, function* () {
            this.localStorage.removeItem(key);
          });
        }
        setItem(key, value) {
          return __awaiter(this, void 0, void 0, function* () {
            this.localStorage.setItem(key, value);
          });
        }
      } /**
        * Checks if `WalletInfo` is `WalletInfoInjectable` and `WalletInfo` is injected to the current webpage (`walletInfo.injected === true`).
        * @param value WalletInfo to check.
        */
      function isWalletInfoCurrentlyInjected(value) {
        return isWalletInfoInjectable(value) && value.injected;
      } /**
        * Checks if `WalletInfo` is `WalletInfoInjectable` and dApp is opened inside this wallet's browser.
        * @param value WalletInfo to check.
        */
      function isWalletInfoCurrentlyEmbedded(value) {
        return isWalletInfoCurrentlyInjected(value) && value.embedded;
      } /**
        * Checks if `WalletInfo` is `WalletInfoInjected`, but doesn't check if it is injected to the page or not.
        * @param value WalletInfo to check.
        */
      function isWalletInfoInjectable(value) {
        return 'jsBridgeKey' in value;
      } /**
        * Checks if `WalletInfo` is `WalletInfoRemote`.
        * @param value WalletInfo to check.
        */
      function isWalletInfoRemote(value) {
        return 'bridgeUrl' in value;
      }
      const FALLBACK_WALLETS_LIST = [{
        app_name: 'telegram-wallet',
        name: 'Wallet',
        image: 'https://wallet.tg/images/logo-288.png',
        about_url: 'https://wallet.tg/',
        universal_url: 'https://t.me/wallet?attach=wallet',
        bridge: [{
          type: 'sse',
          url: 'https://bridge.tonapi.io/bridge'
        }],
        platforms: ['ios', 'android', 'macos', 'windows', 'linux']
      }, {
        app_name: 'tonkeeper',
        name: 'Tonkeeper',
        image: 'https://tonkeeper.com/assets/tonconnect-icon.png',
        tondns: 'tonkeeper.ton',
        about_url: 'https://tonkeeper.com',
        universal_url: 'https://app.tonkeeper.com/ton-connect',
        deepLink: 'tonkeeper-tc://',
        bridge: [{
          type: 'sse',
          url: 'https://bridge.tonapi.io/bridge'
        }, {
          type: 'js',
          key: 'tonkeeper'
        }],
        platforms: ['ios', 'android', 'chrome', 'firefox', 'macos']
      }, {
        app_name: 'openmask',
        name: 'OpenMask',
        image: 'https://raw.githubusercontent.com/OpenProduct/openmask-extension/main/public/openmask-logo-288.png',
        about_url: 'https://www.openmask.app/',
        bridge: [{
          type: 'js',
          key: 'openmask'
        }],
        platforms: ['chrome']
      }, {
        app_name: 'mytonwallet',
        name: 'MyTonWallet',
        image: 'https://mytonwallet.io/icon-256.png',
        about_url: 'https://mytonwallet.io',
        universal_url: 'https://connect.mytonwallet.org',
        bridge: [{
          type: 'js',
          key: 'mytonwallet'
        }, {
          type: 'sse',
          url: 'https://tonconnectbridge.mytonwallet.org/bridge/'
        }],
        platforms: ['chrome', 'windows', 'macos', 'linux']
      }, {
        app_name: 'tonhub',
        name: 'Tonhub',
        image: 'https://tonhub.com/tonconnect_logo.png',
        about_url: 'https://tonhub.com',
        universal_url: 'https://tonhub.com/ton-connect',
        bridge: [{
          type: 'js',
          key: 'tonhub'
        }, {
          type: 'sse',
          url: 'https://connect.tonhubapi.com/tonconnect'
        }],
        platforms: ['ios', 'android']
      }, {
        app_name: 'tonflow',
        name: 'TonFlow',
        image: 'https://tonflow.net/assets/images/tonflow_ico_192.png',
        about_url: 'https://tonflow.net',
        bridge: [{
          type: 'js',
          key: 'tonflow'
        }],
        platforms: ['chrome']
      }, {
        app_name: 'dewallet',
        name: 'DeWallet',
        image: 'https://app.delabwallet.com/logo_black.png',
        about_url: 'https://delabwallet.com',
        bridge: [{
          type: 'js',
          key: 'dewallet'
        }],
        platforms: ['chrome']
      }, {
        app_name: 'xtonwallet',
        name: 'XTONWallet',
        image: 'https://xtonwallet.com/assets/img/icon-256-back.png',
        about_url: 'https://xtonwallet.com',
        bridge: [{
          type: 'js',
          key: 'xtonwallet'
        }],
        platforms: ['chrome', 'firefox']
      }, {
        app_name: 'tonwallet',
        name: 'TON Wallet',
        image: 'https://wallet.ton.org/assets/ui/qr-logo.png',
        about_url: 'https://chrome.google.com/webstore/detail/ton-wallet/nphplpgoakhhjchkkhmiggakijnkhfnd',
        bridge: [{
          type: 'js',
          key: 'tonwallet'
        }],
        platforms: ['chrome']
      }];
      class WalletsListManager {
        constructor(options) {
          this.walletsListCache = null;
          this.walletsListCacheCreationTimestamp = null;
          this.walletsListSource = 'https://raw.githubusercontent.com/ton-blockchain/wallets-list/main/wallets-v2.json';
          if (options === null || options === void 0 ? void 0 : options.walletsListSource) {
            this.walletsListSource = options.walletsListSource;
          }
          if (options === null || options === void 0 ? void 0 : options.cacheTTLMs) {
            this.cacheTTLMs = options.cacheTTLMs;
          }
        }
        getWallets() {
          return __awaiter(this, void 0, void 0, function* () {
            if (this.cacheTTLMs && this.walletsListCacheCreationTimestamp && Date.now() > this.walletsListCacheCreationTimestamp + this.cacheTTLMs) {
              this.walletsListCache = null;
            }
            if (!this.walletsListCache) {
              this.walletsListCache = this.fetchWalletsList();
              this.walletsListCache.then(() => {
                this.walletsListCacheCreationTimestamp = Date.now();
              }).catch(() => {
                this.walletsListCache = null;
                this.walletsListCacheCreationTimestamp = null;
              });
            }
            return this.walletsListCache;
          });
        }
        getEmbeddedWallet() {
          return __awaiter(this, void 0, void 0, function* () {
            const walletsList = yield this.getWallets();
            const embeddedWallets = walletsList.filter(isWalletInfoCurrentlyEmbedded);
            if (embeddedWallets.length !== 1) {
              return null;
            }
            return embeddedWallets[0];
          });
        }
        fetchWalletsList() {
          return __awaiter(this, void 0, void 0, function* () {
            let walletsList = [];
            try {
              const walletsResponse = yield fetch(this.walletsListSource);
              walletsList = yield walletsResponse.json();
              if (!Array.isArray(walletsList)) {
                throw new FetchWalletsError('Wrong wallets list format, wallets list must be an array.');
              }
              const wrongFormatWallets = walletsList.filter(wallet => !this.isCorrectWalletConfigDTO(wallet));
              if (wrongFormatWallets.length) {
                logError(`Wallet(s) ${wrongFormatWallets.map(wallet => wallet.name).join(', ')} config format is wrong. They were removed from the wallets list.`);
                walletsList = walletsList.filter(wallet => this.isCorrectWalletConfigDTO(wallet));
              }
            } catch (e) {
              logError(e);
              walletsList = FALLBACK_WALLETS_LIST;
            }
            let currentlyInjectedWallets = [];
            try {
              currentlyInjectedWallets = InjectedProvider.getCurrentlyInjectedWallets();
            } catch (e) {
              logError(e);
            }
            return this.mergeWalletsLists(this.walletConfigDTOListToWalletConfigList(walletsList), currentlyInjectedWallets);
          });
        }
        walletConfigDTOListToWalletConfigList(walletConfigDTO) {
          return walletConfigDTO.map(walletConfigDTO => {
            const walletConfigBase = {
              name: walletConfigDTO.name,
              appName: walletConfigDTO.app_name,
              imageUrl: walletConfigDTO.image,
              aboutUrl: walletConfigDTO.about_url,
              tondns: walletConfigDTO.tondns,
              platforms: walletConfigDTO.platforms
            };
            const walletConfig = walletConfigBase;
            walletConfigDTO.bridge.forEach(bridge => {
              if (bridge.type === 'sse') {
                walletConfig.bridgeUrl = bridge.url;
                walletConfig.universalLink = walletConfigDTO.universal_url;
                walletConfig.deepLink = walletConfigDTO.deepLink;
              }
              if (bridge.type === 'js') {
                const jsBridgeKey = bridge.key;
                walletConfig.jsBridgeKey = jsBridgeKey;
                walletConfig.injected = InjectedProvider.isWalletInjected(jsBridgeKey);
                walletConfig.embedded = InjectedProvider.isInsideWalletBrowser(jsBridgeKey);
              }
            });
            return walletConfig;
          });
        }
        mergeWalletsLists(list1, list2) {
          const names = new Set(list1.concat(list2).map(item => item.name));
          return [...names.values()].map(name => {
            const list1Item = list1.find(item => item.name === name);
            const list2Item = list2.find(item => item.name === name);
            return Object.assign(Object.assign({}, list1Item && Object.assign({}, list1Item)), list2Item && Object.assign({}, list2Item));
          });
        } // eslint-disable-next-line complexity
        isCorrectWalletConfigDTO(value) {
          if (!value || !(typeof value === 'object')) {
            return false;
          }
          const containsName = ('name' in value);
          const containsAppName = ('app_name' in value);
          const containsImage = ('image' in value);
          const containsAbout = ('about_url' in value);
          const containsPlatforms = ('platforms' in value);
          if (!containsName || !containsImage || !containsAbout || !containsPlatforms || !containsAppName) {
            return false;
          }
          if (!value.platforms || !Array.isArray(value.platforms) || !value.platforms.length) {
            return false;
          }
          if (!('bridge' in value) || !Array.isArray(value.bridge) || !value.bridge.length) {
            return false;
          }
          const bridge = value.bridge;
          if (bridge.some(item => !item || typeof item !== 'object' || !('type' in item))) {
            return false;
          }
          const sseBridge = bridge.find(item => item.type === 'sse');
          if (sseBridge) {
            if (!('url' in sseBridge) || !sseBridge.url || !value.universal_url) {
              return false;
            }
          }
          const jsBridge = bridge.find(item => item.type === 'js');
          if (jsBridge) {
            if (!('key' in jsBridge) || !jsBridge.key) {
              return false;
            }
          }
          return true;
        }
      } /**
        * Thrown when wallet doesn't support requested feature method.
        */
      class WalletNotSupportFeatureError extends TonConnectError {
        get info() {
          return "Wallet doesn't support requested feature method.";
        }
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, WalletNotSupportFeatureError.prototype);
        }
      }
      function checkSendTransactionSupport(features, options) {
        const supportsDeprecatedSendTransactionFeature = features.includes('SendTransaction');
        const sendTransactionFeature = features.find(feature => feature && typeof feature === 'object' && feature.name === 'SendTransaction');
        if (!supportsDeprecatedSendTransactionFeature && !sendTransactionFeature) {
          throw new WalletNotSupportFeatureError("Wallet doesn't support SendTransaction feature.");
        }
        if (sendTransactionFeature && sendTransactionFeature.maxMessages !== undefined) {
          if (sendTransactionFeature.maxMessages < options.requiredMessagesNumber) {
            throw new WalletNotSupportFeatureError(`Wallet is not able to handle such SendTransaction request. Max support messages number is ${sendTransactionFeature.maxMessages}, but ${options.requiredMessagesNumber} is required.`);
          }
          return;
        }
        logWarning("Connected wallet didn't provide information about max allowed messages in the SendTransaction request. Request may be rejected by the wallet.");
      }
      class TonConnect {
        constructor(options) {
          this.walletsList = new WalletsListManager();
          this._wallet = null;
          this.provider = null;
          this.statusChangeSubscriptions = [];
          this.statusChangeErrorSubscriptions = [];
          this.dappSettings = {
            manifestUrl: (options === null || options === void 0 ? void 0 : options.manifestUrl) || getWebPageManifest(),
            storage: (options === null || options === void 0 ? void 0 : options.storage) || new DefaultStorage()
          };
          this.walletsList = new WalletsListManager({
            walletsListSource: options === null || options === void 0 ? void 0 : options.walletsListSource,
            cacheTTLMs: options === null || options === void 0 ? void 0 : options.walletsListCacheTTLMs
          });
          if (!this.dappSettings.manifestUrl) {
            throw new DappMetadataError('Dapp tonconnect-manifest.json must be specified if window.location.origin is undefined. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest');
          }
          this.bridgeConnectionStorage = new BridgeConnectionStorage(this.dappSettings.storage);
          if (!(options === null || options === void 0 ? void 0 : options.disableAutoPauseConnection)) {
            this.addWindowFocusAndBlurSubscriptions();
          }
        } /**
          * Returns available wallets list.
          */
        static getWallets() {
          return this.walletsList.getWallets();
        } /**
          * Shows if the wallet is connected right now.
          */
        get connected() {
          return this._wallet !== null;
        } /**
          * Current connected account or null if no account is connected.
          */
        get account() {
          var _a;
          return ((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.account) || null;
        } /**
          * Current connected wallet or null if no account is connected.
          */
        get wallet() {
          return this._wallet;
        }
        set wallet(value) {
          this._wallet = value;
          this.statusChangeSubscriptions.forEach(callback => callback(this._wallet));
        } /**
          * Returns available wallets list.
          */
        getWallets() {
          return this.walletsList.getWallets();
        } /**
          * Allows to subscribe to connection status changes and handle connection errors.
          * @param callback will be called after connections status changes with actual wallet or null.
          * @param errorsHandler (optional) will be called with some instance of TonConnectError when connect error is received.
          * @returns unsubscribe callback.
          */
        onStatusChange(callback, errorsHandler) {
          this.statusChangeSubscriptions.push(callback);
          if (errorsHandler) {
            this.statusChangeErrorSubscriptions.push(errorsHandler);
          }
          return () => {
            this.statusChangeSubscriptions = this.statusChangeSubscriptions.filter(item => item !== callback);
            if (errorsHandler) {
              this.statusChangeErrorSubscriptions = this.statusChangeErrorSubscriptions.filter(item => item !== errorsHandler);
            }
          };
        }
        connect(wallet, request) {
          var _a;
          if (this.connected) {
            throw new WalletAlreadyConnectedError();
          }
          (_a = this.provider) === null || _a === void 0 ? void 0 : _a.closeConnection();
          this.provider = this.createProvider(wallet);
          return this.provider.connect(this.createConnectRequest(request));
        } /**
          * Try to restore existing session and reconnect to the corresponding wallet. Call it immediately when your app is loaded.
          */
        restoreConnection() {
          return __awaiter(this, void 0, void 0, function* () {
            const [bridgeConnectionType, embeddedWallet] = yield Promise.all([this.bridgeConnectionStorage.storedConnectionType(), this.walletsList.getEmbeddedWallet()]);
            try {
              switch (bridgeConnectionType) {
                case 'http':
                  this.provider = yield BridgeProvider.fromStorage(this.dappSettings.storage);
                  break;
                case 'injected':
                  this.provider = yield InjectedProvider.fromStorage(this.dappSettings.storage);
                  break;
                default:
                  if (embeddedWallet) {
                    this.provider = yield this.createProvider(embeddedWallet);
                  } else {
                    return;
                  }
              }
            } catch (_a) {
              yield this.bridgeConnectionStorage.removeConnection();
              this.provider = null;
              return;
            }
            this.provider.listen(this.walletEventsListener.bind(this));
            return this.provider.restoreConnection();
          });
        } /**
          * Asks connected wallet to sign and send the transaction.
          * @param transaction transaction to send.
          * @param onRequestSent (optional) will be called after the transaction is sent to the wallet.
          * @returns signed transaction boc that allows you to find the transaction in the blockchain.
          * If user rejects transaction, method will throw the corresponding error.
          */
        sendTransaction(transaction, onRequestSent) {
          return __awaiter(this, void 0, void 0, function* () {
            this.checkConnection();
            checkSendTransactionSupport(this.wallet.device.features, {
              requiredMessagesNumber: transaction.messages.length
            });
            const {
                validUntil
              } = transaction,
              tx = __rest(transaction, ["validUntil"]);
            const from = transaction.from || this.account.address;
            const network = transaction.network || this.account.chain;
            const response = yield this.provider.sendRequest(sendTransactionParser.convertToRpcRequest(Object.assign(Object.assign({}, tx), {
              valid_until: validUntil,
              from,
              network
            })), onRequestSent);
            if (sendTransactionParser.isError(response)) {
              return sendTransactionParser.parseAndThrowError(response);
            }
            return sendTransactionParser.convertFromRpcResponse(response);
          });
        } /**
          * Disconnect form thw connected wallet and drop current session.
          */
        disconnect() {
          return __awaiter(this, void 0, void 0, function* () {
            if (!this.connected) {
              throw new WalletNotConnectedError();
            }
            yield this.provider.disconnect();
            this.onWalletDisconnected();
          });
        } /**
          * Pause bridge HTTP connection. Might be helpful, if you want to pause connections while browser tab is unfocused,
          * or if you use SDK with NodeJS and want to save server resources.
          */
        pauseConnection() {
          var _a;
          if (((_a = this.provider) === null || _a === void 0 ? void 0 : _a.type) !== 'http') {
            return;
          }
          this.provider.pause();
        } /**
          * Unpause bridge HTTP connection if it is paused.
          */
        unPauseConnection() {
          var _a;
          if (((_a = this.provider) === null || _a === void 0 ? void 0 : _a.type) !== 'http') {
            return Promise.resolve();
          }
          return this.provider.unPause();
        }
        addWindowFocusAndBlurSubscriptions() {
          const document = getDocument();
          if (!document) {
            return;
          }
          try {
            document.addEventListener('visibilitychange', () => {
              if (document.hidden) {
                this.pauseConnection();
              } else {
                this.unPauseConnection();
              }
            });
          } catch (e) {
            console.error('Cannot subscribe to the document.visibilitychange: ', e);
          }
        }
        createProvider(wallet) {
          let provider;
          if (!Array.isArray(wallet) && isWalletConnectionSourceJS(wallet)) {
            provider = new InjectedProvider(this.dappSettings.storage, wallet.jsBridgeKey);
          } else {
            provider = new BridgeProvider(this.dappSettings.storage, wallet);
          }
          provider.listen(this.walletEventsListener.bind(this));
          return provider;
        }
        walletEventsListener(e) {
          switch (e.event) {
            case 'connect':
              this.onWalletConnected(e.payload);
              break;
            case 'connect_error':
              this.onWalletConnectError(e.payload);
              break;
            case 'disconnect':
              this.onWalletDisconnected();
          }
        }
        onWalletConnected(connectEvent) {
          const tonAccountItem = connectEvent.items.find(item => item.name === 'ton_addr');
          const tonProofItem = connectEvent.items.find(item => item.name === 'ton_proof');
          if (!tonAccountItem) {
            throw new TonConnectError('ton_addr connection item was not found');
          }
          const wallet = {
            device: connectEvent.device,
            provider: this.provider.type,
            account: {
              address: tonAccountItem.address,
              chain: tonAccountItem.network,
              walletStateInit: tonAccountItem.walletStateInit,
              publicKey: tonAccountItem.publicKey
            }
          };
          if (tonProofItem) {
            wallet.connectItems = {
              tonProof: tonProofItem
            };
          }
          this.wallet = wallet;
        }
        onWalletConnectError(connectEventError) {
          const error = connectErrorsParser.parseError(connectEventError);
          this.statusChangeErrorSubscriptions.forEach(errorsHandler => errorsHandler(error));
          console.debug(error);
          if (error instanceof ManifestNotFoundError || error instanceof ManifestContentErrorError) {
            console.error(error);
            throw error;
          }
        }
        onWalletDisconnected() {
          this.wallet = null;
        }
        checkConnection() {
          if (!this.connected) {
            throw new WalletNotConnectedError();
          }
        }
        createConnectRequest(request) {
          const items = [{
            name: 'ton_addr'
          }];
          if (request === null || request === void 0 ? void 0 : request.tonProof) {
            items.push({
              name: 'ton_proof',
              payload: request.tonProof
            });
          }
          return {
            manifestUrl: this.dappSettings.manifestUrl,
            items
          };
        }
      }
      TonConnect.walletsList = new WalletsListManager(); /**
                                                         * Check if specified wallet is injected and available to use with the app.
                                                         * @param walletJSKey target wallet's js bridge key.
                                                         */
      TonConnect.isWalletInjected = walletJSKey => InjectedProvider.isWalletInjected(walletJSKey); /**
                                                                                                   * Check if the app is opened inside specified wallet's browser.
                                                                                                   * @param walletJSKey target wallet's js bridge key.
                                                                                                   */
      TonConnect.isInsideWalletBrowser = walletJSKey => InjectedProvider.isInsideWalletBrowser(walletJSKey);
      const noBounceableTag = 0x51;
      const testOnlyTag = 0x80; /**
                                * Converts raw TON address to no-bounceable user-friendly format. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}
                                * @param hexAddress raw TON address formatted as "0:<hex string without 0x>".
                                * @param [testOnly=false] convert address to test-only form. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}
                                */
      function toUserFriendlyAddress(hexAddress, testOnly) {
        if (testOnly === void 0) {
          testOnly = false;
        }
        const {
          wc,
          hex
        } = parseHexAddress(hexAddress);
        let tag = noBounceableTag;
        if (testOnly) {
          tag |= testOnlyTag;
        }
        const addr = new Int8Array(34);
        addr[0] = tag;
        addr[1] = wc;
        addr.set(hex, 2);
        const addressWithChecksum = new Uint8Array(36);
        addressWithChecksum.set(addr);
        addressWithChecksum.set(crc16(addr), 34);
        let addressBase64 = Base64.encode(addressWithChecksum);
        return addressBase64.replace(/\+/g, '-').replace(/\//g, '_');
      }
      function parseHexAddress(hexAddress) {
        if (!hexAddress.includes(':')) {
          throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include ":".`);
        }
        const parts = hexAddress.split(':');
        if (parts.length !== 2) {
          throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include ":" only once.`);
        }
        const wc = parseInt(parts[0]);
        if (wc !== 0 && wc !== -1) {
          throw new WrongAddressError(`Wrong address ${hexAddress}. WC must be eq 0 or -1, but ${wc} received.`);
        }
        const hex = parts[1];
        if ((hex === null || hex === void 0 ? void 0 : hex.length) !== 64) {
          throw new WrongAddressError(`Wrong address ${hexAddress}. Hex part must be 64bytes length, but ${hex === null || hex === void 0 ? void 0 : hex.length} received.`);
        }
        return {
          wc,
          hex: hexToBytes(hex)
        };
      }
      function crc16(data) {
        const poly = 0x1021;
        let reg = 0;
        const message = new Uint8Array(data.length + 2);
        message.set(data);
        for (let byte of message) {
          let mask = 0x80;
          while (mask > 0) {
            reg <<= 1;
            if (byte & mask) {
              reg += 1;
            }
            mask >>= 1;
            if (reg > 0xffff) {
              reg &= 0xffff;
              reg ^= poly;
            }
          }
        }
        return new Uint8Array([Math.floor(reg / 256), reg % 256]);
      }
      const toByteMap = {};
      for (let ord = 0; ord <= 0xff; ord++) {
        let s = ord.toString(16);
        if (s.length < 2) {
          s = '0' + s;
        }
        toByteMap[s] = ord;
      }
      function hexToBytes(hex) {
        hex = hex.toLowerCase();
        const length2 = hex.length;
        if (length2 % 2 !== 0) {
          throw new ParseHexError('Hex string must have length a multiple of 2: ' + hex);
        }
        const length = length2 / 2;
        const result = new Uint8Array(length);
        for (let i = 0; i < length; i++) {
          const doubled = i * 2;
          const hexSubstring = hex.substring(doubled, doubled + 2);
          if (!toByteMap.hasOwnProperty(hexSubstring)) {
            throw new ParseHexError('Invalid hex character: ' + hexSubstring);
          }
          result[i] = toByteMap[hexSubstring];
        }
        return result;
      } // EXTERNAL MODULE: ../../node_modules/ua-parser-js/src/ua-parser.js
      var ua_parser = __webpack_require__(8047); // EXTERNAL MODULE: ../../node_modules/deepmerge/dist/cjs.js
      var cjs = __webpack_require__(2743); // EXTERNAL MODULE: ../../node_modules/classnames/index.js
      var classnames = __webpack_require__(3373);
      var __defProp = Object.defineProperty;
      var __defProps = Object.defineProperties;
      var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
      var __getOwnPropSymbols = Object.getOwnPropertySymbols;
      var __hasOwnProp = Object.prototype.hasOwnProperty;
      var __propIsEnum = Object.prototype.propertyIsEnumerable;
      var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
      }) : obj[key] = value;
      var __spreadValues = (a2, b) => {
        for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a2, prop, b[prop]);
        if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop)) __defNormalProp(a2, prop, b[prop]);
        }
        return a2;
      };
      var __spreadProps = (a2, b) => __defProps(a2, __getOwnPropDescs(b));
      var __publicField = (obj, key, value) => {
        __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
        return value;
      };
      var __async = (__this, __arguments, generator) => {
        return new Promise((resolve, reject) => {
          var fulfilled = value => {
            try {
              step(generator.next(value));
            } catch (e2) {
              reject(e2);
            }
          };
          var rejected = value => {
            try {
              step(generator.throw(value));
            } catch (e2) {
              reject(e2);
            }
          };
          var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
          step((generator = generator.apply(__this, __arguments)).next());
        });
      };
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const sharedConfig = {};
      function setHydrateContext(context) {
        sharedConfig.context = context;
      }
      const equalFn = (a2, b) => a2 === b;
      const $PROXY = Symbol("solid-proxy");
      const $TRACK = Symbol("solid-track");
      const signalOptions = {
        equals: equalFn
      };
      let runEffects = runQueue;
      const STALE = 1;
      const PENDING = 2;
      const UNOWNED = {
        owned: null,
        cleanups: null,
        context: null,
        owner: null
      };
      const NO_INIT = {};
      var Owner = null;
      let Transition$1 = null;
      let Listener = null;
      let Updates = null;
      let Effects = null;
      let ExecCount = 0;
      function createRoot(fn, detachedOwner) {
        const listener = Listener,
          owner = Owner,
          unowned = fn.length === 0,
          root = unowned ? UNOWNED : {
            owned: null,
            cleanups: null,
            context: null,
            owner: detachedOwner === void 0 ? owner : detachedOwner
          },
          updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));
        Owner = root;
        Listener = null;
        try {
          return runUpdates(updateFn, true);
        } finally {
          Listener = listener;
          Owner = owner;
        }
      }
      function createSignal(value, options) {
        options = options ? Object.assign({}, signalOptions, options) : signalOptions;
        const s2 = {
          value,
          observers: null,
          observerSlots: null,
          comparator: options.equals || void 0
        };
        const setter = value2 => {
          if (typeof value2 === "function") {
            value2 = value2(s2.value);
          }
          return writeSignal(s2, value2);
        };
        return [readSignal.bind(s2), setter];
      }
      function createComputed(fn, value, options) {
        const c2 = createComputation(fn, value, true, STALE);
        updateComputation(c2);
      }
      function createRenderEffect(fn, value, options) {
        const c2 = createComputation(fn, value, false, STALE);
        updateComputation(c2);
      }
      function createEffect(fn, value, options) {
        runEffects = runUserEffects;
        const c2 = createComputation(fn, value, false, STALE);
        c2.user = true;
        Effects ? Effects.push(c2) : updateComputation(c2);
      }
      function createMemo(fn, value, options) {
        options = options ? Object.assign({}, signalOptions, options) : signalOptions;
        const c2 = createComputation(fn, value, true, 0);
        c2.observers = null;
        c2.observerSlots = null;
        c2.comparator = options.equals || void 0;
        updateComputation(c2);
        return readSignal.bind(c2);
      }
      function createResource(pSource, pFetcher, pOptions) {
        let source;
        let fetcher;
        let options;
        if (arguments.length === 2 && typeof pFetcher === "object" || arguments.length === 1) {
          source = true;
          fetcher = pSource;
          options = pFetcher || {};
        } else {
          source = pSource;
          fetcher = pFetcher;
          options = pOptions || {};
        }
        let pr = null,
          initP = NO_INIT,
          id = null,
          scheduled = false,
          resolved = ("initialValue" in options),
          dynamic = typeof source === "function" && createMemo(source);
        const contexts = /* @__PURE__ */new Set(),
          [value, setValue] = (options.storage || createSignal)(options.initialValue),
          [error, setError] = createSignal(void 0),
          [track, trigger] = createSignal(void 0, {
            equals: false
          }),
          [state, setState] = createSignal(resolved ? "ready" : "unresolved");
        if (sharedConfig.context) {
          id = `${sharedConfig.context.id}${sharedConfig.context.count++}`;
          let v;
          if (options.ssrLoadFrom === "initial") initP = options.initialValue;else if (sharedConfig.load && (v = sharedConfig.load(id))) initP = v[0];
        }
        function loadEnd(p2, v, error2, key) {
          if (pr === p2) {
            pr = null;
            resolved = true;
            if ((p2 === initP || v === initP) && options.onHydrated) queueMicrotask(() => options.onHydrated(key, {
              value: v
            }));
            initP = NO_INIT;
            completeLoad(v, error2);
          }
          return v;
        }
        function completeLoad(v, err) {
          runUpdates(() => {
            if (err === void 0) setValue(() => v);
            setState(err !== void 0 ? "errored" : "ready");
            setError(err);
            for (const c2 of contexts.keys()) c2.decrement();
            contexts.clear();
          }, false);
        }
        function read() {
          const c2 = SuspenseContext,
            v = value(),
            err = error();
          if (err !== void 0 && !pr) throw err;
          if (Listener && !Listener.user && c2) {
            createComputed(() => {
              track();
              if (pr) {
                if (c2.resolved) ;else if (!contexts.has(c2)) {
                  c2.increment();
                  contexts.add(c2);
                }
              }
            });
          }
          return v;
        }
        function load(refetching) {
          if (refetching === void 0) {
            refetching = true;
          }
          if (refetching !== false && scheduled) return;
          scheduled = false;
          const lookup2 = dynamic ? dynamic() : source;
          if (lookup2 == null || lookup2 === false) {
            loadEnd(pr, untrack(value));
            return;
          }
          const p2 = initP !== NO_INIT ? initP : untrack(() => fetcher(lookup2, {
            value: value(),
            refetching
          }));
          if (typeof p2 !== "object" || !(p2 && "then" in p2)) {
            loadEnd(pr, p2, void 0, lookup2);
            return p2;
          }
          pr = p2;
          scheduled = true;
          queueMicrotask(() => scheduled = false);
          runUpdates(() => {
            setState(resolved ? "refreshing" : "pending");
            trigger();
          }, false);
          return p2.then(v => loadEnd(p2, v, void 0, lookup2), e2 => loadEnd(p2, void 0, castError(e2), lookup2));
        }
        Object.defineProperties(read, {
          state: {
            get: () => state()
          },
          error: {
            get: () => error()
          },
          loading: {
            get() {
              const s2 = state();
              return s2 === "pending" || s2 === "refreshing";
            }
          },
          latest: {
            get() {
              if (!resolved) return read();
              const err = error();
              if (err && !pr) throw err;
              return value();
            }
          }
        });
        if (dynamic) createComputed(() => load(false));else load(false);
        return [read, {
          refetch: load,
          mutate: setValue
        }];
      }
      function batch(fn) {
        return runUpdates(fn, false);
      }
      function untrack(fn) {
        if (Listener === null) return fn();
        const listener = Listener;
        Listener = null;
        try {
          return fn();
        } finally {
          Listener = listener;
        }
      }
      function on(deps, fn, options) {
        const isArray = Array.isArray(deps);
        let prevInput;
        let defer = options && options.defer;
        return prevValue => {
          let input;
          if (isArray) {
            input = Array(deps.length);
            for (let i2 = 0; i2 < deps.length; i2++) input[i2] = deps[i2]();
          } else input = deps();
          if (defer) {
            defer = false;
            return void 0;
          }
          const result = untrack(() => fn(input, prevInput, prevValue));
          prevInput = input;
          return result;
        };
      }
      function onMount(fn) {
        createEffect(() => untrack(fn));
      }
      function onCleanup(fn) {
        if (Owner === null) ;else if (Owner.cleanups === null) Owner.cleanups = [fn];else Owner.cleanups.push(fn);
        return fn;
      }
      function getListener() {
        return Listener;
      }
      function getOwner() {
        return Owner;
      }
      function createContext(defaultValue, options) {
        const id = Symbol("context");
        return {
          id,
          Provider: createProvider(id),
          defaultValue
        };
      }
      function useContext(context) {
        let ctx;
        return (ctx = lookup(Owner, context.id)) !== void 0 ? ctx : context.defaultValue;
      }
      function children(fn) {
        const children2 = createMemo(fn);
        const memo = createMemo(() => resolveChildren(children2()));
        memo.toArray = () => {
          const c2 = memo();
          return Array.isArray(c2) ? c2 : c2 != null ? [c2] : [];
        };
        return memo;
      }
      let SuspenseContext;
      function readSignal() {
        const runningTransition = Transition$1;
        if (this.sources && (this.state || runningTransition)) {
          if (this.state === STALE || runningTransition) updateComputation(this);else {
            const updates = Updates;
            Updates = null;
            runUpdates(() => lookUpstream(this), false);
            Updates = updates;
          }
        }
        if (Listener) {
          const sSlot = this.observers ? this.observers.length : 0;
          if (!Listener.sources) {
            Listener.sources = [this];
            Listener.sourceSlots = [sSlot];
          } else {
            Listener.sources.push(this);
            Listener.sourceSlots.push(sSlot);
          }
          if (!this.observers) {
            this.observers = [Listener];
            this.observerSlots = [Listener.sources.length - 1];
          } else {
            this.observers.push(Listener);
            this.observerSlots.push(Listener.sources.length - 1);
          }
        }
        return this.value;
      }
      function writeSignal(node, value, isComp) {
        let current = node.value;
        if (!node.comparator || !node.comparator(current, value)) {
          node.value = value;
          if (node.observers && node.observers.length) {
            runUpdates(() => {
              for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
                const o2 = node.observers[i2];
                const TransitionRunning = Transition$1 && Transition$1.running;
                if (TransitionRunning && Transition$1.disposed.has(o2)) ;
                if (TransitionRunning && !o2.tState || !TransitionRunning && !o2.state) {
                  if (o2.pure) Updates.push(o2);else Effects.push(o2);
                  if (o2.observers) markDownstream(o2);
                }
                if (TransitionRunning) ;else o2.state = STALE;
              }
              if (Updates.length > 1e6) {
                Updates = [];
                if (false) ;
                throw new Error();
              }
            }, false);
          }
        }
        return value;
      }
      function updateComputation(node) {
        if (!node.fn) return;
        cleanNode(node);
        const owner = Owner,
          listener = Listener,
          time = ExecCount;
        Listener = Owner = node;
        runComputation(node, node.value, time);
        Listener = listener;
        Owner = owner;
      }
      function runComputation(node, value, time) {
        let nextValue;
        try {
          nextValue = node.fn(value);
        } catch (err) {
          if (node.pure) {
            {
              node.state = STALE;
              node.owned && node.owned.forEach(cleanNode);
              node.owned = null;
            }
          }
          handleError(err);
        }
        if (!node.updatedAt || node.updatedAt <= time) {
          if (node.updatedAt != null && "observers" in node) {
            writeSignal(node, nextValue);
          } else node.value = nextValue;
          node.updatedAt = time;
        }
      }
      function createComputation(fn, init, pure, state, options) {
        if (state === void 0) {
          state = STALE;
        }
        const c2 = {
          fn,
          state,
          updatedAt: null,
          owned: null,
          sources: null,
          sourceSlots: null,
          cleanups: null,
          value: init,
          owner: Owner,
          context: null,
          pure
        };
        if (Owner === null) ;else if (Owner !== UNOWNED) {
          {
            if (!Owner.owned) Owner.owned = [c2];else Owner.owned.push(c2);
          }
        }
        return c2;
      }
      function runTop(node) {
        const runningTransition = Transition$1;
        if (node.state === 0 || runningTransition) return;
        if (node.state === PENDING || runningTransition) return lookUpstream(node);
        if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);
        const ancestors = [node];
        while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {
          if (node.state || runningTransition) ancestors.push(node);
        }
        for (let i2 = ancestors.length - 1; i2 >= 0; i2--) {
          node = ancestors[i2];
          if (node.state === STALE || runningTransition) {
            updateComputation(node);
          } else if (node.state === PENDING || runningTransition) {
            const updates = Updates;
            Updates = null;
            runUpdates(() => lookUpstream(node, ancestors[0]), false);
            Updates = updates;
          }
        }
      }
      function runUpdates(fn, init) {
        if (Updates) return fn();
        let wait = false;
        if (!init) Updates = [];
        if (Effects) wait = true;else Effects = [];
        ExecCount++;
        try {
          const res = fn();
          completeUpdates(wait);
          return res;
        } catch (err) {
          if (!wait) Effects = null;
          Updates = null;
          handleError(err);
        }
      }
      function completeUpdates(wait) {
        if (Updates) {
          runQueue(Updates);
          Updates = null;
        }
        if (wait) return;
        const e2 = Effects;
        Effects = null;
        if (e2.length) runUpdates(() => runEffects(e2), false);
      }
      function runQueue(queue) {
        for (let i2 = 0; i2 < queue.length; i2++) runTop(queue[i2]);
      }
      function runUserEffects(queue) {
        let i2,
          userLength = 0;
        for (i2 = 0; i2 < queue.length; i2++) {
          const e2 = queue[i2];
          if (!e2.user) runTop(e2);else queue[userLength++] = e2;
        }
        if (sharedConfig.context) setHydrateContext();
        for (i2 = 0; i2 < userLength; i2++) runTop(queue[i2]);
      }
      function lookUpstream(node, ignore) {
        const runningTransition = Transition$1;
        node.state = 0;
        for (let i2 = 0; i2 < node.sources.length; i2 += 1) {
          const source = node.sources[i2];
          if (source.sources) {
            if (source.state === STALE || runningTransition) {
              if (source !== ignore) runTop(source);
            } else if (source.state === PENDING || runningTransition) lookUpstream(source, ignore);
          }
        }
      }
      function markDownstream(node) {
        const runningTransition = Transition$1;
        for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
          const o2 = node.observers[i2];
          if (!o2.state || runningTransition) {
            o2.state = PENDING;
            if (o2.pure) Updates.push(o2);else Effects.push(o2);
            o2.observers && markDownstream(o2);
          }
        }
      }
      function cleanNode(node) {
        let i2;
        if (node.sources) {
          while (node.sources.length) {
            const source = node.sources.pop(),
              index = node.sourceSlots.pop(),
              obs = source.observers;
            if (obs && obs.length) {
              const n2 = obs.pop(),
                s2 = source.observerSlots.pop();
              if (index < obs.length) {
                n2.sourceSlots[s2] = index;
                obs[index] = n2;
                source.observerSlots[index] = s2;
              }
            }
          }
        }
        if (node.owned) {
          for (i2 = 0; i2 < node.owned.length; i2++) cleanNode(node.owned[i2]);
          node.owned = null;
        }
        if (node.cleanups) {
          for (i2 = 0; i2 < node.cleanups.length; i2++) node.cleanups[i2]();
          node.cleanups = null;
        }
        node.state = 0;
        node.context = null;
      }
      function castError(err) {
        if (err instanceof Error || typeof err === "string") return err;
        return new Error("Unknown error");
      }
      function handleError(err) {
        err = castError(err);
        throw err;
      }
      function lookup(owner, key) {
        return owner ? owner.context && owner.context[key] !== void 0 ? owner.context[key] : lookup(owner.owner, key) : void 0;
      }
      function resolveChildren(children2) {
        if (typeof children2 === "function" && !children2.length) return resolveChildren(children2());
        if (Array.isArray(children2)) {
          const results = [];
          for (let i2 = 0; i2 < children2.length; i2++) {
            const result = resolveChildren(children2[i2]);
            Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
          }
          return results;
        }
        return children2;
      }
      function createProvider(id, options) {
        return function provider(props) {
          let res;
          createRenderEffect(() => res = untrack(() => {
            Owner.context = {
              [id]: props.value
            };
            return children(() => props.children);
          }), void 0);
          return res;
        };
      }
      const FALLBACK = Symbol("fallback");
      function dispose(d) {
        for (let i2 = 0; i2 < d.length; i2++) d[i2]();
      }
      function mapArray(list, mapFn, options) {
        if (options === void 0) {
          options = {};
        }
        let items = [],
          mapped = [],
          disposers = [],
          len = 0,
          indexes = mapFn.length > 1 ? [] : null;
        onCleanup(() => dispose(disposers));
        return () => {
          let newItems = list() || [],
            i2,
            j;
          newItems[$TRACK];
          return untrack(() => {
            let newLen = newItems.length,
              newIndices,
              newIndicesNext,
              temp,
              tempdisposers,
              tempIndexes,
              start,
              end,
              newEnd,
              item;
            if (newLen === 0) {
              if (len !== 0) {
                dispose(disposers);
                disposers = [];
                items = [];
                mapped = [];
                len = 0;
                indexes && (indexes = []);
              }
              if (options.fallback) {
                items = [FALLBACK];
                mapped[0] = createRoot(disposer => {
                  disposers[0] = disposer;
                  return options.fallback();
                });
                len = 1;
              }
            } else if (len === 0) {
              mapped = new Array(newLen);
              for (j = 0; j < newLen; j++) {
                items[j] = newItems[j];
                mapped[j] = createRoot(mapper);
              }
              len = newLen;
            } else {
              temp = new Array(newLen);
              tempdisposers = new Array(newLen);
              indexes && (tempIndexes = new Array(newLen));
              for (start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);
              for (end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {
                temp[newEnd] = mapped[end];
                tempdisposers[newEnd] = disposers[end];
                indexes && (tempIndexes[newEnd] = indexes[end]);
              }
              newIndices = /* @__PURE__ */new Map();
              newIndicesNext = new Array(newEnd + 1);
              for (j = newEnd; j >= start; j--) {
                item = newItems[j];
                i2 = newIndices.get(item);
                newIndicesNext[j] = i2 === void 0 ? -1 : i2;
                newIndices.set(item, j);
              }
              for (i2 = start; i2 <= end; i2++) {
                item = items[i2];
                j = newIndices.get(item);
                if (j !== void 0 && j !== -1) {
                  temp[j] = mapped[i2];
                  tempdisposers[j] = disposers[i2];
                  indexes && (tempIndexes[j] = indexes[i2]);
                  j = newIndicesNext[j];
                  newIndices.set(item, j);
                } else disposers[i2]();
              }
              for (j = start; j < newLen; j++) {
                if (j in temp) {
                  mapped[j] = temp[j];
                  disposers[j] = tempdisposers[j];
                  if (indexes) {
                    indexes[j] = tempIndexes[j];
                    indexes[j](j);
                  }
                } else mapped[j] = createRoot(mapper);
              }
              mapped = mapped.slice(0, len = newLen);
              items = newItems.slice(0);
            }
            return mapped;
          });
          function mapper(disposer) {
            disposers[j] = disposer;
            if (indexes) {
              const [s2, set] = createSignal(j);
              indexes[j] = set;
              return mapFn(newItems[j], s2);
            }
            return mapFn(newItems[j]);
          }
        };
      }
      function createComponent(Comp, props) {
        return untrack(() => Comp(props || {}));
      }
      function trueFn() {
        return true;
      }
      const propTraps = {
        get(_, property, receiver) {
          if (property === $PROXY) return receiver;
          return _.get(property);
        },
        has(_, property) {
          if (property === $PROXY) return true;
          return _.has(property);
        },
        set: trueFn,
        deleteProperty: trueFn,
        getOwnPropertyDescriptor(_, property) {
          return {
            configurable: true,
            enumerable: true,
            get() {
              return _.get(property);
            },
            set: trueFn,
            deleteProperty: trueFn
          };
        },
        ownKeys(_) {
          return _.keys();
        }
      };
      function resolveSource(s2) {
        return !(s2 = typeof s2 === "function" ? s2() : s2) ? {} : s2;
      }
      function mergeProps() {
        for (var _len10 = arguments.length, sources = new Array(_len10), _key11 = 0; _key11 < _len10; _key11++) {
          sources[_key11] = arguments[_key11];
        }
        let proxy = false;
        for (let i2 = 0; i2 < sources.length; i2++) {
          const s2 = sources[i2];
          proxy = proxy || !!s2 && $PROXY in s2;
          sources[i2] = typeof s2 === "function" ? (proxy = true, createMemo(s2)) : s2;
        }
        if (proxy) {
          return new Proxy({
            get(property) {
              for (let i2 = sources.length - 1; i2 >= 0; i2--) {
                const v = resolveSource(sources[i2])[property];
                if (v !== void 0) return v;
              }
            },
            has(property) {
              for (let i2 = sources.length - 1; i2 >= 0; i2--) {
                if (property in resolveSource(sources[i2])) return true;
              }
              return false;
            },
            keys() {
              const keys = [];
              for (let i2 = 0; i2 < sources.length; i2++) keys.push(...Object.keys(resolveSource(sources[i2])));
              return [...new Set(keys)];
            }
          }, propTraps);
        }
        const target = {};
        for (let i2 = sources.length - 1; i2 >= 0; i2--) {
          if (sources[i2]) {
            const descriptors = Object.getOwnPropertyDescriptors(sources[i2]);
            for (const key in descriptors) {
              if (key in target) continue;
              Object.defineProperty(target, key, {
                enumerable: true,
                get() {
                  for (let i3 = sources.length - 1; i3 >= 0; i3--) {
                    const v = (sources[i3] || {})[key];
                    if (v !== void 0) return v;
                  }
                }
              });
            }
          }
        }
        return target;
      }
      function splitProps(props) {
        for (var _len11 = arguments.length, keys = new Array(_len11 > 1 ? _len11 - 1 : 0), _key12 = 1; _key12 < _len11; _key12++) {
          keys[_key12 - 1] = arguments[_key12];
        }
        const blocked = new Set(keys.flat());
        if ($PROXY in props) {
          const res = keys.map(k => {
            return new Proxy({
              get(property) {
                return k.includes(property) ? props[property] : void 0;
              },
              has(property) {
                return k.includes(property) && property in props;
              },
              keys() {
                return k.filter(property => property in props);
              }
            }, propTraps);
          });
          res.push(new Proxy({
            get(property) {
              return blocked.has(property) ? void 0 : props[property];
            },
            has(property) {
              return blocked.has(property) ? false : property in props;
            },
            keys() {
              return Object.keys(props).filter(k => !blocked.has(k));
            }
          }, propTraps));
          return res;
        }
        const descriptors = Object.getOwnPropertyDescriptors(props);
        keys.push(Object.keys(descriptors).filter(k => !blocked.has(k)));
        return keys.map(k => {
          const clone = {};
          for (let i2 = 0; i2 < k.length; i2++) {
            const key = k[i2];
            if (!(key in props)) continue;
            Object.defineProperty(clone, key, descriptors[key] ? descriptors[key] : {
              get() {
                return props[key];
              },
              set() {
                return true;
              },
              enumerable: true
            });
          }
          return clone;
        });
      }
      function For(props) {
        const fallback = "fallback" in props && {
          fallback: () => props.fallback
        };
        return createMemo(mapArray(() => props.each, props.children, fallback || void 0));
      }
      function Show(props) {
        let strictEqual = false;
        const keyed = props.keyed;
        const condition = createMemo(() => props.when, void 0, {
          equals: (a2, b) => strictEqual ? a2 === b : !a2 === !b
        });
        return createMemo(() => {
          const c2 = condition();
          if (c2) {
            const child = props.children;
            const fn = typeof child === "function" && child.length > 0;
            strictEqual = keyed || fn;
            return fn ? untrack(() => child(c2)) : child;
          }
          return props.fallback;
        }, void 0, void 0);
      }
      function Switch(props) {
        let strictEqual = false;
        let keyed = false;
        const equals = (a2, b) => a2[0] === b[0] && (strictEqual ? a2[1] === b[1] : !a2[1] === !b[1]) && a2[2] === b[2];
        const conditions = children(() => props.children),
          evalConditions = createMemo(() => {
            let conds = conditions();
            if (!Array.isArray(conds)) conds = [conds];
            for (let i2 = 0; i2 < conds.length; i2++) {
              const c2 = conds[i2].when;
              if (c2) {
                keyed = !!conds[i2].keyed;
                return [i2, c2, conds[i2]];
              }
            }
            return [-1];
          }, void 0, {
            equals
          });
        return createMemo(() => {
          const [index, when, cond] = evalConditions();
          if (index < 0) return props.fallback;
          const c2 = cond.children;
          const fn = typeof c2 === "function" && c2.length > 0;
          strictEqual = keyed || fn;
          return fn ? untrack(() => c2(when)) : c2;
        }, void 0, void 0);
      }
      function Match(props) {
        return props;
      }
      const booleans = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "controls", "default", "disabled", "formnovalidate", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "seamless", "selected"];
      const Properties = /* @__PURE__ */new Set(["className", "value", "readOnly", "formNoValidate", "isMap", "noModule", "playsInline", ...booleans]);
      const ChildProperties = /* @__PURE__ */new Set(["innerHTML", "textContent", "innerText", "children"]);
      const Aliases = /* @__PURE__ */Object.assign( /* @__PURE__ */Object.create(null), {
        className: "class",
        htmlFor: "for"
      });
      const PropAliases = /* @__PURE__ */Object.assign( /* @__PURE__ */Object.create(null), {
        class: "className",
        formnovalidate: "formNoValidate",
        ismap: "isMap",
        nomodule: "noModule",
        playsinline: "playsInline",
        readonly: "readOnly"
      });
      const DelegatedEvents = /* @__PURE__ */new Set(["beforeinput", "click", "dblclick", "contextmenu", "focusin", "focusout", "input", "keydown", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "pointerdown", "pointermove", "pointerout", "pointerover", "pointerup", "touchend", "touchmove", "touchstart"]);
      const SVGElements = /* @__PURE__ */new Set(["altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignObject", "g", "glyph", "glyphRef", "hkern", "image", "line", "linearGradient", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "set", "stop", "svg", "switch", "symbol", "text", "textPath", "tref", "tspan", "use", "view", "vkern"]);
      const SVGNamespace = {
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace"
      };
      function reconcileArrays(parentNode, a2, b) {
        let bLength = b.length,
          aEnd = a2.length,
          bEnd = bLength,
          aStart = 0,
          bStart = 0,
          after = a2[aEnd - 1].nextSibling,
          map = null;
        while (aStart < aEnd || bStart < bEnd) {
          if (a2[aStart] === b[bStart]) {
            aStart++;
            bStart++;
            continue;
          }
          while (a2[aEnd - 1] === b[bEnd - 1]) {
            aEnd--;
            bEnd--;
          }
          if (aEnd === aStart) {
            const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;
            while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);
          } else if (bEnd === bStart) {
            while (aStart < aEnd) {
              if (!map || !map.has(a2[aStart])) a2[aStart].remove();
              aStart++;
            }
          } else if (a2[aStart] === b[bEnd - 1] && b[bStart] === a2[aEnd - 1]) {
            const node = a2[--aEnd].nextSibling;
            parentNode.insertBefore(b[bStart++], a2[aStart++].nextSibling);
            parentNode.insertBefore(b[--bEnd], node);
            a2[aEnd] = b[bEnd];
          } else {
            if (!map) {
              map = /* @__PURE__ */new Map();
              let i2 = bStart;
              while (i2 < bEnd) map.set(b[i2], i2++);
            }
            const index = map.get(a2[aStart]);
            if (index != null) {
              if (bStart < index && index < bEnd) {
                let i2 = aStart,
                  sequence = 1,
                  t2;
                while (++i2 < aEnd && i2 < bEnd) {
                  if ((t2 = map.get(a2[i2])) == null || t2 !== index + sequence) break;
                  sequence++;
                }
                if (sequence > index - bStart) {
                  const node = a2[aStart];
                  while (bStart < index) parentNode.insertBefore(b[bStart++], node);
                } else parentNode.replaceChild(b[bStart++], a2[aStart++]);
              } else aStart++;
            } else a2[aStart++].remove();
          }
        }
      }
      const $$EVENTS = "_$DX_DELEGATE";
      function render(code, element, init, options) {
        if (options === void 0) {
          options = {};
        }
        let disposer;
        createRoot(dispose2 => {
          disposer = dispose2;
          element === document ? code() : insert(element, code(), element.firstChild ? null : void 0, init);
        }, options.owner);
        return () => {
          disposer();
          element.textContent = "";
        };
      }
      function template$1(html, check, isSVG) {
        if (typeof window === 'undefined') {
          return null;
        }
        const t2 = document.createElement("template");
        t2.innerHTML = html;
        let node = t2.content.firstChild;
        if (isSVG) node = node.firstChild;
        return node;
      }
      function delegateEvents(eventNames, document2) {
        if (document2 === void 0) {
          document2 = window.document;
        }
        const e2 = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */new Set());
        for (let i2 = 0, l2 = eventNames.length; i2 < l2; i2++) {
          const name = eventNames[i2];
          if (!e2.has(name)) {
            e2.add(name);
            document2.addEventListener(name, eventHandler);
          }
        }
      }
      function setAttribute(node, name, value) {
        if (value == null) node.removeAttribute(name);else node.setAttribute(name, value);
      }
      function setAttributeNS(node, namespace, name, value) {
        if (value == null) node.removeAttributeNS(namespace, name);else node.setAttributeNS(namespace, name, value);
      }
      function className(node, value) {
        if (value == null) node.removeAttribute("class");else node.className = value;
      }
      function addEventListener(node, name, handler, delegate) {
        if (delegate) {
          if (Array.isArray(handler)) {
            node[`$$${name}`] = handler[0];
            node[`$$${name}Data`] = handler[1];
          } else node[`$$${name}`] = handler;
        } else if (Array.isArray(handler)) {
          const handlerFn = handler[0];
          node.addEventListener(name, handler[0] = e2 => handlerFn.call(node, handler[1], e2));
        } else node.addEventListener(name, handler);
      }
      function classList(node, value, prev) {
        if (prev === void 0) {
          prev = {};
        }
        const classKeys = Object.keys(value || {}),
          prevKeys = Object.keys(prev);
        let i2, len;
        for (i2 = 0, len = prevKeys.length; i2 < len; i2++) {
          const key = prevKeys[i2];
          if (!key || key === "undefined" || value[key]) continue;
          toggleClassKey(node, key, false);
          delete prev[key];
        }
        for (i2 = 0, len = classKeys.length; i2 < len; i2++) {
          const key = classKeys[i2],
            classValue = !!value[key];
          if (!key || key === "undefined" || prev[key] === classValue || !classValue) continue;
          toggleClassKey(node, key, true);
          prev[key] = classValue;
        }
        return prev;
      }
      function style(node, value, prev) {
        if (!value) return prev ? setAttribute(node, "style") : value;
        const nodeStyle = node.style;
        if (typeof value === "string") return nodeStyle.cssText = value;
        typeof prev === "string" && (nodeStyle.cssText = prev = void 0);
        prev || (prev = {});
        value || (value = {});
        let v, s2;
        for (s2 in prev) {
          value[s2] == null && nodeStyle.removeProperty(s2);
          delete prev[s2];
        }
        for (s2 in value) {
          v = value[s2];
          if (v !== prev[s2]) {
            nodeStyle.setProperty(s2, v);
            prev[s2] = v;
          }
        }
        return prev;
      }
      function spread(node, props, isSVG, skipChildren) {
        if (props === void 0) {
          props = {};
        }
        const prevProps = {};
        if (!skipChildren) {
          createRenderEffect(() => prevProps.children = insertExpression(node, props.children, prevProps.children));
        }
        createRenderEffect(() => props.ref && props.ref(node));
        createRenderEffect(() => lib_assign(node, props, isSVG, true, prevProps, true));
        return prevProps;
      }
      function use(fn, element, arg) {
        return untrack(() => fn(element, arg));
      }
      function insert(parent, accessor, marker, initial) {
        if (marker !== void 0 && !initial) initial = [];
        if (typeof accessor !== "function") return insertExpression(parent, accessor, initial, marker);
        createRenderEffect(current => insertExpression(parent, accessor(), current, marker), initial);
      }
      function lib_assign(node, props, isSVG, skipChildren, prevProps, skipRef) {
        if (prevProps === void 0) {
          prevProps = {};
        }
        if (skipRef === void 0) {
          skipRef = false;
        }
        props || (props = {});
        for (const prop in prevProps) {
          if (!(prop in props)) {
            if (prop === "children") continue;
            prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);
          }
        }
        for (const prop in props) {
          if (prop === "children") {
            if (!skipChildren) insertExpression(node, props.children);
            continue;
          }
          const value = props[prop];
          prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);
        }
      }
      function getNextElement(template2) {
        let node, key;
        if (!sharedConfig.context || !(node = sharedConfig.registry.get(key = getHydrationKey()))) {
          return template2.cloneNode(true);
        }
        if (sharedConfig.completed) sharedConfig.completed.add(node);
        sharedConfig.registry.delete(key);
        return node;
      }
      function toPropertyName(name) {
        return name.toLowerCase().replace(/-([a-z])/g, (_, w) => w.toUpperCase());
      }
      function toggleClassKey(node, key, value) {
        const classNames = key.trim().split(/\s+/);
        for (let i2 = 0, nameLen = classNames.length; i2 < nameLen; i2++) node.classList.toggle(classNames[i2], value);
      }
      function assignProp(node, prop, value, prev, isSVG, skipRef) {
        let isCE, isProp, isChildProp;
        if (prop === "style") return style(node, value, prev);
        if (prop === "classList") return classList(node, value, prev);
        if (value === prev) return prev;
        if (prop === "ref") {
          if (!skipRef) value(node);
        } else if (prop.slice(0, 3) === "on:") {
          const e2 = prop.slice(3);
          prev && node.removeEventListener(e2, prev);
          value && node.addEventListener(e2, value);
        } else if (prop.slice(0, 10) === "oncapture:") {
          const e2 = prop.slice(10);
          prev && node.removeEventListener(e2, prev, true);
          value && node.addEventListener(e2, value, true);
        } else if (prop.slice(0, 2) === "on") {
          const name = prop.slice(2).toLowerCase();
          const delegate = DelegatedEvents.has(name);
          if (!delegate && prev) {
            const h2 = Array.isArray(prev) ? prev[0] : prev;
            node.removeEventListener(name, h2);
          }
          if (delegate || value) {
            addEventListener(node, name, value, delegate);
            delegate && delegateEvents([name]);
          }
        } else if ((isChildProp = ChildProperties.has(prop)) || !isSVG && (PropAliases[prop] || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes("-"))) {
          if (prop === "class" || prop === "className") className(node, value);else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;else node[PropAliases[prop] || prop] = value;
        } else {
          const ns = isSVG && prop.indexOf(":") > -1 && SVGNamespace[prop.split(":")[0]];
          if (ns) setAttributeNS(node, ns, prop, value);else setAttribute(node, Aliases[prop] || prop, value);
        }
        return value;
      }
      function eventHandler(e2) {
        const key = `$$${e2.type}`;
        let node = e2.composedPath && e2.composedPath()[0] || e2.target;
        if (e2.target !== node) {
          Object.defineProperty(e2, "target", {
            configurable: true,
            value: node
          });
        }
        Object.defineProperty(e2, "currentTarget", {
          configurable: true,
          get() {
            return node || document;
          }
        });
        if (sharedConfig.registry && !sharedConfig.done) {
          sharedConfig.done = true;
          document.querySelectorAll("[id^=pl-]").forEach(elem => {
            while (elem && elem.nodeType !== 8 && elem.nodeValue !== "pl-" + e2) {
              let x = elem.nextSibling;
              elem.remove();
              elem = x;
            }
            elem && elem.remove();
          });
        }
        while (node) {
          const handler = node[key];
          if (handler && !node.disabled) {
            const data = node[`${key}Data`];
            data !== void 0 ? handler.call(node, data, e2) : handler.call(node, e2);
            if (e2.cancelBubble) return;
          }
          node = node._$host || node.parentNode || node.host;
        }
      }
      function insertExpression(parent, value, current, marker, unwrapArray) {
        if (sharedConfig.context && !current) current = [...parent.childNodes];
        while (typeof current === "function") current = current();
        if (value === current) return current;
        const t2 = typeof value,
          multi = marker !== void 0;
        parent = multi && current[0] && current[0].parentNode || parent;
        if (t2 === "string" || t2 === "number") {
          if (sharedConfig.context) return current;
          if (t2 === "number") value = value.toString();
          if (multi) {
            let node = current[0];
            if (node && node.nodeType === 3) {
              node.data = value;
            } else node = document.createTextNode(value);
            current = cleanChildren(parent, current, marker, node);
          } else {
            if (current !== "" && typeof current === "string") {
              current = parent.firstChild.data = value;
            } else current = parent.textContent = value;
          }
        } else if (value == null || t2 === "boolean") {
          if (sharedConfig.context) return current;
          current = cleanChildren(parent, current, marker);
        } else if (t2 === "function") {
          createRenderEffect(() => {
            let v = value();
            while (typeof v === "function") v = v();
            current = insertExpression(parent, v, current, marker);
          });
          return () => current;
        } else if (Array.isArray(value)) {
          const array = [];
          const currentArray = current && Array.isArray(current);
          if (normalizeIncomingArray(array, value, current, unwrapArray)) {
            createRenderEffect(() => current = insertExpression(parent, array, current, marker, true));
            return () => current;
          }
          if (sharedConfig.context) {
            if (!array.length) return current;
            for (let i2 = 0; i2 < array.length; i2++) {
              if (array[i2].parentNode) return current = array;
            }
          }
          if (array.length === 0) {
            current = cleanChildren(parent, current, marker);
            if (multi) return current;
          } else if (currentArray) {
            if (current.length === 0) {
              appendNodes(parent, array, marker);
            } else reconcileArrays(parent, current, array);
          } else {
            current && cleanChildren(parent);
            appendNodes(parent, array);
          }
          current = array;
        } else if (value instanceof Node) {
          if (sharedConfig.context && value.parentNode) return current = multi ? [value] : value;
          if (Array.isArray(current)) {
            if (multi) return current = cleanChildren(parent, current, marker, value);
            cleanChildren(parent, current, null, value);
          } else if (current == null || current === "" || !parent.firstChild) {
            parent.appendChild(value);
          } else parent.replaceChild(value, parent.firstChild);
          current = value;
        } else ;
        return current;
      }
      function normalizeIncomingArray(normalized, array, current, unwrap2) {
        let dynamic = false;
        for (let i2 = 0, len = array.length; i2 < len; i2++) {
          let item = array[i2],
            prev = current && current[i2];
          if (item instanceof Node) {
            normalized.push(item);
          } else if (item == null || item === true || item === false) ;else if (Array.isArray(item)) {
            dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
          } else if (typeof item === "function") {
            if (unwrap2) {
              while (typeof item === "function") item = item();
              dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item], Array.isArray(prev) ? prev : [prev]) || dynamic;
            } else {
              normalized.push(item);
              dynamic = true;
            }
          } else {
            const value = String(item);
            if (prev && prev.nodeType === 3 && prev.data === value) {
              normalized.push(prev);
            } else normalized.push(document.createTextNode(value));
          }
        }
        return dynamic;
      }
      function appendNodes(parent, array, marker) {
        if (marker === void 0) {
          marker = null;
        }
        for (let i2 = 0, len = array.length; i2 < len; i2++) parent.insertBefore(array[i2], marker);
      }
      function cleanChildren(parent, current, marker, replacement) {
        if (marker === void 0) return parent.textContent = "";
        const node = replacement || document.createTextNode("");
        if (current.length) {
          let inserted = false;
          for (let i2 = current.length - 1; i2 >= 0; i2--) {
            const el = current[i2];
            if (node !== el) {
              const isParent = el.parentNode === parent;
              if (!inserted && !i2) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);else isParent && el.remove();
            } else inserted = true;
          }
        } else parent.insertBefore(node, marker);
        return [node];
      }
      function getHydrationKey() {
        const hydrate = sharedConfig.context;
        return `${hydrate.id}${hydrate.count++}`;
      }
      const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function createElement(tagName, isSVG) {
        if (isSVG === void 0) {
          isSVG = false;
        }
        return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);
      }
      function Portal(props) {
        const {
            useShadow
          } = props,
          marker = document.createTextNode(""),
          mount = props.mount || document.body;
        function renderPortal() {
          if (sharedConfig.context) {
            const [s2, set] = createSignal(false);
            queueMicrotask(() => set(true));
            return () => s2() && props.children;
          } else return () => props.children;
        }
        if (mount instanceof HTMLHeadElement) {
          const [clean, setClean] = createSignal(false);
          const cleanup = () => setClean(true);
          createRoot(dispose2 => insert(mount, () => !clean() ? renderPortal()() : dispose2(), null));
          onCleanup(() => {
            if (sharedConfig.context) queueMicrotask(cleanup);else cleanup();
          });
        } else {
          const container = createElement(props.isSVG ? "g" : "div", props.isSVG),
            renderRoot = useShadow && container.attachShadow ? container.attachShadow({
              mode: "open"
            }) : container;
          Object.defineProperty(container, "_$host", {
            get() {
              return marker.parentNode;
            },
            configurable: true
          });
          insert(renderRoot, renderPortal());
          mount.appendChild(container);
          props.ref && props.ref(container);
          onCleanup(() => mount.removeChild(container));
        }
        return marker;
      }
      function Dynamic(props) {
        const [p2, others] = splitProps(props, ["component"]);
        const cached = createMemo(() => p2.component);
        return createMemo(() => {
          const component = cached();
          switch (typeof component) {
            case "function":
              return untrack(() => component(others));
            case "string":
              const isSvg = SVGElements.has(component);
              const el = sharedConfig.context ? getNextElement() : createElement(component, isSvg);
              spread(el, others, isSvg);
              return el;
          }
        });
      }
      var THEME = /* @__PURE__ */(THEME2 => {
        THEME2["DARK"] = "DARK";
        THEME2["LIGHT"] = "LIGHT";
        return THEME2;
      })(THEME || {});
      let e = {
          data: ""
        },
        t = t2 => "object" == typeof window ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), {
          innerHTML: " ",
          id: "_goober"
        })).firstChild : t2 || e,
        l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,
        a = /\/\*[^]*?\*\/|  +/g,
        n = /\n+/g,
        o = (e2, t2) => {
          let r = "",
            l2 = "",
            a2 = "";
          for (let n2 in e2) {
            let c2 = e2[n2];
            "@" == n2[0] ? "i" == n2[1] ? r = n2 + " " + c2 + ";" : l2 += "f" == n2[1] ? o(c2, n2) : n2 + "{" + o(c2, "k" == n2[1] ? "" : t2) + "}" : "object" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, e3 => n2.replace(/(^:.*)|([^,])+/g, t3 => /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + ":" + c2 + ";");
          }
          return r + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l2;
        },
        c = {},
        s = e2 => {
          if ("object" == typeof e2) {
            let t2 = "";
            for (let r in e2) t2 += r + s(e2[r]);
            return t2;
          }
          return e2;
        },
        i = (e2, t2, r, i2, p2) => {
          let u2 = s(e2),
            d = c[u2] || (c[u2] = (e3 => {
              let t3 = 0,
                r2 = 11;
              for (; t3 < e3.length;) r2 = 101 * r2 + e3.charCodeAt(t3++) >>> 0;
              return "go" + r2;
            })(u2));
          if (!c[d]) {
            let t3 = u2 !== e2 ? e2 : (e3 => {
              let t4,
                r2,
                o2 = [{}];
              for (; t4 = l.exec(e3.replace(a, ""));) t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
              return o2[0];
            })(e2);
            c[d] = o(p2 ? {
              ["@keyframes " + d]: t3
            } : t3, r ? "" : "." + d);
          }
          let f = r && c.g ? c.g : null;
          return r && (c.g = c[d]), ((e3, t3, r2, l2) => {
            l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r2 ? e3 + t3.data : t3.data + e3);
          })(c[d], t2, i2, f), d;
        },
        p = (e2, t2, r) => e2.reduce((e3, l2, a2) => {
          let n2 = t2[a2];
          if (n2 && n2.call) {
            let e4 = n2(r),
              t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
            n2 = t3 ? "." + t3 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
          }
          return e3 + l2 + (null == n2 ? "" : n2);
        }, "");
      function u(e2) {
        let r = this || {},
          l2 = e2.call ? e2(r.p) : e2;
        return i(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r.p) : l2.reduce((e3, t2) => Object.assign(e3, t2 && t2.call ? t2(r.p) : t2), {}) : l2, t(r.target), r.g, r.o, r.k);
      }
      u.bind({
        g: 1
      });
      let h = u.bind({
        k: 1
      });
      const ThemeContext = createContext();
      function ThemeProvider(props) {
        return createComponent(ThemeContext.Provider, {
          value: props.theme,
          get children() {
            return props.children;
          }
        });
      }
      function useTheme() {
        return useContext(ThemeContext);
      }
      function makeStyled(tag) {
        let _ctx = this || {};
        return function () {
          for (var _len12 = arguments.length, args = new Array(_len12), _key13 = 0; _key13 < _len12; _key13++) {
            args[_key13] = arguments[_key13];
          }
          const Styled = props => {
            const theme = useContext(ThemeContext);
            const withTheme = mergeProps(props, {
              theme
            });
            const clone = mergeProps(withTheme, {
              get class() {
                const pClass = withTheme.class,
                  append = "class" in withTheme && /^go[0-9]+/.test(pClass);
                let className2 = u.apply({
                  target: _ctx.target,
                  o: append,
                  p: withTheme,
                  g: _ctx.g
                }, args);
                return [pClass, className2].filter(Boolean).join(" ");
              }
            });
            const [local, newProps] = splitProps(clone, ["as", "theme"]);
            const htmlProps = newProps;
            const createTag = local.as || tag;
            let el;
            if (typeof createTag === "function") {
              el = createTag(htmlProps);
            } else {
              {
                if (_ctx.g == 1) {
                  el = document.createElement(createTag);
                  spread(el, htmlProps);
                } else {
                  el = Dynamic(mergeProps({
                    component: createTag
                  }, htmlProps));
                }
              }
            }
            return el;
          };
          Styled.class = props => {
            return untrack(() => {
              return u.apply({
                target: _ctx.target,
                p: props,
                g: _ctx.g
              }, args);
            });
          };
          return Styled;
        };
      }
      const styled = new Proxy(makeStyled, {
        get(target, tag) {
          return target(tag);
        }
      });
      function createGlobalStyles() {
        const fn = makeStyled.call({
          g: 1
        }, "div").apply(null, arguments);
        return function GlobalStyles2(props) {
          fn(props);
          return null;
        };
      }
      const globalStylesTag = "tc-root";
      const disableScrollClass = "tc-disable-scroll";
      const usingMouseClass = "tc-using-mouse";
      const GlobalStyles = () => {
        document.body.addEventListener("mousedown", () => document.body.classList.add(usingMouseClass));
        document.body.addEventListener("keydown", event => {
          if (event.key === "Tab") {
            document.body.classList.remove(usingMouseClass);
          }
        });
        const Styles = createGlobalStyles`
    ${globalStylesTag} * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        
        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, Tahoma, Verdana, sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;        
        -webkit-tap-highlight-color: transparent;
    }
    
    ${globalStylesTag} img {
      -webkit-user-select: none;
      -webkit-touch-callout: none;
    }   
 
    ${globalStylesTag} *:focus {
        outline: #08f auto 2px;
    }
    
    ${globalStylesTag} li {
        list-style: none;
    }
    
    ${globalStylesTag} button {
        outline: none;
    }
    
    body.${disableScrollClass} {
        position: fixed; 
        overflow-y: scroll;
        right: 0;
        left: 0;
    }
    
    body.${usingMouseClass} ${globalStylesTag} *:focus {
        outline: none;
    }
`;
        return createComponent(Styles, {});
      };
      function hexToRgb(hex) {
        if (hex[0] === "#") {
          hex = hex.slice(1);
        }
        const bigint = parseInt(hex, 16);
        const r = bigint >> 16 & 255;
        const g = bigint >> 8 & 255;
        const b = bigint & 255;
        return [r, g, b].join(",");
      }
      function rgba(color, opacity) {
        if (color[0] === "#") {
          color = hexToRgb(color);
        }
        return `rgba(${color}, ${opacity})`;
      }
      function toPx(value) {
        return value.toString() + "px";
      }
      const _InMemoryStorage = class {
        constructor() {
          __publicField(this, "storage", {});
        }
        static getInstance() {
          if (!_InMemoryStorage.instance) {
            _InMemoryStorage.instance = new _InMemoryStorage();
          }
          return _InMemoryStorage.instance;
        }
        get length() {
          return Object.keys(this.storage).length;
        }
        clear() {
          this.storage = {};
        }
        getItem(key) {
          var _a2;
          return (_a2 = this.storage[key]) != null ? _a2 : null;
        }
        key(index) {
          var _a2;
          const keys = Object.keys(this.storage);
          if (index < 0 || index >= keys.length) {
            return null;
          }
          return (_a2 = keys[index]) != null ? _a2 : null;
        }
        removeItem(key) {
          delete this.storage[key];
        }
        setItem(key, value) {
          this.storage[key] = value;
        }
      };
      let lib_InMemoryStorage = _InMemoryStorage;
      __publicField(lib_InMemoryStorage, "instance");
      class TonConnectUIError extends TonConnectError {
        constructor() {
          super(...arguments);
          Object.setPrototypeOf(this, TonConnectUIError.prototype);
        }
      }
      function openLink(href, target) {
        if (target === void 0) {
          target = "_self";
        }
        window.open(href, target, "noopener noreferrer");
      }
      function openLinkBlank(href) {
        openLink(href, "_blank");
      }
      function openDeeplinkWithFallback(href, fallback) {
        const doFallback = () => {
          if (isBrowser("safari")) {
            return;
          }
          fallback();
        };
        const fallbackTimeout = setTimeout(() => doFallback(), 200);
        window.addEventListener("blur", () => clearTimeout(fallbackTimeout), {
          once: true
        });
        openLink(href, "_self");
      }
      function getSystemTheme() {
        if (window.matchMedia && window.matchMedia("(prefers-color-scheme: light)").matches) {
          return THEME.LIGHT;
        }
        return THEME.DARK;
      }
      function subscribeToThemeChange(callback) {
        const handler = event => callback(event.matches ? THEME.DARK : THEME.LIGHT);
        window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", handler);
        return () => window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", handler);
      }
      function disableScroll() {
        if (document.documentElement.scrollHeight === document.documentElement.clientHeight) {
          return;
        }
        document.body.style.top = toPx(-document.documentElement.scrollTop);
        document.body.classList.add(disableScrollClass);
      }
      function enableScroll() {
        document.body.classList.remove(disableScrollClass);
        document.documentElement.scrollTo({
          top: -parseFloat(getComputedStyle(document.body).top)
        });
        document.body.style.top = "auto";
      }
      function fixMobileSafariActiveTransition() {
        if (!document.body.hasAttribute("ontouchstart")) {
          document.body.setAttribute("ontouchstart", "");
        }
      }
      function defineStylesRoot() {
        customElements.define(globalStylesTag, class TcRootElement extends HTMLElement {});
      }
      function createMacrotask(callback) {
        return __async(this, null, function* () {
          yield new Promise(resolve => requestAnimationFrame(resolve));
          callback();
        });
      }
      function preloadImages(images) {
        if (document.readyState !== "complete") {
          window.addEventListener("load", () => createMacrotask(() => preloadImages(images)), {
            once: true
          });
        } else {
          images.forEach(img => {
            const node = new window.Image();
            node.src = img;
          });
        }
      }
      function getWindow$1() {
        if (typeof window !== "undefined") {
          return window;
        }
        return void 0;
      }
      function lib_tryGetLocalStorage() {
        if (lib_isLocalStorageAvailable()) {
          return localStorage;
        }
        if (lib_isNodeJs()) {
          throw new TonConnectUIError("`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector");
        }
        return lib_InMemoryStorage.getInstance();
      }
      function lib_isLocalStorageAvailable() {
        try {
          return typeof localStorage !== "undefined";
        } catch (e2) {
          return false;
        }
      }
      function lib_isNodeJs() {
        return typeof process !== "undefined" && process.versions != null && process.versions.node != null;
      }
      function getUserAgent() {
        var _a2, _b2;
        const results = new ua_parser().getResult();
        const osName = (_a2 = results.os.name) == null ? void 0 : _a2.toLowerCase();
        let os;
        switch (true) {
          case osName === "ios":
            os = "ios";
            break;
          case osName === "android":
            os = "android";
            break;
          case osName === "mac os":
            os = "macos";
            break;
          case osName === "linux":
            os = "linux";
            break;
          case osName == null ? void 0 : osName.includes("windows"):
            os = "windows";
            break;
        }
        const browserName = (_b2 = results.browser.name) == null ? void 0 : _b2.toLowerCase();
        let browser;
        switch (true) {
          case browserName === "chrome":
            browser = "chrome";
            break;
          case browserName === "firefox":
            browser = "firefox";
            break;
          case browserName == null ? void 0 : browserName.includes("safari"):
            browser = "safari";
            break;
        }
        return {
          os,
          browser
        };
      }
      function isOS() {
        for (var _len13 = arguments.length, os = new Array(_len13), _key14 = 0; _key14 < _len13; _key14++) {
          os[_key14] = arguments[_key14];
        }
        return os.includes(getUserAgent().os);
      }
      function isBrowser() {
        for (var _len14 = arguments.length, browser = new Array(_len14), _key15 = 0; _key15 < _len14; _key15++) {
          browser[_key15] = arguments[_key15];
        }
        return browser.includes(getUserAgent().browser);
      }
      function toDeeplink(universalLink, deeplink) {
        const url = new URL(universalLink);
        return deeplink + url.search;
      }
      class WalletInfoStorage {
        constructor() {
          __publicField(this, "localStorage");
          __publicField(this, "storageKey", "ton-connect-ui_wallet-info");
          this.localStorage = lib_tryGetLocalStorage();
        }
        setWalletInfo(walletInfo) {
          this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
        }
        getWalletInfo() {
          const walletInfoString = this.localStorage.getItem(this.storageKey);
          if (!walletInfoString) {
            return null;
          }
          return JSON.parse(walletInfoString);
        }
        removeWalletInfo() {
          this.localStorage.removeItem(this.storageKey);
        }
      }
      class PreferredWalletStorage {
        constructor() {
          __publicField(this, "localStorage");
          __publicField(this, "storageKey", "ton-connect-ui_preferred-wallet");
          this.localStorage = lib_tryGetLocalStorage();
        }
        setPreferredWalletAppName(name) {
          this.localStorage.setItem(this.storageKey, name);
        }
        getPreferredWalletAppName() {
          return this.localStorage.getItem(this.storageKey) || void 0;
        }
      }
      class LastSelectedWalletInfoStorage {
        constructor() {
          __publicField(this, "localStorage");
          __publicField(this, "storageKey", "ton-connect-ui_last-selected-wallet-info");
          this.localStorage = lib_tryGetLocalStorage();
        }
        setLastSelectedWalletInfo(walletInfo) {
          this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
        }
        getLastSelectedWalletInfo() {
          const walletInfoString = this.localStorage.getItem(this.storageKey);
          if (!walletInfoString) {
            return null;
          }
          return JSON.parse(walletInfoString);
        }
        removeLastSelectedWalletInfo() {
          this.localStorage.removeItem(this.storageKey);
        }
      }
      const [walletsModalState, setWalletsModalState] = createSignal({
        status: "closed",
        closeReason: null
      });
      const getWalletsModalIsOpened = createMemo(() => walletsModalState().status === "opened");
      const [singleWalletModalState, setSingleWalletModalState] = createSignal({
        status: "closed",
        closeReason: null
      });
      const getSingleWalletModalIsOpened = createMemo(() => singleWalletModalState().status === "opened");
      const getSingleWalletModalWalletInfo = createMemo(() => {
        const state = singleWalletModalState();
        if (state.status === "opened") {
          return state.walletInfo;
        }
        return null;
      });
      let lastSelectedWalletInfoStorage = typeof window !== "undefined" ? new LastSelectedWalletInfoStorage() : void 0;
      const [lastSelectedWalletInfo, _setLastSelectedWalletInfo] = createSignal((lastSelectedWalletInfoStorage == null ? void 0 : lastSelectedWalletInfoStorage.getLastSelectedWalletInfo()) || null);
      const setLastSelectedWalletInfo = walletInfo => {
        if (!lastSelectedWalletInfoStorage) {
          lastSelectedWalletInfoStorage = new LastSelectedWalletInfoStorage();
        }
        if (walletInfo) {
          lastSelectedWalletInfoStorage.setLastSelectedWalletInfo(walletInfo);
        } else {
          lastSelectedWalletInfoStorage.removeLastSelectedWalletInfo();
        }
        _setLastSelectedWalletInfo(walletInfo);
      };
      const [action, setAction] = createSignal(null);
      const common$1 = {
        close: "Close",
        openWallet: "Open wallet",
        copyLink: "Copy Link",
        linkCopied: "Link Copied",
        copied: "Copied",
        yourWallet: "Your Wallet",
        retry: "Retry",
        get: "GET",
        mobile: "Mobile",
        browserExtension: "Browser Extension",
        desktop: "Desktop"
      };
      const button$1 = {
        connectWallet: "Connect Wallet",
        dropdown: {
          copy: "Copy address",
          copied: "Address copied!",
          disconnect: "Disconnect"
        }
      };
      const notifications$1 = {
        confirm: {
          header: "Open {{ name }} to\xA0confirm the\xA0transaction."
        },
        transactionSent: {
          header: "Transaction sent",
          text: "Your transaction\xA0will be\xA0processed in\xA0a\xA0few seconds."
        },
        transactionCanceled: {
          header: "Transaction canceled",
          text: "There will be no changes to\xA0your account."
        }
      };
      const walletItem$1 = {
        walletOn: "Wallet On",
        recent: "Recent",
        installed: "Installed",
        popular: "Popular"
      };
      const walletModal$1 = {
        loading: "Loading wallets",
        wallets: "Wallets",
        mobileUniversalModal: {
          connectYourWallet: "Connect your wallet",
          openWalletOnTelegramOrSelect: "Open Wallet in Telegram or select your wallet to connect",
          openWalletOnTelegram: "Open Wallet in Telegram",
          openLink: "Open Link",
          scan: "Scan with your mobile wallet"
        },
        desktopUniversalModal: {
          connectYourWallet: "Connect your wallet",
          scan: "Scan with your mobile wallet",
          availableWallets: "Available wallets"
        },
        mobileConnectionModal: {
          showQR: "Show QR Code",
          scanQR: "Scan the\xA0QR code below with your phone\u2019s\xA0or\xA0{{ name }}\u2019s camera",
          continueIn: "Continue in {{ name }}\u2026",
          connectionDeclined: "Connection declined"
        },
        desktopConnectionModal: {
          scanQR: "Scan the\xA0QR code below with your phone\u2019s\xA0or\xA0{{ name }}\u2019s camera",
          continueInExtension: "Continue in\xA0{{ name }} browser extension\u2026",
          dontHaveExtension: "Seems you don't have installed {{ name }}\xA0browser\xA0extension",
          getWallet: "Get {{ name }}",
          continueOnDesktop: "Continue in\xA0{{ name }} on desktop\u2026",
          openWalletOnTelegram: "Open Wallet in Telegram on desktop",
          connectionDeclined: "Connection declined"
        },
        infoModal: {
          whatIsAWallet: "What is a wallet",
          secureDigitalAssets: "Secure digital assets storage",
          walletProtects: "A wallet protects and manages your digital assets\xA0including TON, tokens and collectables.",
          controlIdentity: "Control your Web3 identity",
          manageIdentity: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in\xA0the\xA0blockchain ecosystem.",
          effortlessCryptoTransactions: "Effortless crypto transactions",
          easilySend: "Easily send, receive, monitor your cryptocurrencies.\xA0Streamline your operations with\xA0decentralized applications.",
          getAWallet: "Get a Wallet"
        }
      };
      const actionModal$1 = {
        confirmTransaction: {
          header: "Confirm the\xA0transaction in\xA0{{ name }}",
          text: "It will only take a\xA0moment."
        },
        transactionSent: "$notifications.transactionSent",
        transactionCanceled: "$notifications.transactionCanceled"
      };
      const en = {
        common: common$1,
        button: button$1,
        notifications: notifications$1,
        walletItem: walletItem$1,
        walletModal: walletModal$1,
        actionModal: actionModal$1
      };
      const common = {
        close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
        openWallet: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
        copyLink: "\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443",
        linkCopied: "\u0421\u0441\u044B\u043B\u043A\u0430 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0430",
        copied: "\u0421\u0441\u044B\u043B\u043A\u0430 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0430",
        yourWallet: "\u0412\u0430\u0448 \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
        retry: "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C",
        get: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C",
        mobile: "\u041C\u043E\u0431\u0438\u043B\u044C\u043D\u044B\u0439",
        browserExtension: "\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435",
        desktop: "\u0414\u0435\u0441\u043A\u0442\u043E\u043F"
      };
      const lib_button = {
        connectWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
        dropdown: {
          copy: "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0430\u0434\u0440\u0435\u0441",
          copied: "\u0410\u0434\u0440\u0435\u0441 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D!",
          disconnect: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A"
        }
      };
      const notifications = {
        confirm: {
          header: "\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 {{ name }}, \u0447\u0442\u043E\u0431\u044B\xA0\u043F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044C \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E."
        },
        transactionSent: {
          header: "\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0430",
          text: "\u0412\u0430\u0448\u0430 \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F\xA0\u0431\u0443\u0434\u0435\u0442 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u0430 \u0447\u0435\u0440\u0435\u0437\xA0\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434."
        },
        transactionCanceled: {
          header: "\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F \u043E\u0442\u043C\u0435\u043D\u0435\u043D\u0430",
          text: "\u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043E \u0441\u0447\u0451\u0442\u0430 \u043D\u0435\xA0\u0438\u0437\u043C\u0435\u043D\u0438\u0442\u0441\u044F."
        }
      };
      const walletItem = {
        walletOn: "Wallet \u0432",
        recent: "\u041D\u0435\u0434\u0430\u0432\u043D\u0438\u0439",
        installed: "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D",
        popular: "\u041F\u043E\u043F\u0443\u043B\u044F\u0440\u0435\u043D"
      };
      const walletModal = {
        loading: "\u041A\u043E\u0448\u0435\u043B\u044C\u043A\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044E\u0442\u0441\u044F",
        wallets: "\u041A\u043E\u0448\u0435\u043B\u044C\u043A\u0438",
        mobileUniversalModal: {
          connectYourWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
          openWalletOnTelegramOrSelect: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0435 Wallet \u0432\xA0Telegram \u0438\u043B\u0438\xA0\u0432\u044B\u0431\u0435\u0440\u0435\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A \u0434\u043B\u044F\xA0\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F",
          openWalletOnTelegram: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C Wallet \u0432 Telegram",
          openLink: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443",
          scan: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\u0430\u0448\u0435\u0433\u043E\xA0\u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430"
        },
        desktopUniversalModal: {
          connectYourWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
          scan: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 QR-\u043A\u043E\u0434 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\u0430\u0448\u0435\u0433\u043E\xA0\u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430",
          availableWallets: "\u0414\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0435 \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0438"
        },
        mobileConnectionModal: {
          showQR: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C QR-\u043A\u043E\u0434",
          scanQR: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 QR-\u043A\u043E\u0434 \u043D\u0438\u0436\u0435 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\xA0\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0438 {{ name }}, \u0438\u043B\u0438\xA0\u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430",
          continueIn: "\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u0435 \u0432 {{ name }}\u2026",
          connectionDeclined: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043E\u0442\u043A\u043B\u043E\u043D\u0435\u043D\u043E"
        },
        desktopConnectionModal: {
          scanQR: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 QR-\u043A\u043E\u0434 \u043D\u0438\u0436\u0435 \u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0432\xA0\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0438 {{ name }}, \u0438\u043B\u0438\xA0\u043A\u0430\u043C\u0435\u0440\u043E\u0439 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0430",
          continueInExtension: "\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043D\u043E\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435 {{ name }}",
          dontHaveExtension: "\u041F\u043E\u0445\u043E\u0436\u0435, \u0443 \u0432\u0430\u0441 \u043D\u0435\xA0\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043D\u043E\u0435\xA0\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\xA0{{ name }}",
          getWallet: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C {{ name }}",
          continueOnDesktop: "\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 {{ name }} \u043D\u0430\xA0\u043A\u043E\u043C\u043F\u044C\u044E\u0442\u0435\u0440\u0435\u2026",
          openWalletOnTelegram: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C Wallet \u0432\xA0Telegram",
          connectionDeclined: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043E\u0442\u043A\u043B\u043E\u043D\u0435\u043D\u043E"
        },
        infoModal: {
          whatIsAWallet: "\u0427\u0442\u043E \u0442\u0430\u043A\u043E\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A?",
          secureDigitalAssets: "\u041D\u0430\u0434\u0435\u0436\u043D\u043E\u0435 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435 \u0446\u0438\u0444\u0440\u043E\u0432\u044B\u0445 \u0430\u043A\u0442\u0438\u0432\u043E\u0432",
          walletProtects: "\u041A\u043E\u0448\u0435\u043B\u0451\u043A \u0437\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u0432\u0430\u0448\u0438 \u0446\u0438\u0444\u0440\u043E\u0432\u044B\u0435 \u0430\u043A\u0442\u0438\u0432\u044B, \u0432\u043A\u043B\u044E\u0447\u0430\u044F TON, \u0442\u043E\u043A\u0435\u043D\u044B \u0438\xA0\u043F\u0440\u0435\u0434\u043C\u0435\u0442\u044B \u043A\u043E\u043B\u043B\u0435\u043A\u0446\u0438\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F, \u0438\xA0\u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u0442 \u0438\u043C\u0438.",
          controlIdentity: "\u041A\u043E\u043D\u0442\u0440\u043E\u043B\u044C \u0441\u0432\u043E\u0435\u0439 \u043B\u0438\u0447\u043D\u043E\u0441\u0442\u0438 Web3",
          manageIdentity: "\u0423\u043F\u0440\u0430\u0432\u043B\u044F\u0439\u0442\u0435 \u0441\u0432\u043E\u0435\u0439 \u0446\u0438\u0444\u0440\u043E\u0432\u043E\u0439 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439 \u0438\xA0\u0441\xA0\u043B\u0435\u0433\u043A\u043E\u0441\u0442\u044C\u044E \u043F\u043E\u043B\u0443\u0447\u0430\u0439\u0442\u0435 \u0434\u043E\u0441\u0442\u0443\u043F \u043A\xA0\u0434\u0435\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u0438\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u043C \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F\u043C. \u0421\u043E\u0445\u0440\u0430\u043D\u044F\u0439\u0442\u0435 \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C \u043D\u0430\u0434\xA0\u0441\u0432\u043E\u0438\u043C\u0438 \u0434\u0430\u043D\u043D\u044B\u043C\u0438 \u0438\xA0\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0432\xA0\u044D\u043A\u043E\u0441\u0438\u0441\u0442\u0435\u043C\u0435\xA0\u0431\u043B\u043E\u043A\u0447\u0435\u0439\u043D\u0430.",
          effortlessCryptoTransactions: "\u041F\u0440\u043E\u0441\u0442\u044B\u0435 \u043A\u0440\u0438\u043F\u0442\u043E\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438",
          easilySend: "\u041B\u0435\u0433\u043A\u043E \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0439\u0442\u0435, \u043F\u043E\u043B\u0443\u0447\u0430\u0439\u0442\u0435 \u0438\xA0\u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0441\u0432\u043E\u0438 \u043A\u0440\u0438\u043F\u0442\u043E\u0432\u0430\u043B\u044E\u0442\u044B. \u041E\u043F\u0442\u0438\u043C\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0432\u043E\u0438 \u043E\u043F\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\xA0\u043F\u043E\u043C\u043E\u0449\u044C\u044E \u0434\u0435\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u0438\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u0445 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0439.",
          getAWallet: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A"
        }
      };
      const actionModal = {
        confirmTransaction: {
          header: "\u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432\xA0{{ name }}",
          text: "\u042D\u0442\u043E \u0437\u0430\u0439\u043C\u0435\u0442 \u043F\u0430\u0440\u0443 \u0441\u0435\u043A\u0443\u043D\u0434."
        },
        transactionSent: "$notifications.transactionSent",
        transactionCanceled: "$notifications.transactionCanceled"
      };
      const ru = {
        common,
        button: lib_button,
        notifications,
        walletItem,
        walletModal,
        actionModal
      };
      const i18nDictionary = {
        en: parseDictionary(en),
        ru: parseDictionary(ru)
      };
      function parseDictionary(dictionary) {
        const refSymbol = "$";
        const iterate = subDictionary => {
          Object.entries(subDictionary).forEach(_ref11 => {
            let [key, value] = _ref11;
            if (typeof value === "object" && value) {
              return iterate(value);
            }
            if (typeof value === "string") {
              if (value[0] === refSymbol) {
                const path = value.slice(1).split(".");
                let obj = dictionary;
                path.forEach(item => {
                  if (item in obj) {
                    obj = obj[item];
                  } else {
                    throw new Error(`Cannot parse translations: there is no property ${item} in translation`);
                  }
                });
                subDictionary[key] = obj;
              }
              if (value.slice(0, 2) === `\\${refSymbol}`) {
                subDictionary[key] = value.slice(1);
              }
            }
          });
        };
        iterate(dictionary);
        return dictionary;
      }
      const ConnectorContext = createContext();
      const $RAW = Symbol("store-raw"),
        $NODE = Symbol("store-node"),
        $NAME = Symbol("store-name");
      function wrap$1(value, name) {
        let p2 = value[$PROXY];
        if (!p2) {
          Object.defineProperty(value, $PROXY, {
            value: p2 = new Proxy(value, proxyTraps$1)
          });
          if (!Array.isArray(value)) {
            const keys = Object.keys(value),
              desc = Object.getOwnPropertyDescriptors(value);
            for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
              const prop = keys[i2];
              if (desc[prop].get) {
                Object.defineProperty(value, prop, {
                  enumerable: desc[prop].enumerable,
                  get: desc[prop].get.bind(p2)
                });
              }
            }
          }
        }
        return p2;
      }
      function isWrappable(obj) {
        let proto;
        return obj != null && typeof obj === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
      }
      function unwrap(item, set) {
        if (set === void 0) {
          set = /* @__PURE__ */new Set();
        }
        let result, unwrapped, v, prop;
        if (result = item != null && item[$RAW]) return result;
        if (!isWrappable(item) || set.has(item)) return item;
        if (Array.isArray(item)) {
          if (Object.isFrozen(item)) item = item.slice(0);else set.add(item);
          for (let i2 = 0, l2 = item.length; i2 < l2; i2++) {
            v = item[i2];
            if ((unwrapped = unwrap(v, set)) !== v) item[i2] = unwrapped;
          }
        } else {
          if (Object.isFrozen(item)) item = Object.assign({}, item);else set.add(item);
          const keys = Object.keys(item),
            desc = Object.getOwnPropertyDescriptors(item);
          for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
            prop = keys[i2];
            if (desc[prop].get) continue;
            v = item[prop];
            if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;
          }
        }
        return item;
      }
      function getDataNodes(target) {
        let nodes = target[$NODE];
        if (!nodes) Object.defineProperty(target, $NODE, {
          value: nodes = {}
        });
        return nodes;
      }
      function getDataNode(nodes, property, value) {
        return nodes[property] || (nodes[property] = createDataNode(value));
      }
      function proxyDescriptor$1(target, property) {
        const desc = Reflect.getOwnPropertyDescriptor(target, property);
        if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE || property === $NAME) return desc;
        delete desc.value;
        delete desc.writable;
        desc.get = () => target[$PROXY][property];
        return desc;
      }
      function trackSelf(target) {
        if (getListener()) {
          const nodes = getDataNodes(target);
          (nodes._ || (nodes._ = createDataNode()))();
        }
      }
      function ownKeys(target) {
        trackSelf(target);
        return Reflect.ownKeys(target);
      }
      function createDataNode(value) {
        const [s2, set] = createSignal(value, {
          equals: false,
          internal: true
        });
        s2.$ = set;
        return s2;
      }
      const proxyTraps$1 = {
        get(target, property, receiver) {
          if (property === $RAW) return target;
          if (property === $PROXY) return receiver;
          if (property === $TRACK) {
            trackSelf(target);
            return receiver;
          }
          const nodes = getDataNodes(target);
          const tracked = nodes.hasOwnProperty(property);
          let value = tracked ? nodes[property]() : target[property];
          if (property === $NODE || property === "__proto__") return value;
          if (!tracked) {
            const desc = Object.getOwnPropertyDescriptor(target, property);
            if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get)) value = getDataNode(nodes, property, value)();
          }
          return isWrappable(value) ? wrap$1(value) : value;
        },
        has(target, property) {
          if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === "__proto__") return true;
          this.get(target, property, target);
          return property in target;
        },
        set() {
          return true;
        },
        deleteProperty() {
          return true;
        },
        ownKeys,
        getOwnPropertyDescriptor: proxyDescriptor$1
      };
      function setProperty(state, property, value, deleting) {
        if (deleting === void 0) {
          deleting = false;
        }
        if (!deleting && state[property] === value) return;
        const prev = state[property],
          len = state.length;
        if (value === void 0) delete state[property];else state[property] = value;
        let nodes = getDataNodes(state),
          node;
        if (node = getDataNode(nodes, property, prev)) node.$(() => value);
        if (Array.isArray(state) && state.length !== len) (node = getDataNode(nodes, "length", len)) && node.$(state.length);
        (node = nodes._) && node.$();
      }
      function mergeStoreNode(state, value) {
        const keys = Object.keys(value);
        for (let i2 = 0; i2 < keys.length; i2 += 1) {
          const key = keys[i2];
          setProperty(state, key, value[key]);
        }
      }
      function updateArray(current, next) {
        if (typeof next === "function") next = next(current);
        next = unwrap(next);
        if (Array.isArray(next)) {
          if (current === next) return;
          let i2 = 0,
            len = next.length;
          for (; i2 < len; i2++) {
            const value = next[i2];
            if (current[i2] !== value) setProperty(current, i2, value);
          }
          setProperty(current, "length", len);
        } else mergeStoreNode(current, next);
      }
      function updatePath(current, path, traversed) {
        if (traversed === void 0) {
          traversed = [];
        }
        let part,
          prev = current;
        if (path.length > 1) {
          part = path.shift();
          const partType = typeof part,
            isArray = Array.isArray(current);
          if (Array.isArray(part)) {
            for (let i2 = 0; i2 < part.length; i2++) {
              updatePath(current, [part[i2]].concat(path), traversed);
            }
            return;
          } else if (isArray && partType === "function") {
            for (let i2 = 0; i2 < current.length; i2++) {
              if (part(current[i2], i2)) updatePath(current, [i2].concat(path), traversed);
            }
            return;
          } else if (isArray && partType === "object") {
            const {
              from = 0,
              to = current.length - 1,
              by = 1
            } = part;
            for (let i2 = from; i2 <= to; i2 += by) {
              updatePath(current, [i2].concat(path), traversed);
            }
            return;
          } else if (path.length > 1) {
            updatePath(current[part], path, [part].concat(traversed));
            return;
          }
          prev = current[part];
          traversed = [part].concat(traversed);
        }
        let value = path[0];
        if (typeof value === "function") {
          value = value(prev, traversed);
          if (value === prev) return;
        }
        if (part === void 0 && value == void 0) return;
        value = unwrap(value);
        if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {
          mergeStoreNode(prev, value);
        } else setProperty(current, part, value);
      }
      function createStore() {
        for (var _len15 = arguments.length, _ref12 = new Array(_len15), _key16 = 0; _key16 < _len15; _key16++) {
          _ref12[_key16] = arguments[_key16];
        }
        let [store, options] = _ref12;
        const unwrappedStore = unwrap(store || {});
        const isArray = Array.isArray(unwrappedStore);
        const wrappedStore = wrap$1(unwrappedStore);
        function setStore() {
          for (var _len16 = arguments.length, args = new Array(_len16), _key17 = 0; _key17 < _len16; _key17++) {
            args[_key17] = arguments[_key17];
          }
          batch(() => {
            isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
          });
        }
        return [wrappedStore, setStore];
      }
      const defaultLightColorsSet = {
        constant: {
          black: "#000000",
          white: "#FFFFFF"
        },
        connectButton: {
          background: "#0098EA",
          foreground: "#FFFFFF"
        },
        accent: "#0098EA",
        telegramButton: "#0098EA",
        icon: {
          primary: "#0F0F0F",
          secondary: "#7A8999",
          tertiary: "#C1CAD2",
          success: "#29CC6A",
          error: "#F5A73B"
        },
        background: {
          primary: "#FFFFFF",
          secondary: "#F1F3F5",
          segment: "#FFFFFF",
          tint: "#F1F3F5",
          qr: "#F1F3F5"
        },
        text: {
          primary: "#0F0F0F",
          secondary: "#6A7785"
        }
      };
      const defaultDarkColorsSet = {
        constant: {
          black: "#000000",
          white: "#FFFFFF"
        },
        connectButton: {
          background: "#0098EA",
          foreground: "#FFFFFF"
        },
        accent: "#E5E5EA",
        telegramButton: "#31A6F5",
        icon: {
          primary: "#E5E5EA",
          secondary: "#909099",
          tertiary: "#434347",
          success: "#29CC6A",
          error: "#F5A73B"
        },
        background: {
          primary: "#121214",
          secondary: "#18181A",
          segment: "#262629",
          tint: "#222224",
          qr: "#FFFFFF"
        },
        text: {
          primary: "#E5E5EA",
          secondary: "#7D7D85"
        }
      }; /*!
         * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
         *
         * Copyright (c) 2014-2017, Jon Schlinkert.
         * Released under the MIT License.
         */
      function isObject(o2) {
        return Object.prototype.toString.call(o2) === "[object Object]";
      }
      function isPlainObject(o2) {
        var ctor, prot;
        if (isObject(o2) === false) return false;
        ctor = o2.constructor;
        if (ctor === void 0) return true;
        prot = ctor.prototype;
        if (isObject(prot) === false) return false;
        if (prot.hasOwnProperty("isPrototypeOf") === false) {
          return false;
        }
        return true;
      }
      function mergeOptions(options, defaultOptions) {
        if (!options) {
          return defaultOptions;
        }
        const overwriteMerge = (_, sourceArray, __) => sourceArray;
        return cjs(defaultOptions, options, {
          arrayMerge: overwriteMerge,
          isMergeableObject: isPlainObject
        });
      }
      const [themeState, setThemeState] = createStore({
        theme: THEME.LIGHT,
        colors: defaultLightColorsSet,
        borderRadius: "m"
      });
      const themeColorsMappingDefault = {
        [THEME.LIGHT]: defaultLightColorsSet,
        [THEME.DARK]: defaultDarkColorsSet
      };
      const themeCustomColors = {
        [THEME.LIGHT]: void 0,
        [THEME.DARK]: void 0
      };
      function setTheme(theme, colorsSet) {
        if (colorsSet) {
          themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);
          themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);
        }
        setThemeState({
          theme,
          colors: mergeOptions(themeCustomColors[theme], themeColorsMappingDefault[theme])
        });
      }
      function setBorderRadius(borderRadius) {
        setThemeState({
          borderRadius
        });
      }
      function setColors(colorsSet) {
        themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);
        themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);
        setThemeState(state => ({
          colors: mergeOptions(themeCustomColors[state.theme], themeColorsMappingDefault[state.theme])
        }));
      }
      const ImagePlaceholder = styled.div`
    background-color: ${props => props.theme.colors.background.secondary};
`;
      const Image = props => {
        let imgRef;
        const [image, setImage] = createSignal(null);
        createEffect(() => {
          const img = new window.Image();
          img.src = props.src;
          img.alt = props.alt || "";
          img.setAttribute("draggable", "false");
          if (props.class) {
            img.classList.add(props.class);
          }
          if (img.complete) {
            return setImage(img);
          }
          img.addEventListener("load", () => setImage(img));
          return () => img.removeEventListener("load", () => setImage(img));
        });
        return [createComponent(Show, {
          get when() {
            return image();
          },
          get children() {
            return image();
          }
        }), createComponent(Show, {
          get when() {
            return !image();
          },
          get children() {
            return createComponent(ImagePlaceholder, {
              get ["class"]() {
                return props.class;
              },
              ref(r$) {
                const _ref$ = imgRef;
                typeof _ref$ === "function" ? _ref$(r$) : imgRef = r$;
              }
            });
          }
        })];
      };
      function lib_logError() {
        {
          try {
            for (var _len17 = arguments.length, args = new Array(_len17), _key18 = 0; _key18 < _len17; _key18++) {
              args[_key18] = arguments[_key18];
            }
            console.error("[TON_CONNECT_UI]", ...args);
          } catch (e2) {}
        }
      }
      function lib_logWarning() {
        {
          try {
            for (var _len18 = arguments.length, args = new Array(_len18), _key19 = 0; _key19 < _len18; _key19++) {
              args[_key19] = arguments[_key19];
            }
            console.warn("[TON_CONNECT_UI]", ...args);
          } catch (e2) {}
        }
      }
      let initParams = {};
      try {
        let locationHash = location.hash.toString();
        initParams = urlParseHashParams(locationHash);
      } catch (e2) {}
      let tmaPlatform = "unknown";
      if (initParams == null ? void 0 : initParams.tgWebAppPlatform) {
        tmaPlatform = (_a = initParams.tgWebAppPlatform) != null ? _a : "unknown";
      }
      if (tmaPlatform === "unknown") {
        const window2 = getWindow$1();
        tmaPlatform = (_d = (_c = (_b = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _b.WebApp) == null ? void 0 : _c.platform) != null ? _d : "unknown";
      }
      let webAppVersion = "6.0";
      if (initParams == null ? void 0 : initParams.tgWebAppVersion) {
        webAppVersion = initParams.tgWebAppVersion;
      }
      if (!webAppVersion) {
        const window2 = getWindow$1();
        webAppVersion = (_g = (_f = (_e = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _e.WebApp) == null ? void 0 : _f.version) != null ? _g : "6.0";
      }
      function isTmaPlatform() {
        for (var _len19 = arguments.length, platforms = new Array(_len19), _key20 = 0; _key20 < _len19; _key20++) {
          platforms[_key20] = arguments[_key20];
        }
        return platforms.includes(tmaPlatform);
      }
      function isInTMA() {
        var _a2;
        return tmaPlatform !== "unknown" || !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebviewProxy);
      }
      function sendExpand() {
        postEvent("web_app_expand", {});
      }
      function sendOpenTelegramLink(link) {
        const url = new URL(link);
        if (url.protocol !== "http:" && url.protocol !== "https:") {
          throw new TonConnectUIError(`Url protocol is not supported: ${url}`);
        }
        if (url.hostname !== "t.me") {
          throw new TonConnectUIError(`Url host is not supported: ${url}`);
        }
        const pathFull = url.pathname + url.search;
        if (isIframe() || versionAtLeast("6.1")) {
          postEvent("web_app_open_tg_link", {
            path_full: pathFull
          });
        } else {
          openLinkBlank("https://t.me" + pathFull);
        }
      }
      function isIframe() {
        try {
          const window2 = getWindow$1();
          if (!window2) {
            return false;
          }
          return window2.parent != null && window2 !== window2.parent;
        } catch (e2) {
          return false;
        }
      }
      function postEvent(eventType, eventData) {
        try {
          const window2 = getWindow$1();
          if (!window2) {
            throw new TonConnectUIError(`Can't post event to parent window: window is not defined`);
          }
          if (window2.TelegramWebviewProxy !== void 0) {
            window2.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));
          } else if (window2.external && "notify" in window2.external) {
            window2.external.notify(JSON.stringify({
              eventType,
              eventData
            }));
          } else if (isIframe()) {
            const trustedTarget = "*";
            const message = JSON.stringify({
              eventType,
              eventData
            });
            window2.parent.postMessage(message, trustedTarget);
          } else {
            throw new TonConnectUIError(`Can't post event to TMA`);
          }
        } catch (e2) {
          lib_logError(`Can't post event to parent window: ${e2}`);
        }
      }
      function urlParseHashParams(locationHash) {
        locationHash = locationHash.replace(/^#/, "");
        let params = {};
        if (!locationHash.length) {
          return params;
        }
        if (locationHash.indexOf("=") < 0 && locationHash.indexOf("?") < 0) {
          params._path = urlSafeDecode(locationHash);
          return params;
        }
        let qIndex = locationHash.indexOf("?");
        if (qIndex >= 0) {
          let pathParam = locationHash.substr(0, qIndex);
          params._path = urlSafeDecode(pathParam);
          locationHash = locationHash.substr(qIndex + 1);
        }
        let query_params = urlParseQueryString(locationHash);
        for (let k in query_params) {
          params[k] = query_params[k];
        }
        return params;
      }
      function urlSafeDecode(urlencoded) {
        try {
          urlencoded = urlencoded.replace(/\+/g, "%20");
          return decodeURIComponent(urlencoded);
        } catch (e2) {
          return urlencoded;
        }
      }
      function urlParseQueryString(queryString) {
        let params = {};
        if (!queryString.length) {
          return params;
        }
        let queryStringParams = queryString.split("&");
        let i2, param, paramName, paramValue;
        for (i2 = 0; i2 < queryStringParams.length; i2++) {
          param = queryStringParams[i2].split("=");
          paramName = urlSafeDecode(param[0]);
          paramValue = param[1] == null ? null : urlSafeDecode(param[1]);
          params[paramName] = paramValue;
        }
        return params;
      }
      function versionCompare(v1, v2) {
        if (typeof v1 !== "string") v1 = "";
        if (typeof v2 !== "string") v2 = "";
        let v1List = v1.replace(/^\s+|\s+$/g, "").split(".");
        let v2List = v2.replace(/^\s+|\s+$/g, "").split(".");
        let a2, i2, p1, p2;
        a2 = Math.max(v1List.length, v2List.length);
        for (i2 = 0; i2 < a2; i2++) {
          p1 = parseInt(v1List[i2]) || 0;
          p2 = parseInt(v2List[i2]) || 0;
          if (p1 === p2) continue;
          if (p1 > p2) return 1;
          return -1;
        }
        return 0;
      }
      function versionAtLeast(ver) {
        return versionCompare(webAppVersion, ver) >= 0;
      }
      const maxWidth = {
        mobile: 440,
        tablet: 1020
      };
      function isDevice(device) {
        const window2 = getWindow$1();
        if (!window2) {
          return device === "desktop";
        }
        if (isTmaPlatform("weba")) {
          return true;
        }
        const width = window2.innerWidth;
        switch (device) {
          case "desktop":
            return width > maxWidth.tablet;
          case "tablet":
            return width > maxWidth.mobile;
          default:
          case "mobile":
            return width <= maxWidth.mobile;
        }
      }
      function media(device) {
        switch (device) {
          case "mobile":
            return `@media (max-width: ${maxWidth.mobile}px)`;
          case "tablet":
            return `@media (max-width: ${maxWidth.tablet}px) (min-width: ${maxWidth.mobile}px)`;
          default:
          case "desktop":
            return `@media (min-width: ${maxWidth.tablet}px)`;
        }
      }
      const mediaTouch = "@media (hover: none)";
      const mediaNotTouch = "@media not all and (hover: none)";
      const borders$5 = {
        m: "100vh",
        s: "8px",
        none: "0"
      };
      const scaleValues = {
        s: 0.02,
        m: 0.04
      };
      const ButtonStyled$1 = styled.button`
    display: ${props => props.leftIcon || props.rightIcon ? "flex" : "inline-block"};
    gap: ${props => props.leftIcon || props.rightIcon ? "6px" : "unset"};
    align-items: ${props => props.leftIcon || props.rightIcon ? "center" : "unset"};
    justify-content: ${props => props.leftIcon || props.rightIcon ? "space-between" : "unset"};
    background-color: ${props => props.appearance === "flat" ? "transparent" : props.appearance === "secondary" ? props.theme.colors.background.tint : rgba(props.theme.colors.accent, 0.12)};
    color: ${props => props.appearance === "secondary" ? props.theme.colors.text.primary : props.theme.colors.accent};

    padding: ${props => props.appearance === "flat" ? "0" : "9px 16px"};
    padding-left: ${props => props.leftIcon && props.appearance !== "flat" ? "12px" : "16px"};
    padding-right: ${props => props.rightIcon && props.appearance !== "flat" ? "12px" : "16px"};
    border: none;
    border-radius: ${props => borders$5[props.theme.borderRadius]};
    cursor: ${props => props.disabled ? "not-allowed" : "pointer"};

    font-size: 14px;
    font-weight: 590;
    line-height: 18px;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: ${props => props.disabled ? "unset" : `scale(${1 + scaleValues[props.scale]})`};
        }
    }

    &:active {
        transform: ${props => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale]})`};
    }

    ${mediaTouch} {
        &:active {
            transform: ${props => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale] * 2})`};
        }
    }
`;
      function useDataAttributes(props) {
        const keys = untrack(() => Object.keys(props).filter(key => key.startsWith("data-")));
        const [dataAttrs] = splitProps(props, keys);
        return dataAttrs;
      }
      const Button = props => {
        const dataAttrs = useDataAttributes(props);
        return createComponent(ButtonStyled$1, mergeProps({
          get appearance() {
            return props.appearance || "primary";
          },
          get ["class"]() {
            return props.class;
          },
          onClick: e2 => {
            var _a2;
            return (_a2 = props.onClick) == null ? void 0 : _a2.call(props, e2);
          },
          onMouseEnter: e2 => {
            var _a2;
            return (_a2 = props.onMouseEnter) == null ? void 0 : _a2.call(props, e2);
          },
          onMouseLeave: e2 => {
            var _a2;
            return (_a2 = props.onMouseLeave) == null ? void 0 : _a2.call(props, e2);
          },
          ref(r$) {
            const _ref$ = props.ref;
            typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
          },
          get disabled() {
            return props.disabled;
          },
          get scale() {
            return props.scale || "m";
          },
          get leftIcon() {
            return !!props.leftIcon;
          },
          get rightIcon() {
            return !!props.rightIcon;
          },
          "data-tc-button": "true"
        }, dataAttrs, {
          get children() {
            return [createMemo(() => props.leftIcon), createMemo(() => props.children), createMemo(() => props.rightIcon)];
          }
        }));
      };
      function nextFrame(fn) {
        requestAnimationFrame(() => {
          requestAnimationFrame(fn);
        });
      }
      const Transition = props => {
        let el;
        let first = true;
        const [s1, set1] = createSignal();
        const [s2, set2] = createSignal();
        const resolved = children(() => props.children);
        const {
          onBeforeEnter,
          onEnter,
          onAfterEnter,
          onBeforeExit,
          onExit,
          onAfterExit
        } = props;
        const classnames = createMemo(() => {
          const name = props.name || "s";
          return {
            enterActiveClass: props.enterActiveClass || name + "-enter-active",
            enterClass: props.enterClass || name + "-enter",
            enterToClass: props.enterToClass || name + "-enter-to",
            exitActiveClass: props.exitActiveClass || name + "-exit-active",
            exitClass: props.exitClass || name + "-exit",
            exitToClass: props.exitToClass || name + "-exit-to"
          };
        });
        function enterTransition(el2, prev) {
          if (!first || props.appear) {
            let endTransition = function (e2) {
              if (el2 && (!e2 || e2.target === el2)) {
                el2.removeEventListener("transitionend", endTransition);
                el2.removeEventListener("animationend", endTransition);
                el2.classList.remove(...enterActiveClasses);
                el2.classList.remove(...enterToClasses);
                batch(() => {
                  s1() !== el2 && set1(el2);
                  s2() === el2 && set2(void 0);
                });
                onAfterEnter && onAfterEnter(el2);
                if (props.mode === "inout") exitTransition(el2, prev);
              }
            };
            const enterClasses = classnames().enterClass.split(" ");
            const enterActiveClasses = classnames().enterActiveClass.split(" ");
            const enterToClasses = classnames().enterToClass.split(" ");
            onBeforeEnter && onBeforeEnter(el2);
            el2.classList.add(...enterClasses);
            el2.classList.add(...enterActiveClasses);
            nextFrame(() => {
              el2.classList.remove(...enterClasses);
              el2.classList.add(...enterToClasses);
              onEnter && onEnter(el2, () => endTransition());
              if (!onEnter || onEnter.length < 2) {
                el2.addEventListener("transitionend", endTransition);
                el2.addEventListener("animationend", endTransition);
              }
            });
          }
          prev && !props.mode ? set2(el2) : set1(el2);
        }
        function exitTransition(el2, prev) {
          const exitClasses = classnames().exitClass.split(" ");
          const exitActiveClasses = classnames().exitActiveClass.split(" ");
          const exitToClasses = classnames().exitToClass.split(" ");
          if (!prev.parentNode) return endTransition();
          onBeforeExit && onBeforeExit(prev);
          prev.classList.add(...exitClasses);
          prev.classList.add(...exitActiveClasses);
          nextFrame(() => {
            prev.classList.remove(...exitClasses);
            prev.classList.add(...exitToClasses);
          });
          onExit && onExit(prev, () => endTransition());
          if (!onExit || onExit.length < 2) {
            prev.addEventListener("transitionend", endTransition);
            prev.addEventListener("animationend", endTransition);
          }
          function endTransition(e2) {
            if (!e2 || e2.target === prev) {
              prev.removeEventListener("transitionend", endTransition);
              prev.removeEventListener("animationend", endTransition);
              prev.classList.remove(...exitActiveClasses);
              prev.classList.remove(...exitToClasses);
              s1() === prev && set1(void 0);
              onAfterExit && onAfterExit(prev);
              if (props.mode === "outin") enterTransition(el2, prev);
            }
          }
        }
        createComputed(prev => {
          el = resolved();
          while (typeof el === "function") el = el();
          return untrack(() => {
            if (el && el !== prev) {
              if (props.mode !== "outin") enterTransition(el, prev);else if (first) set1(el);
            }
            if (prev && prev !== el && props.mode !== "inout") exitTransition(el, prev);
            first = false;
            return el;
          });
        });
        return [s1, s2];
      };
      function getRect(element) {
        const {
          top,
          bottom,
          left,
          right,
          width,
          height
        } = element.getBoundingClientRect();
        const parentRect = element.parentNode.getBoundingClientRect();
        return {
          top: top - parentRect.top,
          bottom,
          left: left - parentRect.left,
          right,
          width,
          height
        };
      }
      const TransitionGroup = props => {
        const resolved = children(() => props.children);
        const classnames = createMemo(() => {
          const name = props.name || "s";
          return {
            enterActiveClass: props.enterActiveClass || name + "-enter-active",
            enterClass: props.enterClass || name + "-enter",
            enterToClass: props.enterToClass || name + "-enter-to",
            exitActiveClass: props.exitActiveClass || name + "-exit-active",
            exitClass: props.exitClass || name + "-exit",
            exitToClass: props.exitToClass || name + "-exit-to",
            moveClass: props.moveClass || name + "-move"
          };
        });
        const {
          onBeforeEnter,
          onEnter,
          onAfterEnter,
          onBeforeExit,
          onExit,
          onAfterExit
        } = props;
        const [combined, setCombined] = createSignal();
        let p2 = [];
        let first = true;
        createComputed(() => {
          const c2 = resolved();
          const comb = [...c2];
          const next = new Set(c2);
          const prev = new Set(p2);
          const enterClasses = classnames().enterClass.split(" ");
          const enterActiveClasses = classnames().enterActiveClass.split(" ");
          const enterToClasses = classnames().enterToClass.split(" ");
          const exitClasses = classnames().exitClass.split(" ");
          const exitActiveClasses = classnames().exitActiveClass.split(" ");
          const exitToClasses = classnames().exitToClass.split(" ");
          for (let i2 = 0; i2 < c2.length; i2++) {
            const el = c2[i2];
            if (!first && !prev.has(el)) {
              let endTransition = function (e2) {
                if (el && (!e2 || e2.target === el)) {
                  el.removeEventListener("transitionend", endTransition);
                  el.removeEventListener("animationend", endTransition);
                  el.classList.remove(...enterActiveClasses);
                  el.classList.remove(...enterToClasses);
                  onAfterEnter && onAfterEnter(el);
                }
              };
              onBeforeEnter && onBeforeEnter(el);
              el.classList.add(...enterClasses);
              el.classList.add(...enterActiveClasses);
              nextFrame(() => {
                el.classList.remove(...enterClasses);
                el.classList.add(...enterToClasses);
                onEnter && onEnter(el, () => endTransition());
                if (!onEnter || onEnter.length < 2) {
                  el.addEventListener("transitionend", endTransition);
                  el.addEventListener("animationend", endTransition);
                }
              });
            }
          }
          for (let i2 = 0; i2 < p2.length; i2++) {
            const old = p2[i2];
            if (!next.has(old) && old.parentNode) {
              let endTransition = function (e2) {
                if (!e2 || e2.target === old) {
                  old.removeEventListener("transitionend", endTransition);
                  old.removeEventListener("animationend", endTransition);
                  old.classList.remove(...exitActiveClasses);
                  old.classList.remove(...exitToClasses);
                  onAfterExit && onAfterExit(old);
                  p2 = p2.filter(i3 => i3 !== old);
                  setCombined(p2);
                }
              };
              comb.splice(i2, 0, old);
              onBeforeExit && onBeforeExit(old);
              old.classList.add(...exitClasses);
              old.classList.add(...exitActiveClasses);
              nextFrame(() => {
                old.classList.remove(...exitClasses);
                old.classList.add(...exitToClasses);
              });
              onExit && onExit(old, () => endTransition());
              if (!onExit || onExit.length < 2) {
                old.addEventListener("transitionend", endTransition);
                old.addEventListener("animationend", endTransition);
              }
            }
          }
          p2 = comb;
          setCombined(comb);
        });
        createEffect(nodes => {
          const c2 = combined();
          c2.forEach(child => {
            let n2;
            if (!(n2 = nodes.get(child))) {
              nodes.set(child, n2 = {
                pos: getRect(child),
                new: !first
              });
            } else if (n2.new) {
              n2.new = false;
              n2.newPos = getRect(child);
            }
            if (n2.new) {
              child.addEventListener("transitionend", () => {
                n2.new = false;
                child.parentNode && (n2.newPos = getRect(child));
              }, {
                once: true
              });
            }
            n2.newPos && (n2.pos = n2.newPos);
            n2.newPos = getRect(child);
          });
          if (first) {
            first = false;
            return nodes;
          }
          c2.forEach(child => {
            const c3 = nodes.get(child);
            const oldPos = c3.pos;
            const newPos = c3.newPos;
            const dx = oldPos.left - newPos.left;
            const dy = oldPos.top - newPos.top;
            if (dx || dy) {
              c3.moved = true;
              const s2 = child.style;
              s2.transform = `translate(${dx}px,${dy}px)`;
              s2.transitionDuration = "0s";
            }
          });
          document.body.offsetHeight;
          c2.forEach(child => {
            const c3 = nodes.get(child);
            if (c3.moved) {
              let endTransition = function (e2) {
                if (e2 && e2.target !== child || !child.parentNode) return;
                if (!e2 || /transform$/.test(e2.propertyName)) {
                  child.removeEventListener("transitionend", endTransition);
                  child.classList.remove(...moveClasses);
                }
              };
              c3.moved = false;
              const s2 = child.style;
              const moveClasses = classnames().moveClass.split(" ");
              child.classList.add(...moveClasses);
              s2.transform = s2.transitionDuration = "";
              child.addEventListener("transitionend", endTransition);
            }
          });
          return nodes;
        }, /* @__PURE__ */new Map());
        return combined;
      };
      function clickOutside$1(el, accessor) {
        const onClick = e2 => {
          var _a2;
          return !el.contains(e2.target) && ((_a2 = accessor()) == null ? void 0 : _a2());
        };
        document.body.addEventListener("click", onClick);
        onCleanup(() => document.body.removeEventListener("click", onClick));
      }
      function escPressed(_, accessor) {
        const onKeyPress = e2 => {
          var _a2, _b2;
          if (e2.key === "Escape") {
            (_a2 = document.activeElement) == null ? void 0 : _a2.blur();
            (_b2 = accessor()) == null ? void 0 : _b2();
          }
        };
        document.body.addEventListener("keydown", onKeyPress);
        onCleanup(() => document.body.removeEventListener("keydown", onKeyPress));
      }
      function androidBackHandler$1(_, config) {
        const {
          isEnabled,
          onClose
        } = config();
        if (!isEnabled) {
          return;
        }
        const userOSIsAndroid = getUserAgent().os === "android";
        if (!userOSIsAndroid) {
          return;
        }
        window.history.pushState(ROUTE_STATE, "");
        const popstateHandler = event => {
          event.preventDefault();
          onClose();
        };
        window.addEventListener("popstate", popstateHandler, {
          once: true
        });
        onCleanup(() => {
          window.removeEventListener("popstate", popstateHandler);
          createMacrotask(() => {
            var _a2;
            if (((_a2 = window.history.state) == null ? void 0 : _a2[ROUTE_STATE_KEY]) === true) {
              window.history.back();
            }
          });
        });
      }
      const ROUTE_STATE_KEY = "androidBackHandler";
      const ROUTE_STATE = {
        [ROUTE_STATE_KEY]: true
      };
      const _tmpl$$v = /* @__PURE__ */template$1(`<svg><path fill-rule="evenodd" clip-rule="evenodd" d="M10.2122 14.3407C10.5384 14.0854 10.5959 13.614 10.3406 13.2878L6.20237 8.00003L10.3406 2.71227C10.5959 2.38607 10.5384 1.91469 10.2122 1.6594C9.88604 1.40412 9.41465 1.46161 9.15937 1.7878L4.65937 7.5378C4.44688 7.80932 4.44688 8.19074 4.65937 8.46226L9.15937 14.2123C9.41465 14.5385 9.88604 14.5959 10.2122 14.3407Z"></path></svg>`, 4, true);
      const rotationDegrees = {
        left: 0,
        top: 90,
        right: 180,
        bottom: 270
      };
      const ArrowIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        const direction = () => props.direction || "left";
        const Svg = styled("svg")`
        transform: rotate(${props2 => rotationDegrees[props2.svgDirection]}deg);
        transition: transform 0.1s ease-in-out;
    `;
        return createComponent(Svg, {
          xmlns: "http://www.w3.org/2000/svg",
          width: "16",
          height: "16",
          viewBox: "0 0 16 16",
          fill: "none",
          get svgDirection() {
            return direction();
          },
          get children() {
            const _el$ = _tmpl$$v.cloneNode(true);
            createRenderEffect(() => setAttribute(_el$, "fill", fill()));
            return _el$;
          }
        });
      };
      const _tmpl$$u = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.71966 2.71968C3.01255 2.42678 3.48743 2.42677 3.78032 2.71966L8.00002 6.93925L12.2197 2.71967C12.5126 2.42677 12.9874 2.42678 13.2803 2.71967C13.5732 3.01257 13.5732 3.48744 13.2803 3.78033L9.06068 7.99991L13.2803 12.2197C13.5732 12.5126 13.5732 12.9874 13.2803 13.2803C12.9874 13.5732 12.5126 13.5732 12.2197 13.2803L8.00002 9.06057L3.78033 13.2803C3.48744 13.5732 3.01257 13.5732 2.71967 13.2803C2.42678 12.9874 2.42677 12.5126 2.71967 12.2197L6.93936 7.99991L2.71968 3.78034C2.42678 3.48745 2.42677 3.01257 2.71966 2.71968Z"></path></svg>`);
      const CloseIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$u.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const IconButtonStyled = styled.button`
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: ${props => props.theme.colors.background.tint};
    border: none;
    cursor: pointer;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
      const IconButton = props => {
        const dataAttrs = useDataAttributes(props);
        const icon = () => props.icon || "close";
        return createComponent(IconButtonStyled, mergeProps({
          get ["class"]() {
            return props.class;
          },
          onClick: () => props.onClick(),
          "data-tc-icon-button": "true"
        }, dataAttrs, {
          get children() {
            return [createComponent(Show, {
              get when() {
                return !!props.children;
              },
              get children() {
                return props.children;
              }
            }), createComponent(Show, {
              get when() {
                return !props.children;
              },
              get children() {
                return createComponent(Switch, {
                  get children() {
                    return [createComponent(Match, {
                      get when() {
                        return icon() === "close";
                      },
                      get children() {
                        return createComponent(CloseIcon, {
                          get fill() {
                            return props.fill;
                          }
                        });
                      }
                    }), createComponent(Match, {
                      get when() {
                        return icon() === "arrow";
                      },
                      get children() {
                        return createComponent(ArrowIcon, {
                          get fill() {
                            return props.fill;
                          }
                        });
                      }
                    }), createComponent(Match, {
                      get when() {
                        return icon() === "question";
                      },
                      get children() {
                        return createComponent(QuestionIcon, {
                          get fill() {
                            return props.fill;
                          }
                        });
                      }
                    }), createComponent(Match, {
                      get when() {
                        return typeof icon() !== "string";
                      },
                      get children() {
                        return icon();
                      }
                    })];
                  }
                });
              }
            })];
          }
        }));
      };
      const borders$4 = {
        m: "24px",
        s: "16px",
        none: "0"
      };
      const ModalBackgroundStyled = styled.div`
    display: flex;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
    padding: 20px 0;
    overflow-y: auto;

    ${media("mobile")} {
        padding-bottom: 0;
    }
`;
      const ModalWrapperClass = u`
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 16px 64px rgba(0, 0, 0, 0.16);
    width: fit-content;
    margin: auto;

    ${media("mobile")} {
        width: 100%;
        height: fit-content;
        margin: auto 0 0 0;
    }
`;
      const ModalBodyStyled = styled.div`
    position: relative;
    min-height: 100px;
    width: 416px;
    padding: 44px 56px 24px;

    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.04);

    background-color: ${props => props.theme.colors.background.primary};
    border-radius: ${props => borders$4[props.theme.borderRadius]};

    ${media("mobile")} {
        width: 100%;
    }
`;
      const CloseButtonStyled = styled(IconButton)`
    position: absolute;
    right: 16px;
    top: 16px;
`;
      const ModalFooterStyled = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 16px 16px 18px;
    border-radius: 0 0 ${props => borders$4[props.theme.borderRadius]}
        ${props => borders$4[props.theme.borderRadius]};
`;
      const QuestionButtonStyled = styled(IconButton)`
    background-color: ${props => rgba(props.theme.colors.icon.secondary, 0.12)};
`;
      class AnimationTimelineNoop {
        constructor() {
          __publicField(this, "currentTime", 0);
        }
      }
      const _AnimationNoop = class {
        constructor() {
          __publicField(this, "currentTime", 0);
          __publicField(this, "playbackRate", 1);
          __publicField(this, "startTime", null);
          __publicField(this, "timeline", new AnimationTimelineNoop());
          __publicField(this, "finished", Promise.resolve(this));
          __publicField(this, "effect", null);
          __publicField(this, "id", "");
          __publicField(this, "pending", false);
          __publicField(this, "playState", "finished");
          __publicField(this, "replaceState", "active");
          __publicField(this, "ready", Promise.resolve(this));
          __publicField(this, "oncancel", null);
          __publicField(this, "onfinish", null);
          __publicField(this, "onremove", null);
        }
        static create() {
          if (!_AnimationNoop._instance) {
            lib_logWarning("Animation is not supported in this environment: please consider using the `web-animations-js` polyfill to provide a fallback implementation of the Web Animations API.");
            _AnimationNoop._instance = new _AnimationNoop();
          }
          return _AnimationNoop._instance;
        }
        cancel() {}
        finish() {}
        pause() {}
        play() {}
        reverse() {}
        addEventListener(_type, _listener, _options) {}
        dispatchEvent(_event) {
          return false;
        }
        removeEventListener(_type, _callback, _options) {}
        updatePlaybackRate(_playbackRate) {}
        commitStyles() {}
        persist() {}
      };
      let AnimationNoop = _AnimationNoop;
      __publicField(AnimationNoop, "_instance", null);
      function animate(element, keyframes, options) {
        if ("animate" in element) {
          return element.animate(keyframes, options);
        }
        return AnimationNoop.create();
      }
      const _tmpl$$t = /* @__PURE__ */template$1(`<div></div>`);
      const clickOutside = clickOutside$1;
      const keyPressed = escPressed;
      const androidBackHandler = androidBackHandler$1;
      const Modal = props => {
        const theme = useTheme();
        const dataAttrs = useDataAttributes(props);
        createEffect(() => {
          if (props.opened) {
            disableScroll();
          } else {
            enableScroll();
          }
        });
        return createComponent(Transition, {
          onBeforeEnter: el => {
            const duration = isDevice("mobile") ? 200 : 100;
            animate(el, [{
              opacity: 0
            }, {
              opacity: 1
            }], {
              duration
            });
            if (isDevice("mobile")) {
              animate(el.firstElementChild, [{
                transform: "translateY(390px)"
              }, {
                transform: "translateY(0)"
              }], {
                duration
              });
            }
          },
          onExit: (el, done) => {
            const duration = isDevice("mobile") ? 200 : 100;
            const backgroundAnimation = animate(el, [{
              opacity: 1
            }, {
              opacity: 0
            }], {
              duration
            });
            if (isDevice("mobile")) {
              const contentAnimation = animate(el.firstElementChild, [{
                transform: "translateY(0)"
              }, {
                transform: "translateY(390px)"
              }], {
                duration
              });
              Promise.all([backgroundAnimation.finished, contentAnimation.finished]).then(done);
            } else {
              backgroundAnimation.finished.then(done);
            }
          },
          get children() {
            return createComponent(Show, {
              get when() {
                return props.opened;
              },
              get children() {
                return createComponent(ModalBackgroundStyled, mergeProps({
                  "data-tc-modal": "true"
                }, dataAttrs, {
                  get children() {
                    const _el$ = _tmpl$$t.cloneNode(true);
                    use(androidBackHandler, _el$, () => ({
                      isEnabled: props.enableAndroidBackHandler,
                      onClose: () => props.onClose()
                    }));
                    use(keyPressed, _el$, () => () => props.onClose());
                    use(clickOutside, _el$, () => () => props.onClose());
                    insert(_el$, createComponent(ModalBodyStyled, {
                      get ["class"]() {
                        return props.class;
                      },
                      get children() {
                        return [createComponent(CloseButtonStyled, {
                          icon: "close",
                          onClick: () => props.onClose()
                        }), createMemo(() => props.children)];
                      }
                    }), null);
                    insert(_el$, createComponent(Show, {
                      get when() {
                        return props.onClickQuestion;
                      },
                      get children() {
                        return createComponent(ModalFooterStyled, {
                          get children() {
                            return [createComponent(TonConnectBrand, {}), createComponent(QuestionButtonStyled, {
                              get onClick() {
                                return props.onClickQuestion;
                              },
                              icon: "question"
                            })];
                          }
                        });
                      }
                    }), null);
                    createRenderEffect(() => className(_el$, classnames(ModalWrapperClass, u`
                                border-radius: ${borders$4[theme.borderRadius]};
                                background-color: ${theme.colors.background.tint};

                                ${media("mobile")} {
                                    border-radius: ${borders$4[theme.borderRadius]}
                                        ${borders$4[theme.borderRadius]} 0 0;
                                }
                            `)));
                    return _el$;
                  }
                }));
              }
            });
          }
        });
      };
      const wrapperBorderRadius = {
        m: "22px",
        s: "12px",
        none: "0"
      };
      const sliderBorderRadius = {
        m: "18px",
        s: "8px",
        none: "0"
      };
      const TabBarStyled = styled.div`
    display: grid;
    grid-template: 1fr / 1fr 1fr;
    width: fit-content;
    justify-items: center;
    gap: 4px;

    position: relative;
    padding: 4px;
    border-radius: ${props => wrapperBorderRadius[props.theme.borderRadius]};

    background-color: ${props => props.theme.colors.background.secondary};
`;
      const SliderStyled = styled.div`
    position: absolute;
    top: 4px;
    left: 4px;

    height: calc(100% - 8px);
    width: calc(50% - 4px);

    border-radius: ${props => sliderBorderRadius[props.theme.borderRadius]};
    background-color: ${props => props.theme.colors.background.segment};

    transform: ${props => props.right ? "translateX(100%)" : "translateX(0)"};

    transition: transform 0.13s ease-in-out;
`;
      const InputStyled = styled.input`
    display: none;
`;
      const LabelStyled = styled.label`
    padding: 9px 12px;
    z-index: 1;

    cursor: ${props => props.isActive ? "default" : "pointer"};

    transition: transform 0.13s ease-in-out;

    &:hover {
        transform: ${props => props.isActive ? "none" : "scale(1.025)"};
    }

    > * {
        ${props => !props.isActive ? `color: ${props.theme.colors.text.secondary};` : ""}
    }
`;
      const TabBar = props => {
        const groupName = "tabBar" + Math.floor(Math.random() * 1e4);
        return createComponent(TabBarStyled, {
          get ["class"]() {
            return props.class;
          },
          "data-tc-tab-bar": "true",
          get children() {
            return [createComponent(SliderStyled, {
              get right() {
                return props.selectedTabIndex === 1;
              }
            }), createComponent(LabelStyled, {
              get isActive() {
                return props.selectedTabIndex === 0;
              },
              get children() {
                return [createComponent(InputStyled, {
                  type: "radio",
                  name: groupName,
                  get checked() {
                    return props.selectedTabIndex === 0;
                  },
                  onInput: () => {
                    var _a2;
                    return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 0);
                  }
                }), createMemo(() => props.tab1)];
              }
            }), createComponent(LabelStyled, {
              get isActive() {
                return props.selectedTabIndex === 1;
              },
              get children() {
                return [createComponent(InputStyled, {
                  type: "radio",
                  get checked() {
                    return props.selectedTabIndex === 1;
                  },
                  name: groupName,
                  onInput: () => {
                    var _a2;
                    return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 1);
                  }
                }), createMemo(() => props.tab2)];
              }
            })];
          }
        });
      };
      const backgroundBorders = {
        m: "16px",
        s: "12px",
        none: "0"
      };
      const imageBorders = {
        m: "12px",
        s: "8px",
        none: "0"
      };
      const qrNormalSize = 256;
      const imgSizeDefault = 60;
      const picSizeDefault = 48;
      const qrPaddingTop = 24;
      const CopyIconButton = styled.div`
    width: 52px;
    height: 52px;
    background: transparent;
    position: absolute;
    right: 0;
    bottom: 0;

    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.125s ease-in-out;
`;
      const QrCodeBackground = styled.button`
    display: flex;
    align-items: center;
    position: relative;
    background-color: ${props => props.theme.colors.background.qr};
    border-radius: ${props => backgroundBorders[props.theme.borderRadius]};
    padding: ${toPx(qrPaddingTop)} 0;
    height: ${toPx(qrNormalSize + qrPaddingTop * 2)};
    width: 100%;

    overflow: hidden;
    cursor: pointer;
    border: none;

    ${mediaNotTouch} {
        &:hover {
            ${CopyIconButton.class} {
                transform: scale(1.04);
            }
        }
    }

    &:active {
        ${CopyIconButton.class} {
            transform: scale(0.96);
        }
    }

    ${mediaTouch} {
        &:active {
            ${CopyIconButton.class} {
                transform: scale(0.92);
            }
        }
    }
`;
      const QrCodeWrapper$2 = styled.div`
    position: relative;

    width: fit-content;
    margin: 0 auto;

    > div:first-child {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    rect {
        fill: transparent;
    }

    path {
        fill: ${props => props.theme.colors.constant.black};
    }
`;
      const ImageBackground = styled.div`
    position: absolute;
    width: ${toPx(imgSizeDefault)};
    height: ${toPx(imgSizeDefault)};
    background: ${props => props.theme.colors.background.qr};

    display: flex;
    align-items: center;
    justify-content: center;
`;
      const ImageStyled$3 = styled(Image)`
    width: ${props => toPx(props.size)};
    height: ${props => toPx(props.size)};
    border-radius: ${props => imageBorders[props.theme.borderRadius]};
    background-color: ${props => props.theme.colors.background.qr};
`;
      const CopiedBoxStyled = styled.div`
    position: absolute;
    bottom: 14px;
    left: 50%;
    transform: translate(-50%, 0);

    display: flex;
    gap: 6px;
    align-items: center;
    border-radius: 18px;
    min-width: 126px;
    padding: 9px 16px 9px 10px;

    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));
    background-color: ${props => props.theme.colors.background.segment};
`;
      var qrcode$1 = {
        exports: {}
      };
      (function (module, exports) {
        var qrcode2 = function () {
          var qrcode3 = function (typeNumber, errorCorrectionLevel) {
            var PAD0 = 236;
            var PAD1 = 17;
            var _typeNumber = typeNumber;
            var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];
            var _modules = null;
            var _moduleCount = 0;
            var _dataCache = null;
            var _dataList = [];
            var _this = {};
            var makeImpl = function (test, maskPattern) {
              _moduleCount = _typeNumber * 4 + 17;
              _modules = function (moduleCount) {
                var modules = new Array(moduleCount);
                for (var row = 0; row < moduleCount; row += 1) {
                  modules[row] = new Array(moduleCount);
                  for (var col = 0; col < moduleCount; col += 1) {
                    modules[row][col] = null;
                  }
                }
                return modules;
              }(_moduleCount);
              setupPositionProbePattern(0, 0);
              setupPositionProbePattern(_moduleCount - 7, 0);
              setupPositionProbePattern(0, _moduleCount - 7);
              setupPositionAdjustPattern();
              setupTimingPattern();
              setupTypeInfo(test, maskPattern);
              if (_typeNumber >= 7) {
                setupTypeNumber(test);
              }
              if (_dataCache == null) {
                _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);
              }
              mapData(_dataCache, maskPattern);
            };
            var setupPositionProbePattern = function (row, col) {
              for (var r = -1; r <= 7; r += 1) {
                if (row + r <= -1 || _moduleCount <= row + r) continue;
                for (var c2 = -1; c2 <= 7; c2 += 1) {
                  if (col + c2 <= -1 || _moduleCount <= col + c2) continue;
                  if (0 <= r && r <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c2 && c2 <= 4) {
                    _modules[row + r][col + c2] = true;
                  } else {
                    _modules[row + r][col + c2] = false;
                  }
                }
              }
            };
            var getBestMaskPattern = function () {
              var minLostPoint = 0;
              var pattern = 0;
              for (var i2 = 0; i2 < 8; i2 += 1) {
                makeImpl(true, i2);
                var lostPoint = QRUtil.getLostPoint(_this);
                if (i2 == 0 || minLostPoint > lostPoint) {
                  minLostPoint = lostPoint;
                  pattern = i2;
                }
              }
              return pattern;
            };
            var setupTimingPattern = function () {
              for (var r = 8; r < _moduleCount - 8; r += 1) {
                if (_modules[r][6] != null) {
                  continue;
                }
                _modules[r][6] = r % 2 == 0;
              }
              for (var c2 = 8; c2 < _moduleCount - 8; c2 += 1) {
                if (_modules[6][c2] != null) {
                  continue;
                }
                _modules[6][c2] = c2 % 2 == 0;
              }
            };
            var setupPositionAdjustPattern = function () {
              var pos = QRUtil.getPatternPosition(_typeNumber);
              for (var i2 = 0; i2 < pos.length; i2 += 1) {
                for (var j = 0; j < pos.length; j += 1) {
                  var row = pos[i2];
                  var col = pos[j];
                  if (_modules[row][col] != null) {
                    continue;
                  }
                  for (var r = -2; r <= 2; r += 1) {
                    for (var c2 = -2; c2 <= 2; c2 += 1) {
                      if (r == -2 || r == 2 || c2 == -2 || c2 == 2 || r == 0 && c2 == 0) {
                        _modules[row + r][col + c2] = true;
                      } else {
                        _modules[row + r][col + c2] = false;
                      }
                    }
                  }
                }
              }
            };
            var setupTypeNumber = function (test) {
              var bits = QRUtil.getBCHTypeNumber(_typeNumber);
              for (var i2 = 0; i2 < 18; i2 += 1) {
                var mod = !test && (bits >> i2 & 1) == 1;
                _modules[Math.floor(i2 / 3)][i2 % 3 + _moduleCount - 8 - 3] = mod;
              }
              for (var i2 = 0; i2 < 18; i2 += 1) {
                var mod = !test && (bits >> i2 & 1) == 1;
                _modules[i2 % 3 + _moduleCount - 8 - 3][Math.floor(i2 / 3)] = mod;
              }
            };
            var setupTypeInfo = function (test, maskPattern) {
              var data = _errorCorrectionLevel << 3 | maskPattern;
              var bits = QRUtil.getBCHTypeInfo(data);
              for (var i2 = 0; i2 < 15; i2 += 1) {
                var mod = !test && (bits >> i2 & 1) == 1;
                if (i2 < 6) {
                  _modules[i2][8] = mod;
                } else if (i2 < 8) {
                  _modules[i2 + 1][8] = mod;
                } else {
                  _modules[_moduleCount - 15 + i2][8] = mod;
                }
              }
              for (var i2 = 0; i2 < 15; i2 += 1) {
                var mod = !test && (bits >> i2 & 1) == 1;
                if (i2 < 8) {
                  _modules[8][_moduleCount - i2 - 1] = mod;
                } else if (i2 < 9) {
                  _modules[8][15 - i2 - 1 + 1] = mod;
                } else {
                  _modules[8][15 - i2 - 1] = mod;
                }
              }
              _modules[_moduleCount - 8][8] = !test;
            };
            var mapData = function (data, maskPattern) {
              var inc = -1;
              var row = _moduleCount - 1;
              var bitIndex = 7;
              var byteIndex = 0;
              var maskFunc = QRUtil.getMaskFunction(maskPattern);
              for (var col = _moduleCount - 1; col > 0; col -= 2) {
                if (col == 6) col -= 1;
                while (true) {
                  for (var c2 = 0; c2 < 2; c2 += 1) {
                    if (_modules[row][col - c2] == null) {
                      var dark = false;
                      if (byteIndex < data.length) {
                        dark = (data[byteIndex] >>> bitIndex & 1) == 1;
                      }
                      var mask = maskFunc(row, col - c2);
                      if (mask) {
                        dark = !dark;
                      }
                      _modules[row][col - c2] = dark;
                      bitIndex -= 1;
                      if (bitIndex == -1) {
                        byteIndex += 1;
                        bitIndex = 7;
                      }
                    }
                  }
                  row += inc;
                  if (row < 0 || _moduleCount <= row) {
                    row -= inc;
                    inc = -inc;
                    break;
                  }
                }
              }
            };
            var createBytes = function (buffer, rsBlocks) {
              var offset = 0;
              var maxDcCount = 0;
              var maxEcCount = 0;
              var dcdata = new Array(rsBlocks.length);
              var ecdata = new Array(rsBlocks.length);
              for (var r = 0; r < rsBlocks.length; r += 1) {
                var dcCount = rsBlocks[r].dataCount;
                var ecCount = rsBlocks[r].totalCount - dcCount;
                maxDcCount = Math.max(maxDcCount, dcCount);
                maxEcCount = Math.max(maxEcCount, ecCount);
                dcdata[r] = new Array(dcCount);
                for (var i2 = 0; i2 < dcdata[r].length; i2 += 1) {
                  dcdata[r][i2] = 255 & buffer.getBuffer()[i2 + offset];
                }
                offset += dcCount;
                var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
                var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);
                var modPoly = rawPoly.mod(rsPoly);
                ecdata[r] = new Array(rsPoly.getLength() - 1);
                for (var i2 = 0; i2 < ecdata[r].length; i2 += 1) {
                  var modIndex = i2 + modPoly.getLength() - ecdata[r].length;
                  ecdata[r][i2] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;
                }
              }
              var totalCodeCount = 0;
              for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
                totalCodeCount += rsBlocks[i2].totalCount;
              }
              var data = new Array(totalCodeCount);
              var index = 0;
              for (var i2 = 0; i2 < maxDcCount; i2 += 1) {
                for (var r = 0; r < rsBlocks.length; r += 1) {
                  if (i2 < dcdata[r].length) {
                    data[index] = dcdata[r][i2];
                    index += 1;
                  }
                }
              }
              for (var i2 = 0; i2 < maxEcCount; i2 += 1) {
                for (var r = 0; r < rsBlocks.length; r += 1) {
                  if (i2 < ecdata[r].length) {
                    data[index] = ecdata[r][i2];
                    index += 1;
                  }
                }
              }
              return data;
            };
            var createData = function (typeNumber2, errorCorrectionLevel2, dataList) {
              var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, errorCorrectionLevel2);
              var buffer = qrBitBuffer();
              for (var i2 = 0; i2 < dataList.length; i2 += 1) {
                var data = dataList[i2];
                buffer.put(data.getMode(), 4);
                buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
                data.write(buffer);
              }
              var totalDataCount = 0;
              for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
                totalDataCount += rsBlocks[i2].dataCount;
              }
              if (buffer.getLengthInBits() > totalDataCount * 8) {
                throw "code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")";
              }
              if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
                buffer.put(0, 4);
              }
              while (buffer.getLengthInBits() % 8 != 0) {
                buffer.putBit(false);
              }
              while (true) {
                if (buffer.getLengthInBits() >= totalDataCount * 8) {
                  break;
                }
                buffer.put(PAD0, 8);
                if (buffer.getLengthInBits() >= totalDataCount * 8) {
                  break;
                }
                buffer.put(PAD1, 8);
              }
              return createBytes(buffer, rsBlocks);
            };
            _this.addData = function (data, mode) {
              mode = mode || "Byte";
              var newData = null;
              switch (mode) {
                case "Numeric":
                  newData = qrNumber(data);
                  break;
                case "Alphanumeric":
                  newData = qrAlphaNum(data);
                  break;
                case "Byte":
                  newData = qr8BitByte(data);
                  break;
                case "Kanji":
                  newData = qrKanji(data);
                  break;
                default:
                  throw "mode:" + mode;
              }
              _dataList.push(newData);
              _dataCache = null;
            };
            _this.isDark = function (row, col) {
              if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {
                throw row + "," + col;
              }
              return _modules[row][col];
            };
            _this.getModuleCount = function () {
              return _moduleCount;
            };
            _this.make = function () {
              if (_typeNumber < 1) {
                var typeNumber2 = 1;
                for (; typeNumber2 < 40; typeNumber2++) {
                  var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, _errorCorrectionLevel);
                  var buffer = qrBitBuffer();
                  for (var i2 = 0; i2 < _dataList.length; i2++) {
                    var data = _dataList[i2];
                    buffer.put(data.getMode(), 4);
                    buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
                    data.write(buffer);
                  }
                  var totalDataCount = 0;
                  for (var i2 = 0; i2 < rsBlocks.length; i2++) {
                    totalDataCount += rsBlocks[i2].dataCount;
                  }
                  if (buffer.getLengthInBits() <= totalDataCount * 8) {
                    break;
                  }
                }
                _typeNumber = typeNumber2;
              }
              makeImpl(false, getBestMaskPattern());
            };
            _this.createTableTag = function (cellSize, margin) {
              cellSize = cellSize || 2;
              margin = typeof margin == "undefined" ? cellSize * 4 : margin;
              var qrHtml = "";
              qrHtml += '<table style="';
              qrHtml += " border-width: 0px; border-style: none;";
              qrHtml += " border-collapse: collapse;";
              qrHtml += " padding: 0px; margin: " + margin + "px;";
              qrHtml += '">';
              qrHtml += "<tbody>";
              for (var r = 0; r < _this.getModuleCount(); r += 1) {
                qrHtml += "<tr>";
                for (var c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
                  qrHtml += '<td style="';
                  qrHtml += " border-width: 0px; border-style: none;";
                  qrHtml += " border-collapse: collapse;";
                  qrHtml += " padding: 0px; margin: 0px;";
                  qrHtml += " width: " + cellSize + "px;";
                  qrHtml += " height: " + cellSize + "px;";
                  qrHtml += " background-color: ";
                  qrHtml += _this.isDark(r, c2) ? "#000000" : "#ffffff";
                  qrHtml += ";";
                  qrHtml += '"/>';
                }
                qrHtml += "</tr>";
              }
              qrHtml += "</tbody>";
              qrHtml += "</table>";
              return qrHtml;
            };
            _this.createSvgTag = function (cellSize, margin, alt, title) {
              var opts = {};
              if (typeof arguments[0] == "object") {
                opts = arguments[0];
                cellSize = opts.cellSize;
                margin = opts.margin;
                alt = opts.alt;
                title = opts.title;
              }
              cellSize = cellSize || 2;
              margin = typeof margin == "undefined" ? cellSize * 4 : margin;
              alt = typeof alt === "string" ? {
                text: alt
              } : alt || {};
              alt.text = alt.text || null;
              alt.id = alt.text ? alt.id || "qrcode-description" : null;
              title = typeof title === "string" ? {
                text: title
              } : title || {};
              title.text = title.text || null;
              title.id = title.text ? title.id || "qrcode-title" : null;
              var size = _this.getModuleCount() * cellSize + margin * 2;
              var c2,
                mc,
                r,
                mr,
                qrSvg = "",
                rect;
              rect = "l" + cellSize + ",0 0," + cellSize + " -" + cellSize + ",0 0,-" + cellSize + "z ";
              qrSvg += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"';
              qrSvg += !opts.scalable ? ' width="' + size + 'px" height="' + size + 'px"' : "";
              qrSvg += ' viewBox="0 0 ' + size + " " + size + '" ';
              qrSvg += ' preserveAspectRatio="xMinYMin meet"';
              qrSvg += title.text || alt.text ? ' role="img" aria-labelledby="' + escapeXml([title.id, alt.id].join(" ").trim()) + '"' : "";
              qrSvg += ">";
              qrSvg += title.text ? '<title id="' + escapeXml(title.id) + '">' + escapeXml(title.text) + "</title>" : "";
              qrSvg += alt.text ? '<description id="' + escapeXml(alt.id) + '">' + escapeXml(alt.text) + "</description>" : "";
              qrSvg += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>';
              qrSvg += '<path d="';
              for (r = 0; r < _this.getModuleCount(); r += 1) {
                mr = r * cellSize + margin;
                for (c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
                  if (_this.isDark(r, c2)) {
                    mc = c2 * cellSize + margin;
                    qrSvg += "M" + mc + "," + mr + rect;
                  }
                }
              }
              qrSvg += '" stroke="transparent" fill="black"/>';
              qrSvg += "</svg>";
              return qrSvg;
            };
            _this.createDataURL = function (cellSize, margin) {
              cellSize = cellSize || 2;
              margin = typeof margin == "undefined" ? cellSize * 4 : margin;
              var size = _this.getModuleCount() * cellSize + margin * 2;
              var min2 = margin;
              var max2 = size - margin;
              return createDataURL(size, size, function (x, y) {
                if (min2 <= x && x < max2 && min2 <= y && y < max2) {
                  var c2 = Math.floor((x - min2) / cellSize);
                  var r = Math.floor((y - min2) / cellSize);
                  return _this.isDark(r, c2) ? 0 : 1;
                } else {
                  return 1;
                }
              });
            };
            _this.createImgTag = function (cellSize, margin, alt) {
              cellSize = cellSize || 2;
              margin = typeof margin == "undefined" ? cellSize * 4 : margin;
              var size = _this.getModuleCount() * cellSize + margin * 2;
              var img = "";
              img += "<img";
              img += ' src="';
              img += _this.createDataURL(cellSize, margin);
              img += '"';
              img += ' width="';
              img += size;
              img += '"';
              img += ' height="';
              img += size;
              img += '"';
              if (alt) {
                img += ' alt="';
                img += escapeXml(alt);
                img += '"';
              }
              img += "/>";
              return img;
            };
            var escapeXml = function (s2) {
              var escaped = "";
              for (var i2 = 0; i2 < s2.length; i2 += 1) {
                var c2 = s2.charAt(i2);
                switch (c2) {
                  case "<":
                    escaped += "&lt;";
                    break;
                  case ">":
                    escaped += "&gt;";
                    break;
                  case "&":
                    escaped += "&amp;";
                    break;
                  case '"':
                    escaped += "&quot;";
                    break;
                  default:
                    escaped += c2;
                    break;
                }
              }
              return escaped;
            };
            var _createHalfASCII = function (margin) {
              var cellSize = 1;
              margin = typeof margin == "undefined" ? cellSize * 2 : margin;
              var size = _this.getModuleCount() * cellSize + margin * 2;
              var min2 = margin;
              var max2 = size - margin;
              var y, x, r1, r2, p2;
              var blocks = {
                "\u2588\u2588": "\u2588",
                "\u2588 ": "\u2580",
                " \u2588": "\u2584",
                "  ": " "
              };
              var blocksLastLineNoMargin = {
                "\u2588\u2588": "\u2580",
                "\u2588 ": "\u2580",
                " \u2588": " ",
                "  ": " "
              };
              var ascii = "";
              for (y = 0; y < size; y += 2) {
                r1 = Math.floor((y - min2) / cellSize);
                r2 = Math.floor((y + 1 - min2) / cellSize);
                for (x = 0; x < size; x += 1) {
                  p2 = "\u2588";
                  if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r1, Math.floor((x - min2) / cellSize))) {
                    p2 = " ";
                  }
                  if (min2 <= x && x < max2 && min2 <= y + 1 && y + 1 < max2 && _this.isDark(r2, Math.floor((x - min2) / cellSize))) {
                    p2 += " ";
                  } else {
                    p2 += "\u2588";
                  }
                  ascii += margin < 1 && y + 1 >= max2 ? blocksLastLineNoMargin[p2] : blocks[p2];
                }
                ascii += "\n";
              }
              if (size % 2 && margin > 0) {
                return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join("\u2580");
              }
              return ascii.substring(0, ascii.length - 1);
            };
            _this.createASCII = function (cellSize, margin) {
              cellSize = cellSize || 1;
              if (cellSize < 2) {
                return _createHalfASCII(margin);
              }
              cellSize -= 1;
              margin = typeof margin == "undefined" ? cellSize * 2 : margin;
              var size = _this.getModuleCount() * cellSize + margin * 2;
              var min2 = margin;
              var max2 = size - margin;
              var y, x, r, p2;
              var white = Array(cellSize + 1).join("\u2588\u2588");
              var black = Array(cellSize + 1).join("  ");
              var ascii = "";
              var line = "";
              for (y = 0; y < size; y += 1) {
                r = Math.floor((y - min2) / cellSize);
                line = "";
                for (x = 0; x < size; x += 1) {
                  p2 = 1;
                  if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r, Math.floor((x - min2) / cellSize))) {
                    p2 = 0;
                  }
                  line += p2 ? white : black;
                }
                for (r = 0; r < cellSize; r += 1) {
                  ascii += line + "\n";
                }
              }
              return ascii.substring(0, ascii.length - 1);
            };
            _this.renderTo2dContext = function (context, cellSize) {
              cellSize = cellSize || 2;
              var length = _this.getModuleCount();
              for (var row = 0; row < length; row++) {
                for (var col = 0; col < length; col++) {
                  context.fillStyle = _this.isDark(row, col) ? "black" : "white";
                  context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);
                }
              }
            };
            return _this;
          };
          qrcode3.stringToBytesFuncs = {
            "default": function (s2) {
              var bytes = [];
              for (var i2 = 0; i2 < s2.length; i2 += 1) {
                var c2 = s2.charCodeAt(i2);
                bytes.push(c2 & 255);
              }
              return bytes;
            }
          };
          qrcode3.stringToBytes = qrcode3.stringToBytesFuncs["default"];
          qrcode3.createStringToBytes = function (unicodeData, numChars) {
            var unicodeMap = function () {
              var bin = base64DecodeInputStream(unicodeData);
              var read = function () {
                var b = bin.read();
                if (b == -1) throw "eof";
                return b;
              };
              var count = 0;
              var unicodeMap2 = {};
              while (true) {
                var b0 = bin.read();
                if (b0 == -1) break;
                var b1 = read();
                var b2 = read();
                var b3 = read();
                var k = String.fromCharCode(b0 << 8 | b1);
                var v = b2 << 8 | b3;
                unicodeMap2[k] = v;
                count += 1;
              }
              if (count != numChars) {
                throw count + " != " + numChars;
              }
              return unicodeMap2;
            }();
            var unknownChar = "?".charCodeAt(0);
            return function (s2) {
              var bytes = [];
              for (var i2 = 0; i2 < s2.length; i2 += 1) {
                var c2 = s2.charCodeAt(i2);
                if (c2 < 128) {
                  bytes.push(c2);
                } else {
                  var b = unicodeMap[s2.charAt(i2)];
                  if (typeof b == "number") {
                    if ((b & 255) == b) {
                      bytes.push(b);
                    } else {
                      bytes.push(b >>> 8);
                      bytes.push(b & 255);
                    }
                  } else {
                    bytes.push(unknownChar);
                  }
                }
              }
              return bytes;
            };
          };
          var QRMode = {
            MODE_NUMBER: 1 << 0,
            MODE_ALPHA_NUM: 1 << 1,
            MODE_8BIT_BYTE: 1 << 2,
            MODE_KANJI: 1 << 3
          };
          var QRErrorCorrectionLevel = {
            L: 1,
            M: 0,
            Q: 3,
            H: 2
          };
          var QRMaskPattern = {
            PATTERN000: 0,
            PATTERN001: 1,
            PATTERN010: 2,
            PATTERN011: 3,
            PATTERN100: 4,
            PATTERN101: 5,
            PATTERN110: 6,
            PATTERN111: 7
          };
          var QRUtil = function () {
            var PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];
            var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
            var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
            var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
            var _this = {};
            var getBCHDigit = function (data) {
              var digit = 0;
              while (data != 0) {
                digit += 1;
                data >>>= 1;
              }
              return digit;
            };
            _this.getBCHTypeInfo = function (data) {
              var d = data << 10;
              while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {
                d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);
              }
              return (data << 10 | d) ^ G15_MASK;
            };
            _this.getBCHTypeNumber = function (data) {
              var d = data << 12;
              while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {
                d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);
              }
              return data << 12 | d;
            };
            _this.getPatternPosition = function (typeNumber) {
              return PATTERN_POSITION_TABLE[typeNumber - 1];
            };
            _this.getMaskFunction = function (maskPattern) {
              switch (maskPattern) {
                case QRMaskPattern.PATTERN000:
                  return function (i2, j) {
                    return (i2 + j) % 2 == 0;
                  };
                case QRMaskPattern.PATTERN001:
                  return function (i2, j) {
                    return i2 % 2 == 0;
                  };
                case QRMaskPattern.PATTERN010:
                  return function (i2, j) {
                    return j % 3 == 0;
                  };
                case QRMaskPattern.PATTERN011:
                  return function (i2, j) {
                    return (i2 + j) % 3 == 0;
                  };
                case QRMaskPattern.PATTERN100:
                  return function (i2, j) {
                    return (Math.floor(i2 / 2) + Math.floor(j / 3)) % 2 == 0;
                  };
                case QRMaskPattern.PATTERN101:
                  return function (i2, j) {
                    return i2 * j % 2 + i2 * j % 3 == 0;
                  };
                case QRMaskPattern.PATTERN110:
                  return function (i2, j) {
                    return (i2 * j % 2 + i2 * j % 3) % 2 == 0;
                  };
                case QRMaskPattern.PATTERN111:
                  return function (i2, j) {
                    return (i2 * j % 3 + (i2 + j) % 2) % 2 == 0;
                  };
                default:
                  throw "bad maskPattern:" + maskPattern;
              }
            };
            _this.getErrorCorrectPolynomial = function (errorCorrectLength) {
              var a2 = qrPolynomial([1], 0);
              for (var i2 = 0; i2 < errorCorrectLength; i2 += 1) {
                a2 = a2.multiply(qrPolynomial([1, QRMath.gexp(i2)], 0));
              }
              return a2;
            };
            _this.getLengthInBits = function (mode, type) {
              if (1 <= type && type < 10) {
                switch (mode) {
                  case QRMode.MODE_NUMBER:
                    return 10;
                  case QRMode.MODE_ALPHA_NUM:
                    return 9;
                  case QRMode.MODE_8BIT_BYTE:
                    return 8;
                  case QRMode.MODE_KANJI:
                    return 8;
                  default:
                    throw "mode:" + mode;
                }
              } else if (type < 27) {
                switch (mode) {
                  case QRMode.MODE_NUMBER:
                    return 12;
                  case QRMode.MODE_ALPHA_NUM:
                    return 11;
                  case QRMode.MODE_8BIT_BYTE:
                    return 16;
                  case QRMode.MODE_KANJI:
                    return 10;
                  default:
                    throw "mode:" + mode;
                }
              } else if (type < 41) {
                switch (mode) {
                  case QRMode.MODE_NUMBER:
                    return 14;
                  case QRMode.MODE_ALPHA_NUM:
                    return 13;
                  case QRMode.MODE_8BIT_BYTE:
                    return 16;
                  case QRMode.MODE_KANJI:
                    return 12;
                  default:
                    throw "mode:" + mode;
                }
              } else {
                throw "type:" + type;
              }
            };
            _this.getLostPoint = function (qrcode4) {
              var moduleCount = qrcode4.getModuleCount();
              var lostPoint = 0;
              for (var row = 0; row < moduleCount; row += 1) {
                for (var col = 0; col < moduleCount; col += 1) {
                  var sameCount = 0;
                  var dark = qrcode4.isDark(row, col);
                  for (var r = -1; r <= 1; r += 1) {
                    if (row + r < 0 || moduleCount <= row + r) {
                      continue;
                    }
                    for (var c2 = -1; c2 <= 1; c2 += 1) {
                      if (col + c2 < 0 || moduleCount <= col + c2) {
                        continue;
                      }
                      if (r == 0 && c2 == 0) {
                        continue;
                      }
                      if (dark == qrcode4.isDark(row + r, col + c2)) {
                        sameCount += 1;
                      }
                    }
                  }
                  if (sameCount > 5) {
                    lostPoint += 3 + sameCount - 5;
                  }
                }
              }
              for (var row = 0; row < moduleCount - 1; row += 1) {
                for (var col = 0; col < moduleCount - 1; col += 1) {
                  var count = 0;
                  if (qrcode4.isDark(row, col)) count += 1;
                  if (qrcode4.isDark(row + 1, col)) count += 1;
                  if (qrcode4.isDark(row, col + 1)) count += 1;
                  if (qrcode4.isDark(row + 1, col + 1)) count += 1;
                  if (count == 0 || count == 4) {
                    lostPoint += 3;
                  }
                }
              }
              for (var row = 0; row < moduleCount; row += 1) {
                for (var col = 0; col < moduleCount - 6; col += 1) {
                  if (qrcode4.isDark(row, col) && !qrcode4.isDark(row, col + 1) && qrcode4.isDark(row, col + 2) && qrcode4.isDark(row, col + 3) && qrcode4.isDark(row, col + 4) && !qrcode4.isDark(row, col + 5) && qrcode4.isDark(row, col + 6)) {
                    lostPoint += 40;
                  }
                }
              }
              for (var col = 0; col < moduleCount; col += 1) {
                for (var row = 0; row < moduleCount - 6; row += 1) {
                  if (qrcode4.isDark(row, col) && !qrcode4.isDark(row + 1, col) && qrcode4.isDark(row + 2, col) && qrcode4.isDark(row + 3, col) && qrcode4.isDark(row + 4, col) && !qrcode4.isDark(row + 5, col) && qrcode4.isDark(row + 6, col)) {
                    lostPoint += 40;
                  }
                }
              }
              var darkCount = 0;
              for (var col = 0; col < moduleCount; col += 1) {
                for (var row = 0; row < moduleCount; row += 1) {
                  if (qrcode4.isDark(row, col)) {
                    darkCount += 1;
                  }
                }
              }
              var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
              lostPoint += ratio * 10;
              return lostPoint;
            };
            return _this;
          }();
          var QRMath = function () {
            var EXP_TABLE = new Array(256);
            var LOG_TABLE = new Array(256);
            for (var i2 = 0; i2 < 8; i2 += 1) {
              EXP_TABLE[i2] = 1 << i2;
            }
            for (var i2 = 8; i2 < 256; i2 += 1) {
              EXP_TABLE[i2] = EXP_TABLE[i2 - 4] ^ EXP_TABLE[i2 - 5] ^ EXP_TABLE[i2 - 6] ^ EXP_TABLE[i2 - 8];
            }
            for (var i2 = 0; i2 < 255; i2 += 1) {
              LOG_TABLE[EXP_TABLE[i2]] = i2;
            }
            var _this = {};
            _this.glog = function (n2) {
              if (n2 < 1) {
                throw "glog(" + n2 + ")";
              }
              return LOG_TABLE[n2];
            };
            _this.gexp = function (n2) {
              while (n2 < 0) {
                n2 += 255;
              }
              while (n2 >= 256) {
                n2 -= 255;
              }
              return EXP_TABLE[n2];
            };
            return _this;
          }();
          function qrPolynomial(num, shift) {
            if (typeof num.length == "undefined") {
              throw num.length + "/" + shift;
            }
            var _num = function () {
              var offset = 0;
              while (offset < num.length && num[offset] == 0) {
                offset += 1;
              }
              var _num2 = new Array(num.length - offset + shift);
              for (var i2 = 0; i2 < num.length - offset; i2 += 1) {
                _num2[i2] = num[i2 + offset];
              }
              return _num2;
            }();
            var _this = {};
            _this.getAt = function (index) {
              return _num[index];
            };
            _this.getLength = function () {
              return _num.length;
            };
            _this.multiply = function (e2) {
              var num2 = new Array(_this.getLength() + e2.getLength() - 1);
              for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
                for (var j = 0; j < e2.getLength(); j += 1) {
                  num2[i2 + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i2)) + QRMath.glog(e2.getAt(j)));
                }
              }
              return qrPolynomial(num2, 0);
            };
            _this.mod = function (e2) {
              if (_this.getLength() - e2.getLength() < 0) {
                return _this;
              }
              var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e2.getAt(0));
              var num2 = new Array(_this.getLength());
              for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
                num2[i2] = _this.getAt(i2);
              }
              for (var i2 = 0; i2 < e2.getLength(); i2 += 1) {
                num2[i2] ^= QRMath.gexp(QRMath.glog(e2.getAt(i2)) + ratio);
              }
              return qrPolynomial(num2, 0).mod(e2);
            };
            return _this;
          }
          var QRRSBlock = function () {
            var RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];
            var qrRSBlock = function (totalCount, dataCount) {
              var _this2 = {};
              _this2.totalCount = totalCount;
              _this2.dataCount = dataCount;
              return _this2;
            };
            var _this = {};
            var getRsBlockTable = function (typeNumber, errorCorrectionLevel) {
              switch (errorCorrectionLevel) {
                case QRErrorCorrectionLevel.L:
                  return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
                case QRErrorCorrectionLevel.M:
                  return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
                case QRErrorCorrectionLevel.Q:
                  return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
                case QRErrorCorrectionLevel.H:
                  return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
                default:
                  return void 0;
              }
            };
            _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {
              var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);
              if (typeof rsBlock == "undefined") {
                throw "bad rs block @ typeNumber:" + typeNumber + "/errorCorrectionLevel:" + errorCorrectionLevel;
              }
              var length = rsBlock.length / 3;
              var list = [];
              for (var i2 = 0; i2 < length; i2 += 1) {
                var count = rsBlock[i2 * 3 + 0];
                var totalCount = rsBlock[i2 * 3 + 1];
                var dataCount = rsBlock[i2 * 3 + 2];
                for (var j = 0; j < count; j += 1) {
                  list.push(qrRSBlock(totalCount, dataCount));
                }
              }
              return list;
            };
            return _this;
          }();
          var qrBitBuffer = function () {
            var _buffer = [];
            var _length = 0;
            var _this = {};
            _this.getBuffer = function () {
              return _buffer;
            };
            _this.getAt = function (index) {
              var bufIndex = Math.floor(index / 8);
              return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
            };
            _this.put = function (num, length) {
              for (var i2 = 0; i2 < length; i2 += 1) {
                _this.putBit((num >>> length - i2 - 1 & 1) == 1);
              }
            };
            _this.getLengthInBits = function () {
              return _length;
            };
            _this.putBit = function (bit) {
              var bufIndex = Math.floor(_length / 8);
              if (_buffer.length <= bufIndex) {
                _buffer.push(0);
              }
              if (bit) {
                _buffer[bufIndex] |= 128 >>> _length % 8;
              }
              _length += 1;
            };
            return _this;
          };
          var qrNumber = function (data) {
            var _mode = QRMode.MODE_NUMBER;
            var _data = data;
            var _this = {};
            _this.getMode = function () {
              return _mode;
            };
            _this.getLength = function (buffer) {
              return _data.length;
            };
            _this.write = function (buffer) {
              var data2 = _data;
              var i2 = 0;
              while (i2 + 2 < data2.length) {
                buffer.put(strToNum(data2.substring(i2, i2 + 3)), 10);
                i2 += 3;
              }
              if (i2 < data2.length) {
                if (data2.length - i2 == 1) {
                  buffer.put(strToNum(data2.substring(i2, i2 + 1)), 4);
                } else if (data2.length - i2 == 2) {
                  buffer.put(strToNum(data2.substring(i2, i2 + 2)), 7);
                }
              }
            };
            var strToNum = function (s2) {
              var num = 0;
              for (var i2 = 0; i2 < s2.length; i2 += 1) {
                num = num * 10 + chatToNum(s2.charAt(i2));
              }
              return num;
            };
            var chatToNum = function (c2) {
              if ("0" <= c2 && c2 <= "9") {
                return c2.charCodeAt(0) - "0".charCodeAt(0);
              }
              throw "illegal char :" + c2;
            };
            return _this;
          };
          var qrAlphaNum = function (data) {
            var _mode = QRMode.MODE_ALPHA_NUM;
            var _data = data;
            var _this = {};
            _this.getMode = function () {
              return _mode;
            };
            _this.getLength = function (buffer) {
              return _data.length;
            };
            _this.write = function (buffer) {
              var s2 = _data;
              var i2 = 0;
              while (i2 + 1 < s2.length) {
                buffer.put(getCode(s2.charAt(i2)) * 45 + getCode(s2.charAt(i2 + 1)), 11);
                i2 += 2;
              }
              if (i2 < s2.length) {
                buffer.put(getCode(s2.charAt(i2)), 6);
              }
            };
            var getCode = function (c2) {
              if ("0" <= c2 && c2 <= "9") {
                return c2.charCodeAt(0) - "0".charCodeAt(0);
              } else if ("A" <= c2 && c2 <= "Z") {
                return c2.charCodeAt(0) - "A".charCodeAt(0) + 10;
              } else {
                switch (c2) {
                  case " ":
                    return 36;
                  case "$":
                    return 37;
                  case "%":
                    return 38;
                  case "*":
                    return 39;
                  case "+":
                    return 40;
                  case "-":
                    return 41;
                  case ".":
                    return 42;
                  case "/":
                    return 43;
                  case ":":
                    return 44;
                  default:
                    throw "illegal char :" + c2;
                }
              }
            };
            return _this;
          };
          var qr8BitByte = function (data) {
            var _mode = QRMode.MODE_8BIT_BYTE;
            var _bytes = qrcode3.stringToBytes(data);
            var _this = {};
            _this.getMode = function () {
              return _mode;
            };
            _this.getLength = function (buffer) {
              return _bytes.length;
            };
            _this.write = function (buffer) {
              for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
                buffer.put(_bytes[i2], 8);
              }
            };
            return _this;
          };
          var qrKanji = function (data) {
            var _mode = QRMode.MODE_KANJI;
            var stringToBytes = qrcode3.stringToBytesFuncs["SJIS"];
            if (!stringToBytes) {
              throw "sjis not supported.";
            }
            !function (c2, code) {
              var test = stringToBytes(c2);
              if (test.length != 2 || (test[0] << 8 | test[1]) != code) {
                throw "sjis not supported.";
              }
            }("\u53CB", 38726);
            var _bytes = stringToBytes(data);
            var _this = {};
            _this.getMode = function () {
              return _mode;
            };
            _this.getLength = function (buffer) {
              return ~~(_bytes.length / 2);
            };
            _this.write = function (buffer) {
              var data2 = _bytes;
              var i2 = 0;
              while (i2 + 1 < data2.length) {
                var c2 = (255 & data2[i2]) << 8 | 255 & data2[i2 + 1];
                if (33088 <= c2 && c2 <= 40956) {
                  c2 -= 33088;
                } else if (57408 <= c2 && c2 <= 60351) {
                  c2 -= 49472;
                } else {
                  throw "illegal char at " + (i2 + 1) + "/" + c2;
                }
                c2 = (c2 >>> 8 & 255) * 192 + (c2 & 255);
                buffer.put(c2, 13);
                i2 += 2;
              }
              if (i2 < data2.length) {
                throw "illegal char at " + (i2 + 1);
              }
            };
            return _this;
          };
          var byteArrayOutputStream = function () {
            var _bytes = [];
            var _this = {};
            _this.writeByte = function (b) {
              _bytes.push(b & 255);
            };
            _this.writeShort = function (i2) {
              _this.writeByte(i2);
              _this.writeByte(i2 >>> 8);
            };
            _this.writeBytes = function (b, off, len) {
              off = off || 0;
              len = len || b.length;
              for (var i2 = 0; i2 < len; i2 += 1) {
                _this.writeByte(b[i2 + off]);
              }
            };
            _this.writeString = function (s2) {
              for (var i2 = 0; i2 < s2.length; i2 += 1) {
                _this.writeByte(s2.charCodeAt(i2));
              }
            };
            _this.toByteArray = function () {
              return _bytes;
            };
            _this.toString = function () {
              var s2 = "";
              s2 += "[";
              for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
                if (i2 > 0) {
                  s2 += ",";
                }
                s2 += _bytes[i2];
              }
              s2 += "]";
              return s2;
            };
            return _this;
          };
          var base64EncodeOutputStream = function () {
            var _buffer = 0;
            var _buflen = 0;
            var _length = 0;
            var _base64 = "";
            var _this = {};
            var writeEncoded = function (b) {
              _base64 += String.fromCharCode(encode(b & 63));
            };
            var encode = function (n2) {
              if (n2 < 0) ;else if (n2 < 26) {
                return 65 + n2;
              } else if (n2 < 52) {
                return 97 + (n2 - 26);
              } else if (n2 < 62) {
                return 48 + (n2 - 52);
              } else if (n2 == 62) {
                return 43;
              } else if (n2 == 63) {
                return 47;
              }
              throw "n:" + n2;
            };
            _this.writeByte = function (n2) {
              _buffer = _buffer << 8 | n2 & 255;
              _buflen += 8;
              _length += 1;
              while (_buflen >= 6) {
                writeEncoded(_buffer >>> _buflen - 6);
                _buflen -= 6;
              }
            };
            _this.flush = function () {
              if (_buflen > 0) {
                writeEncoded(_buffer << 6 - _buflen);
                _buffer = 0;
                _buflen = 0;
              }
              if (_length % 3 != 0) {
                var padlen = 3 - _length % 3;
                for (var i2 = 0; i2 < padlen; i2 += 1) {
                  _base64 += "=";
                }
              }
            };
            _this.toString = function () {
              return _base64;
            };
            return _this;
          };
          var base64DecodeInputStream = function (str) {
            var _str = str;
            var _pos = 0;
            var _buffer = 0;
            var _buflen = 0;
            var _this = {};
            _this.read = function () {
              while (_buflen < 8) {
                if (_pos >= _str.length) {
                  if (_buflen == 0) {
                    return -1;
                  }
                  throw "unexpected end of file./" + _buflen;
                }
                var c2 = _str.charAt(_pos);
                _pos += 1;
                if (c2 == "=") {
                  _buflen = 0;
                  return -1;
                } else if (c2.match(/^\s$/)) {
                  continue;
                }
                _buffer = _buffer << 6 | decode(c2.charCodeAt(0));
                _buflen += 6;
              }
              var n2 = _buffer >>> _buflen - 8 & 255;
              _buflen -= 8;
              return n2;
            };
            var decode = function (c2) {
              if (65 <= c2 && c2 <= 90) {
                return c2 - 65;
              } else if (97 <= c2 && c2 <= 122) {
                return c2 - 97 + 26;
              } else if (48 <= c2 && c2 <= 57) {
                return c2 - 48 + 52;
              } else if (c2 == 43) {
                return 62;
              } else if (c2 == 47) {
                return 63;
              } else {
                throw "c:" + c2;
              }
            };
            return _this;
          };
          var gifImage = function (width, height) {
            var _width = width;
            var _height = height;
            var _data = new Array(width * height);
            var _this = {};
            _this.setPixel = function (x, y, pixel) {
              _data[y * _width + x] = pixel;
            };
            _this.write = function (out) {
              out.writeString("GIF87a");
              out.writeShort(_width);
              out.writeShort(_height);
              out.writeByte(128);
              out.writeByte(0);
              out.writeByte(0);
              out.writeByte(0);
              out.writeByte(0);
              out.writeByte(0);
              out.writeByte(255);
              out.writeByte(255);
              out.writeByte(255);
              out.writeString(",");
              out.writeShort(0);
              out.writeShort(0);
              out.writeShort(_width);
              out.writeShort(_height);
              out.writeByte(0);
              var lzwMinCodeSize = 2;
              var raster = getLZWRaster(lzwMinCodeSize);
              out.writeByte(lzwMinCodeSize);
              var offset = 0;
              while (raster.length - offset > 255) {
                out.writeByte(255);
                out.writeBytes(raster, offset, 255);
                offset += 255;
              }
              out.writeByte(raster.length - offset);
              out.writeBytes(raster, offset, raster.length - offset);
              out.writeByte(0);
              out.writeString(";");
            };
            var bitOutputStream = function (out) {
              var _out = out;
              var _bitLength = 0;
              var _bitBuffer = 0;
              var _this2 = {};
              _this2.write = function (data, length) {
                if (data >>> length != 0) {
                  throw "length over";
                }
                while (_bitLength + length >= 8) {
                  _out.writeByte(255 & (data << _bitLength | _bitBuffer));
                  length -= 8 - _bitLength;
                  data >>>= 8 - _bitLength;
                  _bitBuffer = 0;
                  _bitLength = 0;
                }
                _bitBuffer = data << _bitLength | _bitBuffer;
                _bitLength = _bitLength + length;
              };
              _this2.flush = function () {
                if (_bitLength > 0) {
                  _out.writeByte(_bitBuffer);
                }
              };
              return _this2;
            };
            var getLZWRaster = function (lzwMinCodeSize) {
              var clearCode = 1 << lzwMinCodeSize;
              var endCode = (1 << lzwMinCodeSize) + 1;
              var bitLength = lzwMinCodeSize + 1;
              var table = lzwTable();
              for (var i2 = 0; i2 < clearCode; i2 += 1) {
                table.add(String.fromCharCode(i2));
              }
              table.add(String.fromCharCode(clearCode));
              table.add(String.fromCharCode(endCode));
              var byteOut = byteArrayOutputStream();
              var bitOut = bitOutputStream(byteOut);
              bitOut.write(clearCode, bitLength);
              var dataIndex = 0;
              var s2 = String.fromCharCode(_data[dataIndex]);
              dataIndex += 1;
              while (dataIndex < _data.length) {
                var c2 = String.fromCharCode(_data[dataIndex]);
                dataIndex += 1;
                if (table.contains(s2 + c2)) {
                  s2 = s2 + c2;
                } else {
                  bitOut.write(table.indexOf(s2), bitLength);
                  if (table.size() < 4095) {
                    if (table.size() == 1 << bitLength) {
                      bitLength += 1;
                    }
                    table.add(s2 + c2);
                  }
                  s2 = c2;
                }
              }
              bitOut.write(table.indexOf(s2), bitLength);
              bitOut.write(endCode, bitLength);
              bitOut.flush();
              return byteOut.toByteArray();
            };
            var lzwTable = function () {
              var _map = {};
              var _size = 0;
              var _this2 = {};
              _this2.add = function (key) {
                if (_this2.contains(key)) {
                  throw "dup key:" + key;
                }
                _map[key] = _size;
                _size += 1;
              };
              _this2.size = function () {
                return _size;
              };
              _this2.indexOf = function (key) {
                return _map[key];
              };
              _this2.contains = function (key) {
                return typeof _map[key] != "undefined";
              };
              return _this2;
            };
            return _this;
          };
          var createDataURL = function (width, height, getPixel) {
            var gif = gifImage(width, height);
            for (var y = 0; y < height; y += 1) {
              for (var x = 0; x < width; x += 1) {
                gif.setPixel(x, y, getPixel(x, y));
              }
            }
            var b = byteArrayOutputStream();
            gif.write(b);
            var base64 = base64EncodeOutputStream();
            var bytes = b.toByteArray();
            for (var i2 = 0; i2 < bytes.length; i2 += 1) {
              base64.writeByte(bytes[i2]);
            }
            base64.flush();
            return "data:image/gif;base64," + base64;
          };
          return qrcode3;
        }();
        !function () {
          qrcode2.stringToBytesFuncs["UTF-8"] = function (s2) {
            function toUTF8Array(str) {
              var utf8 = [];
              for (var i2 = 0; i2 < str.length; i2++) {
                var charcode = str.charCodeAt(i2);
                if (charcode < 128) utf8.push(charcode);else if (charcode < 2048) {
                  utf8.push(192 | charcode >> 6, 128 | charcode & 63);
                } else if (charcode < 55296 || charcode >= 57344) {
                  utf8.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | charcode & 63);
                } else {
                  i2++;
                  charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i2) & 1023);
                  utf8.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | charcode & 63);
                }
              }
              return utf8;
            }
            return toUTF8Array(s2);
          };
        }();
        (function (factory) {
          {
            module.exports = factory();
          }
        })(function () {
          return qrcode2;
        });
      })(qrcode$1);
      const qrcode = qrcode$1.exports;
      function copyToClipboard(text) {
        return __async(this, null, function* () {
          try {
            if (!(navigator == null ? void 0 : navigator.clipboard)) {
              throw new TonConnectUIError("Clipboard API not available");
            }
            return yield navigator.clipboard.writeText(text);
          } catch (e2) {}
          fallbackCopyTextToClipboard(text);
        });
      }
      function fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
          document.execCommand("copy");
        } finally {
          document.body.removeChild(textArea);
        }
      }
      const _tmpl$$s = /* @__PURE__ */template$1(`<div></div>`);
      const QRCode = props => {
        let qrCodeCanvasRef;
        let qrCodeWrapperRef;
        let imageRef;
        const [copyButtonOpened, setCopyButtonOpened] = createSignal(false);
        const [picSize, setPicSize] = createSignal(picSizeDefault);
        createEffect(() => {
          const errorCorrectionLevel = "L";
          const cellSize = 4;
          const qr = qrcode(0, errorCorrectionLevel);
          qr.addData(props.sourceUrl);
          qr.make();
          qrCodeCanvasRef.innerHTML = qr.createSvgTag(cellSize, 0);
          const qrSize = qrCodeCanvasRef.firstElementChild.clientWidth;
          const scale = Math.round(qrNormalSize / qrSize * 1e5) / 1e5;
          if (imageRef) {
            const imgSize = Math.ceil(imgSizeDefault / (scale * cellSize)) * cellSize;
            const imgOffset = toPx(Math.ceil((qrSize - imgSize) / (2 * cellSize)) * cellSize);
            imageRef.style.top = imgOffset;
            imageRef.style.left = imgOffset;
            imageRef.style.height = toPx(imgSize);
            imageRef.style.width = toPx(imgSize);
            setPicSize(Math.round(picSizeDefault / scale));
          }
          qrCodeWrapperRef.style.transform = `scale(${scale})`;
        });
        let timeoutId = null;
        const onCopyClick = () => {
          setCopyButtonOpened(true);
          copyToClipboard(props.sourceUrl);
          if (timeoutId != null) {
            clearTimeout(timeoutId);
          }
          timeoutId = setTimeout(() => setCopyButtonOpened(false), 1500);
        };
        return createComponent(QrCodeBackground, {
          get ["class"]() {
            return props.class;
          },
          onClick: onCopyClick,
          get children() {
            return [createComponent(QrCodeWrapper$2, {
              ref(r$) {
                const _ref$ = qrCodeWrapperRef;
                typeof _ref$ === "function" ? _ref$(r$) : qrCodeWrapperRef = r$;
              },
              get children() {
                return [(() => {
                  const _el$ = _tmpl$$s.cloneNode(true);
                  const _ref$2 = qrCodeCanvasRef;
                  typeof _ref$2 === "function" ? use(_ref$2, _el$) : qrCodeCanvasRef = _el$;
                  return _el$;
                })(), createComponent(Show, {
                  get when() {
                    return props.imageUrl;
                  },
                  get children() {
                    return createComponent(ImageBackground, {
                      ref(r$) {
                        const _ref$3 = imageRef;
                        typeof _ref$3 === "function" ? _ref$3(r$) : imageRef = r$;
                      },
                      get children() {
                        return createComponent(ImageStyled$3, {
                          get src() {
                            return props.imageUrl;
                          },
                          alt: "",
                          get size() {
                            return picSize();
                          }
                        });
                      }
                    });
                  }
                })];
              }
            }), createComponent(Transition, {
              onBeforeEnter: el => {
                animate(el, [{
                  opacity: 0,
                  transform: "translate(-50%, 44px)"
                }, {
                  opacity: 1,
                  transform: "translate(-50%, 0)"
                }], {
                  duration: 150,
                  easing: "ease-out"
                });
              },
              onExit: (el, done) => {
                animate(el, [{
                  opacity: 1,
                  transform: "translate(-50%, 0)"
                }, {
                  opacity: 0,
                  transform: "translate(-50%, 44px)"
                }], {
                  duration: 150,
                  easing: "ease-out"
                }).finished.then(() => {
                  done();
                });
              },
              get children() {
                return createComponent(Show, {
                  get when() {
                    return copyButtonOpened() && !props.disableCopy;
                  },
                  get children() {
                    return createComponent(CopiedBoxStyled, {
                      get children() {
                        return [createComponent(SuccessIcon, {
                          size: "xs"
                        }), createComponent(Text, {
                          translationKey: "common.linkCopied",
                          children: "Link Copied"
                        })];
                      }
                    });
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return !props.disableCopy;
              },
              get children() {
                return createComponent(CopyIconButton, {
                  get children() {
                    return createComponent(CopyLightIcon, {});
                  }
                });
              }
            })];
          }
        });
      };
      var deepReadObject = (obj, path, defaultValue) => {
        const value = path.trim().split(".").reduce((a2, b) => a2 ? a2[b] : void 0, obj);
        return value !== void 0 ? value : defaultValue;
      };
      var template = function (str, params, reg) {
        if (reg === void 0) {
          reg = /{{(.*?)}}/g;
        }
        return str.replace(reg, (_, key) => deepReadObject(params, key, ""));
      };
      var createI18nContext = function (init, lang) {
        if (init === void 0) {
          init = {};
        }
        if (lang === void 0) {
          lang = navigator.language in init ? navigator.language : Object.keys(init)[0];
        }
        const [locale, setLocale] = createSignal(lang);
        const [dict, setDict] = createStore(init);
        const translate = (key, params, defaultValue) => {
          const val = deepReadObject(dict[locale()], key, defaultValue || "");
          if (typeof val === "function") return val(params);
          if (typeof val === "string") return template(val, params || {});
          return val;
        };
        const actions = {
          add(lang2, table) {
            setDict(lang2, t2 => Object.assign(t2 || {}, table));
          },
          locale: lang2 => lang2 ? setLocale(lang2) : locale(),
          dict: lang2 => deepReadObject(dict, lang2)
        };
        return [translate, actions];
      };
      var I18nContext = createContext({});
      var useI18n = () => useContext(I18nContext);
      const TextStyled$3 = styled.div`
    font-style: normal;
    font-weight: ${props => props.fontWeight};
    font-size: ${props => props.fontSize};
    line-height: ${props => props.lineHeight};

    color: ${props => props.color};
`;
      const Text = inputs => {
        const theme = useTheme();
        const [t2] = useI18n();
        let textRef;
        const color = () => inputs.color || theme.colors.text.primary;
        const props = mergeProps({
          fontSize: "14px",
          fontWeight: "510",
          lineHeight: "130%"
        }, inputs);
        createEffect(() => {
          if (!textRef) {
            return;
          }
          if (props.cursor === "unset") {
            return;
          }
          if (getComputedStyle(textRef).cursor !== "pointer") {
            textRef.style.cursor = "default";
          }
        });
        return createComponent(TextStyled$3, {
          get fontSize() {
            return props.fontSize;
          },
          get fontWeight() {
            return props.fontWeight;
          },
          get lineHeight() {
            return props.lineHeight;
          },
          get color() {
            return color();
          },
          get ["class"]() {
            return props.class;
          },
          ref(r$) {
            const _ref$ = textRef;
            typeof _ref$ === "function" ? _ref$(r$) : textRef = r$;
          },
          "data-tc-text": "true",
          get children() {
            var _a2;
            return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
          }
        });
      };
      const ImageContainer = styled.div`
    position: relative;

    &::after {
        content: '';
        display: block;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        border: 0.5px solid rgba(0, 0, 0, 0.08);

        border-radius: inherit;
    }
`;
      const ImageStyled$2 = styled(Image)`
    width: 100%;
    height: 100%;
    border-radius: inherit;
`;
      const WalletImage = props => {
        return createComponent(ImageContainer, {
          get ["class"]() {
            return props.class;
          },
          get children() {
            return createComponent(ImageStyled$2, {
              get src() {
                return props.src;
              }
            });
          }
        });
      };
      const borders$3 = {
        m: "16px",
        s: "12px",
        none: "0"
      };
      const badgeBorders = {
        m: "6px",
        s: "6px",
        none: "0"
      };
      const WalletItemStyled = styled.button`
    position: relative;
    cursor: pointer;
    border: none;
    background-color: unset;
    padding: 8px 4px;
    width: 92px;
    display: flex;
    flex-direction: column;
    align-items: center;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${media("mobile")} {
        padding: 8px 4px;
        width: 82px;
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
      const ImageStyled$1 = styled(WalletImage)`
    width: 60px;
    height: 60px;
    border-radius: ${props => borders$3[props.theme.borderRadius]};

    margin-bottom: 8px;
`;
      const BadgeStyled = styled(Image)`
    position: absolute;
    right: 10px;
    top: 50px;
    width: 24px;
    height: 24px;
    border-radius: ${props => badgeBorders[props.theme.borderRadius]};
    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.08);
`;
      const StyledText = styled(Text)`
    max-width: 90px;
    font-weight: 590;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    ${media("mobile")} {
        max-width: 80px;
    }
`;
      const StyledSecondLine = styled(Text)`
    font-weight: 510;
    max-width: 90px;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    color: ${props => props.colorPrimary ? props.theme.colors.text.primary : props.theme.colors.text.secondary};

    ${media("mobile")} {
        max-width: 80px;
    }
`;
      const WalletItem = props => {
        return createComponent(WalletItemStyled, {
          get ["class"]() {
            return props.class;
          },
          onClick: () => props.onClick(),
          "data-tc-wallet-item": "true",
          get children() {
            return [createMemo(() => createMemo(() => typeof props.icon === "string")() ? createComponent(ImageStyled$1, {
              get src() {
                return props.icon;
              }
            }) : props.icon), createMemo(() => createMemo(() => !!props.badgeUrl)() && createComponent(BadgeStyled, {
              get src() {
                return props.badgeUrl;
              }
            })), createComponent(StyledText, {
              get children() {
                return props.name;
              }
            }), createMemo(() => createMemo(() => !!props.secondLine)() && createComponent(StyledSecondLine, {
              get colorPrimary() {
                var _a2;
                return (_a2 = props.secondLineColorPrimary) != null ? _a2 : true;
              },
              get children() {
                return props.secondLine;
              }
            }))];
          }
        });
      };
      const H1Styled$9 = styled.h1`
    font-style: normal;
    font-weight: 700;
    font-size: 20px;
    line-height: 28px;

    text-align: center;

    color: ${props => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 0;

    cursor: default;
`;
      const H1 = props => {
        const [t2] = useI18n();
        return createComponent(H1Styled$9, {
          get ["class"]() {
            return props.class;
          },
          "data-tc-h1": "true",
          get children() {
            var _a2;
            return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
          }
        });
      };
      const H2Styled$5 = styled.h2`
    font-style: normal;
    font-weight: 510;
    font-size: 16px;
    line-height: 22px;

    text-align: center;

    color: ${props => props.theme.colors.text.secondary};

    margin-top: 0;
    margin-bottom: 32px;

    cursor: default;
`;
      const H2 = props => {
        const [t2] = useI18n();
        return createComponent(H2Styled$5, {
          get ["class"]() {
            return props.class;
          },
          "data-tc-h2": "true",
          get children() {
            var _a2;
            return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
          }
        });
      };
      const H3Styled$1 = styled.h3`
    font-style: normal;
    font-weight: 590;
    font-size: 16px;
    line-height: 20px;

    color: ${props => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 0;

    cursor: default;
`;
      const H3 = props => {
        const [t2] = useI18n();
        return createComponent(H3Styled$1, {
          "data-tc-h3": "true",
          get ["class"]() {
            return props.class;
          },
          get children() {
            var _a2;
            return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
          }
        });
      };
      const _tmpl$$r = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28"><path fill-rule="evenodd" clip-rule="evenodd" d="M9.75 7.5C9.33579 7.5 9 7.16421 9 6.75C9 6.33579 9.33579 6 9.75 6H21.25C21.6642 6 22 6.33579 22 6.75V18.25C22 18.6642 21.6642 19 21.25 19C20.8358 19 20.5 18.6642 20.5 18.25V8.56066L6.28033 22.7803C5.98744 23.0732 5.51256 23.0732 5.21967 22.7803C4.92678 22.4874 4.92678 22.0126 5.21967 21.7197L19.4393 7.5H9.75Z"></path></svg>`);
      const LongArrowIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$r.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = fill(),
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "fill", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$q = /* @__PURE__ */template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.1839 17.7069C13.6405 18.6507 13.3688 19.1226 13.0591 19.348C12.4278 19.8074 11.5723 19.8074 10.941 19.348C10.6312 19.1226 10.3595 18.6507 9.81613 17.7069L5.52066 10.2464C4.76864 8.94024 4.39263 8.28717 4.33762 7.75894C4.2255 6.68236 4.81894 5.65591 5.80788 5.21589C6.29309 5 7.04667 5 8.55383 5H15.4462C16.9534 5 17.7069 5 18.1922 5.21589C19.1811 5.65591 19.7745 6.68236 19.6624 7.75894C19.6074 8.28717 19.2314 8.94024 18.4794 10.2464L14.1839 17.7069ZM11.1 16.3412L6.56139 8.48002C6.31995 8.06185 6.19924 7.85276 6.18146 7.68365C6.14523 7.33896 6.33507 7.01015 6.65169 6.86919C6.80703 6.80002 7.04847 6.80002 7.53133 6.80002H7.53134L11.1 6.80002V16.3412ZM12.9 16.3412L17.4387 8.48002C17.6801 8.06185 17.8008 7.85276 17.8186 7.68365C17.8548 7.33896 17.665 7.01015 17.3484 6.86919C17.193 6.80002 16.9516 6.80002 16.4687 6.80002L12.9 6.80002V16.3412Z"></path></svg>`);
      const TonIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.primary;
        return (() => {
          const _el$ = _tmpl$$q.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$p = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><g clip-path="url(#clip0_3783_2045)"><circle cx="8" cy="8.00098" r="8"></circle><path d="M4.75 8.50098L7 10.751L11.75 6.00098" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></g><defs><clipPath id="clip0_3783_2045"><rect width="16" height="16" fill="white" transform="translate(0 0.000976562)"></rect></clipPath></defs></svg>`),
        _tmpl$2$3 = /* @__PURE__ */template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M17.1364 9.6364C17.4879 9.28493 17.4879 8.71508 17.1364 8.36361C16.7849 8.01214 16.2151 8.01214 15.8636 8.36361L10 14.2272L8.1364 12.3636C7.78493 12.0121 7.21508 12.0121 6.86361 12.3636C6.51214 12.7151 6.51214 13.2849 6.86361 13.6364L9.36361 16.1364C9.71508 16.4879 10.2849 16.4879 10.6364 16.1364L17.1364 9.6364Z"></path></svg>`),
        _tmpl$3$2 = /* @__PURE__ */template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M50.9142 28.4142C51.6953 27.6332 51.6953 26.3668 50.9142 25.5858C50.1332 24.8047 48.8668 24.8047 48.0858 25.5858L30 43.6716L23.9142 37.5858C23.1332 36.8047 21.8668 36.8047 21.0858 37.5858C20.3047 38.3668 20.3047 39.6332 21.0858 40.4142L28.5858 47.9142C29.3668 48.6953 30.6332 48.6953 31.4142 47.9142L50.9142 28.4142Z"></path></svg>`);
      const SuccessIcon = props => {
        const theme = useTheme();
        const size = () => props.size || "s";
        const fill = () => props.fill || theme.colors.icon.success;
        return createMemo((() => {
          const _c$ = createMemo(() => size() === "xs");
          return () => _c$() ? (() => {
            const _el$ = _tmpl$$p.cloneNode(true),
              _el$2 = _el$.firstChild,
              _el$3 = _el$2.firstChild,
              _el$4 = _el$3.nextSibling;
            createRenderEffect(_p$ => {
              const _v$ = props.class,
                _v$2 = fill(),
                _v$3 = theme.colors.constant.white;
              _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
              _v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
              _v$3 !== _p$._v$3 && setAttribute(_el$4, "stroke", _p$._v$3 = _v$3);
              return _p$;
            }, {
              _v$: void 0,
              _v$2: void 0,
              _v$3: void 0
            });
            return _el$;
          })() : (() => {
            const _c$2 = createMemo(() => size() === "s");
            return () => _c$2() ? (() => {
              const _el$5 = _tmpl$2$3.cloneNode(true),
                _el$6 = _el$5.firstChild,
                _el$7 = _el$6.nextSibling;
              createRenderEffect(_p$ => {
                const _v$4 = props.class,
                  _v$5 = fill(),
                  _v$6 = theme.colors.constant.white;
                _v$4 !== _p$._v$4 && setAttribute(_el$5, "class", _p$._v$4 = _v$4);
                _v$5 !== _p$._v$5 && setAttribute(_el$6, "fill", _p$._v$5 = _v$5);
                _v$6 !== _p$._v$6 && setAttribute(_el$7, "fill", _p$._v$6 = _v$6);
                return _p$;
              }, {
                _v$4: void 0,
                _v$5: void 0,
                _v$6: void 0
              });
              return _el$5;
            })() : (() => {
              const _el$8 = _tmpl$3$2.cloneNode(true),
                _el$9 = _el$8.firstChild,
                _el$10 = _el$9.nextSibling;
              createRenderEffect(_p$ => {
                const _v$7 = props.class,
                  _v$8 = fill(),
                  _v$9 = theme.colors.constant.white;
                _v$7 !== _p$._v$7 && setAttribute(_el$8, "class", _p$._v$7 = _v$7);
                _v$8 !== _p$._v$8 && setAttribute(_el$9, "fill", _p$._v$8 = _v$8);
                _v$9 !== _p$._v$9 && setAttribute(_el$10, "fill", _p$._v$9 = _v$9);
                return _p$;
              }, {
                _v$7: void 0,
                _v$8: void 0,
                _v$9: void 0
              });
              return _el$8;
            })();
          })();
        })());
      };
      const _tmpl$$o = /* @__PURE__ */template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M24.0858 26.9142C23.3047 26.1332 23.3047 24.8668 24.0858 24.0858C24.8668 23.3047 26.1332 23.3047 26.9142 24.0858L36 33.1716L45.0858 24.0858C45.8668 23.3047 47.1332 23.3047 47.9142 24.0858C48.6953 24.8668 48.6953 26.1332 47.9142 26.9142L38.8284 36L47.9142 45.0858C48.6953 45.8668 48.6953 47.1332 47.9142 47.9142C47.1332 48.6953 45.8668 48.6953 45.0858 47.9142L36 38.8284L26.9142 47.9142C26.1332 48.6953 24.8668 48.6953 24.0858 47.9142C23.3047 47.1332 23.3047 45.8668 24.0858 45.0858L33.1716 36L24.0858 26.9142Z"></path></svg>`),
        _tmpl$2$2 = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><circle cx="24" cy="24.001" r="22"></circle><path d="M24 24.001L31.5 16.501M24 24.001L16.5 16.501M24 24.001L16.5 31.501M24 24.001L31.5 31.501" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path></svg>`),
        _tmpl$3$1 = /* @__PURE__ */template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M7.86361 9.1364C7.51214 8.78493 7.51214 8.21508 7.86361 7.86361C8.21508 7.51214 8.78493 7.51214 9.1364 7.86361L12 10.7272L14.8636 7.86361C15.2151 7.51214 15.7849 7.51214 16.1364 7.86361C16.4879 8.21508 16.4879 8.78493 16.1364 9.1364L13.2728 12L16.1364 14.8636C16.4879 15.2151 16.4879 15.7849 16.1364 16.1364C15.7849 16.4879 15.2151 16.4879 14.8636 16.1364L12 13.2728L9.1364 16.1364C8.78493 16.4879 8.21508 16.4879 7.86361 16.1364C7.51214 15.7849 7.51214 15.2151 7.86361 14.8636L10.7272 12L7.86361 9.1364Z"></path></svg>`);
      const ErrorIcon = props => {
        const theme = useTheme();
        const size = () => props.size || "m";
        const fill = () => props.fill || theme.colors.icon.error;
        return createMemo((() => {
          const _c$ = createMemo(() => size() === "m");
          return () => _c$() ? (() => {
            const _el$ = _tmpl$$o.cloneNode(true),
              _el$2 = _el$.firstChild,
              _el$3 = _el$2.nextSibling;
            createRenderEffect(_p$ => {
              const _v$ = props.class,
                _v$2 = fill(),
                _v$3 = theme.colors.constant.white;
              _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
              _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
              _v$3 !== _p$._v$3 && setAttribute(_el$3, "fill", _p$._v$3 = _v$3);
              return _p$;
            }, {
              _v$: void 0,
              _v$2: void 0,
              _v$3: void 0
            });
            return _el$;
          })() : (() => {
            const _c$2 = createMemo(() => size() === "s");
            return () => _c$2() ? (() => {
              const _el$4 = _tmpl$2$2.cloneNode(true),
                _el$5 = _el$4.firstChild,
                _el$6 = _el$5.nextSibling;
              createRenderEffect(_p$ => {
                const _v$4 = props.class,
                  _v$5 = fill(),
                  _v$6 = theme.colors.constant.white;
                _v$4 !== _p$._v$4 && setAttribute(_el$4, "class", _p$._v$4 = _v$4);
                _v$5 !== _p$._v$5 && setAttribute(_el$5, "fill", _p$._v$5 = _v$5);
                _v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
                return _p$;
              }, {
                _v$4: void 0,
                _v$5: void 0,
                _v$6: void 0
              });
              return _el$4;
            })() : (() => {
              const _el$7 = _tmpl$3$1.cloneNode(true),
                _el$8 = _el$7.firstChild,
                _el$9 = _el$8.nextSibling;
              createRenderEffect(_p$ => {
                const _v$7 = props.class,
                  _v$8 = fill(),
                  _v$9 = theme.colors.constant.white;
                _v$7 !== _p$._v$7 && setAttribute(_el$7, "class", _p$._v$7 = _v$7);
                _v$8 !== _p$._v$8 && setAttribute(_el$8, "fill", _p$._v$8 = _v$8);
                _v$9 !== _p$._v$9 && setAttribute(_el$9, "fill", _p$._v$9 = _v$9);
                return _p$;
              }, {
                _v$7: void 0,
                _v$8: void 0,
                _v$9: void 0
              });
              return _el$7;
            })();
          })();
        })());
      };
      const _tmpl$$n = /* @__PURE__ */template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.55 5.85123C18.9459 7.81184 20.1094 12.1541 18.1488 15.55C16.1882 18.9459 11.8459 20.1094 8.44998 18.1488C8.01952 17.9003 7.46909 18.0478 7.22056 18.4782C6.97203 18.9087 7.11952 19.4591 7.54998 19.7076C11.8068 22.1653 17.2499 20.7068 19.7076 16.45C22.1653 12.1932 20.7068 6.75005 16.45 4.29239C12.1932 1.83472 6.75003 3.29321 4.29236 7.55001C4.04383 7.98047 4.19132 8.53091 4.62178 8.77943C5.05224 9.02796 5.60268 8.88048 5.8512 8.45001C7.81181 5.05413 12.1541 3.89062 15.55 5.85123Z"></path></svg>`),
        _tmpl$2$1 = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 44 44" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M22 2.99951C11.5066 2.99951 3 11.5061 3 21.9995C3 32.4929 11.5066 40.9995 22 40.9995C22.8284 40.9995 23.5 41.6711 23.5 42.4995C23.5 43.3279 22.8284 43.9995 22 43.9995C9.84974 43.9995 0 34.1498 0 21.9995C0 9.84925 9.84974 -0.000488281 22 -0.000488281C34.1503 -0.000488281 44 9.84925 44 21.9995C44 22.8279 43.3284 23.4995 42.5 23.4995C41.6716 23.4995 41 22.8279 41 21.9995C41 11.5061 32.4934 2.99951 22 2.99951Z"></path></svg>`),
        _tmpl$3 = /* @__PURE__ */template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M24 56.7846C35.479 63.412 50.1572 59.479 56.7846 47.9999C63.412 36.5209 59.479 21.8427 48 15.2153C36.521 8.58791 21.8428 12.5209 15.2154 23.9999" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path></svg>`);
      const LoaderIcon = props => {
        const theme = useTheme();
        const size = () => props.size || "xs";
        const fill = () => props.fill || theme.colors.icon.tertiary;
        const rotateAnimation = h`
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
    `;
        const svgClass = u`
        animation: ${rotateAnimation} 1s linear infinite;
    `;
        return createMemo((() => {
          const _c$ = createMemo(() => size() === "xs");
          return () => _c$() ? (() => {
            const _el$ = _tmpl$$n.cloneNode(true),
              _el$2 = _el$.firstChild;
            createRenderEffect(_p$ => {
              const _v$ = classnames(svgClass, props.class),
                _v$2 = fill();
              _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
              _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
              return _p$;
            }, {
              _v$: void 0,
              _v$2: void 0
            });
            return _el$;
          })() : (() => {
            const _c$2 = createMemo(() => size() === "s");
            return () => _c$2() ? (() => {
              const _el$3 = _tmpl$2$1.cloneNode(true),
                _el$4 = _el$3.firstChild;
              createRenderEffect(_p$ => {
                const _v$3 = classnames(svgClass, props.class),
                  _v$4 = fill();
                _v$3 !== _p$._v$3 && setAttribute(_el$3, "class", _p$._v$3 = _v$3);
                _v$4 !== _p$._v$4 && setAttribute(_el$4, "fill", _p$._v$4 = _v$4);
                return _p$;
              }, {
                _v$3: void 0,
                _v$4: void 0
              });
              return _el$3;
            })() : (() => {
              const _el$5 = _tmpl$3.cloneNode(true),
                _el$6 = _el$5.firstChild;
              createRenderEffect(_p$ => {
                const _v$5 = classnames(svgClass, props.class),
                  _v$6 = fill();
                _v$5 !== _p$._v$5 && setAttribute(_el$5, "class", _p$._v$5 = _v$5);
                _v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
                return _p$;
              }, {
                _v$5: void 0,
                _v$6: void 0
              });
              return _el$5;
            })();
          })();
        })());
      };
      const _tmpl$$m = /* @__PURE__ */template$1(`<svg width="158" height="28" viewBox="0 0 158 28" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M28 14.001C28 21.733 21.732 28.001 14 28.001C6.26801 28.001 0 21.733 0 14.001C0 6.26899 6.26801 0.000976562 14 0.000976562C21.732 0.000976562 28 6.26899 28 14.001ZM9.21931 8.00098H18.7801H18.7813C20.538 8.00098 21.6522 9.89966 20.7691 11.4302L14.8672 21.6576C14.4822 22.3254 13.5172 22.3254 13.1322 21.6576L7.23158 11.4302C6.34721 9.89726 7.4614 8.00098 9.21931 8.00098ZM13.1262 18.5882V9.74806H9.21811C8.78976 9.74806 8.53708 10.2029 8.74163 10.5578L11.8423 16.1035L13.1262 18.5882ZM16.1559 16.1047L19.2554 10.5566C19.4599 10.2017 19.2073 9.74685 18.7789 9.74685H14.8709V18.5906L16.1559 16.1047Z" fill="#0098EA"></path><path d="M18.7802 8.00098H9.21936C7.46145 8.00098 6.34727 9.89726 7.23164 11.4302L13.1322 21.6576C13.5173 22.3254 14.4823 22.3254 14.8673 21.6576L20.7691 11.4302C21.6523 9.89966 20.5381 8.00098 18.7814 8.00098H18.7802ZM13.1274 18.5906L11.8424 16.1035L8.74168 10.5578C8.53714 10.2029 8.78981 9.74806 9.21816 9.74806H13.1262V18.5918L13.1274 18.5906ZM19.2555 10.5566L16.156 16.1047L14.8709 18.5906V9.74685H18.779C19.2073 9.74685 19.46 10.2017 19.2555 10.5566Z" fill="white"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M51.7483 22.1967C55.7182 22.1967 58.9609 18.954 58.9609 14.9841C58.9609 11.0142 55.7182 7.77148 51.7483 7.77148C47.7588 7.77148 44.5357 11.0142 44.5357 14.9841C44.5357 18.954 47.7588 22.1967 51.7483 22.1967ZM51.7483 19.1702C49.4686 19.1702 47.6802 17.2442 47.6802 14.9841C47.6802 12.724 49.4686 10.798 51.7483 10.798C54.0084 10.798 55.7968 12.724 55.7968 14.9841C55.7968 17.2442 54.0084 19.1702 51.7483 19.1702ZM37.0698 21.9609H40.2142V10.9946H44.2843V8.00732H33V10.9946H37.0698V21.9609ZM69.9379 8.00732H73.0823V21.9609H70.3899L63.59 13.3333V21.9609H60.4652V8.00732H63.1576L69.9379 16.6153V8.00732ZM79.2259 14.9887C79.2259 10.9202 82.351 7.77539 86.4982 7.77539C89.8592 7.77539 92.5519 9.95709 93.2202 12.6891H90.7437C90.154 11.0971 88.4637 9.9964 86.4982 9.9964C83.5893 9.9964 81.5452 12.1781 81.5452 14.9887C81.5452 17.7994 83.5893 19.9811 86.4982 19.9811C88.4637 19.9811 90.154 18.8804 90.7437 17.2884H93.2202C92.5519 20.0204 89.8592 22.2021 86.4982 22.2021C82.351 22.2021 79.2259 19.0573 79.2259 14.9887ZM104.584 17.0525C104.584 19.9025 102.343 22.1628 99.4342 22.1628C96.5253 22.1628 94.2846 19.9025 94.2846 17.0525C94.2846 14.2025 96.5253 11.9422 99.4342 11.9422C102.343 11.9422 104.584 14.2025 104.584 17.0525ZM96.4663 17.0525C96.4663 18.8018 97.6849 20.158 99.4342 20.158C101.164 20.158 102.382 18.8018 102.382 17.0525C102.382 15.3032 101.164 13.947 99.4342 13.947C97.6849 13.947 96.4663 15.3032 96.4663 17.0525ZM108.626 12.1388H106.463V21.9662H108.626V17.1311C108.626 15.0281 109.726 13.9077 111.161 13.9077C112.419 13.9077 113.205 14.8512 113.205 16.4039V21.9662H115.367V16.0501C115.367 13.5539 113.893 11.9422 111.613 11.9422C110.335 11.9422 109.215 12.4926 108.626 13.4753V12.1388ZM117.839 12.1388H120.001V13.4753C120.59 12.4926 121.711 11.9422 122.988 11.9422C125.268 11.9422 126.742 13.5539 126.742 16.0501V21.9662H124.58V16.4039C124.58 14.8512 123.794 13.9077 122.536 13.9077C121.101 13.9077 120.001 15.0281 120.001 17.1311V21.9662H117.839V12.1388ZM133.558 22.1628C136.054 22.1628 137.823 20.728 138.373 18.8804H136.113C135.661 19.8238 134.717 20.2563 133.636 20.2563C131.887 20.2563 130.747 19.077 130.668 17.5832H138.491C138.688 14.2419 136.585 11.9422 133.577 11.9422C130.551 11.9422 128.526 14.1436 128.526 17.0525C128.526 20.0007 130.629 22.1628 133.558 22.1628ZM130.747 16.0501C131.042 14.5367 132.162 13.7505 133.518 13.7505C134.717 13.7505 135.838 14.4581 136.172 16.0501H130.747ZM149.851 18.3694C149.32 20.5511 147.453 22.1628 144.859 22.1628C141.871 22.1628 139.709 19.8828 139.709 17.0525C139.709 14.2222 141.871 11.9422 144.859 11.9422C147.453 11.9422 149.32 13.5539 149.851 15.7356H147.571C147.178 14.6743 146.215 13.9077 144.859 13.9077C143.109 13.9077 141.91 15.2246 141.91 17.0525C141.91 18.8804 143.109 20.1973 144.859 20.1973C146.215 20.1973 147.178 19.4307 147.571 18.3694H149.851ZM155.75 22.0645C156.418 22.0645 156.929 21.9859 157.362 21.8483V19.9221C157.047 20.0401 156.615 20.1187 156.202 20.1187C155.082 20.1187 154.551 19.6666 154.551 18.448V14.065H157.362V12.1388H154.551V9.40675H152.389V12.1388H150.345V14.065H152.389V18.8018C152.389 21.0228 153.863 22.0645 155.75 22.0645Z"></path></svg>`);
      const TonConnectBrand = () => {
        const theme = useTheme();
        const fill = () => theme.theme === THEME.DARK ? theme.colors.constant.white : theme.colors.constant.black;
        return (() => {
          const _el$ = _tmpl$$m.cloneNode(true),
            _el$2 = _el$.firstChild,
            _el$3 = _el$2.nextSibling,
            _el$4 = _el$3.nextSibling;
          createRenderEffect(() => setAttribute(_el$4, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$l = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.56608 4.42584C5.82527 3.32158 6.8176 2.5 8.00001 2.5C9.38072 2.5 10.5 3.61929 10.5 5C10.5 5.63026 10.3391 6.0386 10.1264 6.34455C9.90018 6.66993 9.58561 6.92478 9.18864 7.20877C9.12579 7.25372 9.05873 7.30025 8.9887 7.34883C8.27392 7.84472 7.25001 8.55507 7.25001 10V10.25C7.25001 10.6642 7.5858 11 8.00001 11C8.41422 11 8.75001 10.6642 8.75001 10.25V10C8.75001 9.36502 9.10777 9.1096 9.94554 8.51149L10.0614 8.42873C10.4769 8.13147 10.9748 7.75194 11.358 7.20076C11.7547 6.63015 12 5.91973 12 5C12 2.79086 10.2091 1 8.00001 1C6.10564 1 4.5205 2.31615 4.10577 4.08308C4.01112 4.48634 4.26129 4.88997 4.66454 4.98462C5.0678 5.07927 5.47143 4.8291 5.56608 4.42584ZM8.00001 15C8.60752 15 9.10001 14.5075 9.10001 13.9C9.10001 13.2925 8.60752 12.8 8.00001 12.8C7.39249 12.8 6.90001 13.2925 6.90001 13.9C6.90001 14.5075 7.39249 15 8.00001 15Z"></path></svg>`);
      const QuestionIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$l.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$k = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M9.98156 8.75C9.84854 11.4328 9.01206 13.5 8 13.5C6.98794 13.5 6.15146 11.4328 6.01844 8.75H9.98156ZM11.4832 8.75C11.4217 10.1155 11.1929 11.3869 10.8239 12.4017C10.7734 12.5405 10.7188 12.6789 10.6595 12.8154C12.1454 11.993 13.2103 10.5029 13.4493 8.75H11.4832ZM13.4493 7.25H11.4832C11.4217 5.88453 11.1929 4.61314 10.8239 3.5983C10.7734 3.4595 10.7188 3.32111 10.6595 3.18459C12.1454 4.00697 13.2103 5.49709 13.4493 7.25ZM9.98156 7.25H6.01844C6.15144 4.56764 6.98769 2.50062 7.99955 2.5H8C9.01206 2.5 9.84854 4.56724 9.98156 7.25ZM4.51678 7.25C4.57826 5.88453 4.80706 4.61314 5.1761 3.5983C5.22657 3.4595 5.28124 3.32111 5.3405 3.18459C3.85463 4.00697 2.78972 5.49709 2.55071 7.25H4.51678ZM2.55071 8.75C2.78972 10.5029 3.85463 11.993 5.3405 12.8154C5.28124 12.6789 5.22657 12.5405 5.1761 12.4017C4.80706 11.3869 4.57826 10.1155 4.51678 8.75H2.55071ZM15 8C15 11.866 11.866 15 8 15C4.13401 15 1 11.866 1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8Z"></path></svg>`);
      const BrowserIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.primary;
        return (() => {
          const _el$ = _tmpl$$k.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$j = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.5 4.8C2.5 3.11984 2.5 2.27976 2.82698 1.63803C3.1146 1.07354 3.57354 0.614601 4.13803 0.32698C4.77976 0 5.61984 0 7.3 0H8.7C10.3802 0 11.2202 0 11.862 0.32698C12.4265 0.614601 12.8854 1.07354 13.173 1.63803C13.5 2.27976 13.5 3.11984 13.5 4.8V11.2C13.5 12.8802 13.5 13.7202 13.173 14.362C12.8854 14.9265 12.4265 15.3854 11.862 15.673C11.2202 16 10.3802 16 8.7 16H7.3C5.61984 16 4.77976 16 4.13803 15.673C3.57354 15.3854 3.1146 14.9265 2.82698 14.362C2.5 13.7202 2.5 12.8802 2.5 11.2V4.8ZM4 3.9C4 3.05992 4 2.63988 4.16349 2.31901C4.3073 2.03677 4.53677 1.8073 4.81901 1.66349C5.13988 1.5 5.55992 1.5 6.4 1.5H9.6C10.4401 1.5 10.8601 1.5 11.181 1.66349C11.4632 1.8073 11.6927 2.03677 11.8365 2.31901C12 2.63988 12 3.05992 12 3.9V12.1C12 12.9401 12 13.3601 11.8365 13.681C11.6927 13.9632 11.4632 14.1927 11.181 14.3365C10.8601 14.5 10.4401 14.5 9.6 14.5H6.4C5.55992 14.5 5.13988 14.5 4.81901 14.3365C4.53677 14.1927 4.3073 13.9632 4.16349 13.681C4 13.3601 4 12.9401 4 12.1V3.9ZM7 2.5C6.58579 2.5 6.25 2.83579 6.25 3.25C6.25 3.66421 6.58579 4 7 4H9C9.41421 4 9.75 3.66421 9.75 3.25C9.75 2.83579 9.41421 2.5 9 2.5H7Z"></path></svg>`);
      const MobileIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.primary;
        return (() => {
          const _el$ = _tmpl$$j.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$i = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 6.8C1.5 5.11984 1.5 4.27976 1.82698 3.63803C2.1146 3.07354 2.57354 2.6146 3.13803 2.32698C3.77976 2 4.61984 2 6.3 2H9.7C11.3802 2 12.2202 2 12.862 2.32698C13.4265 2.6146 13.8854 3.07354 14.173 3.63803C14.5 4.27976 14.5 5.11984 14.5 6.8V11.5H15.25C15.6642 11.5 16 11.8358 16 12.25C16 12.6642 15.6642 13 15.25 13H0.75C0.335786 13 0 12.6642 0 12.25C0 11.8358 0.335786 11.5 0.75 11.5H1.5V6.8ZM3 11.5H13V5.9C13 5.05992 13 4.63988 12.8365 4.31901C12.6927 4.03677 12.4632 3.8073 12.181 3.66349C11.8601 3.5 11.4401 3.5 10.6 3.5H5.4C4.55992 3.5 4.13988 3.5 3.81901 3.66349C3.53677 3.8073 3.3073 4.03677 3.16349 4.31901C3 4.63988 3 5.05992 3 5.9V11.5Z"></path></svg>`);
      const DesktopIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.primary;
        return (() => {
          const _el$ = _tmpl$$i.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$h = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none"><g clip-path="url(#clip0_3676_1603)"><path fill-rule="evenodd" clip-rule="evenodd" d="M15.5 1.25049C15.5 0.836275 15.1642 0.500488 14.75 0.500488C14.3358 0.500488 14 0.836275 14 1.25049V3.67012C12.7187 2.04487 10.7318 1.00049 8.5 1.00049C4.63401 1.00049 1.5 4.1345 1.5 8.00049C1.5 11.8665 4.63401 15.0005 8.5 15.0005C11.6844 15.0005 14.3703 12.8748 15.2199 9.96661C15.3361 9.56902 15.1079 9.15254 14.7103 9.03638C14.3127 8.92023 13.8962 9.14838 13.7801 9.54597C13.1123 11.8319 11 13.5005 8.5 13.5005C5.46243 13.5005 3 11.0381 3 8.00049C3 4.96292 5.46243 2.50049 8.5 2.50049C10.321 2.50049 11.9363 3.3855 12.9377 4.75049H10.5C10.0858 4.75049 9.75 5.08627 9.75 5.50049C9.75 5.9147 10.0858 6.25049 10.5 6.25049H14.75C15.1642 6.25049 15.5 5.9147 15.5 5.50049V1.25049Z"></path></g><defs><clipPath id="clip0_3676_1603"><rect width="16" height="16" fill="white" transform="translate(0.5 0.000488281)"></rect></clipPath></defs></svg>`);
      const RetryIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.accent;
        return (() => {
          const _el$ = _tmpl$$h.cloneNode(true),
            _el$2 = _el$.firstChild,
            _el$3 = _el$2.firstChild;
          createRenderEffect(() => setAttribute(_el$3, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$g = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M13 4.06119V6.75053C13 7.16474 13.3358 7.50053 13.75 7.50053C14.1642 7.50053 14.5 7.16474 14.5 6.75053V2.75053L14.5 2.72807C14.5001 2.63191 14.5003 2.49627 14.4842 2.37627C14.4638 2.22503 14.4063 1.99261 14.2071 1.79342C14.0079 1.59423 13.7755 1.5367 13.6243 1.51637C13.5043 1.50023 13.3686 1.50039 13.2725 1.50051L13.25 1.50053H9.25C8.83579 1.50053 8.5 1.83631 8.5 2.25053C8.5 2.66474 8.83579 3.00053 9.25 3.00053H11.9393L7.21967 7.7202C6.92678 8.01309 6.92678 8.48796 7.21967 8.78086C7.51256 9.07375 7.98744 9.07375 8.28033 8.78086L13 4.06119ZM5.85 1.50053H5.81903H5.81899C5.21528 1.50052 4.71702 1.50051 4.31113 1.53367C3.88956 1.56812 3.50203 1.64204 3.13803 1.82751C2.57354 2.11513 2.1146 2.57407 1.82698 3.13856C1.64151 3.50256 1.56759 3.89009 1.53315 4.31166C1.49998 4.71755 1.49999 5.21581 1.5 5.81953V5.81955V5.85053V10.1505V10.1815V10.1815C1.49999 10.7852 1.49998 11.2835 1.53315 11.6894C1.56759 12.111 1.64151 12.4985 1.82698 12.8625C2.1146 13.427 2.57354 13.8859 3.13803 14.1735C3.50203 14.359 3.88956 14.4329 4.31113 14.4674C4.71702 14.5005 5.21527 14.5005 5.81897 14.5005H5.81901H5.85H10.15H10.181H10.181C10.7847 14.5005 11.283 14.5005 11.6889 14.4674C12.1104 14.4329 12.498 14.359 12.862 14.1735C13.4265 13.8859 13.8854 13.427 14.173 12.8625C14.3585 12.4985 14.4324 12.111 14.4669 11.6894C14.5 11.2835 14.5 10.7853 14.5 10.1816V10.1815V10.1505V9.75053C14.5 9.33631 14.1642 9.00053 13.75 9.00053C13.3358 9.00053 13 9.33631 13 9.75053V10.1505C13 10.793 12.9994 11.2297 12.9718 11.5672C12.945 11.8961 12.8963 12.0642 12.8365 12.1815C12.6927 12.4638 12.4632 12.6932 12.181 12.837C12.0637 12.8968 11.8955 12.9455 11.5667 12.9724C11.2292 12.9999 10.7924 13.0005 10.15 13.0005H5.85C5.20757 13.0005 4.77085 12.9999 4.43328 12.9724C4.10447 12.9455 3.93632 12.8968 3.81902 12.837C3.53677 12.6932 3.3073 12.4638 3.16349 12.1815C3.10372 12.0642 3.05503 11.8961 3.02816 11.5672C3.00058 11.2297 3 10.793 3 10.1505V5.85053C3 5.20809 3.00058 4.77137 3.02816 4.43381C3.05503 4.10499 3.10372 3.93684 3.16349 3.81954C3.3073 3.5373 3.53677 3.30783 3.81902 3.16402C3.93632 3.10425 4.10447 3.05556 4.43328 3.02869C4.77085 3.00111 5.20757 3.00053 5.85 3.00053H6.25C6.66422 3.00053 7 2.66474 7 2.25053C7 1.83631 6.66422 1.50053 6.25 1.50053H5.85Z"></path></svg>`);
      const LinkIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.accent;
        return (() => {
          const _el$ = _tmpl$$g.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$f = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none"><g clip-path="url(#clip0_3676_1274)"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.82698 2.63901C1.5 3.28074 1.5 4.12082 1.5 5.80098V8.80098V9.00098V10.201C1.5 11.8811 1.5 12.7212 1.82698 13.3629C2.1146 13.9274 2.57354 14.3864 3.13803 14.674C3.77976 15.001 4.61984 15.001 6.3 15.001H11.7C13.3802 15.001 14.2202 15.001 14.862 14.674C15.4265 14.3864 15.8854 13.9274 16.173 13.3629C16.5 12.7212 16.5 11.8811 16.5 10.201V8.80098C16.5 7.12082 16.5 6.28074 16.173 5.63901C15.8854 5.07452 15.4265 4.61558 14.862 4.32796C14.743 4.26733 14.6172 4.21795 14.4805 4.17772C14.4501 3.49449 14.3722 3.02994 14.173 2.63901C13.8854 2.07452 13.4265 1.61558 12.862 1.32796C12.2202 1.00098 11.3802 1.00098 9.7 1.00098H6.3C4.61984 1.00098 3.77976 1.00098 3.13803 1.32796C2.57354 1.61558 2.1146 2.07452 1.82698 2.63901ZM12.9861 4.00942C12.9684 3.7108 12.9281 3.49982 12.8365 3.31999C12.6927 3.03775 12.4632 2.80828 12.181 2.66447C11.8601 2.50098 11.4401 2.50098 10.6 2.50098H5.4C4.55992 2.50098 4.13988 2.50098 3.81901 2.66447C3.53677 2.80828 3.3073 3.03775 3.16349 3.31999C3.03615 3.56991 3.00799 3.88 3.00177 4.40188C3.04646 4.37612 3.09189 4.35146 3.13803 4.32796C3.77976 4.00098 4.61984 4.00098 6.3 4.00098H11.7C12.1966 4.00098 12.6197 4.00098 12.9861 4.00942ZM3 7.90098V8.10098C3 8.47468 3 8.76527 3.01439 9.00098H3V11.101C3 11.9411 3 12.3611 3.16349 12.682C3.3073 12.9642 3.53677 13.1937 3.81901 13.3375C4.13988 13.501 4.55992 13.501 5.4 13.501H12.6C13.4401 13.501 13.8601 13.501 14.181 13.3375C14.4632 13.1937 14.6927 12.9642 14.8365 12.682C15 12.3611 15 11.9411 15 11.101V7.90098C15 7.0609 15 6.64086 14.8365 6.31999C14.6927 6.03775 14.4632 5.80828 14.181 5.66447C13.8601 5.50098 13.4401 5.50098 12.6 5.50098H5.4C4.55992 5.50098 4.13988 5.50098 3.81901 5.66447C3.53677 5.80828 3.3073 6.03775 3.16349 6.31999C3 6.64086 3 7.0609 3 7.90098ZM10.5 9.75098C10.5 9.33676 10.8358 9.00098 11.25 9.00098H12.75C13.1642 9.00098 13.5 9.33676 13.5 9.75098C13.5 10.1652 13.1642 10.501 12.75 10.501H11.25C10.8358 10.501 10.5 10.1652 10.5 9.75098Z"></path></g><defs><clipPath id="clip0_3676_1274"><rect width="16" height="16" fill="white" transform="translate(0.5 0.000976562)"></rect></clipPath></defs></svg>`);
      const WalletIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.accent;
        return (() => {
          const _el$ = _tmpl$$f.cloneNode(true),
            _el$2 = _el$.firstChild,
            _el$3 = _el$2.firstChild;
          createRenderEffect(() => setAttribute(_el$3, "fill", fill()));
          return _el$;
        })();
      };
      const _tmpl$$e = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M39.6319 16.8719C38.3212 16.2041 36.7002 16.0478 34 16.0112V11C34 5.47715 29.5228 1 24 1C18.4772 1 14 5.47715 14 11V16.0112C11.2998 16.0478 9.6788 16.2041 8.36808 16.8719C6.86278 17.6389 5.63893 18.8628 4.87195 20.3681C4 22.0794 4 24.3196 4 28.8V32.2C4 36.6804 4 38.9206 4.87195 40.6319C5.63893 42.1372 6.86278 43.3611 8.36808 44.1281C10.0794 45 12.3196 45 16.8 45H31.2C35.6804 45 37.9206 45 39.6319 44.1281C41.1372 43.3611 42.3611 42.1372 43.1281 40.6319C44 38.9206 44 36.6804 44 32.2V28.8C44 24.3196 44 22.0794 43.1281 20.3681C42.3611 18.8628 41.1372 17.6389 39.6319 16.8719ZM31 11V16H17V11C17 7.13401 20.134 4 24 4C27.866 4 31 7.13401 31 11ZM7.54497 21.73C7 22.7996 7 24.1997 7 27V34C7 36.8003 7 38.2004 7.54497 39.27C8.02433 40.2108 8.78924 40.9757 9.73005 41.455C10.7996 42 12.1997 42 15 42H33C35.8003 42 37.2004 42 38.27 41.455C39.2108 40.9757 39.9757 40.2108 40.455 39.27C41 38.2004 41 36.8003 41 34V27C41 24.1997 41 22.7996 40.455 21.73C39.9757 20.7892 39.2108 20.0243 38.27 19.545C37.2004 19 35.8003 19 33 19H15C12.1997 19 10.7996 19 9.73005 19.545C8.78924 20.0243 8.02433 20.7892 7.54497 21.73ZM24 24C23.1716 24 22.5 24.6716 22.5 25.5V29.5C22.5 30.3284 23.1716 31 24 31C24.8284 31 25.5 30.3284 25.5 29.5V25.5C25.5 24.6716 24.8284 24 24 24Z"></path></svg>`);
      const SecurityIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$e.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = props.class,
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$d = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M37.485 37.3849C40.894 33.9506 43 29.2212 43 24C43 13.5066 34.4934 5 24 5C13.5066 5 5 13.5066 5 24C5 29.2213 7.1061 33.9507 10.5151 37.385C13.3583 32.9438 18.3354 30 24.0001 30C29.6647 30 34.6418 32.9437 37.485 37.3849ZM35.1809 39.3635C32.9143 35.5532 28.7554 33 24.0001 33C19.2448 33 15.0858 35.5533 12.8193 39.3636C15.9564 41.6506 19.8206 43 24 43C28.1795 43 32.0437 41.6505 35.1809 39.3635ZM24 46C36.1503 46 46 36.1503 46 24C46 11.8497 36.1503 2 24 2C11.8497 2 2 11.8497 2 24C2 36.1503 11.8497 46 24 46ZM24 24C26.7614 24 29 21.7614 29 19C29 16.2386 26.7614 14 24 14C21.2386 14 19 16.2386 19 19C19 21.7614 21.2386 24 24 24ZM24 27C28.4183 27 32 23.4183 32 19C32 14.5817 28.4183 11 24 11C19.5817 11 16 14.5817 16 19C16 23.4183 19.5817 27 24 27Z"></path></svg>`);
      const PersonalityIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$d.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = props.class,
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$c = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M34.5607 4.43934C33.9749 3.85355 33.0251 3.85355 32.4393 4.43934C31.8536 5.02513 31.8536 5.97487 32.4393 6.56066L37.8787 12H10.5C9.67157 12 9 12.6716 9 13.5C9 14.3284 9.67157 15 10.5 15H37.8787L32.4393 20.4393C31.8536 21.0251 31.8536 21.9749 32.4393 22.5607C33.0251 23.1464 33.9749 23.1464 34.5607 22.5607L42.5607 14.5607C43.1464 13.9749 43.1464 13.0251 42.5607 12.4393L34.5607 4.43934ZM13.4393 25.4393C14.0251 24.8536 14.9749 24.8536 15.5607 25.4393C16.1464 26.0251 16.1464 26.9749 15.5607 27.5607L10.1213 33H37.5C38.3284 33 39 33.6716 39 34.5C39 35.3284 38.3284 36 37.5 36H10.1213L15.5607 41.4393C16.1464 42.0251 16.1464 42.9749 15.5607 43.5607C14.9749 44.1464 14.0251 44.1464 13.4393 43.5607L5.43934 35.5607C4.85355 34.9749 4.85355 34.0251 5.43934 33.4393L13.4393 25.4393Z"></path></svg>`);
      const SwapIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$c.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = props.class,
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$b = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="29" viewBox="0 0 28 29" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.75 12.002C1.75 9.20169 1.75 7.80156 2.29497 6.732C2.77433 5.79119 3.53924 5.02629 4.48005 4.54692C5.54961 4.00195 6.94974 4.00195 9.75 4.00195H17.25C20.0503 4.00195 21.4504 4.00195 22.52 4.54692C23.4608 5.02629 24.2257 5.79119 24.705 6.732C24.8256 6.96861 24.9195 7.2214 24.9926 7.50195H21.5C19.6377 7.50195 18.7065 7.50195 17.9609 7.77334C16.711 8.22828 15.7263 9.21291 15.2714 10.4629C15 11.2085 15 12.1396 15 14.002C15 15.8643 15 16.7954 15.2714 17.541C15.7263 18.791 16.711 19.7756 17.9609 20.2306C18.7065 20.502 19.6377 20.502 21.5 20.502H24.9926C24.9195 20.7825 24.8256 21.0353 24.705 21.2719C24.2257 22.2127 23.4608 22.9776 22.52 23.457C21.4504 24.002 20.0503 24.002 17.25 24.002H9.75C6.94974 24.002 5.54961 24.002 4.48005 23.457C3.53924 22.9776 2.77433 22.2127 2.29497 21.2719C1.75 20.2023 1.75 18.8022 1.75 16.002V12.002ZM16.4999 13.802C16.4999 12.1218 16.4999 11.2817 16.8269 10.64C17.1145 10.0755 17.5735 9.61656 18.138 9.32894C18.7797 9.00196 19.6198 9.00196 21.2999 9.00196H23.1999C24.8801 9.00196 25.7202 9.00196 26.3619 9.32894C26.9264 9.61656 27.3853 10.0755 27.673 10.64C27.9999 11.2817 27.9999 12.1218 27.9999 13.802V14.202C27.9999 15.8821 27.9999 16.7222 27.673 17.3639C27.3853 17.9284 26.9264 18.3874 26.3619 18.675C25.7202 19.002 24.8801 19.002 23.1999 19.002H21.2999C19.6198 19.002 18.7797 19.002 18.138 18.675C17.5735 18.3874 17.1145 17.9284 16.8269 17.3639C16.4999 16.7222 16.4999 15.8821 16.4999 14.202V13.802ZM22.4999 14.002C22.4999 14.9685 21.7164 15.752 20.7499 15.752C19.7834 15.752 18.9999 14.9685 18.9999 14.002C18.9999 13.0355 19.7834 12.252 20.7499 12.252C21.7164 12.252 22.4999 13.0355 22.4999 14.002Z"></path></svg>`);
      const AtWalletIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.constant.white;
        return (() => {
          const _el$ = _tmpl$$b.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = props.class,
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$a = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M24.7803 7.21967C25.0732 7.51256 25.0732 7.98744 24.7803 8.28033L11.5303 21.5303C11.2374 21.8232 10.7626 21.8232 10.4697 21.5303L4.21967 15.2803C3.92678 14.9874 3.92678 14.5126 4.21967 14.2197C4.51256 13.9268 4.98744 13.9268 5.28033 14.2197L11 19.9393L23.7197 7.21967C24.0126 6.92678 24.4874 6.92678 24.7803 7.21967Z"></path></svg>`);
      const DoneIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$a.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = props.class,
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$9 = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.0001 10.0001C10.0016 8.02333 10.0267 6.98719 10.436 6.18404C10.8195 5.43139 11.4314 4.81947 12.184 4.43597C13.0397 4 14.1598 4 16.4 4H17.6C19.8402 4 20.9603 4 21.816 4.43597C22.5686 4.81947 23.1805 5.43139 23.564 6.18404C24 7.03969 24 8.15979 24 10.4V11.6C24 13.8402 24 14.9603 23.564 15.816C23.1805 16.5686 22.5686 17.1805 21.816 17.564C21.0128 17.9733 19.9767 17.9984 17.9999 17.9999C17.9984 19.9767 17.9733 21.0128 17.564 21.816C17.1805 22.5686 16.5686 23.1805 15.816 23.564C14.9603 24 13.8402 24 11.6 24H10.4C8.15979 24 7.03969 24 6.18404 23.564C5.43139 23.1805 4.81947 22.5686 4.43597 21.816C4 20.9603 4 19.8402 4 17.6V16.4C4 14.1598 4 13.0397 4.43597 12.184C4.81947 11.4314 5.43139 10.8195 6.18404 10.436C6.98719 10.0267 8.02333 10.0016 10.0001 10.0001ZM10 11.5H9.5C8.09987 11.5 7.3998 11.5 6.86502 11.7725C6.39462 12.0122 6.01217 12.3946 5.77248 12.865C5.5 13.3998 5.5 14.0999 5.5 15.5V18.5C5.5 19.9001 5.5 20.6002 5.77248 21.135C6.01217 21.6054 6.39462 21.9878 6.86502 22.2275C7.3998 22.5 8.09987 22.5 9.5 22.5H12.5C13.9001 22.5 14.6002 22.5 15.135 22.2275C15.6054 21.9878 15.9878 21.6054 16.2275 21.135C16.5 20.6002 16.5 19.9001 16.5 18.5V18H16.4C14.1598 18 13.0397 18 12.184 17.564C11.4314 17.1805 10.8195 16.5686 10.436 15.816C10 14.9603 10 13.8402 10 11.6V11.5ZM11.5 9.5C11.5 8.09987 11.5 7.3998 11.7725 6.86502C12.0122 6.39462 12.3946 6.01217 12.865 5.77248C13.3998 5.5 14.0999 5.5 15.5 5.5H18.5C19.9001 5.5 20.6002 5.5 21.135 5.77248C21.6054 6.01217 21.9878 6.39462 22.2275 6.86502C22.5 7.3998 22.5 8.09987 22.5 9.5V12.5C22.5 13.9001 22.5 14.6002 22.2275 15.135C21.9878 15.6054 21.6054 15.9878 21.135 16.2275C20.6002 16.5 19.9001 16.5 18.5 16.5H15.5C14.0999 16.5 13.3998 16.5 12.865 16.2275C12.3946 15.9878 12.0122 15.6054 11.7725 15.135C11.5 14.6002 11.5 13.9001 11.5 12.5V9.5Z"></path></svg>`);
      const CopyLightIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$9.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = fill(),
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "fill", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$8 = /* @__PURE__ */template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" viewBox="0 0 16 17" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1 4.12695C1 3.07754 1 2.55284 1.19202 2.14684C1.38986 1.72856 1.7266 1.39181 2.14489 1.19397C2.55088 1.00195 3.07559 1.00195 4.125 1.00195C5.17441 1.00195 5.69912 1.00195 6.10511 1.19397C6.5234 1.39181 6.86014 1.72856 7.05798 2.14684C7.25 2.55284 7.25 3.07754 7.25 4.12695C7.25 5.17636 7.25 5.70107 7.05798 6.10706C6.86014 6.52535 6.5234 6.8621 6.10511 7.05993C5.69912 7.25195 5.17441 7.25195 4.125 7.25195C3.07559 7.25195 2.55088 7.25195 2.14489 7.05993C1.7266 6.8621 1.38986 6.52535 1.19202 6.10706C1 5.70107 1 5.17636 1 4.12695ZM2.5 3.30195C2.5 3.02193 2.5 2.88191 2.5545 2.77496C2.60243 2.68088 2.67892 2.60439 2.773 2.55645C2.87996 2.50195 3.01997 2.50195 3.3 2.50195H4.95C5.23003 2.50195 5.37004 2.50195 5.477 2.55645C5.57108 2.60439 5.64757 2.68088 5.6955 2.77496C5.75 2.88191 5.75 3.02193 5.75 3.30195V4.95195C5.75 5.23198 5.75 5.37199 5.6955 5.47895C5.64757 5.57303 5.57108 5.64952 5.477 5.69746C5.37004 5.75195 5.23003 5.75195 4.95 5.75195H3.3C3.01997 5.75195 2.87996 5.75195 2.773 5.69746C2.67892 5.64952 2.60243 5.57303 2.5545 5.47895C2.5 5.37199 2.5 5.23198 2.5 4.95195V3.30195ZM1 11.877C1 10.8275 1 10.3028 1.19202 9.89684C1.38986 9.47856 1.7266 9.14181 2.14489 8.94397C2.55088 8.75195 3.07559 8.75195 4.125 8.75195C5.17441 8.75195 5.69912 8.75195 6.10511 8.94397C6.5234 9.14181 6.86014 9.47856 7.05798 9.89684C7.25 10.3028 7.25 10.8275 7.25 11.877C7.25 12.9264 7.25 13.4511 7.05798 13.8571C6.86014 14.2753 6.5234 14.6121 6.10511 14.8099C5.69912 15.002 5.17441 15.002 4.125 15.002C3.07559 15.002 2.55088 15.002 2.14489 14.8099C1.7266 14.6121 1.38986 14.2753 1.19202 13.8571C1 13.4511 1 12.9264 1 11.877ZM2.5 11.052C2.5 10.7719 2.5 10.6319 2.5545 10.525C2.60243 10.4309 2.67892 10.3544 2.773 10.3064C2.87996 10.252 3.01997 10.252 3.3 10.252H4.95C5.23003 10.252 5.37004 10.252 5.477 10.3064C5.57108 10.3544 5.64757 10.4309 5.6955 10.525C5.75 10.6319 5.75 10.7719 5.75 11.052V12.702C5.75 12.982 5.75 13.122 5.6955 13.2289C5.64757 13.323 5.57108 13.3995 5.477 13.4475C5.37004 13.502 5.23003 13.502 4.95 13.502H3.3C3.01997 13.502 2.87996 13.502 2.773 13.4475C2.67892 13.3995 2.60243 13.323 2.5545 13.2289C2.5 13.122 2.5 12.982 2.5 12.702V11.052ZM8.94202 2.14684C8.75 2.55284 8.75 3.07754 8.75 4.12695C8.75 5.17636 8.75 5.70107 8.94202 6.10706C9.13986 6.52535 9.4766 6.8621 9.89489 7.05993C10.3009 7.25195 10.8256 7.25195 11.875 7.25195C12.9244 7.25195 13.4491 7.25195 13.8551 7.05993C14.2734 6.8621 14.6101 6.52535 14.808 6.10706C15 5.70107 15 5.17636 15 4.12695C15 3.07754 15 2.55284 14.808 2.14684C14.6101 1.72856 14.2734 1.39181 13.8551 1.19397C13.4491 1.00195 12.9244 1.00195 11.875 1.00195C10.8256 1.00195 10.3009 1.00195 9.89489 1.19397C9.4766 1.39181 9.13986 1.72856 8.94202 2.14684ZM10.3045 2.77496C10.25 2.88191 10.25 3.02193 10.25 3.30195V4.95195C10.25 5.23198 10.25 5.37199 10.3045 5.47895C10.3524 5.57303 10.4289 5.64952 10.523 5.69746C10.63 5.75195 10.77 5.75195 11.05 5.75195H12.7C12.98 5.75195 13.12 5.75195 13.227 5.69746C13.3211 5.64952 13.3976 5.57303 13.4455 5.47895C13.5 5.37199 13.5 5.23198 13.5 4.95195V3.30195C13.5 3.02193 13.5 2.88191 13.4455 2.77496C13.3976 2.68088 13.3211 2.60439 13.227 2.55645C13.12 2.50195 12.98 2.50195 12.7 2.50195H11.05C10.77 2.50195 10.63 2.50195 10.523 2.55645C10.4289 2.60439 10.3524 2.68088 10.3045 2.77496ZM8.80727 9.13518C8.75 9.26242 8.75 9.4256 8.75 9.75195C8.75 10.0783 8.75 10.2415 8.80727 10.3687C8.87245 10.5136 8.9884 10.6295 9.13323 10.6947C9.26047 10.752 9.42365 10.752 9.75 10.752C10.0764 10.752 10.2395 10.752 10.3668 10.6947C10.5116 10.6295 10.6276 10.5136 10.6927 10.3687C10.75 10.2415 10.75 10.0783 10.75 9.75195C10.75 9.4256 10.75 9.26242 10.6927 9.13518C10.6276 8.99035 10.5116 8.8744 10.3668 8.80922C10.2395 8.75195 10.0764 8.75195 9.75 8.75195C9.42365 8.75195 9.26047 8.75195 9.13323 8.80922C8.9884 8.8744 8.87245 8.99035 8.80727 9.13518ZM10.87 11.8771C10.87 11.546 10.87 11.3805 10.9289 11.2517C10.9938 11.1098 11.1077 10.9959 11.2497 10.931C11.3784 10.8721 11.5439 10.8721 11.875 10.8721C12.2061 10.8721 12.3716 10.8721 12.5003 10.931C12.6423 10.9959 12.7562 11.1098 12.8211 11.2517C12.88 11.3805 12.88 11.546 12.88 11.8771C12.88 12.2081 12.88 12.3737 12.8211 12.5024C12.7562 12.6444 12.6423 12.7583 12.5003 12.8232C12.3716 12.8821 12.2061 12.8821 11.875 12.8821C11.5439 12.8821 11.3784 12.8821 11.2497 12.8232C11.1077 12.7583 10.9938 12.6444 10.9289 12.5024C10.87 12.3737 10.87 12.2081 10.87 11.8771ZM8.80727 13.3852C8.75 13.5124 8.75 13.6756 8.75 14.002C8.75 14.3283 8.75 14.4915 8.80727 14.6187C8.87245 14.7636 8.9884 14.8795 9.13323 14.9447C9.26047 15.002 9.42365 15.002 9.75 15.002C10.0764 15.002 10.2395 15.002 10.3668 14.9447C10.5116 14.8795 10.6276 14.7636 10.6927 14.6187C10.75 14.4915 10.75 14.3283 10.75 14.002C10.75 13.6756 10.75 13.5124 10.6927 13.3852C10.6276 13.2404 10.5116 13.1244 10.3668 13.0592C10.2395 13.002 10.0764 13.002 9.75 13.002C9.42365 13.002 9.26047 13.002 9.13323 13.0592C8.9884 13.1244 8.87245 13.2404 8.80727 13.3852ZM13 9.75195C13 9.4256 13 9.26242 13.0573 9.13518C13.1224 8.99035 13.2384 8.8744 13.3832 8.80922C13.5105 8.75195 13.6736 8.75195 14 8.75195C14.3264 8.75195 14.4895 8.75195 14.6168 8.80922C14.7616 8.8744 14.8776 8.99035 14.9427 9.13518C15 9.26242 15 9.4256 15 9.75195C15 10.0783 15 10.2415 14.9427 10.3687C14.8776 10.5136 14.7616 10.6295 14.6168 10.6947C14.4895 10.752 14.3264 10.752 14 10.752C13.6736 10.752 13.5105 10.752 13.3832 10.6947C13.2384 10.6295 13.1224 10.5136 13.0573 10.3687C13 10.2415 13 10.0783 13 9.75195ZM13.0573 13.3852C13 13.5124 13 13.6756 13 14.002C13 14.3283 13 14.4915 13.0573 14.6187C13.1224 14.7636 13.2384 14.8795 13.3832 14.9447C13.5105 15.002 13.6736 15.002 14 15.002C14.3264 15.002 14.4895 15.002 14.6168 14.9447C14.7616 14.8795 14.8776 14.7636 14.9427 14.6187C15 14.4915 15 14.3283 15 14.002C15 13.6756 15 13.5124 14.9427 13.3852C14.8776 13.2404 14.7616 13.1244 14.6168 13.0592C14.4895 13.002 14.3264 13.002 14 13.002C13.6736 13.002 13.5105 13.002 13.3832 13.0592C13.2384 13.1244 13.1224 13.2404 13.0573 13.3852Z"></path></svg>`);
      const QRIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.secondary;
        return (() => {
          const _el$ = _tmpl$$8.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
          return _el$;
        })();
      };
      const containerBorders = {
        m: "16px",
        s: "12px",
        none: "0"
      };
      const walletBorders = {
        m: "6px",
        s: "6px",
        none: "0"
      };
      const FourWalletsCard = styled.div`
    width: 60px;
    height: 60px;
    padding: 8px;
    margin-bottom: 8px;
    border-radius: ${props => containerBorders[props.theme.borderRadius]};
    background-color: ${props => props.theme.colors.background.tint};
    display: grid;
    grid-template: 1fr 1fr / 1fr 1fr;
    gap: 4px;
`;
      const FourWalletsImage = styled(WalletImage)`
    width: 20px;
    height: 20px;
    border-radius: ${props => walletBorders[props.theme.borderRadius]};
`;
      const FourWalletsItem = props => {
        return createComponent(WalletItem, {
          get name() {
            return props.labelLine1;
          },
          get secondLine() {
            return props.labelLine2;
          },
          get icon() {
            return createComponent(FourWalletsCard, {
              get children() {
                return createComponent(For, {
                  each: [0, 1, 2, 3],
                  children: index => createComponent(FourWalletsImage, {
                    get src() {
                      return props.images[index];
                    }
                  })
                });
              }
            });
          },
          onClick: () => props.onClick()
        });
      };
      const AT_WALLET_APP_NAME = "telegram-wallet";
      const IMG = {
        TON: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/ton-icon-48.png",
        TG: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/tg.png"
      };
      const WalletLabeledItem = props => {
        const [t2] = useI18n();
        const walletsSecondLine = () => {
          if (props.wallet.appName === AT_WALLET_APP_NAME) {
            return void 0;
          }
          if ("isPreferred" in props.wallet && props.wallet.isPreferred) {
            return t2("walletItem.recent", {}, "Recent");
          }
          if (isWalletInfoCurrentlyInjected(props.wallet)) {
            return t2("walletItem.installed", {}, "Installed");
          }
          if (props.wallet.name === "Tonkeeper") {
            return t2("walletItem.popular", {}, "Popular");
          }
          return void 0;
        };
        return createMemo((() => {
          const _c$ = createMemo(() => props.wallet.appName === AT_WALLET_APP_NAME);
          return () => _c$() ? createComponent(WalletItem, {
            get icon() {
              return props.wallet.imageUrl;
            },
            get name() {
              return t2("walletItem.walletOn", {}, "Wallet On");
            },
            secondLine: "Telegram",
            get badgeUrl() {
              return IMG.TG;
            },
            onClick: () => props.onClick()
          }) : createComponent(WalletItem, {
            get icon() {
              return props.wallet.imageUrl;
            },
            get name() {
              return props.wallet.name;
            },
            get secondLine() {
              return walletsSecondLine();
            },
            secondLineColorPrimary: false,
            onClick: () => props.onClick()
          });
        })());
      };
      const ScrollContainerStyled = styled.div`
    width: 100%;
    overflow-y: auto;
    max-height: ${props => props.maxHeight};

    scrollbar-width: none;
    &&::-webkit-scrollbar {
        display: none;
    }

    &&::-webkit-scrollbar-track {
        background: transparent;
    }

    &&::-webkit-scrollbar-thumb {
        display: none;
    }
`;
      const ScrollDivider = styled.div`
    height: 1px;
    margin: 0 -24px;
    width: calc(100% + 48px);
    opacity: 0.08;
    background: ${props => props.isShown ? props.theme.colors.icon.secondary : "transparent"};
    transition: background 0.15s ease-in-out;

    ${media("mobile")} {
        width: 100%;
        margin: 0;
    }
`;
      const [windowHeight, setWindowHeight] = createSignal(((_h = getWindow$1()) == null ? void 0 : _h.innerHeight) || 0);
      if (getWindow$1()) {
        window.addEventListener("resize", () => setWindowHeight(window.innerHeight));
      }
      const [isMobile, setIsMobile] = createSignal(isDevice("mobile"));
      const updateIsMobile = () => setIsMobile(isDevice("mobile"));
      if (getWindow$1()) {
        window.addEventListener("resize", () => updateIsMobile());
        window.addEventListener("load", () => updateIsMobile(), {
          once: true
        });
      }
      const ScrollContainer = props => {
        const [scrolled, setScrolled] = createSignal(false);
        const onScroll = e2 => {
          setScrolled(e2.target.scrollTop > 0);
        };
        const offset = () => isMobile() ? 150 : 200;
        const maxHeight = () => props.maxHeight !== void 0 ? `${props.maxHeight}px` : `${windowHeight() - offset()}px`;
        return [createComponent(ScrollDivider, {
          get isShown() {
            return scrolled();
          }
        }), createComponent(ScrollContainerStyled, {
          get maxHeight() {
            return maxHeight();
          },
          onScroll,
          get ["class"]() {
            return props.class;
          },
          get children() {
            return props.children;
          }
        })];
      };
      const AStyled = styled.a`
    display: block;
    text-decoration: unset;
`;
      const Link = props => {
        const attributes = () => props.blank ? {
          rel: "noreferrer noopener"
        } : {};
        return createComponent(AStyled, mergeProps({
          get href() {
            return props.href;
          },
          get target() {
            return props.blank ? "_blank" : "_self";
          },
          get ["class"]() {
            return props.class;
          }
        }, attributes, {
          get children() {
            return props.children;
          }
        }));
      };
      const TonConnectUiContext = createContext();
      const _tmpl$$7 = /* @__PURE__ */template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M7.76228 2.09998H10.2378C11.0458 2.09997 11.7067 2.09996 12.2438 2.14384C12.7997 2.18926 13.3017 2.28614 13.7706 2.52505C14.5045 2.89896 15.1011 3.49558 15.475 4.22941C15.7139 4.6983 15.8108 5.20038 15.8562 5.75629C15.9001 6.29337 15.9001 6.95422 15.9001 7.76227V8.1H16.2377C17.0457 8.09999 17.7066 8.09998 18.2437 8.14386C18.7996 8.18928 19.3017 8.28616 19.7705 8.52507C20.5044 8.89898 21.101 9.4956 21.4749 10.2294C21.7138 10.6983 21.8107 11.2004 21.8561 11.7563C21.9 12.2934 21.9 12.9542 21.9 13.7623V16.2377C21.9 17.0458 21.9 17.7066 21.8561 18.2437C21.8107 18.7996 21.7138 19.3017 21.4749 19.7706C21.101 20.5044 20.5044 21.101 19.7705 21.4749C19.3017 21.7138 18.7996 21.8107 18.2437 21.8561C17.7066 21.9 17.0458 21.9 16.2378 21.9H13.7623C12.9543 21.9 12.2934 21.9 11.7563 21.8561C11.2004 21.8107 10.6983 21.7138 10.2294 21.4749C9.49561 21.101 8.89898 20.5044 8.52508 19.7706C8.28616 19.3017 8.18928 18.7996 8.14386 18.2437C8.09998 17.7066 8.09999 17.0458 8.1 16.2377V15.9H7.76227C6.95426 15.9 6.29335 15.9 5.75629 15.8561C5.20038 15.8107 4.6983 15.7138 4.22941 15.4749C3.49558 15.101 2.89896 14.5044 2.52505 13.7705C2.28614 13.3017 2.18926 12.7996 2.14384 12.2437C2.09996 11.7066 2.09997 11.0458 2.09998 10.2377V7.76228C2.09997 6.95424 2.09996 6.29336 2.14384 5.75629C2.18926 5.20038 2.28614 4.6983 2.52505 4.22941C2.89896 3.49558 3.49558 2.89896 4.22941 2.52505C4.6983 2.28614 5.20038 2.18926 5.75629 2.14384C6.29336 2.09996 6.95425 2.09997 7.76228 2.09998ZM8.1 14.1V13.7623C8.09999 12.9542 8.09998 12.2934 8.14386 11.7563C8.18928 11.2004 8.28616 10.6983 8.52508 10.2294C8.89898 9.4956 9.49561 8.89898 10.2294 8.52507C10.6983 8.28616 11.2004 8.18928 11.7563 8.14386C12.2934 8.09998 12.9542 8.09999 13.7623 8.1H14.1001V7.79998C14.1001 6.94505 14.0994 6.35798 14.0622 5.90287C14.0259 5.45827 13.9593 5.21944 13.8712 5.0466C13.6699 4.65146 13.3486 4.3302 12.9535 4.12886C12.7806 4.04079 12.5418 3.97419 12.0972 3.93786C11.6421 3.90068 11.055 3.89998 10.2001 3.89998H7.79998C6.94505 3.89998 6.35798 3.90068 5.90287 3.93786C5.45827 3.97419 5.21944 4.04079 5.0466 4.12886C4.65146 4.3302 4.3302 4.65146 4.12886 5.0466C4.04079 5.21944 3.97419 5.45827 3.93786 5.90287C3.90068 6.35798 3.89998 6.94505 3.89998 7.79998V10.2C3.89998 11.0549 3.90068 11.642 3.93786 12.0971C3.97419 12.5417 4.04079 12.7805 4.12886 12.9534C4.3302 13.3485 4.65146 13.6698 5.0466 13.8711C5.21944 13.9592 5.45827 14.0258 5.90287 14.0621C6.35798 14.0993 6.94505 14.1 7.79998 14.1H8.1ZM11.0466 10.1289C11.2195 10.0408 11.4583 9.97421 11.9029 9.93788C12.358 9.9007 12.9451 9.9 13.8 9.9H16.2C17.0549 9.9 17.642 9.9007 18.0971 9.93788C18.5417 9.97421 18.7805 10.0408 18.9534 10.1289C19.3485 10.3302 19.6698 10.6515 19.8711 11.0466C19.9592 11.2195 20.0258 11.4583 20.0621 11.9029C20.0993 12.358 20.1 12.9451 20.1 13.8V16.2C20.1 17.0549 20.0993 17.642 20.0621 18.0971C20.0258 18.5417 19.9592 18.7805 19.8711 18.9534C19.6698 19.3485 19.3485 19.6698 18.9534 19.8711C18.7805 19.9592 18.5417 20.0258 18.0971 20.0621C17.642 20.0993 17.0549 20.1 16.2 20.1H13.8C12.9451 20.1 12.358 20.0993 11.9029 20.0621C11.4583 20.0258 11.2195 19.9592 11.0466 19.8711C10.6515 19.6698 10.3302 19.3485 10.1289 18.9534C10.0408 18.7805 9.97421 18.5417 9.93788 18.0971C9.9007 17.642 9.9 17.0549 9.9 16.2V13.8C9.9 12.9451 9.9007 12.358 9.93788 11.9029C9.97421 11.4583 10.0408 11.2195 10.1289 11.0466C10.3302 10.6515 10.6515 10.3302 11.0466 10.1289Z"></path></svg>`);
      const CopyIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.primary;
        return (() => {
          const _el$ = _tmpl$$7.cloneNode(true),
            _el$2 = _el$.firstChild;
          createRenderEffect(_p$ => {
            const _v$ = props.class,
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const _tmpl$$6 = /* @__PURE__ */template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.7624 3.10001C7.95435 3.1 7.29349 3.09999 6.75642 3.14387C6.2005 3.18929 5.69842 3.28617 5.22954 3.52508C4.4957 3.89899 3.89908 4.49561 3.52517 5.22944C3.28626 5.69833 3.18938 6.20041 3.14396 6.75632C3.10008 7.2934 3.10009 7.95424 3.1001 8.76229V15.2377C3.10009 16.0458 3.10008 16.7066 3.14396 17.2437C3.18938 17.7996 3.28626 18.3017 3.52517 18.7706C3.89908 19.5044 4.4957 20.101 5.22954 20.4749C5.69842 20.7138 6.2005 20.8107 6.75642 20.8561C7.29349 20.9 7.95434 20.9 8.76239 20.9H12.0001C12.4972 20.9 12.9001 20.4971 12.9001 20C12.9001 19.503 12.4972 19.1 12.0001 19.1H8.8001C7.94517 19.1 7.3581 19.0993 6.90299 19.0621C6.45839 19.0258 6.21956 18.9592 6.04672 18.8711C5.65158 18.6698 5.33032 18.3485 5.12898 17.9534C5.04092 17.7805 4.97431 17.5417 4.93798 17.0971C4.9008 16.642 4.9001 16.0549 4.9001 15.2V8.80001C4.9001 7.94508 4.9008 7.35801 4.93798 6.9029C4.97431 6.4583 5.04092 6.21947 5.12898 6.04663C5.33032 5.65149 5.65158 5.33023 6.04672 5.12889C6.21956 5.04082 6.45839 4.97422 6.90299 4.93789C7.3581 4.90071 7.94517 4.90001 8.8001 4.90001H12.0001C12.4972 4.90001 12.9001 4.49706 12.9001 4.00001C12.9001 3.50295 12.4972 3.10001 12.0001 3.10001H8.7624Z"></path><path d="M17.6364 7.3636C17.2849 7.01212 16.7151 7.01212 16.3636 7.3636C16.0121 7.71507 16.0121 8.28492 16.3636 8.63639L18.8272 11.1H9.00001C8.50295 11.1 8.10001 11.5029 8.10001 12C8.10001 12.497 8.50295 12.9 9.00001 12.9H18.8272L16.3636 15.3636C16.0121 15.7151 16.0121 16.2849 16.3636 16.6364C16.7151 16.9879 17.2849 16.9879 17.6364 16.6364L21.6364 12.6364C21.9879 12.2849 21.9879 11.7151 21.6364 11.3636L17.6364 7.3636Z"></path></svg>`);
      const DisconnectIcon = props => {
        const theme = useTheme();
        const fill = () => props.fill || theme.colors.icon.primary;
        return (() => {
          const _el$ = _tmpl$$6.cloneNode(true),
            _el$2 = _el$.firstChild,
            _el$3 = _el$2.nextSibling;
          createRenderEffect(_p$ => {
            const _v$ = fill(),
              _v$2 = fill();
            _v$ !== _p$._v$ && setAttribute(_el$2, "fill", _p$._v$ = _v$);
            _v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: void 0,
            _v$2: void 0
          });
          return _el$;
        })();
      };
      const hoverBorders$1 = {
        m: "8px",
        s: "4px",
        none: "0"
      };
      const dropdownBorders = {
        m: "16px",
        s: "8px",
        none: "0"
      };
      const AccountButtonDropdownStyled = styled.div`
    width: 256px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${props => dropdownBorders[props.theme.borderRadius]};

    background-color: ${props => props.theme.colors.background.primary}
           
    color: ${props => props.theme.colors.text.primary}
`;
      const UlStyled$1 = styled.ul`
    background-color: ${props => props.theme.colors.background.primary};
    padding: 8px;
`;
      const MenuButtonStyled = styled.button`
    display: flex;
    align-items: center;
    gap: 8px;
    height: 40px;
    padding-left: 8px;
    width: 100%;

    background-color: ${props => props.theme.colors.background.primary};
    border: none;
    border-radius: ${props => hoverBorders$1[props.theme.borderRadius]};
    cursor: pointer;

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${props => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
      const _tmpl$$5 = /* @__PURE__ */template$1(`<li></li>`);
      const MenuItemText = props => createComponent(Text, {
        get translationKey() {
          return props.translationKey;
        },
        fontSize: "15px",
        fontWeight: "590",
        get children() {
          return props.children;
        }
      });
      const AccountButtonDropdown = props => {
        const tonConnectUi = useContext(TonConnectUiContext);
        const [isCopiedShown, setIsCopiedShown] = createSignal(false);
        const onCopy = () => __async(void 0, null, function* () {
          const userFriendlyAddress = toUserFriendlyAddress(tonConnectUi.account.address, tonConnectUi.account.chain === CHAIN.TESTNET);
          yield copyToClipboard(userFriendlyAddress);
          setIsCopiedShown(true);
          setTimeout(() => setIsCopiedShown(false), 1e3);
        });
        const onDisconnect = () => {
          tonConnectUi.disconnect();
          props.onClose();
        };
        return createComponent(AccountButtonDropdownStyled, {
          ref(r$) {
            const _ref$ = props.ref;
            typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
          },
          get ["class"]() {
            return props.class;
          },
          "data-tc-dropdown": "true",
          get children() {
            return createComponent(UlStyled$1, {
              get children() {
                return [(() => {
                  const _el$ = _tmpl$$5.cloneNode(true);
                  insert(_el$, createComponent(MenuButtonStyled, {
                    onClick: () => onCopy(),
                    get children() {
                      return [createComponent(CopyIcon, {}), createComponent(Show, {
                        get when() {
                          return !isCopiedShown();
                        },
                        get children() {
                          return createComponent(MenuItemText, {
                            translationKey: "button.dropdown.copy",
                            children: "Copy address"
                          });
                        }
                      }), createComponent(Show, {
                        get when() {
                          return isCopiedShown();
                        },
                        get children() {
                          return createComponent(MenuItemText, {
                            translationKey: "button.dropdown.copied",
                            children: "Address copied!"
                          });
                        }
                      })];
                    }
                  }));
                  return _el$;
                })(), (() => {
                  const _el$2 = _tmpl$$5.cloneNode(true);
                  insert(_el$2, createComponent(MenuButtonStyled, {
                    onClick: () => onDisconnect(),
                    get children() {
                      return [createComponent(DisconnectIcon, {}), createComponent(MenuItemText, {
                        translationKey: "button.dropdown.disconnect",
                        children: "Disconnect"
                      })];
                    }
                  }));
                  return _el$2;
                })()];
              }
            });
          }
        });
      };
      const borders$2 = {
        m: "16px",
        s: "8px",
        none: "0"
      };
      const NotificationStyled = styled.div`
    width: 256px;
    padding: 12px 16px;
    display: flex;
    gap: 9px;

    background-color: ${props => props.theme.colors.background.primary};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${props => borders$2[props.theme.borderRadius]};
`;
      const NotificationContentStyled = styled.div`
    width: 192px;

    > h3 {
        font-size: 15px;
    }
`;
      const TextStyled$2 = styled(Text)`
    margin-top: 4px;
    color: ${props => props.theme.colors.text.secondary};
`;
      const Notification = props => {
        const dataAttrs = useDataAttributes(props);
        return createComponent(NotificationStyled, mergeProps({
          get ["class"]() {
            return props.class;
          },
          "data-tc-notification": "true"
        }, dataAttrs, {
          get children() {
            return [createComponent(NotificationContentStyled, {
              get children() {
                return [createComponent(H3, {
                  get translationKey() {
                    return props.header.translationKey;
                  },
                  get translationValues() {
                    return props.header.translationValues;
                  },
                  get children() {
                    return props.children;
                  }
                }), createComponent(Show, {
                  get when() {
                    return props.text;
                  },
                  get children() {
                    return createComponent(TextStyled$2, {
                      get translationKey() {
                        return props.text.translationKey;
                      },
                      get translationValues() {
                        return props.text.translationValues;
                      }
                    });
                  }
                })];
              }
            }), createMemo(() => props.icon)];
          }
        }));
      };
      const LoaderIconStyled$1 = styled(LoaderIcon)`
    align-self: center;
`;
      const ConfirmOperationNotification = props => {
        const tonConnectUI = useContext(TonConnectUiContext);
        const [t2] = useI18n();
        const name = () => tonConnectUI.wallet && "name" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2("common.yourWallet", {}, "Your wallet");
        return createComponent(Notification, {
          get header() {
            return {
              translationKey: "notifications.confirm.header",
              translationValues: {
                name: name()
              }
            };
          },
          get ["class"]() {
            return props.class;
          },
          get icon() {
            return createComponent(LoaderIconStyled$1, {});
          },
          "data-tc-notification-confirm": "true",
          children: "Confirm operation in your wallet"
        });
      };
      const ErrorIconStyled$2 = styled(ErrorIcon)`
    margin-top: 2px;
`;
      const ErrorTransactionNotification = props => {
        return createComponent(Notification, {
          header: {
            translationKey: "notifications.transactionCanceled.header"
          },
          text: {
            translationKey: "notifications.transactionCanceled.text"
          },
          get icon() {
            return createComponent(ErrorIconStyled$2, {
              size: "xs"
            });
          },
          get ["class"]() {
            return props.class;
          },
          "data-tc-notification-tx-cancelled": "true",
          children: "Transaction cancelled"
        });
      };
      const SuccessIconStyled = styled(SuccessIcon)`
    margin-top: 2px;
`;
      const SuccessTransactionNotification = props => {
        return createComponent(Notification, {
          header: {
            translationKey: "notifications.transactionSent.header"
          },
          text: {
            translationKey: "notifications.transactionSent.text"
          },
          get icon() {
            return createComponent(SuccessIconStyled, {});
          },
          get ["class"]() {
            return props.class;
          },
          "data-tc-notification-tx-sent": "true",
          children: "Transaction sent"
        });
      };
      const NotificationClass = u`
    transform: translateY(-8px);
    margin-bottom: 12px;
`;
      const defaultConfig = {
        timeout: 4500
      };
      const [latestAction, setLatestAction] = createSignal(null);
      function useOpenedNotifications(config) {
        const {
          timeout
        } = __spreadValues(__spreadValues({}, defaultConfig), config);
        const [openedNotifications, setOpenedNotifications] = createSignal([]);
        const [timeoutIds, setTimeoutIds] = createSignal([]);
        createEffect(on(action, action2 => {
          if (!action2 || !action2.showNotification) {
            return;
          }
          if (latestAction() === action2) {
            return;
          }
          setLatestAction(action2);
          setOpenedNotifications(openedNotifications2 => openedNotifications2.filter(n2 => n2.action !== "confirm-transaction"));
          const notification = {
            action: action2.name
          };
          setOpenedNotifications(openedNotifications2 => [...openedNotifications2, notification]);
          const timeoutId = setTimeout(() => {
            setOpenedNotifications(openedNotifications2 => openedNotifications2.filter(n2 => n2 !== notification));
            setTimeoutIds(timeoutIds2 => timeoutIds2.filter(id => id !== timeoutId));
          }, timeout);
          setTimeoutIds(timeoutIds2 => [...timeoutIds2, timeoutId]);
        }));
        onCleanup(() => {
          timeoutIds().forEach(id => clearTimeout(id));
        });
        return openedNotifications;
      }
      const _tmpl$$4 = /* @__PURE__ */template$1(`<div data-tc-list-notifications="true"></div>`);
      const Notifications = props => {
        const openedNotifications = useOpenedNotifications();
        return (() => {
          const _el$ = _tmpl$$4.cloneNode(true);
          insert(_el$, createComponent(TransitionGroup, {
            onBeforeEnter: el => {
              animate(el, [{
                opacity: 0,
                transform: "translateY(0)"
              }, {
                opacity: 1,
                transform: "translateY(-8px)"
              }], {
                duration: 200
              });
            },
            onExit: (el, done) => {
              const a2 = animate(el, [{
                opacity: 1,
                transform: "translateY(-8px)"
              }, {
                opacity: 0,
                transform: "translateY(-30px)"
              }], {
                duration: 200
              });
              a2.finished.then(done);
            },
            get children() {
              return createComponent(For, {
                get each() {
                  return openedNotifications();
                },
                children: openedNotification => createComponent(Switch, {
                  get children() {
                    return [createComponent(Match, {
                      get when() {
                        return openedNotification.action === "transaction-sent";
                      },
                      get children() {
                        return createComponent(SuccessTransactionNotification, {
                          "class": NotificationClass
                        });
                      }
                    }), createComponent(Match, {
                      get when() {
                        return openedNotification.action === "transaction-canceled";
                      },
                      get children() {
                        return createComponent(ErrorTransactionNotification, {
                          "class": NotificationClass
                        });
                      }
                    }), createComponent(Match, {
                      get when() {
                        return openedNotification.action === "confirm-transaction";
                      },
                      get children() {
                        return createComponent(ConfirmOperationNotification, {
                          "class": NotificationClass
                        });
                      }
                    })];
                  }
                })
              });
            }
          }));
          createRenderEffect(() => className(_el$, props.class));
          return _el$;
        })();
      };
      const AccountButtonStyled = styled(Button)`
    background-color: ${props => props.theme.colors.connectButton.background};
    color: ${props => props.theme.colors.connectButton.foreground};
    box-shadow: ${props => `0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};
    padding: 8px 16px 8px 12px;

    display: flex;
    align-items: center;
    gap: 4px;
    height: 40px;
`;
      const DropdownButtonStyled = styled(AccountButtonStyled)`
    padding: 12px 16px;
    min-width: 148px;
    justify-content: center;
    background-color: ${props => props.theme.colors.background.primary};
`;
      const LoaderButtonStyled = styled(Button)`
    min-width: 148px;
    height: 40px;

    background-color: ${props => props.theme.colors.background.primary};
    color: ${props => props.theme.colors.connectButton.foreground};
    box-shadow: ${props => `0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};

    display: flex;
    align-items: center;
    justify-content: center;
`;
      const LoaderIconStyled = styled(LoaderIcon)`
    height: 18px;
    width: 18px;
`;
      const DropdownContainerStyled = styled.div`
    width: fit-content;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
`;
      const DropdownStyled = styled(AccountButtonDropdown)`
    box-sizing: border-box;
    overflow: hidden;
    margin-top: 12px;
`;
      const NotificationsStyled = styled(Notifications)`
    > div:first-child {
        margin-top: 20px;
    }
`;
      function getSide(placement) {
        return placement.split("-")[0];
      }
      function getAlignment(placement) {
        return placement.split("-")[1];
      }
      function getMainAxisFromPlacement(placement) {
        return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
      }
      function getLengthFromAxis(axis) {
        return axis === "y" ? "height" : "width";
      }
      function computeCoordsFromPlacement(_ref, placement, rtl) {
        let {
          reference,
          floating
        } = _ref;
        const commonX = reference.x + reference.width / 2 - floating.width / 2;
        const commonY = reference.y + reference.height / 2 - floating.height / 2;
        const mainAxis = getMainAxisFromPlacement(placement);
        const length = getLengthFromAxis(mainAxis);
        const commonAlign = reference[length] / 2 - floating[length] / 2;
        const side = getSide(placement);
        const isVertical = mainAxis === "x";
        let coords;
        switch (side) {
          case "top":
            coords = {
              x: commonX,
              y: reference.y - floating.height
            };
            break;
          case "bottom":
            coords = {
              x: commonX,
              y: reference.y + reference.height
            };
            break;
          case "right":
            coords = {
              x: reference.x + reference.width,
              y: commonY
            };
            break;
          case "left":
            coords = {
              x: reference.x - floating.width,
              y: commonY
            };
            break;
          default:
            coords = {
              x: reference.x,
              y: reference.y
            };
        }
        switch (getAlignment(placement)) {
          case "start":
            coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
            break;
          case "end":
            coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
            break;
        }
        return coords;
      }
      const computePosition$1 = (reference, floating, config) => __async(void 0, null, function* () {
        const {
          placement = "bottom",
          strategy = "absolute",
          middleware = [],
          platform: platform2
        } = config;
        const validMiddleware = middleware.filter(Boolean);
        const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
        {
          if (platform2 == null) {
            console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
          }
          if (validMiddleware.filter(_ref => {
            let {
              name
            } = _ref;
            return name === "autoPlacement" || name === "flip";
          }).length > 1) {
            throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement` middleware", "detected. This will lead to an infinite loop. Ensure only one of", "either has been passed to the `middleware` array."].join(" "));
          }
          if (!reference || !floating) {
            console.error(["Floating UI: The reference and/or floating element was not defined", "when `computePosition()` was called. Ensure that both elements have", "been created and can be measured."].join(" "));
          }
        }
        let rects = yield platform2.getElementRects({
          reference,
          floating,
          strategy
        });
        let {
          x,
          y
        } = computeCoordsFromPlacement(rects, placement, rtl);
        let statefulPlacement = placement;
        let middlewareData = {};
        let resetCount = 0;
        for (let i2 = 0; i2 < validMiddleware.length; i2++) {
          const {
            name,
            fn
          } = validMiddleware[i2];
          const {
            x: nextX,
            y: nextY,
            data,
            reset
          } = yield fn({
            x,
            y,
            initialPlacement: placement,
            placement: statefulPlacement,
            strategy,
            middlewareData,
            rects,
            platform: platform2,
            elements: {
              reference,
              floating
            }
          });
          x = nextX != null ? nextX : x;
          y = nextY != null ? nextY : y;
          middlewareData = __spreadProps(__spreadValues({}, middlewareData), {
            [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data)
          });
          {
            if (resetCount > 50) {
              console.warn(["Floating UI: The middleware lifecycle appears to be running in an", "infinite loop. This is usually caused by a `reset` continually", "being returned without a break condition."].join(" "));
            }
          }
          if (reset && resetCount <= 50) {
            resetCount++;
            if (typeof reset === "object") {
              if (reset.placement) {
                statefulPlacement = reset.placement;
              }
              if (reset.rects) {
                rects = reset.rects === true ? yield platform2.getElementRects({
                  reference,
                  floating,
                  strategy
                }) : reset.rects;
              }
              ({
                x,
                y
              } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
            }
            i2 = -1;
            continue;
          }
        }
        return {
          x,
          y,
          placement: statefulPlacement,
          strategy,
          middlewareData
        };
      });
      function rectToClientRect(rect) {
        return __spreadProps(__spreadValues({}, rect), {
          top: rect.y,
          left: rect.x,
          right: rect.x + rect.width,
          bottom: rect.y + rect.height
        });
      }
      function lib_getWindow(node) {
        var _node$ownerDocument;
        return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
      }
      function getComputedStyle$1(element) {
        return lib_getWindow(element).getComputedStyle(element);
      }
      function getNodeName(node) {
        return lib_isNode(node) ? (node.nodeName || "").toLowerCase() : "";
      }
      let uaString;
      function getUAString() {
        if (uaString) {
          return uaString;
        }
        const uaData = navigator.userAgentData;
        if (uaData && Array.isArray(uaData.brands)) {
          uaString = uaData.brands.map(item => item.brand + "/" + item.version).join(" ");
          return uaString;
        }
        return navigator.userAgent;
      }
      function isHTMLElement(value) {
        return value instanceof lib_getWindow(value).HTMLElement;
      }
      function isElement(value) {
        return value instanceof lib_getWindow(value).Element;
      }
      function lib_isNode(value) {
        return value instanceof lib_getWindow(value).Node;
      }
      function isShadowRoot(node) {
        if (typeof ShadowRoot === "undefined") {
          return false;
        }
        const OwnElement = lib_getWindow(node).ShadowRoot;
        return node instanceof OwnElement || node instanceof ShadowRoot;
      }
      function isOverflowElement(element) {
        const {
          overflow,
          overflowX,
          overflowY,
          display
        } = getComputedStyle$1(element);
        return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
      }
      function isTableElement(element) {
        return ["table", "td", "th"].includes(getNodeName(element));
      }
      function isContainingBlock(element) {
        const isFirefox = /firefox/i.test(getUAString());
        const css = getComputedStyle$1(element);
        const backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;
        return css.transform !== "none" || css.perspective !== "none" || (backdropFilter ? backdropFilter !== "none" : false) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective"].some(value => css.willChange.includes(value)) || ["paint", "layout", "strict", "content"].some(value => {
          const contain = css.contain;
          return contain != null ? contain.includes(value) : false;
        });
      }
      function isLayoutViewport() {
        return !/^((?!chrome|android).)*safari/i.test(getUAString());
      }
      function isLastTraversableNode(node) {
        return ["html", "body", "#document"].includes(getNodeName(node));
      }
      const min = Math.min;
      const max = Math.max;
      const round = Math.round;
      const FALLBACK_SCALE = {
        x: 1,
        y: 1
      };
      function getScale(element) {
        const domElement = !isElement(element) && element.contextElement ? element.contextElement : isElement(element) ? element : null;
        if (!domElement) {
          return FALLBACK_SCALE;
        }
        const rect = domElement.getBoundingClientRect();
        const css = getComputedStyle$1(domElement);
        if (css.boxSizing !== "border-box") {
          if (!isHTMLElement(domElement)) {
            return FALLBACK_SCALE;
          }
          return {
            x: domElement.offsetWidth > 0 ? round(rect.width) / domElement.offsetWidth || 1 : 1,
            y: domElement.offsetHeight > 0 ? round(rect.height) / domElement.offsetHeight || 1 : 1
          };
        }
        let x = rect.width / parseFloat(css.width);
        let y = rect.height / parseFloat(css.height);
        if (!x || !Number.isFinite(x)) {
          x = 1;
        }
        if (!y || !Number.isFinite(y)) {
          y = 1;
        }
        return {
          x,
          y
        };
      }
      function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
        var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
        if (includeScale === void 0) {
          includeScale = false;
        }
        if (isFixedStrategy === void 0) {
          isFixedStrategy = false;
        }
        const clientRect = element.getBoundingClientRect();
        let scale = FALLBACK_SCALE;
        if (includeScale) {
          if (offsetParent) {
            if (isElement(offsetParent)) {
              scale = getScale(offsetParent);
            }
          } else {
            scale = getScale(element);
          }
        }
        const win = isElement(element) ? lib_getWindow(element) : window;
        const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
        const x = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scale.x;
        const y = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scale.y;
        const width = clientRect.width / scale.x;
        const height = clientRect.height / scale.y;
        return {
          width,
          height,
          top: y,
          right: x + width,
          bottom: y + height,
          left: x,
          x,
          y
        };
      }
      function getDocumentElement(node) {
        return ((lib_isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
      }
      function getNodeScroll(element) {
        if (isElement(element)) {
          return {
            scrollLeft: element.scrollLeft,
            scrollTop: element.scrollTop
          };
        }
        return {
          scrollLeft: element.pageXOffset,
          scrollTop: element.pageYOffset
        };
      }
      function getWindowScrollBarX(element) {
        return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
      }
      function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
        const isOffsetParentAnElement = isHTMLElement(offsetParent);
        const documentElement = getDocumentElement(offsetParent);
        const rect = getBoundingClientRect(element, true, strategy === "fixed", offsetParent);
        let scroll = {
          scrollLeft: 0,
          scrollTop: 0
        };
        const offsets = {
          x: 0,
          y: 0
        };
        if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
          if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
            scroll = getNodeScroll(offsetParent);
          }
          if (isHTMLElement(offsetParent)) {
            const offsetRect = getBoundingClientRect(offsetParent, true);
            offsets.x = offsetRect.x + offsetParent.clientLeft;
            offsets.y = offsetRect.y + offsetParent.clientTop;
          } else if (documentElement) {
            offsets.x = getWindowScrollBarX(documentElement);
          }
        }
        return {
          x: rect.left + scroll.scrollLeft - offsets.x,
          y: rect.top + scroll.scrollTop - offsets.y,
          width: rect.width,
          height: rect.height
        };
      }
      function getParentNode(node) {
        if (getNodeName(node) === "html") {
          return node;
        }
        const result = node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);
        return isShadowRoot(result) ? result.host : result;
      }
      function getTrueOffsetParent(element) {
        if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
          return null;
        }
        return element.offsetParent;
      }
      function getContainingBlock(element) {
        let currentNode = getParentNode(element);
        while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
          if (isContainingBlock(currentNode)) {
            return currentNode;
          } else {
            currentNode = getParentNode(currentNode);
          }
        }
        return null;
      }
      function getOffsetParent(element) {
        const window2 = lib_getWindow(element);
        let offsetParent = getTrueOffsetParent(element);
        while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
          offsetParent = getTrueOffsetParent(offsetParent);
        }
        if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
          return window2;
        }
        return offsetParent || getContainingBlock(element) || window2;
      }
      function getDimensions(element) {
        if (isHTMLElement(element)) {
          return {
            width: element.offsetWidth,
            height: element.offsetHeight
          };
        }
        const rect = getBoundingClientRect(element);
        return {
          width: rect.width,
          height: rect.height
        };
      }
      function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
        let {
          rect,
          offsetParent,
          strategy
        } = _ref;
        const isOffsetParentAnElement = isHTMLElement(offsetParent);
        const documentElement = getDocumentElement(offsetParent);
        if (offsetParent === documentElement) {
          return rect;
        }
        let scroll = {
          scrollLeft: 0,
          scrollTop: 0
        };
        let scale = {
          x: 1,
          y: 1
        };
        const offsets = {
          x: 0,
          y: 0
        };
        if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
          if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
            scroll = getNodeScroll(offsetParent);
          }
          if (isHTMLElement(offsetParent)) {
            const offsetRect = getBoundingClientRect(offsetParent);
            scale = getScale(offsetParent);
            offsets.x = offsetRect.x + offsetParent.clientLeft;
            offsets.y = offsetRect.y + offsetParent.clientTop;
          }
        }
        return {
          width: rect.width * scale.x,
          height: rect.height * scale.y,
          x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
          y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
        };
      }
      function getViewportRect(element, strategy) {
        const win = lib_getWindow(element);
        const html = getDocumentElement(element);
        const visualViewport = win.visualViewport;
        let width = html.clientWidth;
        let height = html.clientHeight;
        let x = 0;
        let y = 0;
        if (visualViewport) {
          width = visualViewport.width;
          height = visualViewport.height;
          const layoutViewport = isLayoutViewport();
          if (layoutViewport || !layoutViewport && strategy === "fixed") {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
          }
        }
        return {
          width,
          height,
          x,
          y
        };
      }
      function getDocumentRect(element) {
        var _element$ownerDocumen;
        const html = getDocumentElement(element);
        const scroll = getNodeScroll(element);
        const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
        const width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
        const height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
        let x = -scroll.scrollLeft + getWindowScrollBarX(element);
        const y = -scroll.scrollTop;
        if (getComputedStyle$1(body || html).direction === "rtl") {
          x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
        }
        return {
          width,
          height,
          x,
          y
        };
      }
      function getNearestOverflowAncestor(node) {
        const parentNode = getParentNode(node);
        if (isLastTraversableNode(parentNode)) {
          return node.ownerDocument.body;
        }
        if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
          return parentNode;
        }
        return getNearestOverflowAncestor(parentNode);
      }
      function getOverflowAncestors(node, list) {
        var _node$ownerDocument;
        if (list === void 0) {
          list = [];
        }
        const scrollableAncestor = getNearestOverflowAncestor(node);
        const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
        const win = lib_getWindow(scrollableAncestor);
        if (isBody) {
          return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
        }
        return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
      }
      function getInnerBoundingClientRect(element, strategy) {
        const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
        const top = clientRect.top + element.clientTop;
        const left = clientRect.left + element.clientLeft;
        const scale = isHTMLElement(element) ? getScale(element) : {
          x: 1,
          y: 1
        };
        const width = element.clientWidth * scale.x;
        const height = element.clientHeight * scale.y;
        const x = left * scale.x;
        const y = top * scale.y;
        return {
          top: y,
          left: x,
          right: x + width,
          bottom: y + height,
          x,
          y,
          width,
          height
        };
      }
      function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
        if (clippingAncestor === "viewport") {
          return rectToClientRect(getViewportRect(element, strategy));
        }
        if (isElement(clippingAncestor)) {
          return getInnerBoundingClientRect(clippingAncestor, strategy);
        }
        return rectToClientRect(getDocumentRect(getDocumentElement(element)));
      }
      function getClippingElementAncestors(element, cache) {
        const cachedResult = cache.get(element);
        if (cachedResult) {
          return cachedResult;
        }
        let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== "body");
        let currentContainingBlockComputedStyle = null;
        const elementIsFixed = getComputedStyle$1(element).position === "fixed";
        let currentNode = elementIsFixed ? getParentNode(element) : element;
        while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
          const computedStyle = getComputedStyle$1(currentNode);
          const containingBlock = isContainingBlock(currentNode);
          const shouldDropCurrentNode = elementIsFixed ? !containingBlock && !currentContainingBlockComputedStyle : !containingBlock && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position);
          if (shouldDropCurrentNode) {
            result = result.filter(ancestor => ancestor !== currentNode);
          } else {
            currentContainingBlockComputedStyle = computedStyle;
          }
          currentNode = getParentNode(currentNode);
        }
        cache.set(element, result);
        return result;
      }
      function getClippingRect(_ref) {
        let {
          element,
          boundary,
          rootBoundary,
          strategy
        } = _ref;
        const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
        const clippingAncestors = [...elementClippingAncestors, rootBoundary];
        const firstClippingAncestor = clippingAncestors[0];
        const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
          const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
          accRect.top = max(rect.top, accRect.top);
          accRect.right = min(rect.right, accRect.right);
          accRect.bottom = min(rect.bottom, accRect.bottom);
          accRect.left = max(rect.left, accRect.left);
          return accRect;
        }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
        return {
          width: clippingRect.right - clippingRect.left,
          height: clippingRect.bottom - clippingRect.top,
          x: clippingRect.left,
          y: clippingRect.top
        };
      }
      const platform = {
        getClippingRect,
        convertOffsetParentRelativeRectToViewportRelativeRect,
        isElement,
        getDimensions,
        getOffsetParent,
        getDocumentElement,
        getScale,
        getElementRects(_ref) {
          return __async(this, null, function* () {
            let {
              reference,
              floating,
              strategy
            } = _ref;
            const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
            const getDimensionsFn = this.getDimensions;
            return {
              reference: getRectRelativeToOffsetParent(reference, yield getOffsetParentFn(floating), strategy),
              floating: __spreadValues({
                x: 0,
                y: 0
              }, yield getDimensionsFn(floating))
            };
          });
        },
        getClientRects: element => Array.from(element.getClientRects()),
        isRTL: element => getComputedStyle$1(element).direction === "rtl"
      };
      function autoUpdate(reference, floating, update, options) {
        if (options === void 0) {
          options = {};
        }
        const {
          ancestorScroll: _ancestorScroll = true,
          ancestorResize = true,
          elementResize = true,
          animationFrame = false
        } = options;
        const ancestorScroll = _ancestorScroll && !animationFrame;
        const ancestors = ancestorScroll || ancestorResize ? [...(isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : []), ...getOverflowAncestors(floating)] : [];
        ancestors.forEach(ancestor => {
          ancestorScroll && ancestor.addEventListener("scroll", update, {
            passive: true
          });
          ancestorResize && ancestor.addEventListener("resize", update);
        });
        let observer = null;
        if (elementResize) {
          let initialUpdate = true;
          observer = new ResizeObserver(() => {
            if (!initialUpdate) {
              update();
            }
            initialUpdate = false;
          });
          isElement(reference) && !animationFrame && observer.observe(reference);
          if (!isElement(reference) && reference.contextElement && !animationFrame) {
            observer.observe(reference.contextElement);
          }
          observer.observe(floating);
        }
        let frameId;
        let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
        if (animationFrame) {
          frameLoop();
        }
        function frameLoop() {
          const nextRefRect = getBoundingClientRect(reference);
          if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
            update();
          }
          prevRefRect = nextRefRect;
          frameId = requestAnimationFrame(frameLoop);
        }
        update();
        return () => {
          var _observer;
          ancestors.forEach(ancestor => {
            ancestorScroll && ancestor.removeEventListener("scroll", update);
            ancestorResize && ancestor.removeEventListener("resize", update);
          });
          (_observer = observer) == null ? void 0 : _observer.disconnect();
          observer = null;
          if (animationFrame) {
            cancelAnimationFrame(frameId);
          }
        };
      }
      const computePosition = (reference, floating, options) => {
        const cache = /* @__PURE__ */new Map();
        const mergedOptions = __spreadValues({
          platform
        }, options);
        const platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), {
          _c: cache
        });
        return computePosition$1(reference, floating, __spreadProps(__spreadValues({}, mergedOptions), {
          platform: platformWithCache
        }));
      };
      function P(l2, u2, e2) {
        let c2 = () => {
            var t2;
            return (t2 = e2 == null ? void 0 : e2.placement) != null ? t2 : "bottom";
          },
          d = () => {
            var t2;
            return (t2 = e2 == null ? void 0 : e2.strategy) != null ? t2 : "absolute";
          },
          [n2, o2] = createSignal({
            x: null,
            y: null,
            placement: c2(),
            strategy: d(),
            middlewareData: {}
          }),
          [x, F] = createSignal();
        createEffect(() => {
          let t2 = x();
          if (t2) throw t2.value;
        });
        let s2 = createMemo(() => (l2(), u2(), {}));
        function i2() {
          let t2 = l2(),
            r = u2();
          if (t2 && r) {
            let a2 = s2();
            computePosition(t2, r, {
              middleware: e2 == null ? void 0 : e2.middleware,
              placement: c2(),
              strategy: d()
            }).then(m => {
              a2 === s2() && o2(m);
            }, m => {
              F(m);
            });
          }
        }
        return createEffect(() => {
          let t2 = l2(),
            r = u2();
          if (e2 == null || e2.middleware, c2(), d(), t2 && r) if (e2 != null && e2.whileElementsMounted) {
            let a2 = e2.whileElementsMounted(t2, r, i2);
            a2 && onCleanup(a2);
          } else i2();
        }), {
          get x() {
            return n2().x;
          },
          get y() {
            return n2().y;
          },
          get placement() {
            return n2().placement;
          },
          get strategy() {
            return n2().strategy;
          },
          get middlewareData() {
            return n2().middlewareData;
          },
          update: i2
        };
      }
      const _tmpl$$3 = /* @__PURE__ */template$1(`<tc-root data-tc-dropdown-container="true"></tc-root>`);
      const AccountButton = () => {
        const theme = useTheme();
        const connector = useContext(ConnectorContext);
        const tonConnectUI = useContext(TonConnectUiContext);
        const [isOpened, setIsOpened] = createSignal(false);
        const [account, setAccount] = createSignal(connector.account);
        const [restoringProcess, setRestoringProcess] = createSignal(true);
        let dropDownRef;
        const [floating, setFloating] = createSignal();
        const [anchor, setAnchor] = createSignal();
        const position = P(anchor, floating, {
          whileElementsMounted: autoUpdate,
          placement: "bottom-end"
        });
        const normalizedAddress = () => {
          const acc = account();
          if (acc) {
            const userFriendlyAddress = toUserFriendlyAddress(acc.address, acc.chain === CHAIN.TESTNET);
            return userFriendlyAddress.slice(0, 4) + "\u2026" + userFriendlyAddress.slice(-4);
          }
          return "";
        };
        tonConnectUI.connectionRestored.then(() => setRestoringProcess(false));
        const unsubscribe = connector.onStatusChange(wallet => {
          if (!wallet) {
            setIsOpened(false);
            setAccount(null);
            return;
          }
          setAccount(wallet.account);
        });
        const onClick = e2 => {
          if (!account() || !isOpened()) {
            return;
          }
          const clickToButton = anchor().contains(e2.target);
          const clickToDropdown = dropDownRef.contains(e2.target);
          if (!clickToButton && !clickToDropdown) {
            setIsOpened(false);
          }
        };
        onMount(() => {
          document.body.addEventListener("click", onClick);
        });
        onCleanup(() => {
          document.body.removeEventListener("click", onClick);
          unsubscribe();
        });
        return createComponent(Dynamic, {
          component: globalStylesTag,
          get children() {
            return [createComponent(Show, {
              get when() {
                return restoringProcess();
              },
              get children() {
                return createComponent(LoaderButtonStyled, {
                  disabled: true,
                  "data-tc-connect-button-loading": "true",
                  get children() {
                    return createComponent(LoaderIconStyled, {});
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return !restoringProcess();
              },
              get children() {
                return [createComponent(Show, {
                  get when() {
                    return !account();
                  },
                  get children() {
                    return createComponent(AccountButtonStyled, {
                      onClick: () => tonConnectUI.openModal(),
                      "data-tc-connect-button": "true",
                      scale: "s",
                      get children() {
                        return [createComponent(TonIcon, {
                          get fill() {
                            return theme.colors.connectButton.foreground;
                          }
                        }), createComponent(Text, {
                          translationKey: "button.connectWallet",
                          fontSize: "15px",
                          lineHeight: "18px",
                          fontWeight: "590",
                          get color() {
                            return theme.colors.connectButton.foreground;
                          },
                          children: "Connect wallet"
                        })];
                      }
                    });
                  }
                }), createComponent(Show, {
                  get when() {
                    return account();
                  },
                  get children() {
                    return createComponent(DropdownContainerStyled, {
                      get children() {
                        return [createComponent(DropdownButtonStyled, {
                          onClick: () => setIsOpened(v => !v),
                          ref: setAnchor,
                          "data-tc-dropdown-button": "true",
                          scale: "s",
                          get children() {
                            return [createComponent(Text, {
                              fontSize: "15px",
                              fontWeight: "590",
                              lineHeight: "18px",
                              get children() {
                                return normalizedAddress();
                              }
                            }), createComponent(ArrowIcon, {
                              direction: "bottom"
                            })];
                          }
                        }), createComponent(Portal, {
                          get children() {
                            const _el$ = untrack(() => document.importNode(_tmpl$$3, true));
                            use(setFloating, _el$);
                            _el$.style.setProperty("z-index", "999");
                            _el$._$owner = getOwner();
                            insert(_el$, createComponent(Transition, {
                              onBeforeEnter: el => {
                                animate(el, [{
                                  opacity: 0,
                                  transform: "translateY(-8px)"
                                }, {
                                  opacity: 1,
                                  transform: "translateY(0)"
                                }], {
                                  duration: 150
                                });
                              },
                              onExit: (el, done) => {
                                const a2 = animate(el, [{
                                  opacity: 1,
                                  transform: "translateY(0)"
                                }, {
                                  opacity: 0,
                                  transform: "translateY(-8px)"
                                }], {
                                  duration: 150
                                });
                                a2.finished.then(done);
                              },
                              get children() {
                                return createComponent(Show, {
                                  get when() {
                                    return isOpened();
                                  },
                                  get children() {
                                    return createComponent(DropdownStyled, {
                                      get hidden() {
                                        return !isOpened();
                                      },
                                      onClose: () => setIsOpened(false),
                                      ref(r$) {
                                        const _ref$ = dropDownRef;
                                        typeof _ref$ === "function" ? _ref$(r$) : dropDownRef = r$;
                                      }
                                    });
                                  }
                                });
                              }
                            }), null);
                            insert(_el$, createComponent(NotificationsStyled, {}), null);
                            createRenderEffect(_p$ => {
                              var _a2, _b2;
                              const _v$ = position.strategy,
                                _v$2 = `${(_a2 = position.y) != null ? _a2 : 0}px`,
                                _v$3 = `${(_b2 = position.x) != null ? _b2 : 0}px`;
                              _v$ !== _p$._v$ && _el$.style.setProperty("position", _p$._v$ = _v$);
                              _v$2 !== _p$._v$2 && _el$.style.setProperty("top", _p$._v$2 = _v$2);
                              _v$3 !== _p$._v$3 && _el$.style.setProperty("left", _p$._v$3 = _v$3);
                              return _p$;
                            }, {
                              _v$: void 0,
                              _v$2: void 0,
                              _v$3: void 0
                            });
                            return _el$;
                          }
                        })];
                      }
                    });
                  }
                })];
              }
            })];
          }
        });
      };
      const StyledModal = styled(Modal)`
    padding-left: 24px;
    padding-right: 24px;
    padding-top: 18px;
    padding-bottom: 0;

    ${media("mobile")} {
        padding-left: 0;
        padding-right: 0;

        min-height: 364px;
    }
`;
      const H1Styled$8 = styled(H1)`
    margin-top: 12px;

    ${media("mobile")} {
        padding: 0 10px;
    }
`;
      const LoaderContainerStyled = styled.div`
    margin: 30px 0;
    width: 100%;
    display: flex;
    justify-content: center;

    ${media("mobile")} {
        height: 160px;
        align-items: center;
    }
`;
      styled(Text)`
    min-width: 84px;
    text-align: center;
    font-weight: 590;
`;
      styled(TabBar)`
    margin: 0 auto 22px;
`;
      const [appState, setAppState] = createStore({
        buttonRootId: null,
        language: "en",
        returnStrategy: "back",
        twaReturnUrl: void 0,
        walletsListConfiguration: {},
        enableAndroidBackHandler: true
      });
      function uniq(array) {
        return [...new Set(array)];
      }
      function mergeConcat(idKey, array1, array2) {
        return array1.map(item1 => {
          const item2 = array2.find(elem => elem[idKey] === item1[idKey]);
          array2 = array2.filter(elem => elem[idKey] !== item1[idKey]);
          return item2 === void 0 ? item1 : item2;
        }).concat(array2);
      }
      function uiWalletToWalletInfo(uiWallet) {
        if ("jsBridgeKey" in uiWallet) {
          return __spreadProps(__spreadValues({}, uiWallet), {
            injected: TonConnect.isWalletInjected(uiWallet.jsBridgeKey),
            embedded: TonConnect.isInsideWalletBrowser(uiWallet.jsBridgeKey)
          });
        }
        return uiWallet;
      }
      function applyWalletsListConfiguration(walletsList, configuration) {
        var _a2;
        if (!configuration) {
          return walletsList;
        }
        if ((_a2 = configuration.includeWallets) == null ? void 0 : _a2.length) {
          walletsList = mergeConcat("name", walletsList, configuration.includeWallets.map(uiWalletToWalletInfo));
        }
        return walletsList;
      }
      function supportsDesktop(walletInfo) {
        return walletInfo.platforms.some(w => ["macos", "linux", "windows"].includes(w));
      }
      function supportsMobile(walletInfo) {
        return walletInfo.platforms.some(w => ["ios", "android"].includes(w));
      }
      function supportsExtension(walletInfo) {
        return walletInfo.platforms.some(w => ["chrome", "firefox", "safari"].includes(w));
      }
      function eqWalletName(wallet1, name) {
        if (!name) {
          return false;
        }
        return wallet1.name.toLowerCase() === name.toLowerCase() || wallet1.appName.toLowerCase() === name.toLowerCase();
      }
      const DesktopSelectWalletModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
`;
      const H1Styled$7 = styled(H1)`
    margin-bottom: 18px;
`;
      styled.div`
    height: 1px;
    margin: 0 -24px;
    width: calc(100% + 48px);
    opacity: 0.12;
    background: ${props => props.isShown ? props.theme.colors.icon.secondary : "transparent"};
    transition: background 0.15s ease-in-out;

    ${media("mobile")} {
        width: 100%;
    }
`;
      const WalletsUl = styled.ul`
    display: grid;
    grid-template-columns: repeat(auto-fit, 92px);
    grid-template-rows: auto;
    align-content: flex-start;
    justify-content: center;
    row-gap: 8px;
    width: 100%;
    padding: 0 0 16px;
    align-self: flex-start;
    max-width: 400px;
    margin: 0 auto;

    > li {
        display: block;
        height: fit-content;
    }

    ${media("mobile")} {
        grid-template-columns: repeat(auto-fit, 82px);
    }
`;
      styled(Button)`
    display: block;
    margin: 0 auto 1px;
    font-size: 15px;
`;
      const StyledIconButton$3 = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
      const WalletLabeledItemStyled = styled(WalletLabeledItem)`
    height: 100%;
`;
      const _tmpl$$2 = /* @__PURE__ */template$1(`<li></li>`);
      const AllWalletsListModal = props => {
        const maxHeight = () => isMobile() ? void 0 : 510;
        const walletsList = () => isMobile() ? props.walletsList.filter(supportsMobile) : props.walletsList;
        return createComponent(DesktopSelectWalletModalStyled, {
          "data-tc-wallets-modal-list": "true",
          get children() {
            return [createComponent(StyledIconButton$3, {
              icon: "arrow",
              onClick: () => props.onBack()
            }), createComponent(H1Styled$7, {
              translationKey: "walletModal.wallets",
              children: "Wallets"
            }), createComponent(ScrollContainer, {
              get maxHeight() {
                return maxHeight();
              },
              get children() {
                return createComponent(WalletsUl, {
                  get children() {
                    return createComponent(For, {
                      get each() {
                        return walletsList();
                      },
                      children: wallet => (() => {
                        const _el$ = _tmpl$$2.cloneNode(true);
                        insert(_el$, createComponent(WalletLabeledItemStyled, {
                          wallet,
                          onClick: () => props.onSelect(wallet)
                        }));
                        return _el$;
                      })()
                    });
                  }
                });
              }
            })];
          }
        });
      };
      const tgButtonBorders = {
        m: "16px",
        s: "12px",
        none: "0"
      };
      const tgIconBorders = {
        m: "6px",
        s: "6px",
        none: "0"
      };
      const DesktopConnectionModalStyled = styled.div`
    display: flex;
    flex-direction: column;
`;
      const BodyStyled$1 = styled.div`
    flex: 1;
    margin-top: ${props => props.qr ? "0" : "18px"};
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 232px;
`;
      const QRCodeStyled$1 = styled(QRCode)`
    margin-bottom: 24px;
`;
      const H1Styled$6 = styled(H1)`
    max-width: 288px;
    margin: 0 auto 2px;
`;
      const H2Styled$4 = styled(H2)`
    max-width: 288px;
    text-align: center;
    margin: 0 auto 20px;
`;
      const StyledIconButton$2 = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
      const ButtonsContainerStyled$1 = styled.div`
    display: flex;
    justify-content: center;
    gap: 8px;
    padding-bottom: 16px;
`;
      const BottomButtonsContainerStyled = styled(ButtonsContainerStyled$1)`
    padding-bottom: 0;
`;
      const FooterButton$1 = styled(Button)`
    margin-bottom: 24px;
`;
      const LoaderStyled$1 = styled(LoaderIcon)`
    margin-bottom: 18px;
    margin-top: 2px;
`;
      const ErrorIconStyled$1 = styled(ErrorIcon)`
    margin-bottom: 16px;
`;
      const BodyTextStyled$1 = styled(H2)`
    color: ${props => props.theme.colors.text.secondary};
    text-align: center;
    margin-bottom: 20px;
`;
      const TgButtonStyled = styled(Button)`
    margin-top: -8px;
    margin-bottom: 24px;
    width: 100%;
    padding: 12px 12px 12px 20px;
    border-radius: ${props => tgButtonBorders[props.theme.borderRadius]};
    font-size: 16px;
    line-height: 20px;
`;
      const TgImageStyled = styled(Image)`
    width: 32px;
    height: 32px;
    border-radius: ${props => tgIconBorders[props.theme.borderRadius]};
`;
      const Translation = props => {
        const [t2] = useI18n();
        return createMemo(() => {
          var _a2;
          return t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString());
        });
      };
      function addReturnStrategy(url, strategy) {
        let returnStrategy;
        if (typeof strategy === "string") {
          returnStrategy = strategy;
        } else {
          returnStrategy = isInTMA() ? strategy.twaReturnUrl || strategy.returnStrategy : "none";
        }
        const newUrl = addQueryParameter(url, "ret", returnStrategy);
        if (!isTelegramUrl(url)) {
          return newUrl;
        }
        const lastParam = newUrl.slice(newUrl.lastIndexOf("&") + 1);
        return newUrl.slice(0, newUrl.lastIndexOf("&")) + "-" + encodeTelegramUrlParameters(lastParam);
      }
      function redirectToTelegram(universalLink, options) {
        options = __spreadValues({}, options);
        const directLink = convertToTGDirectLink(universalLink);
        const directLinkUrl = new URL(directLink);
        if (!directLinkUrl.searchParams.has("startapp")) {
          directLinkUrl.searchParams.append("startapp", "tonconnect");
        }
        if (isInTMA()) {
          if (isTmaPlatform("ios", "android")) {
            options.returnStrategy = "back";
            options.twaReturnUrl = void 0;
            sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));
          } else if (isTmaPlatform("macos", "tdesktop")) {
            sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));
          } else if (isTmaPlatform("weba")) {
            sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));
          } else if (isTmaPlatform("web")) {
            options.returnStrategy = "back";
            options.twaReturnUrl = void 0;
            sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));
          } else {
            openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
          }
        } else {
          if (isOS("ios", "android")) {
            options.returnStrategy = "none";
            openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options.returnStrategy));
          } else if (isOS("macos", "windows", "linux")) {
            options.returnStrategy = "none";
            options.twaReturnUrl = void 0;
            if (options.forceRedirect) {
              openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
            } else {
              const link = addReturnStrategy(directLinkUrl.toString(), options);
              const deepLink = convertToTGDeepLink(link);
              openDeeplinkWithFallback(deepLink, () => openLinkBlank(link));
            }
          } else {
            openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
          }
        }
      }
      function addQueryParameter(url, key, value) {
        const parsed = new URL(url);
        parsed.searchParams.append(key, value);
        return parsed.toString();
      }
      function convertToTGDirectLink(universalLink) {
        const url = new URL(universalLink);
        if (url.searchParams.has("attach")) {
          url.searchParams.delete("attach");
          url.pathname += "/start";
        }
        return url.toString();
      }
      function convertToTGDeepLink(directLink) {
        const parsed = new URL(directLink);
        const [, domain, appname] = parsed.pathname.split("/");
        const startapp = parsed.searchParams.get("startapp");
        return `tg://resolve?domain=${domain}&appname=${appname}&startapp=${startapp}`;
      }
      let openDesktopDeeplinkAttempts = 0;
      const DesktopConnectionModal = props => {
        const [mode, setMode] = createSignal("mobile");
        const [connectionErrored, setConnectionErrored] = createSignal(false);
        const [universalLink, setUniversalLink] = createSignal();
        const [firstClick, setFirstClick] = createSignal(true);
        const connector = useContext(ConnectorContext);
        const unsubscribe = connector.onStatusChange(() => {}, () => {
          if (props.wallet.appName !== AT_WALLET_APP_NAME) {
            setConnectionErrored(true);
          }
        });
        onCleanup(unsubscribe);
        const generateUniversalLink = () => {
          setUniversalLink(connector.connect({
            universalLink: props.wallet.universalLink,
            bridgeUrl: props.wallet.bridgeUrl
          }, props.additionalRequest));
        };
        createEffect(() => {
          if (untrack(mode) !== "extension" && (supportsMobile(props.wallet) || supportsDesktop(props.wallet))) {
            generateUniversalLink();
          }
        });
        const onClickMobile = () => {
          setConnectionErrored(false);
          if (mode() === "extension") {
            generateUniversalLink();
          }
          setMode("mobile");
          setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
            openMethod: "qrcode"
          }));
        };
        const onClickDesktop = () => {
          setConnectionErrored(false);
          if (mode() === "extension") {
            generateUniversalLink();
          }
          setMode("desktop");
          const linkWithStrategy = addReturnStrategy(universalLink(), appState.returnStrategy);
          const haveTriedToOpenDeeplinkInSafari = isBrowser("safari") && openDesktopDeeplinkAttempts >= 1;
          if (props.wallet.deepLink && !haveTriedToOpenDeeplinkInSafari) {
            openDesktopDeeplinkAttempts++;
            setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
              openMethod: "custom-deeplink"
            }));
            openDeeplinkWithFallback(toDeeplink(linkWithStrategy, props.wallet.deepLink), () => {
              setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
                openMethod: "universal-link"
              }));
              openLinkBlank(linkWithStrategy);
            });
          } else {
            setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
              openMethod: "universal-link"
            }));
            openLinkBlank(linkWithStrategy);
          }
        };
        const onClickTelegram = () => {
          const forceRedirect = !firstClick();
          setFirstClick(false);
          setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
            openMethod: "universal-link"
          }));
          redirectToTelegram(universalLink(), {
            returnStrategy: appState.returnStrategy,
            twaReturnUrl: appState.twaReturnUrl,
            forceRedirect
          });
        };
        const onClickExtension = () => {
          setConnectionErrored(false);
          setMode("extension");
          if (isWalletInfoCurrentlyInjected(props.wallet)) {
            setLastSelectedWalletInfo(props.wallet);
            connector.connect({
              jsBridgeKey: props.wallet.jsBridgeKey
            }, props.additionalRequest);
          }
        };
        if (supportsMobile(props.wallet)) {
          onClickMobile();
        } else if (supportsExtension(props.wallet)) {
          onClickExtension();
        } else {
          onClickDesktop();
        }
        return createComponent(DesktopConnectionModalStyled, {
          "data-tc-wallets-modal-connection-desktop": "true",
          get children() {
            return [createComponent(Show, {
              get when() {
                return !props.backDisabled;
              },
              get children() {
                return createComponent(StyledIconButton$2, {
                  icon: "arrow",
                  onClick: () => props.onBackClick()
                });
              }
            }), createComponent(H1Styled$6, {
              get children() {
                return props.wallet.name;
              }
            }), createComponent(Show, {
              get when() {
                return mode() === "mobile";
              },
              get children() {
                return createComponent(H2Styled$4, {
                  translationKey: "walletModal.desktopConnectionModal.scanQR",
                  get translationValues() {
                    return {
                      name: props.wallet.name
                    };
                  },
                  get children() {
                    return ["Scan the QR code below with your phone\u2019s or ", createMemo(() => props.wallet.name), "\u2019s camera"];
                  }
                });
              }
            }), createComponent(BodyStyled$1, {
              get qr() {
                return mode() === "mobile";
              },
              get children() {
                return createComponent(Switch, {
                  get children() {
                    return [createComponent(Match, {
                      get when() {
                        return mode() === "mobile";
                      },
                      get children() {
                        return createComponent(QRCodeStyled$1, {
                          disableCopy: false,
                          get sourceUrl() {
                            return addReturnStrategy(universalLink(), "none");
                          },
                          get imageUrl() {
                            return props.wallet.imageUrl;
                          }
                        });
                      }
                    }), createComponent(Match, {
                      get when() {
                        return connectionErrored();
                      },
                      get children() {
                        return [createComponent(ErrorIconStyled$1, {
                          size: "s"
                        }), createComponent(BodyTextStyled$1, {
                          translationKey: "walletModal.desktopConnectionModal.connectionDeclined",
                          children: "Connection declined"
                        }), createComponent(ButtonsContainerStyled$1, {
                          get children() {
                            return createComponent(Button, {
                              get leftIcon() {
                                return createComponent(RetryIcon, {});
                              },
                              get onClick() {
                                return mode() === "extension" ? onClickExtension : onClickDesktop;
                              },
                              get children() {
                                return createComponent(Translation, {
                                  translationKey: "common.retry",
                                  children: "Retry"
                                });
                              }
                            });
                          }
                        })];
                      }
                    }), createComponent(Match, {
                      get when() {
                        return mode() === "extension";
                      },
                      get children() {
                        return [createComponent(Show, {
                          get when() {
                            return isWalletInfoCurrentlyInjected(props.wallet);
                          },
                          get children() {
                            return [createComponent(LoaderStyled$1, {
                              size: "s"
                            }), createComponent(BodyTextStyled$1, {
                              translationKey: "walletModal.desktopConnectionModal.continueInExtension",
                              get translationValues() {
                                return {
                                  name: props.wallet.name
                                };
                              },
                              get children() {
                                return ["Continue in ", createMemo(() => props.wallet.name), " browser extension\u2026"];
                              }
                            }), createComponent(ButtonsContainerStyled$1, {
                              get children() {
                                return createComponent(Button, {
                                  get leftIcon() {
                                    return createComponent(RetryIcon, {});
                                  },
                                  onClick: onClickExtension,
                                  get children() {
                                    return createComponent(Translation, {
                                      translationKey: "common.retry",
                                      children: "Retry"
                                    });
                                  }
                                });
                              }
                            })];
                          }
                        }), createComponent(Show, {
                          get when() {
                            return !isWalletInfoCurrentlyInjected(props.wallet);
                          },
                          get children() {
                            return [createComponent(BodyTextStyled$1, {
                              translationKey: "walletModal.desktopConnectionModal.dontHaveExtension",
                              get translationValues() {
                                return {
                                  name: props.wallet.name
                                };
                              },
                              get children() {
                                return ["Seems you don't have installed ", createMemo(() => props.wallet.name), " browser extension"];
                              }
                            }), createComponent(ButtonsContainerStyled$1, {
                              get children() {
                                return createComponent(Link, {
                                  get href() {
                                    return props.wallet.aboutUrl;
                                  },
                                  blank: true,
                                  get children() {
                                    return createComponent(Button, {
                                      get rightIcon() {
                                        return createComponent(LinkIcon, {});
                                      },
                                      onClick: onClickExtension,
                                      get children() {
                                        return createComponent(Translation, {
                                          translationKey: "walletModal.desktopConnectionModal.getWallet",
                                          get translationValues() {
                                            return {
                                              name: props.wallet.name
                                            };
                                          },
                                          get children() {
                                            return ["Get ", createMemo(() => props.wallet.name)];
                                          }
                                        });
                                      }
                                    });
                                  }
                                });
                              }
                            })];
                          }
                        })];
                      }
                    }), createComponent(Match, {
                      get when() {
                        return mode() === "desktop";
                      },
                      get children() {
                        return [createComponent(LoaderIcon, {
                          size: "m"
                        }), createComponent(BodyTextStyled$1, {
                          translationKey: "walletModal.desktopConnectionModal.continueOnDesktop",
                          get translationValues() {
                            return {
                              name: props.wallet.name
                            };
                          },
                          get children() {
                            return ["Continue in ", createMemo(() => props.wallet.name), " on desktop\u2026"];
                          }
                        }), createComponent(ButtonsContainerStyled$1, {
                          get children() {
                            return [createComponent(Button, {
                              get leftIcon() {
                                return createComponent(RetryIcon, {});
                              },
                              onClick: onClickDesktop,
                              get children() {
                                return createComponent(Translation, {
                                  translationKey: "common.retry",
                                  children: "Retry"
                                });
                              }
                            }), createComponent(Link, {
                              get href() {
                                return props.wallet.aboutUrl;
                              },
                              blank: true,
                              get children() {
                                return createComponent(Button, {
                                  get rightIcon() {
                                    return createComponent(LinkIcon, {});
                                  },
                                  get children() {
                                    return createComponent(Translation, {
                                      translationKey: "walletModal.desktopConnectionModal.getWallet",
                                      get translationValues() {
                                        return {
                                          name: props.wallet.name
                                        };
                                      },
                                      get children() {
                                        return ["Get ", createMemo(() => props.wallet.name)];
                                      }
                                    });
                                  }
                                });
                              }
                            })];
                          }
                        })];
                      }
                    })];
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return props.wallet.appName === AT_WALLET_APP_NAME;
              },
              get children() {
                return createComponent(TgButtonStyled, {
                  get rightIcon() {
                    return createComponent(TgImageStyled, {
                      get src() {
                        return IMG.TG;
                      }
                    });
                  },
                  scale: "s",
                  onClick: onClickTelegram,
                  get children() {
                    return createComponent(Translation, {
                      translationKey: "walletModal.desktopConnectionModal.openWalletOnTelegram",
                      children: "Open Wallet in Telegram on desktop"
                    });
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return props.wallet.appName !== AT_WALLET_APP_NAME;
              },
              get children() {
                return createComponent(BottomButtonsContainerStyled, {
                  get children() {
                    return [createComponent(Show, {
                      get when() {
                        return createMemo(() => mode() !== "mobile")() && supportsMobile(props.wallet);
                      },
                      get children() {
                        return createComponent(FooterButton$1, {
                          appearance: "secondary",
                          get leftIcon() {
                            return createComponent(MobileIcon, {});
                          },
                          onClick: onClickMobile,
                          get children() {
                            return createComponent(Translation, {
                              translationKey: "common.mobile",
                              children: "Mobile"
                            });
                          }
                        });
                      }
                    }), createComponent(Show, {
                      get when() {
                        return createMemo(() => mode() !== "extension")() && supportsExtension(props.wallet);
                      },
                      get children() {
                        return createComponent(FooterButton$1, {
                          appearance: "secondary",
                          get leftIcon() {
                            return createComponent(BrowserIcon, {});
                          },
                          onClick: onClickExtension,
                          get children() {
                            return createComponent(Translation, {
                              translationKey: "common.browserExtension",
                              children: "Browser Extension"
                            });
                          }
                        });
                      }
                    }), createComponent(Show, {
                      get when() {
                        return createMemo(() => mode() !== "desktop")() && supportsDesktop(props.wallet);
                      },
                      get children() {
                        return createComponent(FooterButton$1, {
                          appearance: "secondary",
                          get leftIcon() {
                            return createComponent(DesktopIcon, {});
                          },
                          onClick: onClickDesktop,
                          get children() {
                            return createComponent(Translation, {
                              translationKey: "common.desktop",
                              children: "Desktop"
                            });
                          }
                        });
                      }
                    })];
                  }
                });
              }
            })];
          }
        });
      };
      const InfoModalStyled = styled.div``;
      const StyledIconButton$1 = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
      const H1Styled$5 = styled(H1)`
    margin-bottom: 18px;
`;
      const InfoBlock = styled.div`
    padding: 16px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
`;
      const InfoBlockIconClass = u`
    margin-bottom: 12px;
`;
      const H3Styled = styled(H3)`
    text-align: center;
    margin-bottom: 4px;
`;
      const TextStyled$1 = styled(Text)`
    text-align: center;
    max-width: 352px;
    color: ${props => props.theme.colors.text.secondary};
`;
      const ButtonsBlock = styled.div`
    padding: 16px 24px 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
`;
      const LINKS = {
        GET_A_WALLET: "https://ton.org/wallets?filters[wallet_features][slug][$in]=dapp-auth&pagination[limit]=-1"
      };
      const InfoModal = props => {
        return createComponent(InfoModalStyled, {
          "data-tc-wallets-modal-info": "true",
          get children() {
            return [createComponent(StyledIconButton$1, {
              icon: "arrow",
              onClick: () => props.onBackClick()
            }), createComponent(H1Styled$5, {
              translationKey: "walletModal.infoModal.whatIsAWallet",
              children: "What is a wallet"
            }), createComponent(ScrollContainer, {
              get children() {
                return [createComponent(InfoBlock, {
                  get children() {
                    return [createComponent(SecurityIcon, {
                      "class": InfoBlockIconClass
                    }), createComponent(H3Styled, {
                      translationKey: "walletModal.infoModal.secureDigitalAssets",
                      children: "Secure digital assets storage"
                    }), createComponent(TextStyled$1, {
                      translationKey: "walletModal.infoModal.walletProtects",
                      children: "A wallet protects and manages your digital assets including TON, tokens and collectables."
                    })];
                  }
                }), createComponent(InfoBlock, {
                  get children() {
                    return [createComponent(PersonalityIcon, {
                      "class": InfoBlockIconClass
                    }), createComponent(H3Styled, {
                      translationKey: "walletModal.infoModal.controlIdentity",
                      children: "Control your Web3 identity"
                    }), createComponent(TextStyled$1, {
                      translationKey: "walletModal.infoModal.manageIdentity",
                      children: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in the blockchain ecosystem."
                    })];
                  }
                }), createComponent(InfoBlock, {
                  get children() {
                    return [createComponent(SwapIcon, {
                      "class": InfoBlockIconClass
                    }), createComponent(H3Styled, {
                      translationKey: "walletModal.infoModal.effortlessCryptoTransactions",
                      children: "Effortless crypto transactions"
                    }), createComponent(TextStyled$1, {
                      translationKey: "walletModal.infoModal.easilySend",
                      children: "Easily send, receive, monitor your cryptocurrencies. Streamline your operations with decentralized applications."
                    })];
                  }
                }), createComponent(ButtonsBlock, {
                  get children() {
                    return createComponent(Link, {
                      get href() {
                        return LINKS.GET_A_WALLET;
                      },
                      blank: true,
                      get children() {
                        return createComponent(Button, {
                          get rightIcon() {
                            return createComponent(WalletIcon, {});
                          },
                          get children() {
                            return createComponent(Translation, {
                              translationKey: "walletModal.infoModal.getAWallet",
                              children: "Get a Wallet"
                            });
                          }
                        });
                      }
                    });
                  }
                })];
              }
            })];
          }
        });
      };
      const MobileConnectionModalStyled = styled.div``;
      const BodyStyled = styled.div`
    flex: 1;
    margin-top: 18px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 232px;
`;
      const H1Styled$4 = styled(H1)`
    max-width: 262px;
    margin: 0 auto 8px;
`;
      const StyledIconButton = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
      const FooterStyled = styled.div`
    padding: 16px;
    display: flex;
    align-items: center;
    gap: 12px;
    border-top: 0.5px solid ${props => rgba(props.theme.colors.icon.secondary, 0.2)};
`;
      const ImageStyled = styled(Image)`
    width: 36px;
    height: 36px;
    border-radius: 10px;
`;
      const FooterButton = styled(Link)`
    margin-left: auto;
`;
      const LoaderStyled = styled(LoaderIcon)`
    margin-bottom: 18px;
    margin-top: 2px;
`;
      const ErrorIconStyled = styled(ErrorIcon)`
    margin-bottom: 16px;
`;
      const BodyTextStyled = styled(H2)`
    color: ${props => props.theme.colors.text.secondary};
    text-align: center;
    margin-bottom: 20px;
`;
      const ButtonsContainerStyled = styled.div`
    display: flex;
    justify-content: center;
    gap: 8px;
    padding-bottom: 16px;
`;
      const H1Styled$3 = styled(H1)`
    margin-bottom: 2px;
    padding: 0 64px;
`;
      const H2Styled$3 = styled(H2)`
    margin-bottom: 20px;
    padding: 0 64px;
    min-height: 44px;
`;
      const QrCodeWrapper$1 = styled.div`
    padding: 0 24px 24px;
`;
      const MobileConnectionQR = props => {
        return [createComponent(H1Styled$3, {
          get children() {
            return props.walletInfo.name;
          }
        }), createComponent(H2Styled$3, {
          translationKey: "walletModal.mobileConnectionModal.scanQR",
          get translationValues() {
            return {
              name: props.walletInfo.name
            };
          },
          get children() {
            return ["Scan the QR code below with your phone\u2019s or ", createMemo(() => props.walletInfo.name), "\u2019s camera"];
          }
        }), createComponent(QrCodeWrapper$1, {
          get children() {
            return createComponent(QRCode, {
              get imageUrl() {
                return props.walletInfo.imageUrl;
              },
              get sourceUrl() {
                return addReturnStrategy(props.universalLink, "none");
              },
              disableCopy: true
            });
          }
        })];
      };
      const MobileConnectionModal = props => {
        const theme = useTheme();
        const [showQR, setShowQR] = createSignal(false);
        const [connectionErrored, setConnectionErrored] = createSignal(false);
        const connector = useContext(ConnectorContext);
        const unsubscribe = connector.onStatusChange(() => {}, () => {
          setConnectionErrored(true);
        });
        const universalLink = createMemo(() => connector.connect({
          universalLink: props.wallet.universalLink,
          bridgeUrl: props.wallet.bridgeUrl
        }, props.additionalRequest));
        const onClickTelegram = () => {
          const alwaysForceRedirect = true;
          setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
            openMethod: "universal-link"
          }));
          redirectToTelegram(universalLink(), {
            returnStrategy: appState.returnStrategy,
            twaReturnUrl: appState.twaReturnUrl,
            forceRedirect: alwaysForceRedirect
          });
        };
        const onRetry = () => {
          const currentUniversalLink = universalLink();
          if (isTelegramUrl(currentUniversalLink)) {
            return onClickTelegram();
          }
          setConnectionErrored(false);
          setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
            openMethod: "universal-link"
          }));
          openLinkBlank(addReturnStrategy(universalLink(), appState.returnStrategy));
        };
        const onOpenQR = () => {
          setConnectionErrored(false);
          setShowQR(true);
          setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
            openMethod: "qrcode"
          }));
        };
        const onCloseQR = () => {
          setShowQR(false);
          setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
            openMethod: "universal-link"
          }));
        };
        const onBack = () => {
          if (showQR()) {
            onCloseQR();
          } else {
            props.onBackClick();
          }
        };
        onCleanup(unsubscribe);
        onRetry();
        return createComponent(MobileConnectionModalStyled, {
          "data-tc-wallets-modal-connection-mobile": "true",
          get children() {
            return [createComponent(Show, {
              get when() {
                return !props.backDisabled || showQR();
              },
              get children() {
                return createComponent(StyledIconButton, {
                  icon: "arrow",
                  onClick: onBack
                });
              }
            }), createComponent(Show, {
              get when() {
                return showQR();
              },
              get children() {
                return createComponent(MobileConnectionQR, {
                  get universalLink() {
                    return universalLink();
                  },
                  get walletInfo() {
                    return props.wallet;
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return !showQR();
              },
              get children() {
                return [createComponent(H1Styled$4, {
                  get children() {
                    return props.wallet.name;
                  }
                }), createComponent(BodyStyled, {
                  get children() {
                    return [createComponent(Show, {
                      get when() {
                        return connectionErrored();
                      },
                      get children() {
                        return [createComponent(ErrorIconStyled, {
                          size: "s"
                        }), createComponent(BodyTextStyled, {
                          translationKey: "walletModal.mobileConnectionModal.connectionDeclined",
                          children: "Connection declined"
                        }), createComponent(ButtonsContainerStyled, {
                          get children() {
                            return [createComponent(Button, {
                              get leftIcon() {
                                return createComponent(RetryIcon, {});
                              },
                              onClick: onRetry,
                              get children() {
                                return createComponent(Translation, {
                                  translationKey: "common.retry",
                                  children: "Retry"
                                });
                              }
                            }), createComponent(Button, {
                              get leftIcon() {
                                return createComponent(QRIcon, {
                                  get fill() {
                                    return theme.colors.accent;
                                  }
                                });
                              },
                              onClick: onOpenQR,
                              get children() {
                                return createComponent(Translation, {
                                  translationKey: "walletModal.mobileConnectionModal.showQR",
                                  children: "Show QR Code"
                                });
                              }
                            })];
                          }
                        })];
                      }
                    }), createComponent(Show, {
                      get when() {
                        return !connectionErrored();
                      },
                      get children() {
                        return [createComponent(LoaderStyled, {
                          size: "s"
                        }), createComponent(BodyTextStyled, {
                          translationKey: "walletModal.mobileConnectionModal.continueIn",
                          get translationValues() {
                            return {
                              name: props.wallet.name
                            };
                          },
                          get children() {
                            return ["Continue in ", createMemo(() => props.wallet.name), "\u2026"];
                          }
                        }), createComponent(ButtonsContainerStyled, {
                          get children() {
                            return [createComponent(Button, {
                              get leftIcon() {
                                return createComponent(RetryIcon, {});
                              },
                              onClick: onRetry,
                              get children() {
                                return createComponent(Translation, {
                                  translationKey: "common.retry",
                                  children: "Retry"
                                });
                              }
                            }), createComponent(Button, {
                              get leftIcon() {
                                return createComponent(QRIcon, {
                                  get fill() {
                                    return theme.colors.accent;
                                  }
                                });
                              },
                              onClick: onOpenQR,
                              get children() {
                                return createComponent(Translation, {
                                  translationKey: "walletModal.mobileConnectionModal.showQR",
                                  children: "Show QR Code"
                                });
                              }
                            })];
                          }
                        })];
                      }
                    })];
                  }
                }), createComponent(FooterStyled, {
                  get children() {
                    return [createComponent(ImageStyled, {
                      get src() {
                        return props.wallet.imageUrl;
                      }
                    }), createComponent(H3, {
                      get children() {
                        return props.wallet.name;
                      }
                    }), createComponent(FooterButton, {
                      get href() {
                        return props.wallet.aboutUrl;
                      },
                      blank: true,
                      get children() {
                        return createComponent(Button, {
                          get children() {
                            return createComponent(Translation, {
                              translationKey: "common.get",
                              children: "GET"
                            });
                          }
                        });
                      }
                    })];
                  }
                })];
              }
            })];
          }
        });
      };
      const borders$1 = {
        m: "16px",
        s: "12px",
        none: "0"
      };
      const tgBorders = {
        m: "6px",
        s: "6px",
        none: "0"
      };
      const UlStyled = styled.ul`
    display: flex;
    justify-content: space-between;
    margin: 0 auto;
    width: fit-content;
    max-width: 100%;
    min-width: 100%;
    height: fit-content;
    overflow-x: auto;
    overflow-y: hidden;
    padding: 0 13px 24px;

    &&::-webkit-scrollbar {
        display: none;
    }

    -ms-overflow-style: none;
    scrollbar-width: none;

    > li {
        height: fit-content;
    }
`;
      const OtherOptionButton = styled.li`
    width: 82px;
    min-width: 82px;
    height: 124px;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 8px 4px;

    text-align: center;
    cursor: pointer;

    transition: transform 0.1s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
      const Divider = styled.div`
    width: 1px;
    margin: 0 10px;
    height: 24px;
    position: relative;
    top: 26px;

    background-color: ${props => props.theme.colors.icon.secondary};
    opacity: 0.2;
`;
      const IconContainer = styled.div`
    width: 60px;
    height: 60px;
    border-radius: ${props => borders$1[props.theme.borderRadius]};
    display: flex;
    align-items: center;
    justify-content: center;

    background-color: ${props => props.theme.colors.background.tint};
    margin-bottom: 8px;
`;
      const H1Styled$2 = styled(H1)`
    margin-top: 38px;
    margin-bottom: 4px;
    padding: 0 24px;
`;
      const H2Styled$2 = styled(H2)`
    margin-bottom: 24px;
    padding: 0 24px;
    min-height: 44px;
`;
      styled(Button)`
    display: block;
    margin: 0 auto;
`;
      const TelegramButtonStyled = styled(Button)`
    margin: 0 24px 24px;
    width: calc(100% - 48px);
    border-radius: ${props => borders$1[props.theme.borderRadius]};
    padding: 14px 16px 14px 14px;
    background-color: ${props => props.theme.colors.telegramButton};

    color: ${props => props.theme.colors.constant.white};
    font-weight: 590;
    font-size: 16px;
    line-height: 20px;
`;
      const TGImageStyled = styled(Image)`
    border-radius: ${props => tgBorders[props.theme.borderRadius]};
    width: 24px;
    height: 24px;
`;
      const StyledLeftActionButton = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
      const H1Styled$1 = styled(H1)`
    margin-bottom: 2px;
    padding: 0 64px;
`;
      const H2Styled$1 = styled(H2)`
    margin-bottom: 20px;
    padding: 0 64px;
`;
      const QrCodeWrapper = styled.div`
    padding: 0 24px 24px;
`;
      const MobileUniversalQR = props => {
        return [createComponent(H1Styled$1, {
          translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
          children: "Connect your wallet"
        }), createComponent(H2Styled$1, {
          translationKey: "walletModal.mobileUniversalModal.scan",
          children: "Scan with your mobile wallet"
        }), createComponent(QrCodeWrapper, {
          get children() {
            return createComponent(QRCode, {
              get imageUrl() {
                return IMG.TON;
              },
              get sourceUrl() {
                return addReturnStrategy(props.universalLink, "none");
              },
              disableCopy: true
            });
          }
        })];
      };
      const _tmpl$$1 = /* @__PURE__ */template$1(`<li></li>`),
        _tmpl$2 = /* @__PURE__ */template$1(`<div data-tc-wallets-modal-universal-mobile="true"></div>`);
      const MobileUniversalModal = props => {
        const [showQR, setShowQR] = createSignal(false);
        const [firstClick, setFirstClick] = createSignal(true);
        const connector = appState.connector;
        const walletsList = () => props.walletsList.filter(w => supportsMobile(w) && w.appName !== AT_WALLET_APP_NAME);
        const shouldShowMoreButton = () => walletsList().length > 7;
        const walletsBridges = () => [...new Set(props.walletsList.filter(isWalletInfoRemote).map(item => item.bridgeUrl)).values()].map(bridgeUrl => ({
          bridgeUrl
        }));
        const getUniversalLink = () => connector.connect(walletsBridges(), props.additionalRequest);
        setLastSelectedWalletInfo({
          openMethod: "universal-link"
        });
        const [isCopiedShown, setIsCopiedShown] = createSignal(void 0);
        const onCopy = () => __async(void 0, null, function* () {
          if (isCopiedShown() !== void 0) {
            clearTimeout(isCopiedShown());
          }
          yield copyToClipboard(getUniversalLink());
          const timeoutId = setTimeout(() => setIsCopiedShown(void 0), 1500);
          setIsCopiedShown(timeoutId);
        });
        const onSelectUniversal = () => {
          openLinkBlank(addReturnStrategy(getUniversalLink(), appState.returnStrategy));
        };
        const onSelectTelegram = () => {
          const atWallet = props.walletsList.find(wallet => wallet.appName === AT_WALLET_APP_NAME);
          if (!atWallet || !isWalletInfoRemote(atWallet)) {
            throw new TonConnectUIError("@wallet bot not found in the wallets list");
          }
          const walletLink = connector.connect({
            bridgeUrl: atWallet.bridgeUrl,
            universalLink: atWallet.universalLink
          }, props.additionalRequest);
          const forceRedirect = !firstClick();
          setFirstClick(false);
          redirectToTelegram(walletLink, {
            returnStrategy: appState.returnStrategy,
            twaReturnUrl: appState.twaReturnUrl,
            forceRedirect
          });
        };
        const onOpenQR = () => {
          setShowQR(true);
          setLastSelectedWalletInfo({
            openMethod: "qrcode"
          });
        };
        const onCloseQR = () => {
          setShowQR(false);
          setLastSelectedWalletInfo({
            openMethod: "universal-link"
          });
        };
        return (() => {
          const _el$ = _tmpl$2.cloneNode(true);
          insert(_el$, createComponent(Show, {
            get when() {
              return showQR();
            },
            get children() {
              return [createComponent(StyledLeftActionButton, {
                icon: "arrow",
                onClick: onCloseQR
              }), createComponent(MobileUniversalQR, {
                get universalLink() {
                  return getUniversalLink();
                }
              })];
            }
          }), null);
          insert(_el$, createComponent(Show, {
            get when() {
              return !showQR();
            },
            get children() {
              return [createComponent(StyledLeftActionButton, {
                get icon() {
                  return createComponent(QRIcon, {});
                },
                onClick: onOpenQR
              }), createComponent(H1Styled$2, {
                translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
                children: "Connect your wallet"
              }), createComponent(H2Styled$2, {
                translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegramOrSelect",
                children: "Open Wallet in Telegram or select your wallet to connect"
              }), createComponent(TelegramButtonStyled, {
                get leftIcon() {
                  return createComponent(AtWalletIcon, {});
                },
                get rightIcon() {
                  return createComponent(TGImageStyled, {
                    get src() {
                      return IMG.TG;
                    }
                  });
                },
                onClick: onSelectTelegram,
                scale: "s",
                get children() {
                  return createComponent(Translation, {
                    translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegram",
                    children: "Open Wallet in Telegram"
                  });
                }
              }), createComponent(UlStyled, {
                get children() {
                  return [createComponent(For, {
                    get each() {
                      return createMemo(() => !!shouldShowMoreButton())() ? walletsList().slice(0, 4) : walletsList();
                    },
                    children: wallet => (() => {
                      const _el$3 = _tmpl$$1.cloneNode(true);
                      insert(_el$3, createComponent(WalletItem, {
                        get icon() {
                          return wallet.imageUrl;
                        },
                        get name() {
                          return wallet.name;
                        },
                        onClick: () => props.onSelect(wallet)
                      }));
                      return _el$3;
                    })()
                  }), createComponent(Show, {
                    get when() {
                      return shouldShowMoreButton();
                    },
                    get children() {
                      const _el$2 = _tmpl$$1.cloneNode(true);
                      insert(_el$2, createComponent(FourWalletsItem, {
                        labelLine1: "View all",
                        labelLine2: "wallets",
                        get images() {
                          return walletsList().slice(3, 7).map(i2 => i2.imageUrl);
                        },
                        onClick: () => props.onSelectAllWallets()
                      }));
                      return _el$2;
                    }
                  }), createComponent(Divider, {
                    children: "\xA0"
                  }), createComponent(OtherOptionButton, {
                    onClick: onSelectUniversal,
                    get children() {
                      return [createComponent(IconContainer, {
                        get children() {
                          return createComponent(LongArrowIcon, {});
                        }
                      }), createComponent(Text, {
                        fontWeight: 590,
                        translationKey: "walletModal.mobileUniversalModal.openLink",
                        children: "Open Link"
                      })];
                    }
                  }), createComponent(OtherOptionButton, {
                    onClick: onCopy,
                    get children() {
                      return [createComponent(IconContainer, {
                        get children() {
                          return createMemo(() => isCopiedShown() !== void 0)() ? createComponent(DoneIcon, {}) : createComponent(CopyLightIcon, {});
                        }
                      }), createComponent(Text, {
                        fontWeight: 590,
                        get translationKey() {
                          return isCopiedShown() !== void 0 ? "common.copied" : "common.copyLink";
                        },
                        get children() {
                          return isCopiedShown() !== void 0 ? "Copied" : "Copy Link";
                        }
                      })];
                    }
                  })];
                }
              })];
            }
          }), null);
          return _el$;
        })();
      };
      const borders = {
        m: "16px",
        s: "8px",
        none: "0"
      };
      const hoverBorders = {
        m: "8px",
        s: "4px",
        none: "0"
      };
      const DesktopUniversalModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 16px;
`;
      const H2Styled = styled(H2)`
    max-width: 320px;
    margin-top: 2px;
    margin-bottom: 20px;
`;
      const H2AvailableWalletsStyled = styled(H2)`
    margin-bottom: 16px;
`;
      const QRCodeStyled = styled(QRCode)`
    margin-bottom: 24px;
`;
      const WalletsContainerStyled = styled.ul`
    display: flex;
`;
      styled.div`
    display: flex;
    gap: 16px;
    width: 100%;
`;
      styled(Button)`
    position: relative;
    font-size: 16px;
    line-height: 20px;
    width: 100%;
    padding: 0 16px;
    height: 56px;
    border-radius: ${props => borders[props.theme.borderRadius]};

    &:hover {
        ${props => props.disableEventsAnimation ? "transform: unset;" : ""}
    }

    &:active {
        ${props => props.disableEventsAnimation ? "transform: unset;" : ""}
    }
`;
      styled.ul`
    position: absolute;
    bottom: 100%;
    left: 0;
    margin: 0;
    padding: 8px;
    width: 188px;
    transform: translateY(-16px);

    background-color: ${props => props.theme.colors.background.primary};
    border-radius: ${props => borders[props.theme.borderRadius]};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
`;
      styled.li`
    padding: 8px;

    display: flex;
    align-items: center;
    gap: 8px;

    cursor: pointer;
    border-radius: ${props => hoverBorders[props.theme.borderRadius]};

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${props => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
      styled(Image)`
    width: 24px;
    height: 24px;

    border-radius: 6px;
`;
      styled.div`
    margin-top: 23px;
    margin-bottom: 1px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
`;
      styled(Text)`
    color: ${props => props.theme.colors.text.secondary};
    font-size: 16px;
`;
      const _tmpl$ = /* @__PURE__ */template$1(`<li></li>`);
      const DesktopUniversalModal = props => {
        const [popupOpened, setPopupOpened] = createSignal(false);
        const connector = appState.connector;
        const walletsBridges = () => [...new Set(props.walletsList.filter(isWalletInfoRemote).map(item => item.bridgeUrl)).values()].map(bridgeUrl => ({
          bridgeUrl
        }));
        setLastSelectedWalletInfo({
          openMethod: "qrcode"
        });
        const request = createMemo(() => connector.connect(walletsBridges(), props.additionalRequest));
        return createComponent(DesktopUniversalModalStyled, {
          onClick: () => setPopupOpened(false),
          "data-tc-wallets-modal-universal-desktop": "true",
          get children() {
            return [createComponent(H1, {
              translationKey: "walletModal.desktopUniversalModal.connectYourWallet",
              children: "Connect your wallet"
            }), createComponent(H2Styled, {
              translationKey: "walletModal.desktopUniversalModal.scan",
              children: "Scan with your mobile wallet"
            }), createComponent(QRCodeStyled, {
              get sourceUrl() {
                return addReturnStrategy(request(), "none");
              },
              get disableCopy() {
                return popupOpened();
              },
              get imageUrl() {
                return IMG.TON;
              }
            }), createComponent(H2AvailableWalletsStyled, {
              translationKey: "walletModal.desktopUniversalModal.availableWallets",
              children: "Available wallets"
            }), createComponent(WalletsContainerStyled, {
              get children() {
                return [createComponent(For, {
                  get each() {
                    return props.walletsList.slice(0, 3);
                  },
                  children: wallet => (() => {
                    const _el$ = _tmpl$.cloneNode(true);
                    insert(_el$, createComponent(WalletLabeledItem, {
                      wallet,
                      onClick: () => props.onSelect(wallet)
                    }));
                    return _el$;
                  })()
                }), createComponent(FourWalletsItem, {
                  labelLine1: "View all",
                  labelLine2: "wallets",
                  get images() {
                    return props.walletsList.slice(3, 7).map(i2 => i2.imageUrl);
                  },
                  onClick: () => props.onSelectAllWallets()
                })];
              }
            })];
          }
        });
      };
      const WalletsModal = () => {
        const {
          locale
        } = useI18n()[1];
        createEffect(() => locale(appState.language));
        createEffect(() => {
          if (getWalletsModalIsOpened()) {
            updateIsMobile();
          }
        });
        const connector = useContext(ConnectorContext);
        const tonConnectUI = useContext(TonConnectUiContext);
        const [fetchedWalletsList] = createResource(() => tonConnectUI.getWallets());
        const [selectedWalletInfo, setSelectedWalletInfo] = createSignal(null);
        const [selectedTab, setSelectedTab] = createSignal("universal");
        const [infoTab, setInfoTab] = createSignal(false);
        const walletsList = createMemo(() => {
          if (fetchedWalletsList.state !== "ready") {
            return null;
          }
          let walletsList2 = applyWalletsListConfiguration(fetchedWalletsList(), appState.walletsListConfiguration);
          const injectedWallets = walletsList2.filter(isWalletInfoCurrentlyInjected);
          const notInjectedWallets = walletsList2.filter(w => !isWalletInfoCurrentlyInjected(w));
          walletsList2 = (injectedWallets || []).concat(notInjectedWallets);
          const preferredWalletAppName = appState.preferredWalletAppName;
          const preferredWallet = walletsList2.find(item => eqWalletName(item, preferredWalletAppName));
          const someWalletsWithSameName = walletsList2.filter(item => eqWalletName(item, preferredWalletAppName)).length >= 2;
          if (preferredWalletAppName && preferredWallet && !someWalletsWithSameName) {
            walletsList2 = [__spreadProps(__spreadValues({}, preferredWallet), {
              isPreferred: true
            })].concat(walletsList2.filter(item => !eqWalletName(item, preferredWalletAppName)));
          }
          const atWallet = walletsList2.find(item => eqWalletName(item, AT_WALLET_APP_NAME));
          if (atWallet) {
            walletsList2 = [atWallet].concat(walletsList2.filter(item => !eqWalletName(item, AT_WALLET_APP_NAME)));
          }
          return walletsList2;
        });
        const additionalRequestLoading = () => {
          var _a2;
          return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
        };
        const additionalRequest = createMemo(() => {
          var _a2;
          if (additionalRequestLoading()) {
            return void 0;
          }
          return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
        });
        const onClose = closeReason => {
          setWalletsModalState({
            status: "closed",
            closeReason
          });
          setSelectedWalletInfo(null);
          setInfoTab(false);
        };
        const unsubscribe = connector.onStatusChange(wallet => {
          if (wallet) {
            onClose("wallet-selected");
          }
        });
        onCleanup(unsubscribe);
        return createComponent(StyledModal, {
          get opened() {
            return getWalletsModalIsOpened();
          },
          get enableAndroidBackHandler() {
            return appState.enableAndroidBackHandler;
          },
          onClose: () => onClose("action-cancelled"),
          onClickQuestion: () => setInfoTab(v => !v),
          "data-tc-wallets-modal-container": "true",
          get children() {
            return [createComponent(Show, {
              get when() {
                return infoTab();
              },
              get children() {
                return createComponent(InfoModal, {
                  onBackClick: () => setInfoTab(false)
                });
              }
            }), createComponent(Show, {
              get when() {
                return !infoTab();
              },
              get children() {
                return [createComponent(Show, {
                  get when() {
                    return additionalRequestLoading() || !walletsList();
                  },
                  get children() {
                    return [createComponent(H1Styled$8, {
                      translationKey: "walletModal.loading",
                      children: "Wallets list is loading"
                    }), createComponent(LoaderContainerStyled, {
                      get children() {
                        return createComponent(LoaderIcon, {
                          size: "m"
                        });
                      }
                    })];
                  }
                }), createComponent(Show, {
                  get when() {
                    return createMemo(() => !!!additionalRequestLoading())() && walletsList();
                  },
                  get children() {
                    return createComponent(Switch, {
                      get children() {
                        return [createComponent(Match, {
                          get when() {
                            return selectedWalletInfo();
                          },
                          get children() {
                            return createComponent(Dynamic, {
                              get component() {
                                return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
                              },
                              get wallet() {
                                return selectedWalletInfo();
                              },
                              get additionalRequest() {
                                return additionalRequest();
                              },
                              onBackClick: () => setSelectedWalletInfo(null)
                            });
                          }
                        }), createComponent(Match, {
                          get when() {
                            return selectedTab() === "universal";
                          },
                          get children() {
                            return createComponent(Dynamic, {
                              get component() {
                                return isMobile() ? MobileUniversalModal : DesktopUniversalModal;
                              },
                              onSelect: setSelectedWalletInfo,
                              get walletsList() {
                                return walletsList();
                              },
                              get additionalRequest() {
                                return additionalRequest();
                              },
                              onSelectAllWallets: () => setSelectedTab("all-wallets")
                            });
                          }
                        }), createComponent(Match, {
                          get when() {
                            return selectedTab() === "all-wallets";
                          },
                          get children() {
                            return createComponent(AllWalletsListModal, {
                              get walletsList() {
                                return walletsList();
                              },
                              onBack: () => setSelectedTab("universal"),
                              onSelect: setSelectedWalletInfo
                            });
                          }
                        })];
                      }
                    });
                  }
                })];
              }
            })];
          }
        });
      };
      const ActionModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 8px;
`;
      const H1Styled = styled(H1)`
    margin-top: 16px;
`;
      const TextStyled = styled(Text)`
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;
    text-align: center;
    max-width: 250px;

    color: ${props => props.theme.colors.text.secondary};
`;
      const ButtonStyled = styled(Button)`
    margin-top: 32px;
`;
      const ActionModal = props => {
        const dataAttrs = useDataAttributes(props);
        const tonConnectUI = useContext(TonConnectUiContext);
        const [firstClick, setFirstClick] = createSignal(true);
        let universalLink;
        if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && "universalLink" in tonConnectUI.wallet && (tonConnectUI.wallet.openMethod === "universal-link" || isTelegramUrl(tonConnectUI.wallet.universalLink) && isInTMA())) {
          universalLink = tonConnectUI.wallet.universalLink;
        }
        const onOpenWallet = () => {
          const currentAction = action();
          const returnStrategy = "returnStrategy" in currentAction ? currentAction.returnStrategy : appState.returnStrategy;
          if (isTelegramUrl(universalLink)) {
            const forceRedirect = !firstClick();
            setFirstClick(false);
            redirectToTelegram(universalLink, {
              returnStrategy,
              twaReturnUrl: "twaReturnUrl" in currentAction ? currentAction.twaReturnUrl : appState.twaReturnUrl,
              forceRedirect
            });
          } else {
            openLinkBlank(addReturnStrategy(universalLink, returnStrategy));
          }
        };
        return createComponent(ActionModalStyled, mergeProps(dataAttrs, {
          get children() {
            return [createMemo(() => props.icon), createComponent(H1Styled, {
              get translationKey() {
                return props.headerTranslationKey;
              },
              get translationValues() {
                return props.headerTranslationValues;
              }
            }), createComponent(TextStyled, {
              get translationKey() {
                return props.textTranslationKey;
              },
              get translationValues() {
                return props.textTranslationValues;
              }
            }), createComponent(Show, {
              get when() {
                return props.showButton !== "open-wallet";
              },
              get children() {
                return createComponent(ButtonStyled, {
                  onClick: () => props.onClose(),
                  get children() {
                    return createComponent(Translation, {
                      translationKey: "common.close",
                      children: "Close"
                    });
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return props.showButton === "open-wallet" && universalLink;
              },
              get children() {
                return createComponent(ButtonStyled, {
                  onClick: onOpenWallet,
                  get children() {
                    return createComponent(Translation, {
                      translationKey: "common.openWallet",
                      children: "Open wallet"
                    });
                  }
                });
              }
            })];
          }
        }));
      };
      const ConfirmTransactionModal = props => {
        const tonConnectUI = useContext(TonConnectUiContext);
        const [t2] = useI18n();
        const name = () => tonConnectUI.wallet && "name" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2("common.yourWallet", {}, "Your wallet");
        return createComponent(ActionModal, {
          headerTranslationKey: "actionModal.confirmTransaction.header",
          get headerTranslationValues() {
            return {
              name: name()
            };
          },
          textTranslationKey: "actionModal.confirmTransaction.text",
          get icon() {
            return createComponent(LoaderIcon, {
              size: "m"
            });
          },
          onClose: () => props.onClose(),
          showButton: "open-wallet",
          "data-tc-confirm-modal": "true"
        });
      };
      const TransactionCanceledModal = props => {
        return createComponent(ActionModal, {
          headerTranslationKey: "actionModal.transactionCanceled.header",
          textTranslationKey: "actionModal.transactionCanceled.text",
          get icon() {
            return createComponent(ErrorIcon, {
              size: "m"
            });
          },
          onClose: () => props.onClose(),
          "data-tc-transaction-canceled-modal": "true"
        });
      };
      const TransactionSentModal = props => {
        return createComponent(ActionModal, {
          headerTranslationKey: "actionModal.transactionSent.header",
          textTranslationKey: "actionModal.transactionSent.text",
          get icon() {
            return createComponent(SuccessIcon, {
              size: "m"
            });
          },
          onClose: () => props.onClose(),
          "data-tc-transaction-sent-modal": "true"
        });
      };
      const ActionsModal = () => {
        return createComponent(Modal, {
          get opened() {
            var _a2;
            return createMemo(() => action() !== null)() && ((_a2 = action()) == null ? void 0 : _a2.openModal) === true;
          },
          get enableAndroidBackHandler() {
            return appState.enableAndroidBackHandler;
          },
          onClose: () => setAction(null),
          "data-tc-actions-modal-container": "true",
          get children() {
            return createComponent(Switch, {
              get children() {
                return [createComponent(Match, {
                  get when() {
                    return action().name === "transaction-sent";
                  },
                  get children() {
                    return createComponent(TransactionSentModal, {
                      onClose: () => setAction(null)
                    });
                  }
                }), createComponent(Match, {
                  get when() {
                    return action().name === "transaction-canceled";
                  },
                  get children() {
                    return createComponent(TransactionCanceledModal, {
                      onClose: () => setAction(null)
                    });
                  }
                }), createComponent(Match, {
                  get when() {
                    return action().name === "confirm-transaction";
                  },
                  get children() {
                    return createComponent(ConfirmTransactionModal, {
                      onClose: () => setAction(null)
                    });
                  }
                })];
              }
            });
          }
        });
      };
      const SingleWalletModal = () => {
        const {
          locale
        } = useI18n()[1];
        createEffect(() => locale(appState.language));
        createEffect(() => {
          if (getSingleWalletModalIsOpened()) {
            updateIsMobile();
          }
        });
        const connector = useContext(ConnectorContext);
        const [infoTab, setInfoTab] = createSignal(false);
        const additionalRequestLoading = () => {
          var _a2;
          return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
        };
        const additionalRequest = createMemo(() => {
          var _a2;
          if (additionalRequestLoading()) {
            return void 0;
          }
          return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
        });
        const onClose = closeReason => {
          setSingleWalletModalState({
            status: "closed",
            closeReason
          });
          setInfoTab(false);
        };
        const unsubscribe = connector.onStatusChange(wallet => {
          if (wallet) {
            onClose("wallet-selected");
          }
        });
        onCleanup(unsubscribe);
        return createComponent(StyledModal, {
          get opened() {
            return getSingleWalletModalIsOpened();
          },
          get enableAndroidBackHandler() {
            return appState.enableAndroidBackHandler;
          },
          onClose: () => onClose("action-cancelled"),
          onClickQuestion: () => setInfoTab(v => !v),
          "data-tc-wallets-modal-container": "true",
          get children() {
            return [createComponent(Show, {
              get when() {
                return infoTab();
              },
              get children() {
                return createComponent(InfoModal, {
                  onBackClick: () => setInfoTab(false)
                });
              }
            }), createComponent(Show, {
              get when() {
                return !infoTab();
              },
              get children() {
                return [createComponent(Show, {
                  get when() {
                    return additionalRequestLoading();
                  },
                  get children() {
                    return [createComponent(H1Styled$8, {
                      translationKey: "walletModal.loading",
                      children: "Wallets list is loading"
                    }), createComponent(LoaderContainerStyled, {
                      get children() {
                        return createComponent(LoaderIcon, {
                          size: "m"
                        });
                      }
                    })];
                  }
                }), createComponent(Show, {
                  get when() {
                    return !additionalRequestLoading();
                  },
                  get children() {
                    return createComponent(Dynamic, {
                      get component() {
                        return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
                      },
                      get wallet() {
                        return getSingleWalletModalWalletInfo();
                      },
                      get additionalRequest() {
                        return additionalRequest();
                      },
                      onBackClick: () => {},
                      backDisabled: true
                    });
                  }
                })];
              }
            })];
          }
        });
      };
      const App = props => {
        const translations = createI18nContext(i18nDictionary, appState.language);
        defineStylesRoot();
        fixMobileSafariActiveTransition();
        return createComponent(I18nContext.Provider, {
          value: translations,
          get children() {
            return createComponent(TonConnectUiContext.Provider, {
              get value() {
                return props.tonConnectUI;
              },
              get children() {
                return createComponent(ConnectorContext.Provider, {
                  get value() {
                    return appState.connector;
                  },
                  get children() {
                    return [createComponent(GlobalStyles, {}), createComponent(ThemeProvider, {
                      theme: themeState,
                      get children() {
                        return [createComponent(Show, {
                          get when() {
                            return appState.buttonRootId;
                          },
                          get children() {
                            return createComponent(Portal, {
                              get mount() {
                                return document.getElementById(appState.buttonRootId);
                              },
                              get children() {
                                return createComponent(AccountButton, {});
                              }
                            });
                          }
                        }), createComponent(Dynamic, {
                          component: globalStylesTag,
                          get children() {
                            return [createComponent(WalletsModal, {}), createComponent(SingleWalletModal, {}), createComponent(ActionsModal, {})];
                          }
                        })];
                      }
                    })];
                  }
                });
              }
            });
          }
        });
      };
      const widgetController = {
        openWalletsModal: () => void setTimeout(() => setWalletsModalState({
          status: "opened",
          closeReason: null
        })),
        closeWalletsModal: reason => void setTimeout(() => setWalletsModalState({
          status: "closed",
          closeReason: reason
        })),
        openSingleWalletModal: walletInfo => {
          void setTimeout(() => setSingleWalletModalState({
            status: "opened",
            closeReason: null,
            walletInfo
          }));
        },
        closeSingleWalletModal: reason => void setTimeout(() => setSingleWalletModalState({
          status: "closed",
          closeReason: reason
        })),
        setAction: action2 => void setTimeout(() => setAction(action2)),
        clearAction: () => void setTimeout(() => setAction(null)),
        getSelectedWalletInfo: () => lastSelectedWalletInfo(),
        removeSelectedWalletInfo: () => setLastSelectedWalletInfo(null),
        renderApp: (root, tonConnectUI) => render(() => createComponent(App, {
          tonConnectUI
        }), document.getElementById(root))
      };
      class WalletsModalManager {
        constructor(options) {
          __publicField(this, "connector");
          __publicField(this, "setConnectRequestParametersCallback");
          __publicField(this, "consumers", []);
          __publicField(this, "state", walletsModalState());
          this.connector = options.connector;
          this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
          createEffect(() => {
            const state = walletsModalState();
            this.state = state;
            this.consumers.forEach(consumer => consumer(state));
          });
        }
        open() {
          return __async(this, null, function* () {
            const walletsList = yield this.connector.getWallets();
            const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
            if (embeddedWallet) {
              return this.connectEmbeddedWallet(embeddedWallet);
            } else {
              return this.openWalletsModal();
            }
          });
        }
        close() {
          widgetController.closeWalletsModal("action-cancelled");
        }
        onStateChange(onChange) {
          this.consumers.push(onChange);
          return () => {
            this.consumers = this.consumers.filter(consumer => consumer !== onChange);
          };
        }
        connectEmbeddedWallet(embeddedWallet) {
          const connect = parameters => {
            setLastSelectedWalletInfo(embeddedWallet);
            this.connector.connect({
              jsBridgeKey: embeddedWallet.jsBridgeKey
            }, parameters);
          };
          const additionalRequest = appState.connectRequestParameters;
          if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
            this.setConnectRequestParametersCallback(connect);
          } else {
            connect(additionalRequest == null ? void 0 : additionalRequest.value);
          }
        }
        openWalletsModal() {
          return __async(this, null, function* () {
            if (isInTMA()) {
              sendExpand();
            }
            widgetController.openWalletsModal();
            return new Promise(resolve => {
              const unsubscribe = this.onStateChange(state => {
                const {
                  status
                } = state;
                if (status === "opened") {
                  unsubscribe();
                  resolve();
                }
              });
            });
          });
        }
      }
      class TransactionModalManager {
        constructor(options) {
          __publicField(this, "connector");
          __publicField(this, "consumers", []);
          this.connector = options.connector;
          createEffect(() => {
            const _ = action();
            this.consumers.forEach(consumer => consumer(_));
          });
        }
        onStateChange(consumer) {
          this.consumers.push(consumer);
          return () => {
            this.consumers = this.consumers.filter(c2 => c2 !== consumer);
          };
        }
      }
      class SingleWalletModalManager {
        constructor(options) {
          __publicField(this, "connector");
          __publicField(this, "setConnectRequestParametersCallback");
          __publicField(this, "consumers", []);
          __publicField(this, "state", singleWalletModalState());
          this.connector = options.connector;
          this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
          createEffect(() => {
            const state = singleWalletModalState();
            this.state = state;
            this.consumers.forEach(consumer => consumer(state));
          });
        }
        open(wallet) {
          return __async(this, null, function* () {
            const fetchedWalletsList = yield this.connector.getWallets();
            const walletsList = applyWalletsListConfiguration(fetchedWalletsList, appState.walletsListConfiguration);
            const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
            const isEmbeddedWalletExist = !!embeddedWallet;
            if (isEmbeddedWalletExist) {
              return this.connectEmbeddedWallet(embeddedWallet);
            }
            const externalWallets = walletsList.filter(isWalletInfoRemote);
            const externalWallet = externalWallets.find(walletInfo => eqWalletName(walletInfo, wallet));
            const isExternalWalletExist = !!externalWallet;
            if (isExternalWalletExist) {
              return this.openSingleWalletModal(externalWallet);
            }
            throw new TonConnectUIError(`Trying to open modal window with unknown wallet "${wallet}".`);
          });
        }
        close() {
          widgetController.closeSingleWalletModal("action-cancelled");
        }
        onStateChange(onChange) {
          this.consumers.push(onChange);
          return () => {
            this.consumers = this.consumers.filter(consumer => consumer !== onChange);
          };
        }
        connectEmbeddedWallet(embeddedWallet) {
          const connect = parameters => {
            setLastSelectedWalletInfo(embeddedWallet);
            this.connector.connect({
              jsBridgeKey: embeddedWallet.jsBridgeKey
            }, parameters);
          };
          const additionalRequest = appState.connectRequestParameters;
          if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
            this.setConnectRequestParametersCallback(connect);
          } else {
            connect(additionalRequest == null ? void 0 : additionalRequest.value);
          }
        }
        openSingleWalletModal(wallet) {
          return __async(this, null, function* () {
            if (isInTMA()) {
              sendExpand();
            }
            widgetController.openSingleWalletModal(wallet);
            return new Promise(resolve => {
              const unsubscribe = this.onStateChange(state => {
                const {
                  status
                } = state;
                if (status === "opened") {
                  unsubscribe();
                  resolve();
                }
              });
            });
          });
        }
      }
      class TonConnectUI {
        constructor(options) {
          __publicField(this, "walletInfoStorage", new WalletInfoStorage());
          __publicField(this, "preferredWalletStorage", new PreferredWalletStorage());
          __publicField(this, "walletInfo", null);
          __publicField(this, "systemThemeChangeUnsubscribe", null);
          __publicField(this, "actionsConfiguration");
          __publicField(this, "walletsList");
          __publicField(this, "connectRequestParametersCallback");
          __publicField(this, "connector");
          __publicField(this, "modal");
          __publicField(this, "singleWalletModal");
          __publicField(this, "transactionModal");
          __publicField(this, "connectionRestored", Promise.resolve(false));
          if (options && "connector" in options && options.connector) {
            this.connector = options.connector;
          } else if (options && "manifestUrl" in options && options.manifestUrl) {
            this.connector = new TonConnect({
              manifestUrl: options.manifestUrl
            });
          } else {
            throw new TonConnectUIError("You have to specify a `manifestUrl` or a `connector` in the options.");
          }
          this.modal = new WalletsModalManager({
            connector: this.connector,
            setConnectRequestParametersCallback: callback => {
              this.connectRequestParametersCallback = callback;
            }
          });
          this.singleWalletModal = new SingleWalletModalManager({
            connector: this.connector,
            setConnectRequestParametersCallback: callback => {
              this.connectRequestParametersCallback = callback;
            }
          });
          this.transactionModal = new TransactionModalManager({
            connector: this.connector
          });
          this.walletsList = this.getWallets();
          this.walletsList.then(list => preloadImages(uniq(list.map(item => item.imageUrl))));
          const rootId = this.normalizeWidgetRoot(options == null ? void 0 : options.widgetRootId);
          this.subscribeToWalletChange();
          if ((options == null ? void 0 : options.restoreConnection) !== false) {
            this.connectionRestored = new Promise(resolve => __async(this, null, function* () {
              yield this.connector.restoreConnection();
              if (!this.connector.connected) {
                this.walletInfoStorage.removeWalletInfo();
              }
              resolve(this.connector.connected);
            }));
          }
          this.uiOptions = mergeOptions(options, {
            uiPreferences: {
              theme: "SYSTEM"
            }
          });
          const preferredWalletName = this.preferredWalletStorage.getPreferredWalletAppName();
          setAppState({
            connector: this.connector,
            preferredWalletAppName: preferredWalletName
          });
          widgetController.renderApp(rootId, this);
        }
        static getWallets() {
          return TonConnect.getWallets();
        }
        get connected() {
          return this.connector.connected;
        }
        get account() {
          return this.connector.account;
        }
        get wallet() {
          if (!this.connector.wallet) {
            return null;
          }
          return __spreadValues(__spreadValues({}, this.connector.wallet), this.walletInfo);
        }
        set uiOptions(options) {
          var _a2, _b2, _c2, _d2, _e2;
          this.checkButtonRootExist(options.buttonRootId);
          this.actionsConfiguration = options.actionsConfiguration;
          if ((_a2 = options.uiPreferences) == null ? void 0 : _a2.theme) {
            if (((_b2 = options.uiPreferences) == null ? void 0 : _b2.theme) !== "SYSTEM") {
              (_c2 = this.systemThemeChangeUnsubscribe) == null ? void 0 : _c2.call(this);
              setTheme(options.uiPreferences.theme, options.uiPreferences.colorsSet);
            } else {
              setTheme(getSystemTheme(), options.uiPreferences.colorsSet);
              if (!this.systemThemeChangeUnsubscribe) {
                this.systemThemeChangeUnsubscribe = subscribeToThemeChange(setTheme);
              }
            }
          } else {
            if ((_d2 = options.uiPreferences) == null ? void 0 : _d2.colorsSet) {
              setColors(options.uiPreferences.colorsSet);
            }
          }
          if ((_e2 = options.uiPreferences) == null ? void 0 : _e2.borderRadius) {
            setBorderRadius(options.uiPreferences.borderRadius);
          }
          setAppState(state => {
            var _a3, _b3;
            const merged = mergeOptions(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, options.language && {
              language: options.language
            }), !!((_a3 = options.actionsConfiguration) == null ? void 0 : _a3.returnStrategy) && {
              returnStrategy: options.actionsConfiguration.returnStrategy
            }), !!((_b3 = options.actionsConfiguration) == null ? void 0 : _b3.twaReturnUrl) && {
              twaReturnUrl: options.actionsConfiguration.twaReturnUrl
            }), !!options.walletsListConfiguration && {
              walletsListConfiguration: options.walletsListConfiguration
            }), unwrap(state));
            if (options.buttonRootId !== void 0) {
              merged.buttonRootId = options.buttonRootId;
            }
            if (options.enableAndroidBackHandler !== void 0) {
              merged.enableAndroidBackHandler = options.enableAndroidBackHandler;
            }
            return merged;
          });
        }
        setConnectRequestParameters(connectRequestParameters) {
          var _a2;
          setAppState({
            connectRequestParameters
          });
          if ((connectRequestParameters == null ? void 0 : connectRequestParameters.state) === "ready" || !connectRequestParameters) {
            (_a2 = this.connectRequestParametersCallback) == null ? void 0 : _a2.call(this, connectRequestParameters == null ? void 0 : connectRequestParameters.value);
          }
        }
        getWallets() {
          return __async(this, null, function* () {
            return this.connector.getWallets();
          });
        }
        onStatusChange(callback, errorsHandler) {
          return this.connector.onStatusChange(wallet => __async(this, null, function* () {
            if (wallet) {
              const lastSelectedWalletInfo2 = yield this.getSelectedWalletInfo(wallet);
              callback(__spreadValues(__spreadValues({}, wallet), lastSelectedWalletInfo2 || this.walletInfoStorage.getWalletInfo()));
            } else {
              callback(wallet);
            }
          }), errorsHandler);
        }
        openModal() {
          return __async(this, null, function* () {
            return this.modal.open();
          });
        }
        closeModal() {
          this.modal.close();
        }
        onModalStateChange(onChange) {
          return this.modal.onStateChange(onChange);
        }
        get modalState() {
          return this.modal.state;
        }
        openSingleWalletModal(wallet) {
          return __async(this, null, function* () {
            return this.singleWalletModal.open(wallet);
          });
        }
        closeSingleWalletModal() {
          this.singleWalletModal.close();
        }
        onSingleWalletModalStateChange(onChange) {
          return this.singleWalletModal.onStateChange(onChange);
        }
        get singleWalletModalState() {
          return this.singleWalletModal.state;
        }
        connectWallet() {
          return __async(this, null, function* () {
            const walletsList = yield this.getWallets();
            const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
            if (embeddedWallet) {
              return yield this.connectEmbeddedWallet(embeddedWallet);
            } else {
              return yield this.connectExternalWallet();
            }
          });
        }
        disconnect() {
          widgetController.clearAction();
          widgetController.removeSelectedWalletInfo();
          this.walletInfoStorage.removeWalletInfo();
          return this.connector.disconnect();
        }
        sendTransaction(tx, options) {
          return __async(this, null, function* () {
            if (!this.connected) {
              throw new TonConnectUIError("Connect wallet to send a transaction.");
            }
            if (isInTMA()) {
              sendExpand();
            }
            const {
              notifications: notifications2,
              modals,
              returnStrategy,
              twaReturnUrl,
              skipRedirectToWallet
            } = this.getModalsAndNotificationsConfiguration(options);
            widgetController.setAction({
              name: "confirm-transaction",
              showNotification: notifications2.includes("before"),
              openModal: modals.includes("before")
            });
            const onRequestSent = () => {
              const userOSIsIos = getUserAgent().os === "ios";
              const shouldSkipRedirectToWallet = skipRedirectToWallet === "ios" && userOSIsIos || skipRedirectToWallet === "always";
              if (this.walletInfo && "universalLink" in this.walletInfo && this.walletInfo.openMethod === "universal-link" && !shouldSkipRedirectToWallet) {
                if (isTelegramUrl(this.walletInfo.universalLink)) {
                  redirectToTelegram(this.walletInfo.universalLink, {
                    returnStrategy,
                    twaReturnUrl: twaReturnUrl || appState.twaReturnUrl,
                    forceRedirect: false
                  });
                } else {
                  openLinkBlank(addReturnStrategy(this.walletInfo.universalLink, returnStrategy));
                }
              }
            };
            const abortController = new AbortController();
            const unsubscribe = this.onTransactionModalStateChange(action2 => {
              if (action2 == null ? void 0 : action2.openModal) {
                return;
              }
              unsubscribe();
              if (!action2) {
                abortController.abort();
              }
            });
            try {
              const result = yield this.waitForSendTransaction({
                transaction: tx,
                abortSignal: abortController.signal
              }, onRequestSent);
              widgetController.setAction({
                name: "transaction-sent",
                showNotification: notifications2.includes("success"),
                openModal: modals.includes("success")
              });
              return result;
            } catch (e2) {
              widgetController.setAction({
                name: "transaction-canceled",
                showNotification: notifications2.includes("error"),
                openModal: modals.includes("error")
              });
              if (e2 instanceof TonConnectError) {
                throw e2;
              } else {
                console.error(e2);
                throw new TonConnectUIError("Unhandled error:" + e2);
              }
            } finally {
              unsubscribe();
            }
          });
        }
        connectEmbeddedWallet(embeddedWallet) {
          return __async(this, null, function* () {
            const connect = parameters => {
              setLastSelectedWalletInfo(embeddedWallet);
              this.connector.connect({
                jsBridgeKey: embeddedWallet.jsBridgeKey
              }, parameters);
            };
            const additionalRequest = appState.connectRequestParameters;
            if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
              this.connectRequestParametersCallback = connect;
            } else {
              connect(additionalRequest == null ? void 0 : additionalRequest.value);
            }
            return yield this.waitForWalletConnection({
              ignoreErrors: false
            });
          });
        }
        connectExternalWallet() {
          return __async(this, null, function* () {
            const abortController = new AbortController();
            widgetController.openWalletsModal();
            const unsubscribe = this.onModalStateChange(state => {
              const {
                status,
                closeReason
              } = state;
              if (status === "opened") {
                return;
              }
              unsubscribe();
              if (closeReason === "action-cancelled") {
                abortController.abort();
              }
            });
            return yield this.waitForWalletConnection({
              ignoreErrors: true,
              abortSignal: abortController.signal
            });
          });
        }
        waitForWalletConnection(options) {
          return __async(this, null, function* () {
            return new Promise((resolve, reject) => {
              const {
                ignoreErrors = false,
                abortSignal = null
              } = options;
              if (abortSignal && abortSignal.aborted) {
                return reject(new TonConnectUIError("Wallet was not connected"));
              }
              const onStatusChangeHandler = wallet => __async(this, null, function* () {
                if (!wallet) {
                  if (ignoreErrors) {
                    return;
                  }
                  unsubscribe();
                  reject(new TonConnectUIError("Wallet was not connected"));
                } else {
                  unsubscribe();
                  resolve(wallet);
                }
              });
              const onErrorsHandler = reason => {
                if (ignoreErrors) {
                  return;
                }
                unsubscribe();
                reject(reason);
              };
              const unsubscribe = this.onStatusChange(wallet => onStatusChangeHandler(wallet), reason => onErrorsHandler(reason));
              if (abortSignal) {
                abortSignal.addEventListener("abort", () => {
                  unsubscribe();
                  reject(new TonConnectUIError("Wallet was not connected"));
                });
              }
            });
          });
        }
        waitForSendTransaction(options, onRequestSent) {
          return __async(this, null, function* () {
            return new Promise((resolve, reject) => {
              const {
                transaction,
                abortSignal
              } = options;
              if (abortSignal.aborted) {
                return reject(new TonConnectUIError("Transaction was not sent"));
              }
              const onTransactionHandler = transaction2 => __async(this, null, function* () {
                resolve(transaction2);
              });
              const onErrorsHandler = reason => {
                reject(reason);
              };
              this.connector.sendTransaction(transaction, onRequestSent).then(result => onTransactionHandler(result)).catch(reason => onErrorsHandler(reason));
              abortSignal.addEventListener("abort", () => {
                reject(new TonConnectUIError("Transaction was not sent"));
              });
            });
          });
        }
        onTransactionModalStateChange(onChange) {
          return this.transactionModal.onStateChange(onChange);
        }
        subscribeToWalletChange() {
          this.connector.onStatusChange(wallet => __async(this, null, function* () {
            var _a2;
            if (wallet) {
              yield this.updateWalletInfo(wallet);
              this.setPreferredWalletAppName(((_a2 = this.walletInfo) == null ? void 0 : _a2.appName) || wallet.device.appName);
            } else {
              this.walletInfoStorage.removeWalletInfo();
            }
          }));
        }
        setPreferredWalletAppName(value) {
          this.preferredWalletStorage.setPreferredWalletAppName(value);
          setAppState({
            preferredWalletAppName: value
          });
        }
        getSelectedWalletInfo(wallet) {
          return __async(this, null, function* () {
            let lastSelectedWalletInfo2 = widgetController.getSelectedWalletInfo();
            if (!lastSelectedWalletInfo2) {
              return null;
            }
            let fullLastSelectedWalletInfo;
            if (!("name" in lastSelectedWalletInfo2)) {
              const walletsList = applyWalletsListConfiguration(yield this.walletsList, appState.walletsListConfiguration);
              const walletInfo = walletsList.find(item => eqWalletName(item, wallet.device.appName));
              if (!walletInfo) {
                throw new TonConnectUIError(`Cannot find WalletInfo for the '${wallet.device.appName}' wallet`);
              }
              fullLastSelectedWalletInfo = __spreadValues(__spreadValues({}, walletInfo), lastSelectedWalletInfo2);
            } else {
              fullLastSelectedWalletInfo = lastSelectedWalletInfo2;
            }
            return fullLastSelectedWalletInfo;
          });
        }
        updateWalletInfo(wallet) {
          return __async(this, null, function* () {
            const selectedWalletInfo = yield this.getSelectedWalletInfo(wallet);
            if (selectedWalletInfo) {
              this.walletInfo = selectedWalletInfo;
              this.walletInfoStorage.setWalletInfo(selectedWalletInfo);
              return;
            }
            const storedWalletInfo = this.walletInfoStorage.getWalletInfo();
            if (storedWalletInfo) {
              this.walletInfo = storedWalletInfo;
              return;
            }
            this.walletInfo = (yield this.walletsList).find(walletInfo => eqWalletName(walletInfo, wallet.device.appName)) || null;
          });
        }
        normalizeWidgetRoot(rootId) {
          if (!rootId || !document.getElementById(rootId)) {
            rootId = "tc-widget-root";
            const rootElement = document.createElement("div");
            rootElement.id = rootId;
            document.body.appendChild(rootElement);
          }
          return rootId;
        }
        checkButtonRootExist(buttonRootId) {
          if (buttonRootId == null) {
            return;
          }
          if (!document.getElementById(buttonRootId)) {
            throw new TonConnectUIError(`${buttonRootId} element not found in the document.`);
          }
        }
        getModalsAndNotificationsConfiguration(options) {
          var _a2, _b2, _c2, _d2, _e2, _f2;
          const allActions = ["before", "success", "error"];
          let notifications2 = allActions;
          if (((_a2 = this.actionsConfiguration) == null ? void 0 : _a2.notifications) && ((_b2 = this.actionsConfiguration) == null ? void 0 : _b2.notifications) !== "all") {
            notifications2 = this.actionsConfiguration.notifications;
          }
          if (options == null ? void 0 : options.notifications) {
            if (options.notifications === "all") {
              notifications2 = allActions;
            } else {
              notifications2 = options.notifications;
            }
          }
          let modals = ["before"];
          if ((_c2 = this.actionsConfiguration) == null ? void 0 : _c2.modals) {
            if (this.actionsConfiguration.modals === "all") {
              modals = allActions;
            } else {
              modals = this.actionsConfiguration.modals;
            }
          }
          if (options == null ? void 0 : options.modals) {
            if (options.modals === "all") {
              modals = allActions;
            } else {
              modals = options.modals;
            }
          }
          const returnStrategy = (options == null ? void 0 : options.returnStrategy) || ((_d2 = this.actionsConfiguration) == null ? void 0 : _d2.returnStrategy) || "back";
          const twaReturnUrl = (options == null ? void 0 : options.twaReturnUrl) || ((_e2 = this.actionsConfiguration) == null ? void 0 : _e2.twaReturnUrl);
          let skipRedirectToWallet = (options == null ? void 0 : options.skipRedirectToWallet) || ((_f2 = this.actionsConfiguration) == null ? void 0 : _f2.skipRedirectToWallet) || "ios";
          if (isInTMA()) {
            skipRedirectToWallet = "never";
          }
          return {
            notifications: notifications2,
            modals,
            returnStrategy,
            twaReturnUrl,
            skipRedirectToWallet
          };
        }
      } // EXTERNAL MODULE: ../../node_modules/@orbs-network/ton-access/lib/index.js
      var lib = __webpack_require__(9726);
      class TonClient4 extends dist /* ExtendedTonClient4 */.Ec {}
      class TonConnectSender {
        constructor(provider) {
          this.provider = void 0;
          this.address = void 0;
          this.provider = provider;
          if (provider.wallet) {
            this.address = core_dist.Address.parse(provider.wallet?.account.address);
          }
        }
        async send(args) {
          if (!(args.sendMode === undefined || args.sendMode == core_dist.SendMode.PAY_GAS_SEPARATELY)) {
            throw new Error('Deployer sender does not support `sendMode` other than `PAY_GAS_SEPARATELY`.');
          }
          const message = {
            address: args.to.toString(),
            amount: args.value.toString()
          };
          if (args.body != null) {
            message.payload = args.body?.toBoc().toString('base64');
          }
          if (args.init != null) {
            message.stateInit = (0, core_dist.beginCell)().storeWritable((0, core_dist.storeStateInit)(args.init)).endCell().toBoc().toString('base64');
          }
          await this.provider.sendTransaction({
            validUntil: Date.now() + 5 * 60 * 1000,
            messages: [message]
          });
        }
      }
      class GameFiBase {
        constructor(params) {
          this.walletConnector = void 0;
          this.assetsSdk = void 0;
          this.merchant = void 0;
          this.walletConnector = params.walletConnector;
          this.assetsSdk = params.assetsSdk;
          if (params.merchant != null) {
            this.merchant = params.merchant;
          }
        }
        get wallet() {
          if (this.walletConnector.wallet == null) {
            throw new Error('Connect a wallet before using it.');
          }
          return this.walletConnector.wallet;
        }
        get walletAccount() {
          return this.wallet.account;
        }
        get walletAddress() {
          return core_dist.Address.parseRaw(this.wallet.account.address);
        }
        get merchantAddress() {
          if (this.merchant == null || this.merchant.tonAddress == null) {
            throw new Error('To make payments with TON pass "merchant.tonAddress" parameter to "GameFi.create" method.');
          }
          return this.merchant.tonAddress;
        }
        get merchantJettonAddress() {
          if (this.merchant == null || this.merchant.jettonAddress == null) {
            throw new Error('To make payments with jetton pass "merchant.jettonAddress" parameter to "GameFi.create" method.');
          }
          return this.merchant.jettonAddress;
        }
        async buyWithTon(params) {
          this.transferTon({
            ...params,
            to: this.merchantAddress
          });
        }
        async transferTon(params) {
          if (this.assetsSdk.sender == null) {
            throw new Error('Sender is not configured.');
          }
          return this.assetsSdk.sender.send({
            to: params.to,
            value: params.amount,
            body: params.comment ? this.createMessagePayload(params.comment) : null
          });
        }
        async buyWithJetton(params) {
          this.transferJetton({
            ...params,
            to: this.merchantAddress
          });
        }
        async transferJetton(params) {
          const jetton = this.assetsSdk.openJetton(this.merchantJettonAddress);
          const jettonWallet = await jetton.getWallet(this.walletAddress);
          const message = {
            amount: params.amount,
            to: params.to,
            responseDestination: this.walletAddress
          };
          if (params.customPayload != null) {
            message.customPayload = this.createMessagePayload(params.customPayload);
          }
          if (params.forwardAmount != null) {
            message.forwardAmount = params.forwardAmount;
          }
          if (params.forwardPayload != null) {
            message.forwardPayload = this.createMessagePayload(params.forwardPayload);
          }
          return jettonWallet.sendTransfer(message);
        }
        openNftCollection(address) {
          return this.assetsSdk.openNftCollection(address);
        }
        openNftSale(address) {
          return this.assetsSdk.openNftSale(address);
        }
        openNftItem(address) {
          return this.assetsSdk.openNftItem(address);
        }
        async openNftItemByIndex(collectionAddress, itemIndex) {
          const nftAddress = await this.assetsSdk.openNftCollection(collectionAddress).getItemAddress(itemIndex);
          return this.assetsSdk.openNftItem(nftAddress);
        }
        openSbtCollection(address) {
          return this.assetsSdk.openSbtCollection(address);
        }
        openJetton(address) {
          return this.assetsSdk.openJetton(address);
        }
        openJettonWallet(address) {
          return this.assetsSdk.openJettonWallet(address);
        }
        connectWallet(app) {
          return this.walletConnector.openSingleWalletModal(app);
        }
        onWalletChange() {
          for (var _len20 = arguments.length, params = new Array(_len20), _key21 = 0; _key21 < _len20; _key21++) {
            params[_key21] = arguments[_key21];
          }
          const unsubscribe = this.walletConnector.onStatusChange(...params);
          this.walletConnector.connectionRestored.then(connected => {
            if (!connected) {
              params[0](null);
            }
          });
          return unsubscribe;
        }
        disconnectWallet() {
          return this.walletConnector.disconnect();
        }
        createMessagePayload(message) {
          return (0, core_dist.beginCell)().storeUint(0, 32).storeStringTail(message).endCell();
        }
        static async createDependencies(params) {
          if (params === void 0) {
            params = {};
          }
          const {
            connector,
            client,
            network = 'testnet',
            merchant
          } = params;
          const walletConnector = GameFiBase.isTonConnectUiInstance(connector) ? connector : GameFiBase.createConnectUiWorkaround(connector);
          let tonClient;
          if (client instanceof TonClient4) {
            tonClient = client;
          } else {
            let clientParams;
            if (client == null) {
              const endpoint = await (0, lib.getHttpV4Endpoint)({
                network
              });
              clientParams = {
                endpoint
              };
            } else {
              clientParams = client;
            }
            tonClient = new TonClient4(clientParams);
          }
          const contentResolverParams = {};
          if (params.contentResolver != null) {
            const {
              ipfsGateway,
              urlProxy
            } = params.contentResolver;
            if (ipfsGateway != null) {
              contentResolverParams.ipfsGateway = ipfsGateway;
            }
            if (urlProxy != null) {
              if (typeof urlProxy === 'string') {
                contentResolverParams.urlProxy = url => {
                  return urlProxy.replace(ProxyContentResolver.replaceable, url);
                };
              } else {
                contentResolverParams.urlProxy = urlProxy;
              }
            }
          }
          const contentResolver = new ProxyContentResolver(contentResolverParams);
          const assetsSdk = dist /* AssetsSDK */.sJ.create({
            api: {
              openExtended: contract => {
                return tonClient.openExtended(contract);
              },
              provider: (address, init) => tonClient.provider(address, init)
            },
            contentResolver: contentResolver,
            sender: new TonConnectSender(walletConnector)
          });
          const dependencies = {
            walletConnector,
            assetsSdk
          };
          if (merchant != null) {
            dependencies.merchant = {
              tonAddress: GameFiBase.addressToObject(merchant.tonAddress)
            };
            if (merchant.jettonAddress != null) {
              dependencies.merchant.jettonAddress = GameFiBase.addressToObject(merchant.jettonAddress);
            }
          }
          return dependencies;
        }
        static addressToObject(address) {
          if (typeof address === 'string') {
            return core_dist.Address.parse(address);
          }
          return address;
        }
        static isTonConnectUiInstance(instance) {
          return typeof instance === 'object' && instance != null && 'openModal' in instance;
        }
        static createConnectUiWorkaround(params) {
          if (params === void 0) {
            params = {};
          }
          const hide = element => {
            element.style.overflow = 'hidden';
            element.style.display = 'none';
            element.style.position = 'absolute';
            element.style.left = '-9999px';
          };
          const buttonRoot = document.createElement('div');
          buttonRoot.id = '__ton-connect-ui--button-root';
          hide(buttonRoot);
          document.body.appendChild(buttonRoot);
          const widgetRoot = document.createElement('div');
          widgetRoot.id = '__ton-connect-ui--widget-root';
          hide(widgetRoot);
          document.body.appendChild(widgetRoot);
          return new TonConnectUI({
            ...params,
            buttonRootId: buttonRoot.id,
            widgetRootId: widgetRoot.id
          });
        }
      }
      class GameFi extends GameFiBase {
        static async create(params) {
          if (params === void 0) {
            params = {};
          }
          return new GameFi(await GameFi.createDependencies(params));
        }
      }
      var __webpack_exports__Address = exports('Address', __webpack_exports__.pV);
      var __webpack_exports__GameFi = exports('GameFi', __webpack_exports__.ki);
      var __webpack_exports__TonConnectUI = exports('TonConnectUI', __webpack_exports__.i$);
      var __webpack_exports__toNano = exports('toNano', __webpack_exports__.IU);
    }
  };
});

System.register("chunks:///_virtual/javascript,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20export%20const%20__cjsMetaURL%20%3D%20'crypto'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20", [], function (exports) {
  return {
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', 'crypto');
    }
  };
});

System.register("chunks:///_virtual/lib-typedarrays.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Check if typed arrays are supported
            if (typeof ArrayBuffer != 'function') {
              return;
            }

            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;

            // Reference original init
            var superInit = WordArray.init;

            // Augment WordArray.init to handle typed arrays
            var subInit = WordArray.init = function (typedArray) {
              // Convert buffers to uint8
              if (typedArray instanceof ArrayBuffer) {
                typedArray = new Uint8Array(typedArray);
              }

              // Convert other array views to uint8
              if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
                typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
              }

              // Handle Uint8Array
              if (typedArray instanceof Uint8Array) {
                // Shortcut
                var typedArrayByteLength = typedArray.byteLength;

                // Extract bytes
                var words = [];
                for (var i = 0; i < typedArrayByteLength; i++) {
                  words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
                }

                // Initialize this word array
                superInit.call(this, words, typedArrayByteLength);
              } else {
                // Else call normal init
                superInit.apply(this, arguments);
              }
            };
            subInit.prototype = WordArray;
          })();
          return CryptoJS.lib.WordArray;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/md5.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function (Math) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var Hasher = C_lib.Hasher;
            var C_algo = C.algo;

            // Constants table
            var T = [];

            // Compute constants
            (function () {
              for (var i = 0; i < 64; i++) {
                T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
              }
            })();

            /**
             * MD5 hash algorithm.
             */
            var MD5 = C_algo.MD5 = Hasher.extend({
              _doReset: function () {
                this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
              },
              _doProcessBlock: function (M, offset) {
                // Swap endian
                for (var i = 0; i < 16; i++) {
                  // Shortcuts
                  var offset_i = offset + i;
                  var M_offset_i = M[offset_i];
                  M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
                }

                // Shortcuts
                var H = this._hash.words;
                var M_offset_0 = M[offset + 0];
                var M_offset_1 = M[offset + 1];
                var M_offset_2 = M[offset + 2];
                var M_offset_3 = M[offset + 3];
                var M_offset_4 = M[offset + 4];
                var M_offset_5 = M[offset + 5];
                var M_offset_6 = M[offset + 6];
                var M_offset_7 = M[offset + 7];
                var M_offset_8 = M[offset + 8];
                var M_offset_9 = M[offset + 9];
                var M_offset_10 = M[offset + 10];
                var M_offset_11 = M[offset + 11];
                var M_offset_12 = M[offset + 12];
                var M_offset_13 = M[offset + 13];
                var M_offset_14 = M[offset + 14];
                var M_offset_15 = M[offset + 15];

                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];

                // Computation
                a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                b = FF(b, c, d, a, M_offset_15, 22, T[15]);
                a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                b = GG(b, c, d, a, M_offset_12, 20, T[31]);
                a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                b = HH(b, c, d, a, M_offset_2, 23, T[47]);
                a = II(a, b, c, d, M_offset_0, 6, T[48]);
                d = II(d, a, b, c, M_offset_7, 10, T[49]);
                c = II(c, d, a, b, M_offset_14, 15, T[50]);
                b = II(b, c, d, a, M_offset_5, 21, T[51]);
                a = II(a, b, c, d, M_offset_12, 6, T[52]);
                d = II(d, a, b, c, M_offset_3, 10, T[53]);
                c = II(c, d, a, b, M_offset_10, 15, T[54]);
                b = II(b, c, d, a, M_offset_1, 21, T[55]);
                a = II(a, b, c, d, M_offset_8, 6, T[56]);
                d = II(d, a, b, c, M_offset_15, 10, T[57]);
                c = II(c, d, a, b, M_offset_6, 15, T[58]);
                b = II(b, c, d, a, M_offset_13, 21, T[59]);
                a = II(a, b, c, d, M_offset_4, 6, T[60]);
                d = II(d, a, b, c, M_offset_11, 10, T[61]);
                c = II(c, d, a, b, M_offset_2, 15, T[62]);
                b = II(b, c, d, a, M_offset_9, 21, T[63]);

                // Intermediate hash value
                H[0] = H[0] + a | 0;
                H[1] = H[1] + b | 0;
                H[2] = H[2] + c | 0;
                H[3] = H[3] + d | 0;
              },
              _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;

                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
                var nBitsTotalL = nBitsTotal;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
                data.sigBytes = (dataWords.length + 1) * 4;

                // Hash final blocks
                this._process();

                // Shortcuts
                var hash = this._hash;
                var H = hash.words;

                // Swap endian
                for (var i = 0; i < 4; i++) {
                  // Shortcut
                  var H_i = H[i];
                  H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
                }

                // Return final computed hash
                return hash;
              },
              clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
              }
            });
            function FF(a, b, c, d, x, s, t) {
              var n = a + (b & c | ~b & d) + x + t;
              return (n << s | n >>> 32 - s) + b;
            }
            function GG(a, b, c, d, x, s, t) {
              var n = a + (b & d | c & ~d) + x + t;
              return (n << s | n >>> 32 - s) + b;
            }
            function HH(a, b, c, d, x, s, t) {
              var n = a + (b ^ c ^ d) + x + t;
              return (n << s | n >>> 32 - s) + b;
            }
            function II(a, b, c, d, x, s, t) {
              var n = a + (c ^ (b | ~d)) + x + t;
              return (n << s | n >>> 32 - s) + b;
            }

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.MD5('message');
             *     var hash = CryptoJS.MD5(wordArray);
             */
            C.MD5 = Hasher._createHelper(MD5);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacMD5(message, key);
             */
            C.HmacMD5 = Hasher._createHmacHelper(MD5);
          })(Math);
          return CryptoJS.MD5;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/mode-cfb.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * Cipher Feedback block mode.
           */
          CryptoJS.mode.CFB = function () {
            var CFB = CryptoJS.lib.BlockCipherMode.extend();
            CFB.Encryptor = CFB.extend({
              processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

                // Remember this block to use with next block
                this._prevBlock = words.slice(offset, offset + blockSize);
              }
            });
            CFB.Decryptor = CFB.extend({
              processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;

                // Remember this block to use with next block
                var thisBlock = words.slice(offset, offset + blockSize);
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

                // This block becomes the previous block
                this._prevBlock = thisBlock;
              }
            });
            function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
              var keystream;

              // Shortcut
              var iv = this._iv;

              // Generate keystream
              if (iv) {
                keystream = iv.slice(0);

                // Remove IV for subsequent blocks
                this._iv = undefined;
              } else {
                keystream = this._prevBlock;
              }
              cipher.encryptBlock(keystream, 0);

              // Encrypt
              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
              }
            }
            return CFB;
          }();
          return CryptoJS.mode.CFB;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/mode-ctr-gladman.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /** @preserve
           * Counter block mode compatible with  Dr Brian Gladman fileenc.c
           * derived from CryptoJS.mode.CTR
           * Jan Hruby jhruby.web@gmail.com
           */
          CryptoJS.mode.CTRGladman = function () {
            var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
            function incWord(word) {
              if ((word >> 24 & 0xff) === 0xff) {
                //overflow
                var b1 = word >> 16 & 0xff;
                var b2 = word >> 8 & 0xff;
                var b3 = word & 0xff;
                if (b1 === 0xff)
                  // overflow b1
                  {
                    b1 = 0;
                    if (b2 === 0xff) {
                      b2 = 0;
                      if (b3 === 0xff) {
                        b3 = 0;
                      } else {
                        ++b3;
                      }
                    } else {
                      ++b2;
                    }
                  } else {
                  ++b1;
                }
                word = 0;
                word += b1 << 16;
                word += b2 << 8;
                word += b3;
              } else {
                word += 0x01 << 24;
              }
              return word;
            }
            function incCounter(counter) {
              if ((counter[0] = incWord(counter[0])) === 0) {
                // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
                counter[1] = incWord(counter[1]);
              }
              return counter;
            }
            var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
              processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;

                // Generate keystream
                if (iv) {
                  counter = this._counter = iv.slice(0);

                  // Remove IV for subsequent blocks
                  this._iv = undefined;
                }
                incCounter(counter);
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);

                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                  words[offset + i] ^= keystream[i];
                }
              }
            });
            CTRGladman.Decryptor = Encryptor;
            return CTRGladman;
          }();
          return CryptoJS.mode.CTRGladman;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/mode-ctr.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * Counter block mode.
           */
          CryptoJS.mode.CTR = function () {
            var CTR = CryptoJS.lib.BlockCipherMode.extend();
            var Encryptor = CTR.Encryptor = CTR.extend({
              processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;

                // Generate keystream
                if (iv) {
                  counter = this._counter = iv.slice(0);

                  // Remove IV for subsequent blocks
                  this._iv = undefined;
                }
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);

                // Increment counter
                counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;

                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                  words[offset + i] ^= keystream[i];
                }
              }
            });
            CTR.Decryptor = Encryptor;
            return CTR;
          }();
          return CryptoJS.mode.CTR;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/mode-ecb.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * Electronic Codebook block mode.
           */
          CryptoJS.mode.ECB = function () {
            var ECB = CryptoJS.lib.BlockCipherMode.extend();
            ECB.Encryptor = ECB.extend({
              processBlock: function (words, offset) {
                this._cipher.encryptBlock(words, offset);
              }
            });
            ECB.Decryptor = ECB.extend({
              processBlock: function (words, offset) {
                this._cipher.decryptBlock(words, offset);
              }
            });
            return ECB;
          }();
          return CryptoJS.mode.ECB;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/mode-ofb.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * Output Feedback block mode.
           */
          CryptoJS.mode.OFB = function () {
            var OFB = CryptoJS.lib.BlockCipherMode.extend();
            var Encryptor = OFB.Encryptor = OFB.extend({
              processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var keystream = this._keystream;

                // Generate keystream
                if (iv) {
                  keystream = this._keystream = iv.slice(0);

                  // Remove IV for subsequent blocks
                  this._iv = undefined;
                }
                cipher.encryptBlock(keystream, 0);

                // Encrypt
                for (var i = 0; i < blockSize; i++) {
                  words[offset + i] ^= keystream[i];
                }
              }
            });
            OFB.Decryptor = Encryptor;
            return OFB;
          }();
          return CryptoJS.mode.OFB;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/moment.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);
      let _cjsExports;
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        (function (global, factory) {
          typeof exports$1 === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
        })(this, function () {
          var hookCallback;
          function hooks() {
            return hookCallback.apply(null, arguments);
          }

          // This is done to register the method called with moment()
          // without creating circular dependencies.
          function setHookCallback(callback) {
            hookCallback = callback;
          }
          function isArray(input) {
            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
          }
          function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return input != null && Object.prototype.toString.call(input) === '[object Object]';
          }
          function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
          }
          function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
              return Object.getOwnPropertyNames(obj).length === 0;
            } else {
              var k;
              for (k in obj) {
                if (hasOwnProp(obj, k)) {
                  return false;
                }
              }
              return true;
            }
          }
          function isUndefined(input) {
            return input === void 0;
          }
          function isNumber(input) {
            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
          }
          function isDate(input) {
            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
          }
          function map(arr, fn) {
            var res = [],
              i,
              arrLen = arr.length;
            for (i = 0; i < arrLen; ++i) {
              res.push(fn(arr[i], i));
            }
            return res;
          }
          function extend(a, b) {
            for (var i in b) {
              if (hasOwnProp(b, i)) {
                a[i] = b[i];
              }
            }
            if (hasOwnProp(b, 'toString')) {
              a.toString = b.toString;
            }
            if (hasOwnProp(b, 'valueOf')) {
              a.valueOf = b.valueOf;
            }
            return a;
          }
          function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
          }
          function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
              empty: false,
              unusedTokens: [],
              unusedInput: [],
              overflow: -2,
              charsLeftOver: 0,
              nullInput: false,
              invalidEra: null,
              invalidMonth: null,
              invalidFormat: false,
              userInvalidated: false,
              iso: false,
              parsedDateParts: [],
              era: null,
              meridiem: null,
              rfc2822: false,
              weekdayMismatch: false
            };
          }
          function getParsingFlags(m) {
            if (m._pf == null) {
              m._pf = defaultParsingFlags();
            }
            return m._pf;
          }
          var some;
          if (Array.prototype.some) {
            some = Array.prototype.some;
          } else {
            some = function (fun) {
              var t = Object(this),
                len = t.length >>> 0,
                i;
              for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
                }
              }
              return false;
            };
          }
          function isValid(m) {
            var flags = null,
              parsedParts = false,
              isNowValid = m._d && !isNaN(m._d.getTime());
            if (isNowValid) {
              flags = getParsingFlags(m);
              parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
              });
              isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
              if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
              }
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
              m._isValid = isNowValid;
            } else {
              return isNowValid;
            }
            return m._isValid;
          }
          function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
              extend(getParsingFlags(m), flags);
            } else {
              getParsingFlags(m).userInvalidated = true;
            }
            return m;
          }

          // Plugins that add properties should also add the key here (null value),
          // so we can properly clone ourselves.
          var momentProperties = hooks.momentProperties = [],
            updateInProgress = false;
          function copyConfig(to, from) {
            var i,
              prop,
              val,
              momentPropertiesLen = momentProperties.length;
            if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
              to._i = from._i;
            }
            if (!isUndefined(from._f)) {
              to._f = from._f;
            }
            if (!isUndefined(from._l)) {
              to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
              to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
              to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
              to._locale = from._locale;
            }
            if (momentPropertiesLen > 0) {
              for (i = 0; i < momentPropertiesLen; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                  to[prop] = val;
                }
              }
            }
            return to;
          }

          // Moment prototype object
          function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
              this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
            }
          }
          function isMoment(obj) {
            return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
          }
          function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
              console.warn('Deprecation warning: ' + msg);
            }
          }
          function deprecate(msg, fn) {
            var firstTime = true;
            return extend(function () {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                var args = [],
                  arg,
                  i,
                  key,
                  argLen = arguments.length;
                for (i = 0; i < argLen; i++) {
                  arg = '';
                  if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (key in arguments[0]) {
                      if (hasOwnProp(arguments[0], key)) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                      }
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                    arg = arguments[i];
                  }
                  args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
              }
              return fn.apply(this, arguments);
            }, fn);
          }
          var deprecations = {};
          function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
            }
          }
          hooks.suppressDeprecationWarnings = false;
          hooks.deprecationHandler = null;
          function isFunction(input) {
            return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
          }
          function set(config) {
            var prop, i;
            for (i in config) {
              if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                  this[i] = prop;
                } else {
                  this['_' + i] = prop;
                }
              }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
          }
          function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
              prop;
            for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
                } else {
                  delete res[prop];
                }
              }
            }
            for (prop in parentConfig) {
              if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
              }
            }
            return res;
          }
          function Locale(config) {
            if (config != null) {
              this.set(config);
            }
          }
          var keys;
          if (Object.keys) {
            keys = Object.keys;
          } else {
            keys = function (obj) {
              var i,
                res = [];
              for (i in obj) {
                if (hasOwnProp(obj, i)) {
                  res.push(i);
                }
              }
              return res;
            };
          }
          var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          };
          function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
          }
          function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
              zerosToFill = targetLength - absNumber.length,
              sign = number >= 0;
            return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
          }
          var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            formatFunctions = {},
            formatTokenFunctions = {};

          // token:    'M'
          // padded:   ['MM', 2]
          // ordinal:  'Mo'
          // callback: function () { this.month() + 1 }
          function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
              func = function () {
                return this[callback]();
              };
            }
            if (token) {
              formatTokenFunctions[token] = func;
            }
            if (padded) {
              formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
            }
            if (ordinal) {
              formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
              };
            }
          }
          function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
          }
          function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
              i,
              length;
            for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
              } else {
                array[i] = removeFormattingTokens(array[i]);
              }
            }
            return function (mom) {
              var output = '',
                i;
              for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
              }
              return output;
            };
          }

          // format date using native date object
          function formatMoment(m, format) {
            if (!m.isValid()) {
              return m.localeData().invalidDate();
            }
            format = expandFormat(format, m.localeData());
            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
            return formatFunctions[format](m);
          }
          function expandFormat(format, locale) {
            var i = 5;
            function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
            }
            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
              localFormattingTokens.lastIndex = 0;
              i -= 1;
            }
            return format;
          }
          var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
          };
          function longDateFormat(key) {
            var format = this._longDateFormat[key],
              formatUpper = this._longDateFormat[key.toUpperCase()];
            if (format || !formatUpper) {
              return format;
            }
            this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
              if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
                return tok.slice(1);
              }
              return tok;
            }).join('');
            return this._longDateFormat[key];
          }
          var defaultInvalidDate = 'Invalid date';
          function invalidDate() {
            return this._invalidDate;
          }
          var defaultOrdinal = '%d',
            defaultDayOfMonthOrdinalParse = /\d{1,2}/;
          function ordinal(number) {
            return this._ordinal.replace('%d', number);
          }
          var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          };
          function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
          }
          function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
          }
          var aliases = {
            D: 'date',
            dates: 'date',
            date: 'date',
            d: 'day',
            days: 'day',
            day: 'day',
            e: 'weekday',
            weekdays: 'weekday',
            weekday: 'weekday',
            E: 'isoWeekday',
            isoweekdays: 'isoWeekday',
            isoweekday: 'isoWeekday',
            DDD: 'dayOfYear',
            dayofyears: 'dayOfYear',
            dayofyear: 'dayOfYear',
            h: 'hour',
            hours: 'hour',
            hour: 'hour',
            ms: 'millisecond',
            milliseconds: 'millisecond',
            millisecond: 'millisecond',
            m: 'minute',
            minutes: 'minute',
            minute: 'minute',
            M: 'month',
            months: 'month',
            month: 'month',
            Q: 'quarter',
            quarters: 'quarter',
            quarter: 'quarter',
            s: 'second',
            seconds: 'second',
            second: 'second',
            gg: 'weekYear',
            weekyears: 'weekYear',
            weekyear: 'weekYear',
            GG: 'isoWeekYear',
            isoweekyears: 'isoWeekYear',
            isoweekyear: 'isoWeekYear',
            w: 'week',
            weeks: 'week',
            week: 'week',
            W: 'isoWeek',
            isoweeks: 'isoWeek',
            isoweek: 'isoWeek',
            y: 'year',
            years: 'year',
            year: 'year'
          };
          function normalizeUnits(units) {
            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
          }
          function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
              normalizedProp,
              prop;
            for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
                }
              }
            }
            return normalizedInput;
          }
          var priorities = {
            date: 9,
            day: 11,
            weekday: 11,
            isoWeekday: 11,
            dayOfYear: 4,
            hour: 13,
            millisecond: 16,
            minute: 14,
            month: 8,
            quarter: 7,
            second: 15,
            weekYear: 1,
            isoWeekYear: 1,
            week: 5,
            isoWeek: 5,
            year: 1
          };
          function getPrioritizedUnits(unitsObj) {
            var units = [],
              u;
            for (u in unitsObj) {
              if (hasOwnProp(unitsObj, u)) {
                units.push({
                  unit: u,
                  priority: priorities[u]
                });
              }
            }
            units.sort(function (a, b) {
              return a.priority - b.priority;
            });
            return units;
          }
          var match1 = /\d/,
            //       0 - 9
            match2 = /\d\d/,
            //      00 - 99
            match3 = /\d{3}/,
            //     000 - 999
            match4 = /\d{4}/,
            //    0000 - 9999
            match6 = /[+-]?\d{6}/,
            // -999999 - 999999
            match1to2 = /\d\d?/,
            //       0 - 99
            match3to4 = /\d\d\d\d?/,
            //     999 - 9999
            match5to6 = /\d\d\d\d\d\d?/,
            //   99999 - 999999
            match1to3 = /\d{1,3}/,
            //       0 - 999
            match1to4 = /\d{1,4}/,
            //       0 - 9999
            match1to6 = /[+-]?\d{1,6}/,
            // -999999 - 999999
            matchUnsigned = /\d+/,
            //       0 - inf
            matchSigned = /[+-]?\d+/,
            //    -inf - inf
            matchOffset = /Z|[+-]\d\d:?\d\d/gi,
            // +00:00 -00:00 +0000 -0000 or Z
            matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
            // +00 -00 +00:00 -00:00 +0000 -0000 or Z
            matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
            // 123456789 123456789.123
            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            match1to2NoLeadingZero = /^[1-9]\d?/,
            //         1-99
            match1to2HasZero = /^([1-9]\d|\d)/,
            //           0-99
            regexes;
          regexes = {};
          function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
              return isStrict && strictRegex ? strictRegex : regex;
            };
          }
          function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
            }
            return regexes[token](config._strict, config._locale);
          }

          // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
          function unescapeFormat(s) {
            return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }));
          }
          function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
          }
          function absFloor(number) {
            if (number < 0) {
              // -0 -> 0
              return Math.ceil(number) || 0;
            } else {
              return Math.floor(number);
            }
          }
          function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
              value = 0;
            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
            }
            return value;
          }
          var tokens = {};
          function addParseToken(token, callback) {
            var i,
              func = callback,
              tokenLen;
            if (typeof token === 'string') {
              token = [token];
            }
            if (isNumber(callback)) {
              func = function (input, array) {
                array[callback] = toInt(input);
              };
            }
            tokenLen = token.length;
            for (i = 0; i < tokenLen; i++) {
              tokens[token[i]] = func;
            }
          }
          function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
            });
          }
          function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
            }
          }
          function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
          }
          var YEAR = 0,
            MONTH = 1,
            DATE = 2,
            HOUR = 3,
            MINUTE = 4,
            SECOND = 5,
            MILLISECOND = 6,
            WEEK = 7,
            WEEKDAY = 8;

          // FORMATTING

          addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
          });
          addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
          });
          addFormatToken(0, ['YYYY', 4], 0, 'year');
          addFormatToken(0, ['YYYYY', 5], 0, 'year');
          addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

          // PARSING

          addRegexToken('Y', matchSigned);
          addRegexToken('YY', match1to2, match2);
          addRegexToken('YYYY', match1to4, match4);
          addRegexToken('YYYYY', match1to6, match6);
          addRegexToken('YYYYYY', match1to6, match6);
          addParseToken(['YYYYY', 'YYYYYY'], YEAR);
          addParseToken('YYYY', function (input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
          });
          addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
          });
          addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
          });

          // HELPERS

          function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
          }

          // HOOKS

          hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
          };

          // MOMENTS

          var getSetYear = makeGetSet('FullYear', true);
          function getIsLeapYear() {
            return isLeapYear(this.year());
          }
          function makeGetSet(unit, keepTime) {
            return function (value) {
              if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
              } else {
                return get(this, unit);
              }
            };
          }
          function get(mom, unit) {
            if (!mom.isValid()) {
              return NaN;
            }
            var d = mom._d,
              isUTC = mom._isUTC;
            switch (unit) {
              case 'Milliseconds':
                return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
              case 'Seconds':
                return isUTC ? d.getUTCSeconds() : d.getSeconds();
              case 'Minutes':
                return isUTC ? d.getUTCMinutes() : d.getMinutes();
              case 'Hours':
                return isUTC ? d.getUTCHours() : d.getHours();
              case 'Date':
                return isUTC ? d.getUTCDate() : d.getDate();
              case 'Day':
                return isUTC ? d.getUTCDay() : d.getDay();
              case 'Month':
                return isUTC ? d.getUTCMonth() : d.getMonth();
              case 'FullYear':
                return isUTC ? d.getUTCFullYear() : d.getFullYear();
              default:
                return NaN;
              // Just in case
            }
          }

          function set$1(mom, unit, value) {
            var d, isUTC, year, month, date;
            if (!mom.isValid() || isNaN(value)) {
              return;
            }
            d = mom._d;
            isUTC = mom._isUTC;
            switch (unit) {
              case 'Milliseconds':
                return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
              case 'Seconds':
                return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
              case 'Minutes':
                return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
              case 'Hours':
                return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
              case 'Date':
                return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
              // case 'Day': // Not real
              //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
              // case 'Month': // Not used because we need to pass two variables
              //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
              case 'FullYear':
                break;
              // See below ...
              default:
                return;
              // Just in case
            }

            year = value;
            month = mom.month();
            date = mom.date();
            date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
            void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
          }

          // MOMENTS

          function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units]();
            }
            return this;
          }
          function stringSet(units, value) {
            if (typeof units === 'object') {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units),
                i,
                prioritizedLen = prioritized.length;
              for (i = 0; i < prioritizedLen; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
              }
            } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                return this[units](value);
              }
            }
            return this;
          }
          function mod(n, x) {
            return (n % x + x) % x;
          }
          var indexOf;
          if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
          } else {
            indexOf = function (o) {
              // I know
              var i;
              for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                  return i;
                }
              }
              return -1;
            };
          }
          function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
              return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
          }

          // FORMATTING

          addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
          });
          addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
          });
          addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
          });

          // PARSING

          addRegexToken('M', match1to2, match1to2NoLeadingZero);
          addRegexToken('MM', match1to2, match2);
          addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
          });
          addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
          });
          addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
          });
          addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
              array[MONTH] = month;
            } else {
              getParsingFlags(config).invalidMonth = input;
            }
          });

          // LOCALES

          var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            defaultMonthsShortRegex = matchWord,
            defaultMonthsRegex = matchWord;
          function localeMonths(m, format) {
            if (!m) {
              return isArray(this._months) ? this._months : this._months['standalone'];
            }
            return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
          }
          function localeMonthsShort(m, format) {
            if (!m) {
              return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
          }
          function handleStrictParse(monthName, format, strict) {
            var i,
              ii,
              mom,
              llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
              }
            }
            if (strict) {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }
          function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;
            if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format, strict);
            }
            if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
              }
              if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function setMonth(mom, value) {
            if (!mom.isValid()) {
              // No op
              return mom;
            }
            if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                value = toInt(value);
              } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                  return mom;
                }
              }
            }
            var month = value,
              date = mom.date();
            date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
            void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
            return mom;
          }
          function getSetMonth(value) {
            if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
            } else {
              return get(this, 'Month');
            }
          }
          function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
          }
          function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsShortStrictRegex;
              } else {
                return this._monthsShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
              }
              return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
            }
          }
          function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsStrictRegex;
              } else {
                return this._monthsRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
              }
              return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
            }
          }
          function computeMonthsParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }
            var shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom,
              shortP,
              longP;
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              shortP = regexEscape(this.monthsShort(mom, ''));
              longP = regexEscape(this.months(mom, ''));
              shortPieces.push(shortP);
              longPieces.push(longP);
              mixedPieces.push(longP);
              mixedPieces.push(shortP);
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
          }
          function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              date = new Date(y + 400, m, d, h, M, s, ms);
              if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
              }
            } else {
              date = new Date(y, m, d, h, M, s, ms);
            }
            return date;
          }
          function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              args = Array.prototype.slice.call(arguments);
              // preserve leap years using a full 400 year cycle, then reset
              args[0] = y + 400;
              date = new Date(Date.UTC.apply(null, args));
              if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
              }
            } else {
              date = new Date(Date.UTC.apply(null, arguments));
            }
            return date;
          }

          // start-of-first-week - start-of-year
          function firstWeekOffset(year, dow, doy) {
            var
              // first-week day -- which january is always in the first week (4 for iso, 1 for other)
              fwd = 7 + dow - doy,
              // first-week day local weekday -- which local weekday is fwd
              fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
            return -fwdlw + fwd - 1;
          }

          // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
          function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
              weekOffset = firstWeekOffset(year, dow, doy),
              dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
              resYear,
              resDayOfYear;
            if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
            } else {
              resYear = year;
              resDayOfYear = dayOfYear;
            }
            return {
              year: resYear,
              dayOfYear: resDayOfYear
            };
          }
          function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
              week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
              resWeek,
              resYear;
            if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
            } else {
              resYear = mom.year();
              resWeek = week;
            }
            return {
              week: resWeek,
              year: resYear
            };
          }
          function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
              weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
          }

          // FORMATTING

          addFormatToken('w', ['ww', 2], 'wo', 'week');
          addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

          // PARSING

          addRegexToken('w', match1to2, match1to2NoLeadingZero);
          addRegexToken('ww', match1to2, match2);
          addRegexToken('W', match1to2, match1to2NoLeadingZero);
          addRegexToken('WW', match1to2, match2);
          addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
          });

          // HELPERS

          // LOCALES

          function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
          }
          var defaultLocaleWeek = {
            dow: 0,
            // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.
          };

          function localeFirstDayOfWeek() {
            return this._week.dow;
          }
          function localeFirstDayOfYear() {
            return this._week.doy;
          }

          // MOMENTS

          function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
          }
          function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
          }

          // FORMATTING

          addFormatToken('d', 0, 'do', 'day');
          addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
          });
          addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
          });
          addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
          });
          addFormatToken('e', 0, 0, 'weekday');
          addFormatToken('E', 0, 0, 'isoWeekday');

          // PARSING

          addRegexToken('d', match1to2);
          addRegexToken('e', match1to2);
          addRegexToken('E', match1to2);
          addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
          });
          addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
          });
          addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
          });
          addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
              week.d = weekday;
            } else {
              getParsingFlags(config).invalidWeekday = input;
            }
          });
          addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
          });

          // HELPERS

          function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
              return input;
            }
            if (!isNaN(input)) {
              return parseInt(input, 10);
            }
            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
              return input;
            }
            return null;
          }
          function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
              return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
          }

          // LOCALES
          function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
          }
          var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            defaultWeekdaysRegex = matchWord,
            defaultWeekdaysShortRegex = matchWord,
            defaultWeekdaysMinRegex = matchWord;
          function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
            return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
          }
          function localeWeekdaysShort(m) {
            return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
          }
          function localeWeekdaysMin(m) {
            return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
          }
          function handleStrictParse$1(weekdayName, format, strict) {
            var i,
              ii,
              mom,
              llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];
              for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
              }
            }
            if (strict) {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }
          function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;
            if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(this, weekdayName, format, strict);
            }
            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
            }
            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already

              mom = createUTC([2000, 1]).day(i);
              if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
              }
              if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function getSetDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var day = get(this, 'Day');
            if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, 'd');
            } else {
              return day;
            }
          }
          function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
          }
          function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
              return this.day() || 7;
            }
          }
          function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysStrictRegex;
              } else {
                return this._weekdaysRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
              }
              return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
            }
          }
          function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysShortStrictRegex;
              } else {
                return this._weekdaysShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }
              return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
            }
          }
          function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysMinStrictRegex;
              } else {
                return this._weekdaysMinRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }
              return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
            }
          }
          function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }
            var minPieces = [],
              shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom,
              minp,
              shortp,
              longp;
            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);
              minp = regexEscape(this.weekdaysMin(mom, ''));
              shortp = regexEscape(this.weekdaysShort(mom, ''));
              longp = regexEscape(this.weekdays(mom, ''));
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;
            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
          }

          // FORMATTING

          function hFormat() {
            return this.hours() % 12 || 12;
          }
          function kFormat() {
            return this.hours() || 24;
          }
          addFormatToken('H', ['HH', 2], 0, 'hour');
          addFormatToken('h', ['hh', 2], 0, hFormat);
          addFormatToken('k', ['kk', 2], 0, kFormat);
          addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
          });
          addFormatToken('hmmss', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });
          addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
          });
          addFormatToken('Hmmss', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });
          function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
          }
          meridiem('a', true);
          meridiem('A', false);

          // PARSING

          function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
          }
          addRegexToken('a', matchMeridiem);
          addRegexToken('A', matchMeridiem);
          addRegexToken('H', match1to2, match1to2HasZero);
          addRegexToken('h', match1to2, match1to2NoLeadingZero);
          addRegexToken('k', match1to2, match1to2NoLeadingZero);
          addRegexToken('HH', match1to2, match2);
          addRegexToken('hh', match1to2, match2);
          addRegexToken('kk', match1to2, match2);
          addRegexToken('hmm', match3to4);
          addRegexToken('hmmss', match5to6);
          addRegexToken('Hmm', match3to4);
          addRegexToken('Hmmss', match5to6);
          addParseToken(['H', 'HH'], HOUR);
          addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
          });
          addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
          });
          addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
              pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
          });
          addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
              pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
          });

          // LOCALES

          function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
          }
          var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
            // Setting the hour should keep the time, because the user explicitly
            // specified which hour they want. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            getSetHour = makeGetSet('Hours', true);
          function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? 'pm' : 'PM';
            } else {
              return isLower ? 'am' : 'AM';
            }
          }
          var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,
            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,
            week: defaultLocaleWeek,
            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,
            meridiemParse: defaultLocaleMeridiemParse
          };

          // internal storage for locale config files
          var locales = {},
            localeFamilies = {},
            globalLocale;
          function commonPrefix(arr1, arr2) {
            var i,
              minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
              if (arr1[i] !== arr2[i]) {
                return i;
              }
            }
            return minl;
          }
          function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
          }

          // pick the locale from the array
          // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
          // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
          function chooseLocale(names) {
            var i = 0,
              j,
              next,
              locale,
              split;
            while (i < names.length) {
              split = normalizeLocale(names[i]).split('-');
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split('-') : null;
              while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                  return locale;
                }
                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
                  //the next array item is better than a shallower substring of this one
                  break;
                }
                j--;
              }
              i++;
            }
            return globalLocale;
          }
          function isLocaleNameSane(name) {
            // Prevent names that look like filesystem paths, i.e contain '/' or '\'
            // Ensure name is available and function returns boolean
            return !!(name && name.match('^[^/\\\\]*$'));
          }
          function loadLocale(name) {
            var oldLocale = null,
              aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
              try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
              } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
              }
            }

            return locales[name];
          }

          // This function will load locale and then set the global locale.  If
          // no arguments are passed in, it will simply return the current global
          // locale key.
          function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
              if (isUndefined(values)) {
                data = getLocale(key);
              } else {
                data = defineLocale(key, values);
              }
              if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
              } else {
                if (typeof console !== 'undefined' && console.warn) {
                  //warn user if arguments are passed but the locale could not be set
                  console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                }
              }
            }
            return globalLocale._abbr;
          }
          function defineLocale(name, config) {
            if (config !== null) {
              var locale,
                parentConfig = baseConfig;
              config.abbr = name;
              if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
                } else {
                  locale = loadLocale(config.parentLocale);
                  if (locale != null) {
                    parentConfig = locale._config;
                  } else {
                    if (!localeFamilies[config.parentLocale]) {
                      localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                      name: name,
                      config: config
                    });
                    return null;
                  }
                }
              }
              locales[name] = new Locale(mergeConfigs(parentConfig, config));
              if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                  defineLocale(x.name, x.config);
                });
              }

              // backwards compat for now: also set the locale
              // make sure we set the locale AFTER all child locales have been
              // created, so we won't end up with the child locale set.
              getSetGlobalLocale(name);
              return locales[name];
            } else {
              // useful for testing
              delete locales[name];
              return null;
            }
          }
          function updateLocale(name, config) {
            if (config != null) {
              var locale,
                tmpLocale,
                parentConfig = baseConfig;
              if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
              } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                  parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                  // updateLocale is called for creating a new locale
                  // Set abbr so it will have a name (getters return
                  // undefined otherwise).
                  config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
              }

              // backwards compat for now: also set the locale
              getSetGlobalLocale(name);
            } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
                  if (name === getSetGlobalLocale()) {
                    getSetGlobalLocale(name);
                  }
                } else if (locales[name] != null) {
                  delete locales[name];
                }
              }
            }
            return locales[name];
          }

          // returns locale data
          function getLocale(key) {
            var locale;
            if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
            }
            if (!key) {
              return globalLocale;
            }
            if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);
              if (locale) {
                return locale;
              }
              key = [key];
            }
            return chooseLocale(key);
          }
          function listLocales() {
            return keys(locales);
          }
          function checkOverflow(m) {
            var overflow,
              a = m._a;
            if (a && getParsingFlags(m).overflow === -2) {
              overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
              }
              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
              }
              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
              }
              getParsingFlags(m).overflow = overflow;
            }
            return m;
          }

          // iso 8601 regex
          // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
          var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
            isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
            // iso time formats and regexes
            isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
            aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            obsOffsets = {
              UT: 0,
              GMT: 0,
              EDT: -4 * 60,
              EST: -5 * 60,
              CDT: -5 * 60,
              CST: -6 * 60,
              MDT: -6 * 60,
              MST: -7 * 60,
              PDT: -7 * 60,
              PST: -8 * 60
            };

          // date from iso format
          function configFromISO(config) {
            var i,
              l,
              string = config._i,
              match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
              allowTime,
              dateFormat,
              timeFormat,
              tzFormat,
              isoDatesLen = isoDates.length,
              isoTimesLen = isoTimes.length;
            if (match) {
              getParsingFlags(config).iso = true;
              for (i = 0, l = isoDatesLen; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
                }
              }
              if (dateFormat == null) {
                config._isValid = false;
                return;
              }
              if (match[3]) {
                for (i = 0, l = isoTimesLen; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                  }
                }
                if (timeFormat == null) {
                  config._isValid = false;
                  return;
                }
              }
              if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
              }
              if (match[4]) {
                if (tzRegex.exec(match[4])) {
                  tzFormat = 'Z';
                } else {
                  config._isValid = false;
                  return;
                }
              }
              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
              configFromStringAndFormat(config);
            } else {
              config._isValid = false;
            }
          }
          function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
            if (secondStr) {
              result.push(parseInt(secondStr, 10));
            }
            return result;
          }
          function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
              return 2000 + year;
            } else if (year <= 999) {
              return 1900 + year;
            }
            return year;
          }
          function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
          }
          function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
              // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
              if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
              }
            }
            return true;
          }
          function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
              return obsOffsets[obsOffset];
            } else if (militaryOffset) {
              // the only allowed military tz is Z
              return 0;
            } else {
              var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
              return h * 60 + m;
            }
          }

          // date and time from ref 2822 format
          function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
              parsedArray;
            if (match) {
              parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
              if (!checkWeekday(match[1], parsedArray, config)) {
                return;
              }
              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);
              config._d = createUTCDate.apply(null, config._a);
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
              getParsingFlags(config).rfc2822 = true;
            } else {
              config._isValid = false;
            }
          }

          // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
          function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
            }
            configFromISO(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }
            configFromRFC2822(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }
            if (config._strict) {
              config._isValid = false;
            } else {
              // Final attempt, use Input Fallback
              hooks.createFromInputFallback(config);
            }
          }
          hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
          });

          // Pick the first defined of two or three arguments.
          function defaults(a, b, c) {
            if (a != null) {
              return a;
            }
            if (b != null) {
              return b;
            }
            return c;
          }
          function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
          }

          // convert an array to a date.
          // the array should mirror the parameters below
          // note: all values past the year are optional and will default to the lowest possible value.
          // [year, month, day , hour, minute, second, millisecond]
          function configFromArray(config) {
            var i,
              date,
              input = [],
              currentDate,
              expectedWeekday,
              yearToUse;
            if (config._d) {
              return;
            }
            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
              if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
              }
              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
              config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            }

            // Check for 24:00:00.000
            if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
              config._nextDay = true;
              config._a[HOUR] = 0;
            }
            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }
            if (config._nextDay) {
              config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
              getParsingFlags(config).weekdayMismatch = true;
            }
          }
          function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4;

              // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).
              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);
              if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
              }
            } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;
              curWeek = weekOfYear(createLocal(), dow, doy);
              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

              // Default to current week.
              week = defaults(w.w, curWeek.week);
              if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
                }
              } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
                }
              } else {
                // default to beginning of week
                weekday = dow;
              }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
            } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
            }
          }

          // constant that refers to the ISO standard
          hooks.ISO_8601 = function () {};

          // constant that refers to the RFC 2822 form
          hooks.RFC_2822 = function () {};

          // date from string and format string
          function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
            }
            if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
              i,
              parsedInput,
              tokens,
              token,
              skipped,
              stringLength = string.length,
              totalParsedInputLength = 0,
              era,
              tokenLen;
            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
            tokenLen = tokens.length;
            for (i = 0; i < tokenLen; i++) {
              token = tokens[i];
              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
              if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
              }
              // don't parse if it's not a known token
              if (formatTokenFunctions[token]) {
                if (parsedInput) {
                  getParsingFlags(config).empty = false;
                } else {
                  getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
              } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
              }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
              getParsingFlags(config).bigHour = undefined;
            }
            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
              config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }
            configFromArray(config);
            checkOverflow(config);
          }
          function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;
            if (meridiem == null) {
              // nothing to do
              return hour;
            }
            if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);
              if (isPm && hour < 12) {
                hour += 12;
              }
              if (!isPm && hour === 12) {
                hour = 0;
              }
              return hour;
            } else {
              // this is not supposed to happen
              return hour;
            }
          }

          // date from string and array of format strings
          function configFromStringAndArray(config) {
            var tempConfig,
              bestMoment,
              scoreToBeat,
              i,
              currentScore,
              validFormatFound,
              bestFormatIsValid = false,
              configfLen = config._f.length;
            if (configfLen === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
            }
            for (i = 0; i < configfLen; i++) {
              currentScore = 0;
              validFormatFound = false;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);
              if (isValid(tempConfig)) {
                validFormatFound = true;
              }

              // if there is any input that was not parsed add a penalty for that format
              currentScore += getParsingFlags(tempConfig).charsLeftOver;

              //or tokens
              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
              getParsingFlags(tempConfig).score = currentScore;
              if (!bestFormatIsValid) {
                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                  if (validFormatFound) {
                    bestFormatIsValid = true;
                  }
                }
              } else {
                if (currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                }
              }
            }
            extend(config, bestMoment || tempConfig);
          }
          function configFromObject(config) {
            if (config._d) {
              return;
            }
            var i = normalizeObjectUnits(config._i),
              dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
              return obj && parseInt(obj, 10);
            });
            configFromArray(config);
          }
          function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, 'd');
              res._nextDay = undefined;
            }
            return res;
          }
          function prepareConfig(config) {
            var input = config._i,
              format = config._f;
            config._locale = config._locale || getLocale(config._l);
            if (input === null || format === undefined && input === '') {
              return createInvalid({
                nullInput: true
              });
            }
            if (typeof input === 'string') {
              config._i = input = config._locale.preparse(input);
            }
            if (isMoment(input)) {
              return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
              config._d = input;
            } else if (isArray(format)) {
              configFromStringAndArray(config);
            } else if (format) {
              configFromStringAndFormat(config);
            } else {
              configFromInput(config);
            }
            if (!isValid(config)) {
              config._d = null;
            }
            return config;
          }
          function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
              config._d = new Date(hooks.now());
            } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
              configFromString(config);
            } else if (isArray(input)) {
              config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
              });
              configFromArray(config);
            } else if (isObject(input)) {
              configFromObject(config);
            } else if (isNumber(input)) {
              // from milliseconds
              config._d = new Date(input);
            } else {
              hooks.createFromInputFallback(config);
            }
          }
          function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};
            if (format === true || format === false) {
              strict = format;
              format = undefined;
            }
            if (locale === true || locale === false) {
              strict = locale;
              locale = undefined;
            }
            if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
              input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;
            return createFromConfig(c);
          }
          function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
          }
          var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
              } else {
                return createInvalid();
              }
            }),
            prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
              } else {
                return createInvalid();
              }
            });

          // Pick a moment m from moments so that m[fn](other) is true for all
          // other. This relies on the function fn to be transitive.
          //
          // moments should either be an array of moment objects or an array, whose
          // first element is an array of moment objects.
          function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
            }
            if (!moments.length) {
              return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
              }
            }
            return res;
          }

          // TODO: Use [].sort instead?
          function min() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isBefore', args);
          }
          function max() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isAfter', args);
          }
          var now = function () {
            return Date.now ? Date.now() : +new Date();
          };
          var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
          function isDurationValid(m) {
            var key,
              unitHasDecimal = false,
              i,
              orderLen = ordering.length;
            for (key in m) {
              if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
              }
            }
            for (i = 0; i < orderLen; ++i) {
              if (m[ordering[i]]) {
                if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
                }

                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
                }
              }
            }
            return true;
          }
          function isValid$1() {
            return this._isValid;
          }
          function createInvalid$1() {
            return createDuration(NaN);
          }
          function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
              years = normalizedInput.year || 0,
              quarters = normalizedInput.quarter || 0,
              months = normalizedInput.month || 0,
              weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
              days = normalizedInput.day || 0,
              hours = normalizedInput.hour || 0,
              minutes = normalizedInput.minute || 0,
              seconds = normalizedInput.second || 0,
              milliseconds = normalizedInput.millisecond || 0;
            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds = +milliseconds + seconds * 1e3 +
            // 1000
            minutes * 6e4 +
            // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._locale = getLocale();
            this._bubble();
          }
          function isDuration(obj) {
            return obj instanceof Duration;
          }
          function absRound(number) {
            if (number < 0) {
              return Math.round(-1 * number) * -1;
            } else {
              return Math.round(number);
            }
          }

          // compare two arrays, return the number of differences
          function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
              lengthDiff = Math.abs(array1.length - array2.length),
              diffs = 0,
              i;
            for (i = 0; i < len; i++) {
              if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
              }
            }
            return diffs + lengthDiff;
          }

          // FORMATTING

          function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
              var offset = this.utcOffset(),
                sign = '+';
              if (offset < 0) {
                offset = -offset;
                sign = '-';
              }
              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
            });
          }
          offset('Z', ':');
          offset('ZZ', '');

          // PARSING

          addRegexToken('Z', matchShortOffset);
          addRegexToken('ZZ', matchShortOffset);
          addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
          });

          // HELPERS

          // timezone chunker
          // '+10:00' > ['10',  '00']
          // '-1530'  > ['-15', '30']
          var chunkOffset = /([\+\-]|\d\d)/gi;
          function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher),
              chunk,
              parts,
              minutes;
            if (matches === null) {
              return null;
            }
            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);
            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
          }

          // Return a moment from input, that is local/utc/zone equivalent to model.
          function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
              res = model.clone();
              diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
              // Use low-level api, because this fn is low-level api.
              res._d.setTime(res._d.valueOf() + diff);
              hooks.updateOffset(res, false);
              return res;
            } else {
              return createLocal(input).local();
            }
          }
          function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
          }

          // HOOKS

          // This function will be called whenever a moment is mutated.
          // It is intended to keep the offset in sync with the timezone.
          hooks.updateOffset = function () {};

          // MOMENTS

          // keepLocalTime = true means only change the timezone, without
          // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
          // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
          // +0200, so we adjust the time as needed, to be valid.
          //
          // Keeping the time actually adds/subtracts (one hour)
          // from the actual represented time. That is why we call updateOffset
          // a second time. In case it wants us to change the offset again
          // _changeInProgress == true case, then we have to adjust, because
          // there is no such time in the given timezone.
          function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
              localAdjust;
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            if (input != null) {
              if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                  return this;
                }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                this.add(localAdjust, 'm');
              }
              if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
                }
              }
              return this;
            } else {
              return this._isUTC ? offset : getDateOffset(this);
            }
          }
          function getSetZone(input, keepLocalTime) {
            if (input != null) {
              if (typeof input !== 'string') {
                input = -input;
              }
              this.utcOffset(input, keepLocalTime);
              return this;
            } else {
              return -this.utcOffset();
            }
          }
          function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
          }
          function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;
              if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
              }
            }
            return this;
          }
          function setOffsetToParsedOffset() {
            if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
              var tZone = offsetFromString(matchOffset, this._i);
              if (tZone != null) {
                this.utcOffset(tZone);
              } else {
                this.utcOffset(0, true);
              }
            }
            return this;
          }
          function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
              return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;
            return (this.utcOffset() - input) % 60 === 0;
          }
          function isDaylightSavingTime() {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
          }
          function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
            }
            var c = {},
              other;
            copyConfig(c, this);
            c = prepareConfig(c);
            if (c._a) {
              other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
              this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
              this._isDSTShifted = false;
            }
            return this._isDSTShifted;
          }
          function isLocal() {
            return this.isValid() ? !this._isUTC : false;
          }
          function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
          }
          function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
          }

          // ASP.NET json date format regex
          var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
          function createDuration(input, key) {
            var duration = input,
              // matching against regexp is expensive, do it on demand
              match = null,
              sign,
              ret,
              diffRes;
            if (isDuration(input)) {
              duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
              };
            } else if (isNumber(input) || !isNaN(+input)) {
              duration = {};
              if (key) {
                duration[key] = +input;
              } else {
                duration.milliseconds = +input;
              }
            } else if (match = aspNetRegex.exec(input)) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
              };
            } else if (match = isoRegex.exec(input)) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
              };
            } else if (duration == null) {
              // checks for null or undefined
              duration = {};
            } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
              diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
            }
            ret = new Duration(duration);
            if (isDuration(input) && hasOwnProp(input, '_locale')) {
              ret._locale = input._locale;
            }
            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
              ret._isValid = input._isValid;
            }
            return ret;
          }
          createDuration.fn = Duration.prototype;
          createDuration.invalid = createInvalid$1;
          function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
          }
          function positiveMomentsDifference(base, other) {
            var res = {};
            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
              --res.months;
            }
            res.milliseconds = +other - +base.clone().add(res.months, 'M');
            return res;
          }
          function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
              return {
                milliseconds: 0,
                months: 0
              };
            }
            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
            } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
            }
            return res;
          }

          // TODO: remove 'name' arg after deprecation is removed
          function createAdder(direction, name) {
            return function (val, period) {
              var dur, tmp;
              //invert the arguments, but complain about it
              if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;
                val = period;
                period = tmp;
              }
              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
            };
          }
          function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
              days = absRound(duration._days),
              months = absRound(duration._months);
            if (!mom.isValid()) {
              // No op
              return;
            }
            updateOffset = updateOffset == null ? true : updateOffset;
            if (months) {
              setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
              set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
              hooks.updateOffset(mom, days || months);
            }
          }
          var add = createAdder(1, 'add'),
            subtract = createAdder(-1, 'subtract');
          function isString(input) {
            return typeof input === 'string' || input instanceof String;
          }

          // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
          function isMomentInput(input) {
            return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
          }
          function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
              propertyTest = false,
              properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
              i,
              property,
              propertyLen = properties.length;
            for (i = 0; i < propertyLen; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }
            return objectTest && propertyTest;
          }
          function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
              dataTypeTest = false;
            if (arrayTest) {
              dataTypeTest = input.filter(function (item) {
                return !isNumber(item) && isString(input);
              }).length === 0;
            }
            return arrayTest && dataTypeTest;
          }
          function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
              propertyTest = false,
              properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
              i,
              property;
            for (i = 0; i < properties.length; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }
            return objectTest && propertyTest;
          }
          function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
          }
          function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
              if (!arguments[0]) {
                time = undefined;
                formats = undefined;
              } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
              } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
              }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
              sod = cloneWithOffset(now, this).startOf('day'),
              format = hooks.calendarFormat(this, sod) || 'sameElse',
              output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
          }
          function clone() {
            return new Moment(this);
          }
          function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
              return this.valueOf() > localInput.valueOf();
            } else {
              return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
          }
          function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
              return this.valueOf() < localInput.valueOf();
            } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
          }
          function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
              localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
              return false;
            }
            inclusivity = inclusivity || '()';
            return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
          }
          function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
              inputMs;
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
              return this.valueOf() === localInput.valueOf();
            } else {
              inputMs = localInput.valueOf();
              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
            }
          }
          function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
          }
          function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
          }
          function diff(input, units, asFloat) {
            var that, zoneDelta, output;
            if (!this.isValid()) {
              return NaN;
            }
            that = cloneWithOffset(input, this);
            if (!that.isValid()) {
              return NaN;
            }
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
            units = normalizeUnits(units);
            switch (units) {
              case 'year':
                output = monthDiff(this, that) / 12;
                break;
              case 'month':
                output = monthDiff(this, that);
                break;
              case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
              case 'second':
                output = (this - that) / 1e3;
                break;
              // 1000
              case 'minute':
                output = (this - that) / 6e4;
                break;
              // 1000 * 60
              case 'hour':
                output = (this - that) / 36e5;
                break;
              // 1000 * 60 * 60
              case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break;
              // 1000 * 60 * 60 * 24, negate dst
              case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break;
              // 1000 * 60 * 60 * 24 * 7, negate dst
              default:
                output = this - that;
            }
            return asFloat ? output : absFloor(output);
          }
          function monthDiff(a, b) {
            if (a.date() < b.date()) {
              // end-of-month calculations work correct when the start month has more
              // days than the end month.
              return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
              // b is in (anchor - 1 month, anchor + 1 month)
              anchor = a.clone().add(wholeMonthDiff, 'months'),
              anchor2,
              adjust;
            if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor - anchor2);
            } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
          }
          hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
          hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
          function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
          }
          function toISOString(keepOffset) {
            if (!this.isValid()) {
              return null;
            }
            var utc = keepOffset !== true,
              m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
              return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
            }
            if (isFunction(Date.prototype.toISOString)) {
              // native implementation is ~50x faster, use it when we can
              if (utc) {
                return this.toDate().toISOString();
              } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
              }
            }
            return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
          }

          /**
           * Return a human readable representation of a moment that can
           * also be evaluated to get a new moment which is the same
           *
           * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
           */
          function inspect() {
            if (!this.isValid()) {
              return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment',
              zone = '',
              prefix,
              year,
              datetime,
              suffix;
            if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
              zone = 'Z';
            }
            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';
            return this.format(prefix + year + datetime + suffix);
          }
          function format(inputString) {
            if (!inputString) {
              inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
          }
          function from(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({
                to: this,
                from: time
              }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }
          function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
          }
          function to(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({
                from: this,
                to: time
              }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }
          function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
          }

          // If passed a locale key, it will set the locale for this
          // instance.  Otherwise, it will return the locale configuration
          // variables for this instance.
          function locale(key) {
            var newLocaleData;
            if (key === undefined) {
              return this._locale._abbr;
            } else {
              newLocaleData = getLocale(key);
              if (newLocaleData != null) {
                this._locale = newLocaleData;
              }
              return this;
            }
          }
          var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
            if (key === undefined) {
              return this.localeData();
            } else {
              return this.locale(key);
            }
          });
          function localeData() {
            return this._locale;
          }
          var MS_PER_SECOND = 1000,
            MS_PER_MINUTE = 60 * MS_PER_SECOND,
            MS_PER_HOUR = 60 * MS_PER_MINUTE,
            MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

          // actual modulo - handles negative numbers (for dates before 1970):
          function mod$1(dividend, divisor) {
            return (dividend % divisor + divisor) % divisor;
          }
          function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return new Date(y, m, d).valueOf();
            }
          }
          function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return Date.UTC(y, m, d);
            }
          }
          function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
            }
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
            switch (units) {
              case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
              case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
              case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
              case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
              case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
              case 'day':
              case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
              case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
              case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
              case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
            }
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }
          function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
            }
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
            switch (units) {
              case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
              case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
              case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
              case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
              case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
              case 'day':
              case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
              case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
              case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
              case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
            }
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }
          function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
          }
          function unix() {
            return Math.floor(this.valueOf() / 1000);
          }
          function toDate() {
            return new Date(this.valueOf());
          }
          function toArray() {
            var m = this;
            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
          }
          function toObject() {
            var m = this;
            return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds()
            };
          }
          function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
          }
          function isValid$2() {
            return isValid(this);
          }
          function parsingFlags() {
            return extend({}, getParsingFlags(this));
          }
          function invalidAt() {
            return getParsingFlags(this).overflow;
          }
          function creationData() {
            return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict
            };
          }
          addFormatToken('N', 0, 0, 'eraAbbr');
          addFormatToken('NN', 0, 0, 'eraAbbr');
          addFormatToken('NNN', 0, 0, 'eraAbbr');
          addFormatToken('NNNN', 0, 0, 'eraName');
          addFormatToken('NNNNN', 0, 0, 'eraNarrow');
          addFormatToken('y', ['y', 1], 'yo', 'eraYear');
          addFormatToken('y', ['yy', 2], 0, 'eraYear');
          addFormatToken('y', ['yyy', 3], 0, 'eraYear');
          addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
          addRegexToken('N', matchEraAbbr);
          addRegexToken('NN', matchEraAbbr);
          addRegexToken('NNN', matchEraAbbr);
          addRegexToken('NNNN', matchEraName);
          addRegexToken('NNNNN', matchEraNarrow);
          addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
              getParsingFlags(config).era = era;
            } else {
              getParsingFlags(config).invalidEra = input;
            }
          });
          addRegexToken('y', matchUnsigned);
          addRegexToken('yy', matchUnsigned);
          addRegexToken('yyy', matchUnsigned);
          addRegexToken('yyyy', matchUnsigned);
          addRegexToken('yo', matchEraYearOrdinal);
          addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
          addParseToken(['yo'], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
              match = input.match(config._locale._eraYearOrdinalRegex);
            }
            if (config._locale.eraYearOrdinalParse) {
              array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
              array[YEAR] = parseInt(input, 10);
            }
          });
          function localeEras(m, format) {
            var i,
              l,
              date,
              eras = this._eras || getLocale('en')._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
              switch (typeof eras[i].since) {
                case 'string':
                  // truncate time
                  date = hooks(eras[i].since).startOf('day');
                  eras[i].since = date.valueOf();
                  break;
              }
              switch (typeof eras[i].until) {
                case 'undefined':
                  eras[i].until = +Infinity;
                  break;
                case 'string':
                  // truncate time
                  date = hooks(eras[i].until).startOf('day').valueOf();
                  eras[i].until = date.valueOf();
                  break;
              }
            }
            return eras;
          }
          function localeErasParse(eraName, format, strict) {
            var i,
              l,
              eras = this.eras(),
              name,
              abbr,
              narrow;
            eraName = eraName.toUpperCase();
            for (i = 0, l = eras.length; i < l; ++i) {
              name = eras[i].name.toUpperCase();
              abbr = eras[i].abbr.toUpperCase();
              narrow = eras[i].narrow.toUpperCase();
              if (strict) {
                switch (format) {
                  case 'N':
                  case 'NN':
                  case 'NNN':
                    if (abbr === eraName) {
                      return eras[i];
                    }
                    break;
                  case 'NNNN':
                    if (name === eraName) {
                      return eras[i];
                    }
                    break;
                  case 'NNNNN':
                    if (narrow === eraName) {
                      return eras[i];
                    }
                    break;
                }
              } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
              }
            }
          }
          function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
              return hooks(era.since).year();
            } else {
              return hooks(era.since).year() + (year - era.offset) * dir;
            }
          }
          function getEraName() {
            var i,
              l,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();
              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
              }
            }
            return '';
          }
          function getEraNarrow() {
            var i,
              l,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();
              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
              }
            }
            return '';
          }
          function getEraAbbr() {
            var i,
              l,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf('day').valueOf();
              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
              }
            }
            return '';
          }
          function getEraYear() {
            var i,
              l,
              dir,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              dir = eras[i].since <= eras[i].until ? +1 : -1;

              // truncate time
              val = this.clone().startOf('day').valueOf();
              if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
                return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
              }
            }
            return this.year();
          }
          function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
          }
          function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
          }
          function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
          }
          function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
          }
          function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
          }
          function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
          }
          function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
          }
          function computeErasParse() {
            var abbrPieces = [],
              namePieces = [],
              narrowPieces = [],
              mixedPieces = [],
              i,
              l,
              erasName,
              erasAbbr,
              erasNarrow,
              eras = this.eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              erasName = regexEscape(eras[i].name);
              erasAbbr = regexEscape(eras[i].abbr);
              erasNarrow = regexEscape(eras[i].narrow);
              namePieces.push(erasName);
              abbrPieces.push(erasAbbr);
              narrowPieces.push(erasNarrow);
              mixedPieces.push(erasName);
              mixedPieces.push(erasAbbr);
              mixedPieces.push(erasNarrow);
            }
            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
          }

          // FORMATTING

          addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
          });
          addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
          });
          function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
          }
          addWeekYearFormatToken('gggg', 'weekYear');
          addWeekYearFormatToken('ggggg', 'weekYear');
          addWeekYearFormatToken('GGGG', 'isoWeekYear');
          addWeekYearFormatToken('GGGGG', 'isoWeekYear');

          // ALIASES

          // PARSING

          addRegexToken('G', matchSigned);
          addRegexToken('g', matchSigned);
          addRegexToken('GG', match1to2, match2);
          addRegexToken('gg', match1to2, match2);
          addRegexToken('GGGG', match1to4, match4);
          addRegexToken('gggg', match1to4, match4);
          addRegexToken('GGGGG', match1to6, match6);
          addRegexToken('ggggg', match1to6, match6);
          addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
          });
          addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
          });

          // MOMENTS

          function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
          }
          function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
          }
          function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
          }
          function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
          }
          function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
          }
          function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
          }
          function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
              return weekOfYear(this, dow, doy).year;
            } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
          }
          function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
              date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
          }

          // FORMATTING

          addFormatToken('Q', 0, 'Qo', 'quarter');

          // PARSING

          addRegexToken('Q', match1);
          addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
          });

          // MOMENTS

          function getSetQuarter(input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
          }

          // FORMATTING

          addFormatToken('D', ['DD', 2], 'Do', 'date');

          // PARSING

          addRegexToken('D', match1to2, match1to2NoLeadingZero);
          addRegexToken('DD', match1to2, match2);
          addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
          });
          addParseToken(['D', 'DD'], DATE);
          addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
          });

          // MOMENTS

          var getSetDayOfMonth = makeGetSet('Date', true);

          // FORMATTING

          addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

          // PARSING

          addRegexToken('DDD', match1to3);
          addRegexToken('DDDD', match3);
          addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
          });

          // HELPERS

          // MOMENTS

          function getSetDayOfYear(input) {
            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
          }

          // FORMATTING

          addFormatToken('m', ['mm', 2], 0, 'minute');

          // PARSING

          addRegexToken('m', match1to2, match1to2HasZero);
          addRegexToken('mm', match1to2, match2);
          addParseToken(['m', 'mm'], MINUTE);

          // MOMENTS

          var getSetMinute = makeGetSet('Minutes', false);

          // FORMATTING

          addFormatToken('s', ['ss', 2], 0, 'second');

          // PARSING

          addRegexToken('s', match1to2, match1to2HasZero);
          addRegexToken('ss', match1to2, match2);
          addParseToken(['s', 'ss'], SECOND);

          // MOMENTS

          var getSetSecond = makeGetSet('Seconds', false);

          // FORMATTING

          addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
          });
          addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
          });
          addFormatToken(0, ['SSS', 3], 0, 'millisecond');
          addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
          });
          addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
          });
          addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
          });
          addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
          });
          addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
          });
          addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
          });

          // PARSING

          addRegexToken('S', match1to3, match1);
          addRegexToken('SS', match1to3, match2);
          addRegexToken('SSS', match1to3, match3);
          var token, getSetMillisecond;
          for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
          }
          function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
          }
          for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
          }
          getSetMillisecond = makeGetSet('Milliseconds', false);

          // FORMATTING

          addFormatToken('z', 0, 0, 'zoneAbbr');
          addFormatToken('zz', 0, 0, 'zoneName');

          // MOMENTS

          function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
          }
          function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
          }
          var proto = Moment.prototype;
          proto.add = add;
          proto.calendar = calendar$1;
          proto.clone = clone;
          proto.diff = diff;
          proto.endOf = endOf;
          proto.format = format;
          proto.from = from;
          proto.fromNow = fromNow;
          proto.to = to;
          proto.toNow = toNow;
          proto.get = stringGet;
          proto.invalidAt = invalidAt;
          proto.isAfter = isAfter;
          proto.isBefore = isBefore;
          proto.isBetween = isBetween;
          proto.isSame = isSame;
          proto.isSameOrAfter = isSameOrAfter;
          proto.isSameOrBefore = isSameOrBefore;
          proto.isValid = isValid$2;
          proto.lang = lang;
          proto.locale = locale;
          proto.localeData = localeData;
          proto.max = prototypeMax;
          proto.min = prototypeMin;
          proto.parsingFlags = parsingFlags;
          proto.set = stringSet;
          proto.startOf = startOf;
          proto.subtract = subtract;
          proto.toArray = toArray;
          proto.toObject = toObject;
          proto.toDate = toDate;
          proto.toISOString = toISOString;
          proto.inspect = inspect;
          if (typeof Symbol !== 'undefined' && Symbol.for != null) {
            proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
              return 'Moment<' + this.format() + '>';
            };
          }
          proto.toJSON = toJSON;
          proto.toString = toString;
          proto.unix = unix;
          proto.valueOf = valueOf;
          proto.creationData = creationData;
          proto.eraName = getEraName;
          proto.eraNarrow = getEraNarrow;
          proto.eraAbbr = getEraAbbr;
          proto.eraYear = getEraYear;
          proto.year = getSetYear;
          proto.isLeapYear = getIsLeapYear;
          proto.weekYear = getSetWeekYear;
          proto.isoWeekYear = getSetISOWeekYear;
          proto.quarter = proto.quarters = getSetQuarter;
          proto.month = getSetMonth;
          proto.daysInMonth = getDaysInMonth;
          proto.week = proto.weeks = getSetWeek;
          proto.isoWeek = proto.isoWeeks = getSetISOWeek;
          proto.weeksInYear = getWeeksInYear;
          proto.weeksInWeekYear = getWeeksInWeekYear;
          proto.isoWeeksInYear = getISOWeeksInYear;
          proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
          proto.date = getSetDayOfMonth;
          proto.day = proto.days = getSetDayOfWeek;
          proto.weekday = getSetLocaleDayOfWeek;
          proto.isoWeekday = getSetISODayOfWeek;
          proto.dayOfYear = getSetDayOfYear;
          proto.hour = proto.hours = getSetHour;
          proto.minute = proto.minutes = getSetMinute;
          proto.second = proto.seconds = getSetSecond;
          proto.millisecond = proto.milliseconds = getSetMillisecond;
          proto.utcOffset = getSetOffset;
          proto.utc = setOffsetToUTC;
          proto.local = setOffsetToLocal;
          proto.parseZone = setOffsetToParsedOffset;
          proto.hasAlignedHourOffset = hasAlignedHourOffset;
          proto.isDST = isDaylightSavingTime;
          proto.isLocal = isLocal;
          proto.isUtcOffset = isUtcOffset;
          proto.isUtc = isUtc;
          proto.isUTC = isUtc;
          proto.zoneAbbr = getZoneAbbr;
          proto.zoneName = getZoneName;
          proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
          proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
          proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
          proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
          proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
          function createUnix(input) {
            return createLocal(input * 1000);
          }
          function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
          }
          function preParsePostFormat(string) {
            return string;
          }
          var proto$1 = Locale.prototype;
          proto$1.calendar = calendar;
          proto$1.longDateFormat = longDateFormat;
          proto$1.invalidDate = invalidDate;
          proto$1.ordinal = ordinal;
          proto$1.preparse = preParsePostFormat;
          proto$1.postformat = preParsePostFormat;
          proto$1.relativeTime = relativeTime;
          proto$1.pastFuture = pastFuture;
          proto$1.set = set;
          proto$1.eras = localeEras;
          proto$1.erasParse = localeErasParse;
          proto$1.erasConvertYear = localeErasConvertYear;
          proto$1.erasAbbrRegex = erasAbbrRegex;
          proto$1.erasNameRegex = erasNameRegex;
          proto$1.erasNarrowRegex = erasNarrowRegex;
          proto$1.months = localeMonths;
          proto$1.monthsShort = localeMonthsShort;
          proto$1.monthsParse = localeMonthsParse;
          proto$1.monthsRegex = monthsRegex;
          proto$1.monthsShortRegex = monthsShortRegex;
          proto$1.week = localeWeek;
          proto$1.firstDayOfYear = localeFirstDayOfYear;
          proto$1.firstDayOfWeek = localeFirstDayOfWeek;
          proto$1.weekdays = localeWeekdays;
          proto$1.weekdaysMin = localeWeekdaysMin;
          proto$1.weekdaysShort = localeWeekdaysShort;
          proto$1.weekdaysParse = localeWeekdaysParse;
          proto$1.weekdaysRegex = weekdaysRegex;
          proto$1.weekdaysShortRegex = weekdaysShortRegex;
          proto$1.weekdaysMinRegex = weekdaysMinRegex;
          proto$1.isPM = localeIsPM;
          proto$1.meridiem = localeMeridiem;
          function get$1(format, index, field, setter) {
            var locale = getLocale(),
              utc = createUTC().set(setter, index);
            return locale[field](utc, format);
          }
          function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
              index = format;
              format = undefined;
            }
            format = format || '';
            if (index != null) {
              return get$1(format, index, field, 'month');
            }
            var i,
              out = [];
            for (i = 0; i < 12; i++) {
              out[i] = get$1(format, i, field, 'month');
            }
            return out;
          }

          // ()
          // (5)
          // (fmt, 5)
          // (fmt)
          // (true)
          // (true, 5)
          // (true, fmt, 5)
          // (true, fmt)
          function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }
              format = format || '';
            } else {
              format = localeSorted;
              index = format;
              localeSorted = false;
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }
              format = format || '';
            }
            var locale = getLocale(),
              shift = localeSorted ? locale._week.dow : 0,
              i,
              out = [];
            if (index != null) {
              return get$1(format, (index + shift) % 7, field, 'day');
            }
            for (i = 0; i < 7; i++) {
              out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
          }
          function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
          }
          function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
          }
          function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
          }
          function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
          }
          function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
          }
          getSetGlobalLocale('en', {
            eras: [{
              since: '0001-01-01',
              until: +Infinity,
              offset: 1,
              name: 'Anno Domini',
              narrow: 'AD',
              abbr: 'AD'
            }, {
              since: '0000-12-31',
              until: -Infinity,
              offset: 1,
              name: 'Before Christ',
              narrow: 'BC',
              abbr: 'BC'
            }],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
              var b = number % 10,
                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
              return number + output;
            }
          });

          // Side effect imports

          hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
          hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
          var mathAbs = Math.abs;
          function abs() {
            var data = this._data;
            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);
            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);
            return this;
          }
          function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);
            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;
            return duration._bubble();
          }

          // supports only 2.0-style add(1, 's') or add(duration)
          function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
          }

          // supports only 2.0-style subtract(1, 's') or subtract(duration)
          function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
          }
          function absCeil(number) {
            if (number < 0) {
              return Math.floor(number);
            } else {
              return Math.ceil(number);
            }
          }
          function bubble() {
            var milliseconds = this._milliseconds,
              days = this._days,
              months = this._months,
              data = this._data,
              seconds,
              minutes,
              hours,
              years,
              monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;
            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;
            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;
            hours = absFloor(minutes / 60);
            data.hours = hours % 24;
            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;
            data.days = days;
            data.months = months;
            data.years = years;
            return this;
          }
          function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return days * 4800 / 146097;
          }
          function monthsToDays(months) {
            // the reverse of daysToMonths
            return months * 146097 / 4800;
          }
          function as(units) {
            if (!this.isValid()) {
              return NaN;
            }
            var days,
              months,
              milliseconds = this._milliseconds;
            units = normalizeUnits(units);
            if (units === 'month' || units === 'quarter' || units === 'year') {
              days = this._days + milliseconds / 864e5;
              months = this._months + daysToMonths(days);
              switch (units) {
                case 'month':
                  return months;
                case 'quarter':
                  return months / 3;
                case 'year':
                  return months / 12;
              }
            } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                case 'week':
                  return days / 7 + milliseconds / 6048e5;
                case 'day':
                  return days + milliseconds / 864e5;
                case 'hour':
                  return days * 24 + milliseconds / 36e5;
                case 'minute':
                  return days * 1440 + milliseconds / 6e4;
                case 'second':
                  return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                  return Math.floor(days * 864e5) + milliseconds;
                default:
                  throw new Error('Unknown unit ' + units);
              }
            }
          }
          function makeAs(alias) {
            return function () {
              return this.as(alias);
            };
          }
          var asMilliseconds = makeAs('ms'),
            asSeconds = makeAs('s'),
            asMinutes = makeAs('m'),
            asHours = makeAs('h'),
            asDays = makeAs('d'),
            asWeeks = makeAs('w'),
            asMonths = makeAs('M'),
            asQuarters = makeAs('Q'),
            asYears = makeAs('y'),
            valueOf$1 = asMilliseconds;
          function clone$1() {
            return createDuration(this);
          }
          function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
          }
          function makeGetter(name) {
            return function () {
              return this.isValid() ? this._data[name] : NaN;
            };
          }
          var milliseconds = makeGetter('milliseconds'),
            seconds = makeGetter('seconds'),
            minutes = makeGetter('minutes'),
            hours = makeGetter('hours'),
            days = makeGetter('days'),
            months = makeGetter('months'),
            years = makeGetter('years');
          function weeks() {
            return absFloor(this.days() / 7);
          }
          var round = Math.round,
            thresholds = {
              ss: 44,
              // a few seconds to seconds
              s: 45,
              // seconds to minute
              m: 45,
              // minutes to hour
              h: 22,
              // hours to day
              d: 26,
              // days to month/week
              w: null,
              // weeks to month
              M: 11 // months to year
            };

          // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
          function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
          }
          function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(),
              seconds = round(duration.as('s')),
              minutes = round(duration.as('m')),
              hours = round(duration.as('h')),
              days = round(duration.as('d')),
              months = round(duration.as('M')),
              weeks = round(duration.as('w')),
              years = round(duration.as('y')),
              a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];
            if (thresholds.w != null) {
              a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
            }
            a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
          }

          // This function allows you to set the rounding function for relative time strings
          function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
              return round;
            }
            if (typeof roundingFunction === 'function') {
              round = roundingFunction;
              return true;
            }
            return false;
          }

          // This function allows you to set a threshold for relative time strings
          function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
              return false;
            }
            if (limit === undefined) {
              return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
              thresholds.ss = limit - 1;
            }
            return true;
          }
          function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }
            var withSuffix = false,
              th = thresholds,
              locale,
              output;
            if (typeof argWithSuffix === 'object') {
              argThresholds = argWithSuffix;
              argWithSuffix = false;
            }
            if (typeof argWithSuffix === 'boolean') {
              withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === 'object') {
              th = Object.assign({}, thresholds, argThresholds);
              if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
              }
            }
            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);
            if (withSuffix) {
              output = locale.pastFuture(+this, output);
            }
            return locale.postformat(output);
          }
          var abs$1 = Math.abs;
          function sign(x) {
            return (x > 0) - (x < 0) || +x;
          }
          function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }
            var seconds = abs$1(this._milliseconds) / 1000,
              days = abs$1(this._days),
              months = abs$1(this._months),
              minutes,
              hours,
              years,
              s,
              total = this.asSeconds(),
              totalSign,
              ymSign,
              daysSign,
              hmsSign;
            if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return 'P0D';
            }

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
            return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
          }
          var proto$2 = Duration.prototype;
          proto$2.isValid = isValid$1;
          proto$2.abs = abs;
          proto$2.add = add$1;
          proto$2.subtract = subtract$1;
          proto$2.as = as;
          proto$2.asMilliseconds = asMilliseconds;
          proto$2.asSeconds = asSeconds;
          proto$2.asMinutes = asMinutes;
          proto$2.asHours = asHours;
          proto$2.asDays = asDays;
          proto$2.asWeeks = asWeeks;
          proto$2.asMonths = asMonths;
          proto$2.asQuarters = asQuarters;
          proto$2.asYears = asYears;
          proto$2.valueOf = valueOf$1;
          proto$2._bubble = bubble;
          proto$2.clone = clone$1;
          proto$2.get = get$2;
          proto$2.milliseconds = milliseconds;
          proto$2.seconds = seconds;
          proto$2.minutes = minutes;
          proto$2.hours = hours;
          proto$2.days = days;
          proto$2.weeks = weeks;
          proto$2.months = months;
          proto$2.years = years;
          proto$2.humanize = humanize;
          proto$2.toISOString = toISOString$1;
          proto$2.toString = toISOString$1;
          proto$2.toJSON = toISOString$1;
          proto$2.locale = locale;
          proto$2.localeData = localeData;
          proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
          proto$2.lang = lang;

          // FORMATTING

          addFormatToken('X', 0, 0, 'unix');
          addFormatToken('x', 0, 0, 'valueOf');

          // PARSING

          addRegexToken('x', matchSigned);
          addRegexToken('X', matchTimestamp);
          addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
          });
          addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
          });

          //! moment.js

          hooks.version = '2.30.1';
          setHookCallback(createLocal);
          hooks.fn = proto;
          hooks.min = min;
          hooks.max = max;
          hooks.now = now;
          hooks.utc = createUTC;
          hooks.unix = createUnix;
          hooks.months = listMonths;
          hooks.isDate = isDate;
          hooks.locale = getSetGlobalLocale;
          hooks.invalid = createInvalid;
          hooks.duration = createDuration;
          hooks.isMoment = isMoment;
          hooks.weekdays = listWeekdays;
          hooks.parseZone = createInZone;
          hooks.localeData = getLocale;
          hooks.isDuration = isDuration;
          hooks.monthsShort = listMonthsShort;
          hooks.weekdaysMin = listWeekdaysMin;
          hooks.defineLocale = defineLocale;
          hooks.updateLocale = updateLocale;
          hooks.locales = listLocales;
          hooks.weekdaysShort = listWeekdaysShort;
          hooks.normalizeUnits = normalizeUnits;
          hooks.relativeTimeRounding = getSetRelativeTimeRounding;
          hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
          hooks.calendarFormat = getCalendarFormat;
          hooks.prototype = proto;

          // currently HTML5 input type only supports 24-hour formats
          hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
            // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
            // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
            // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD',
            // <input type="date" />
            TIME: 'HH:mm',
            // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss',
            // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS',
            // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW',
            // <input type="week" />
            MONTH: 'YYYY-MM' // <input type="month" />
          };

          return hooks;
        });

        // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/moment.mjs_cjs=&original=.js", ['./moment.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;
  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './moment.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./moment.js', module.meta.url);
      }
      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/pad-ansix923.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * ANSI X.923 padding strategy.
           */
          CryptoJS.pad.AnsiX923 = {
            pad: function (data, blockSize) {
              // Shortcuts
              var dataSigBytes = data.sigBytes;
              var blockSizeBytes = blockSize * 4;

              // Count padding bytes
              var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

              // Compute last byte position
              var lastBytePos = dataSigBytes + nPaddingBytes - 1;

              // Pad
              data.clamp();
              data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
              data.sigBytes += nPaddingBytes;
            },
            unpad: function (data) {
              // Get number of padding bytes from last byte
              var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

              // Remove padding
              data.sigBytes -= nPaddingBytes;
            }
          };
          return CryptoJS.pad.Ansix923;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/pad-iso10126.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * ISO 10126 padding strategy.
           */
          CryptoJS.pad.Iso10126 = {
            pad: function (data, blockSize) {
              // Shortcut
              var blockSizeBytes = blockSize * 4;

              // Count padding bytes
              var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

              // Pad
              data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
            },
            unpad: function (data) {
              // Get number of padding bytes from last byte
              var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

              // Remove padding
              data.sigBytes -= nPaddingBytes;
            }
          };
          return CryptoJS.pad.Iso10126;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/pad-iso97971.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * ISO/IEC 9797-1 Padding Method 2.
           */
          CryptoJS.pad.Iso97971 = {
            pad: function (data, blockSize) {
              // Add 0x80 byte
              data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

              // Zero pad the rest
              CryptoJS.pad.ZeroPadding.pad(data, blockSize);
            },
            unpad: function (data) {
              // Remove zero padding
              CryptoJS.pad.ZeroPadding.unpad(data);

              // Remove one more byte -- the 0x80 byte
              data.sigBytes--;
            }
          };
          return CryptoJS.pad.Iso97971;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/pad-nopadding.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * A noop padding strategy.
           */
          CryptoJS.pad.NoPadding = {
            pad: function () {},
            unpad: function () {}
          };
          return CryptoJS.pad.NoPadding;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/pad-zeropadding.js", ['./cjs-loader.mjs', './core.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /**
           * Zero padding strategy.
           */
          CryptoJS.pad.ZeroPadding = {
            pad: function (data, blockSize) {
              // Shortcut
              var blockSizeBytes = blockSize * 4;

              // Pad
              data.clamp();
              data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
            },
            unpad: function (data) {
              // Shortcut
              var dataWords = data.words;

              // Unpad
              var i = data.sigBytes - 1;
              for (var i = data.sigBytes - 1; i >= 0; i--) {
                if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff) {
                  data.sigBytes = i + 1;
                  break;
                }
              }
            }
          };
          return CryptoJS.pad.ZeroPadding;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './cipher-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/pbkdf2.js", ['./cjs-loader.mjs', './core.js', './sha256.js', './hmac.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./sha256"), require("./hmac"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./sha256", "./hmac"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var Base = C_lib.Base;
            var WordArray = C_lib.WordArray;
            var C_algo = C.algo;
            var SHA256 = C_algo.SHA256;
            var HMAC = C_algo.HMAC;

            /**
             * Password-Based Key Derivation Function 2 algorithm.
             */
            var PBKDF2 = C_algo.PBKDF2 = Base.extend({
              /**
               * Configuration options.
               *
               * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
               * @property {Hasher} hasher The hasher to use. Default: SHA256
               * @property {number} iterations The number of iterations to perform. Default: 250000
               */
              cfg: Base.extend({
                keySize: 128 / 32,
                hasher: SHA256,
                iterations: 250000
              }),
              /**
               * Initializes a newly created key derivation function.
               *
               * @param {Object} cfg (Optional) The configuration options to use for the derivation.
               *
               * @example
               *
               *     var kdf = CryptoJS.algo.PBKDF2.create();
               *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
               *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
               */
              init: function (cfg) {
                this.cfg = this.cfg.extend(cfg);
              },
              /**
               * Computes the Password-Based Key Derivation Function 2.
               *
               * @param {WordArray|string} password The password.
               * @param {WordArray|string} salt A salt.
               *
               * @return {WordArray} The derived key.
               *
               * @example
               *
               *     var key = kdf.compute(password, salt);
               */
              compute: function (password, salt) {
                // Shortcut
                var cfg = this.cfg;

                // Init HMAC
                var hmac = HMAC.create(cfg.hasher, password);

                // Initial values
                var derivedKey = WordArray.create();
                var blockIndex = WordArray.create([0x00000001]);

                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var blockIndexWords = blockIndex.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;

                // Generate key
                while (derivedKeyWords.length < keySize) {
                  var block = hmac.update(salt).finalize(blockIndex);
                  hmac.reset();

                  // Shortcuts
                  var blockWords = block.words;
                  var blockWordsLength = blockWords.length;

                  // Iterations
                  var intermediate = block;
                  for (var i = 1; i < iterations; i++) {
                    intermediate = hmac.finalize(intermediate);
                    hmac.reset();

                    // Shortcut
                    var intermediateWords = intermediate.words;

                    // XOR intermediate with block
                    for (var j = 0; j < blockWordsLength; j++) {
                      blockWords[j] ^= intermediateWords[j];
                    }
                  }
                  derivedKey.concat(block);
                  blockIndexWords[0]++;
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
              }
            });

            /**
             * Computes the Password-Based Key Derivation Function 2.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             * @param {Object} cfg (Optional) The configuration options to use for this computation.
             *
             * @return {WordArray} The derived key.
             *
             * @static
             *
             * @example
             *
             *     var key = CryptoJS.PBKDF2(password, salt);
             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
             */
            C.PBKDF2 = function (password, salt, cfg) {
              return PBKDF2.create(cfg).compute(password, salt);
            };
          })();
          return CryptoJS.PBKDF2;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './sha256': __cjsMetaURL$2,
        './hmac': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/rabbit-legacy.js", ['./cjs-loader.mjs', './core.js', './enc-base64.js', './md5.js', './evpkdf.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var StreamCipher = C_lib.StreamCipher;
            var C_algo = C.algo;

            // Reusable objects
            var S = [];
            var C_ = [];
            var G = [];

            /**
             * Rabbit stream cipher algorithm.
             *
             * This is a legacy version that neglected to convert the key to little-endian.
             * This error doesn't affect the cipher's security,
             * but it does affect its compatibility with other implementations.
             */
            var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
              _doReset: function () {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;

                // Generate initial state values
                var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

                // Generate initial counter values
                var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

                // Carry bit
                this._b = 0;

                // Iterate the system four times
                for (var i = 0; i < 4; i++) {
                  nextState.call(this);
                }

                // Modify the counters
                for (var i = 0; i < 8; i++) {
                  C[i] ^= X[i + 4 & 7];
                }

                // IV setup
                if (iv) {
                  // Shortcuts
                  var IV = iv.words;
                  var IV_0 = IV[0];
                  var IV_1 = IV[1];

                  // Generate four subvectors
                  var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
                  var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
                  var i1 = i0 >>> 16 | i2 & 0xffff0000;
                  var i3 = i2 << 16 | i0 & 0x0000ffff;

                  // Modify counter values
                  C[0] ^= i0;
                  C[1] ^= i1;
                  C[2] ^= i2;
                  C[3] ^= i3;
                  C[4] ^= i0;
                  C[5] ^= i1;
                  C[6] ^= i2;
                  C[7] ^= i3;

                  // Iterate the system four times
                  for (var i = 0; i < 4; i++) {
                    nextState.call(this);
                  }
                }
              },
              _doProcessBlock: function (M, offset) {
                // Shortcut
                var X = this._X;

                // Iterate the system
                nextState.call(this);

                // Generate four keystream words
                S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                for (var i = 0; i < 4; i++) {
                  // Swap endian
                  S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

                  // Encrypt
                  M[offset + i] ^= S[i];
                }
              },
              blockSize: 128 / 32,
              ivSize: 64 / 32
            });
            function nextState() {
              // Shortcuts
              var X = this._X;
              var C = this._C;

              // Save old counter values
              for (var i = 0; i < 8; i++) {
                C_[i] = C[i];
              }

              // Calculate new counter values
              C[0] = C[0] + 0x4d34d34d + this._b | 0;
              C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
              C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
              C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
              C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
              C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
              C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
              C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
              this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

              // Calculate the g-values
              for (var i = 0; i < 8; i++) {
                var gx = X[i] + C[i];

                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;

                // Calculate high and low result of squaring
                var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

                // High XOR low
                G[i] = gh ^ gl;
              }

              // Calculate new state values
              X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
              X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
              X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
              X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
              X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
              X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
              X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
              X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
            }

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
             */
            C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
          })();
          return CryptoJS.RabbitLegacy;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './enc-base64': __cjsMetaURL$2,
        './md5': __cjsMetaURL$3,
        './evpkdf': __cjsMetaURL$4,
        './cipher-core': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/rabbit.js", ['./cjs-loader.mjs', './core.js', './enc-base64.js', './md5.js', './evpkdf.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var StreamCipher = C_lib.StreamCipher;
            var C_algo = C.algo;

            // Reusable objects
            var S = [];
            var C_ = [];
            var G = [];

            /**
             * Rabbit stream cipher algorithm
             */
            var Rabbit = C_algo.Rabbit = StreamCipher.extend({
              _doReset: function () {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;

                // Swap endian
                for (var i = 0; i < 4; i++) {
                  K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
                }

                // Generate initial state values
                var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

                // Generate initial counter values
                var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

                // Carry bit
                this._b = 0;

                // Iterate the system four times
                for (var i = 0; i < 4; i++) {
                  nextState.call(this);
                }

                // Modify the counters
                for (var i = 0; i < 8; i++) {
                  C[i] ^= X[i + 4 & 7];
                }

                // IV setup
                if (iv) {
                  // Shortcuts
                  var IV = iv.words;
                  var IV_0 = IV[0];
                  var IV_1 = IV[1];

                  // Generate four subvectors
                  var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
                  var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
                  var i1 = i0 >>> 16 | i2 & 0xffff0000;
                  var i3 = i2 << 16 | i0 & 0x0000ffff;

                  // Modify counter values
                  C[0] ^= i0;
                  C[1] ^= i1;
                  C[2] ^= i2;
                  C[3] ^= i3;
                  C[4] ^= i0;
                  C[5] ^= i1;
                  C[6] ^= i2;
                  C[7] ^= i3;

                  // Iterate the system four times
                  for (var i = 0; i < 4; i++) {
                    nextState.call(this);
                  }
                }
              },
              _doProcessBlock: function (M, offset) {
                // Shortcut
                var X = this._X;

                // Iterate the system
                nextState.call(this);

                // Generate four keystream words
                S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                for (var i = 0; i < 4; i++) {
                  // Swap endian
                  S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

                  // Encrypt
                  M[offset + i] ^= S[i];
                }
              },
              blockSize: 128 / 32,
              ivSize: 64 / 32
            });
            function nextState() {
              // Shortcuts
              var X = this._X;
              var C = this._C;

              // Save old counter values
              for (var i = 0; i < 8; i++) {
                C_[i] = C[i];
              }

              // Calculate new counter values
              C[0] = C[0] + 0x4d34d34d + this._b | 0;
              C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
              C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
              C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
              C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
              C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
              C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
              C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
              this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

              // Calculate the g-values
              for (var i = 0; i < 8; i++) {
                var gx = X[i] + C[i];

                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;

                // Calculate high and low result of squaring
                var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

                // High XOR low
                G[i] = gh ^ gl;
              }

              // Calculate new state values
              X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
              X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
              X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
              X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
              X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
              X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
              X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
              X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
            }

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
             */
            C.Rabbit = StreamCipher._createHelper(Rabbit);
          })();
          return CryptoJS.Rabbit;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './enc-base64': __cjsMetaURL$2,
        './md5': __cjsMetaURL$3,
        './evpkdf': __cjsMetaURL$4,
        './cipher-core': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/rc4.js", ['./cjs-loader.mjs', './core.js', './enc-base64.js', './md5.js', './evpkdf.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var StreamCipher = C_lib.StreamCipher;
            var C_algo = C.algo;

            /**
             * RC4 stream cipher algorithm.
             */
            var RC4 = C_algo.RC4 = StreamCipher.extend({
              _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                var keySigBytes = key.sigBytes;

                // Init sbox
                var S = this._S = [];
                for (var i = 0; i < 256; i++) {
                  S[i] = i;
                }

                // Key setup
                for (var i = 0, j = 0; i < 256; i++) {
                  var keyByteIndex = i % keySigBytes;
                  var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
                  j = (j + S[i] + keyByte) % 256;

                  // Swap
                  var t = S[i];
                  S[i] = S[j];
                  S[j] = t;
                }

                // Counters
                this._i = this._j = 0;
              },
              _doProcessBlock: function (M, offset) {
                M[offset] ^= generateKeystreamWord.call(this);
              },
              keySize: 256 / 32,
              ivSize: 0
            });
            function generateKeystreamWord() {
              // Shortcuts
              var S = this._S;
              var i = this._i;
              var j = this._j;

              // Generate keystream word
              var keystreamWord = 0;
              for (var n = 0; n < 4; n++) {
                i = (i + 1) % 256;
                j = (j + S[i]) % 256;

                // Swap
                var t = S[i];
                S[i] = S[j];
                S[j] = t;
                keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
              }

              // Update counters
              this._i = i;
              this._j = j;
              return keystreamWord;
            }

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
             */
            C.RC4 = StreamCipher._createHelper(RC4);

            /**
             * Modified RC4 stream cipher algorithm.
             */
            var RC4Drop = C_algo.RC4Drop = RC4.extend({
              /**
               * Configuration options.
               *
               * @property {number} drop The number of keystream words to drop. Default 192
               */
              cfg: RC4.cfg.extend({
                drop: 192
              }),
              _doReset: function () {
                RC4._doReset.call(this);

                // Drop
                for (var i = this.cfg.drop; i > 0; i--) {
                  generateKeystreamWord.call(this);
                }
              }
            });

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
             */
            C.RC4Drop = StreamCipher._createHelper(RC4Drop);
          })();
          return CryptoJS.RC4;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './enc-base64': __cjsMetaURL$2,
        './md5': __cjsMetaURL$3,
        './evpkdf': __cjsMetaURL$4,
        './cipher-core': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/ripemd160.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          /** @preserve
          (c) 2012 by Cédric Mesnil. All rights reserved.
          	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
          	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
              - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
          	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
          */

          (function (Math) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var Hasher = C_lib.Hasher;
            var C_algo = C.algo;

            // Constants table
            var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
            var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
            var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
            var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);
            var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
            var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

            /**
             * RIPEMD160 hash algorithm.
             */
            var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
              _doReset: function () {
                this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
              },
              _doProcessBlock: function (M, offset) {
                // Swap endian
                for (var i = 0; i < 16; i++) {
                  // Shortcuts
                  var offset_i = offset + i;
                  var M_offset_i = M[offset_i];

                  // Swap
                  M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
                }
                // Shortcut
                var H = this._hash.words;
                var hl = _hl.words;
                var hr = _hr.words;
                var zl = _zl.words;
                var zr = _zr.words;
                var sl = _sl.words;
                var sr = _sr.words;

                // Working variables
                var al, bl, cl, dl, el;
                var ar, br, cr, dr, er;
                ar = al = H[0];
                br = bl = H[1];
                cr = cl = H[2];
                dr = dl = H[3];
                er = el = H[4];
                // Computation
                var t;
                for (var i = 0; i < 80; i += 1) {
                  t = al + M[offset + zl[i]] | 0;
                  if (i < 16) {
                    t += f1(bl, cl, dl) + hl[0];
                  } else if (i < 32) {
                    t += f2(bl, cl, dl) + hl[1];
                  } else if (i < 48) {
                    t += f3(bl, cl, dl) + hl[2];
                  } else if (i < 64) {
                    t += f4(bl, cl, dl) + hl[3];
                  } else {
                    // if (i<80) {
                    t += f5(bl, cl, dl) + hl[4];
                  }
                  t = t | 0;
                  t = rotl(t, sl[i]);
                  t = t + el | 0;
                  al = el;
                  el = dl;
                  dl = rotl(cl, 10);
                  cl = bl;
                  bl = t;
                  t = ar + M[offset + zr[i]] | 0;
                  if (i < 16) {
                    t += f5(br, cr, dr) + hr[0];
                  } else if (i < 32) {
                    t += f4(br, cr, dr) + hr[1];
                  } else if (i < 48) {
                    t += f3(br, cr, dr) + hr[2];
                  } else if (i < 64) {
                    t += f2(br, cr, dr) + hr[3];
                  } else {
                    // if (i<80) {
                    t += f1(br, cr, dr) + hr[4];
                  }
                  t = t | 0;
                  t = rotl(t, sr[i]);
                  t = t + er | 0;
                  ar = er;
                  er = dr;
                  dr = rotl(cr, 10);
                  cr = br;
                  br = t;
                }
                // Intermediate hash value
                t = H[1] + cl + dr | 0;
                H[1] = H[2] + dl + er | 0;
                H[2] = H[3] + el + ar | 0;
                H[3] = H[4] + al + br | 0;
                H[4] = H[0] + bl + cr | 0;
                H[0] = t;
              },
              _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;

                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
                data.sigBytes = (dataWords.length + 1) * 4;

                // Hash final blocks
                this._process();

                // Shortcuts
                var hash = this._hash;
                var H = hash.words;

                // Swap endian
                for (var i = 0; i < 5; i++) {
                  // Shortcut
                  var H_i = H[i];

                  // Swap
                  H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
                }

                // Return final computed hash
                return hash;
              },
              clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
              }
            });
            function f1(x, y, z) {
              return x ^ y ^ z;
            }
            function f2(x, y, z) {
              return x & y | ~x & z;
            }
            function f3(x, y, z) {
              return (x | ~y) ^ z;
            }
            function f4(x, y, z) {
              return x & z | y & ~z;
            }
            function f5(x, y, z) {
              return x ^ (y | ~z);
            }
            function rotl(x, n) {
              return x << n | x >>> 32 - n;
            }

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.RIPEMD160('message');
             *     var hash = CryptoJS.RIPEMD160(wordArray);
             */
            C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
             */
            C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
          })();
          return CryptoJS.RIPEMD160;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/rollupPluginModLoBabelHelpers.js", [], function (exports) {
  return {
    execute: function () {
      exports({
        applyDecoratedDescriptor: _applyDecoratedDescriptor,
        initializerDefineProperty: _initializerDefineProperty
      });
      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }
      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }
        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);
        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }
        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }
        return desc;
      }
    }
  };
});

System.register("chunks:///_virtual/sha1.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var Hasher = C_lib.Hasher;
            var C_algo = C.algo;

            // Reusable object
            var W = [];

            /**
             * SHA-1 hash algorithm.
             */
            var SHA1 = C_algo.SHA1 = Hasher.extend({
              _doReset: function () {
                this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
              },
              _doProcessBlock: function (M, offset) {
                // Shortcut
                var H = this._hash.words;

                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];

                // Computation
                for (var i = 0; i < 80; i++) {
                  if (i < 16) {
                    W[i] = M[offset + i] | 0;
                  } else {
                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                    W[i] = n << 1 | n >>> 31;
                  }
                  var t = (a << 5 | a >>> 27) + e + W[i];
                  if (i < 20) {
                    t += (b & c | ~b & d) + 0x5a827999;
                  } else if (i < 40) {
                    t += (b ^ c ^ d) + 0x6ed9eba1;
                  } else if (i < 60) {
                    t += (b & c | b & d | c & d) - 0x70e44324;
                  } else /* if (i < 80) */{
                      t += (b ^ c ^ d) - 0x359d3e2a;
                    }
                  e = d;
                  d = c;
                  c = b << 30 | b >>> 2;
                  b = a;
                  a = t;
                }

                // Intermediate hash value
                H[0] = H[0] + a | 0;
                H[1] = H[1] + b | 0;
                H[2] = H[2] + c | 0;
                H[3] = H[3] + d | 0;
                H[4] = H[4] + e | 0;
              },
              _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;

                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;

                // Hash final blocks
                this._process();

                // Return final computed hash
                return this._hash;
              },
              clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
              }
            });

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA1('message');
             *     var hash = CryptoJS.SHA1(wordArray);
             */
            C.SHA1 = Hasher._createHelper(SHA1);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacSHA1(message, key);
             */
            C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
          })();
          return CryptoJS.SHA1;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/sha224.js", ['./cjs-loader.mjs', './core.js', './sha256.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./sha256"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./sha256"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var C_algo = C.algo;
            var SHA256 = C_algo.SHA256;

            /**
             * SHA-224 hash algorithm.
             */
            var SHA224 = C_algo.SHA224 = SHA256.extend({
              _doReset: function () {
                this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
              },
              _doFinalize: function () {
                var hash = SHA256._doFinalize.call(this);
                hash.sigBytes -= 4;
                return hash;
              }
            });

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA224('message');
             *     var hash = CryptoJS.SHA224(wordArray);
             */
            C.SHA224 = SHA256._createHelper(SHA224);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacSHA224(message, key);
             */
            C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
          })();
          return CryptoJS.SHA224;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './sha256': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/sha256.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function (Math) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var Hasher = C_lib.Hasher;
            var C_algo = C.algo;

            // Initialization and round constants tables
            var H = [];
            var K = [];

            // Compute constants
            (function () {
              function isPrime(n) {
                var sqrtN = Math.sqrt(n);
                for (var factor = 2; factor <= sqrtN; factor++) {
                  if (!(n % factor)) {
                    return false;
                  }
                }
                return true;
              }
              function getFractionalBits(n) {
                return (n - (n | 0)) * 0x100000000 | 0;
              }
              var n = 2;
              var nPrime = 0;
              while (nPrime < 64) {
                if (isPrime(n)) {
                  if (nPrime < 8) {
                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
                  }
                  K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
                  nPrime++;
                }
                n++;
              }
            })();

            // Reusable object
            var W = [];

            /**
             * SHA-256 hash algorithm.
             */
            var SHA256 = C_algo.SHA256 = Hasher.extend({
              _doReset: function () {
                this._hash = new WordArray.init(H.slice(0));
              },
              _doProcessBlock: function (M, offset) {
                // Shortcut
                var H = this._hash.words;

                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                var f = H[5];
                var g = H[6];
                var h = H[7];

                // Computation
                for (var i = 0; i < 64; i++) {
                  if (i < 16) {
                    W[i] = M[offset + i] | 0;
                  } else {
                    var gamma0x = W[i - 15];
                    var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                    var gamma1x = W[i - 2];
                    var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                  }
                  var ch = e & f ^ ~e & g;
                  var maj = a & b ^ a & c ^ b & c;
                  var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                  var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                  var t1 = h + sigma1 + ch + K[i] + W[i];
                  var t2 = sigma0 + maj;
                  h = g;
                  g = f;
                  f = e;
                  e = d + t1 | 0;
                  d = c;
                  c = b;
                  b = a;
                  a = t1 + t2 | 0;
                }

                // Intermediate hash value
                H[0] = H[0] + a | 0;
                H[1] = H[1] + b | 0;
                H[2] = H[2] + c | 0;
                H[3] = H[3] + d | 0;
                H[4] = H[4] + e | 0;
                H[5] = H[5] + f | 0;
                H[6] = H[6] + g | 0;
                H[7] = H[7] + h | 0;
              },
              _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;

                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;

                // Hash final blocks
                this._process();

                // Return final computed hash
                return this._hash;
              },
              clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
              }
            });

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA256('message');
             *     var hash = CryptoJS.SHA256(wordArray);
             */
            C.SHA256 = Hasher._createHelper(SHA256);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacSHA256(message, key);
             */
            C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
          })(Math);
          return CryptoJS.SHA256;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/sha3.js", ['./cjs-loader.mjs', './core.js', './x64-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./x64-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./x64-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function (Math) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var Hasher = C_lib.Hasher;
            var C_x64 = C.x64;
            var X64Word = C_x64.Word;
            var C_algo = C.algo;

            // Constants tables
            var RHO_OFFSETS = [];
            var PI_INDEXES = [];
            var ROUND_CONSTANTS = [];

            // Compute Constants
            (function () {
              // Compute rho offset constants
              var x = 1,
                y = 0;
              for (var t = 0; t < 24; t++) {
                RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
                var newX = y % 5;
                var newY = (2 * x + 3 * y) % 5;
                x = newX;
                y = newY;
              }

              // Compute pi index constants
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
                }
              }

              // Compute round constants
              var LFSR = 0x01;
              for (var i = 0; i < 24; i++) {
                var roundConstantMsw = 0;
                var roundConstantLsw = 0;
                for (var j = 0; j < 7; j++) {
                  if (LFSR & 0x01) {
                    var bitPosition = (1 << j) - 1;
                    if (bitPosition < 32) {
                      roundConstantLsw ^= 1 << bitPosition;
                    } else /* if (bitPosition >= 32) */{
                        roundConstantMsw ^= 1 << bitPosition - 32;
                      }
                  }

                  // Compute next LFSR
                  if (LFSR & 0x80) {
                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                    LFSR = LFSR << 1 ^ 0x71;
                  } else {
                    LFSR <<= 1;
                  }
                }
                ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
              }
            })();

            // Reusable objects for temporary values
            var T = [];
            (function () {
              for (var i = 0; i < 25; i++) {
                T[i] = X64Word.create();
              }
            })();

            /**
             * SHA-3 hash algorithm.
             */
            var SHA3 = C_algo.SHA3 = Hasher.extend({
              /**
               * Configuration options.
               *
               * @property {number} outputLength
               *   The desired number of bits in the output hash.
               *   Only values permitted are: 224, 256, 384, 512.
               *   Default: 512
               */
              cfg: Hasher.cfg.extend({
                outputLength: 512
              }),
              _doReset: function () {
                var state = this._state = [];
                for (var i = 0; i < 25; i++) {
                  state[i] = new X64Word.init();
                }
                this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
              },
              _doProcessBlock: function (M, offset) {
                // Shortcuts
                var state = this._state;
                var nBlockSizeLanes = this.blockSize / 2;

                // Absorb
                for (var i = 0; i < nBlockSizeLanes; i++) {
                  // Shortcuts
                  var M2i = M[offset + 2 * i];
                  var M2i1 = M[offset + 2 * i + 1];

                  // Swap endian
                  M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
                  M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;

                  // Absorb message into state
                  var lane = state[i];
                  lane.high ^= M2i1;
                  lane.low ^= M2i;
                }

                // Rounds
                for (var round = 0; round < 24; round++) {
                  // Theta
                  for (var x = 0; x < 5; x++) {
                    // Mix column lanes
                    var tMsw = 0,
                      tLsw = 0;
                    for (var y = 0; y < 5; y++) {
                      var lane = state[x + 5 * y];
                      tMsw ^= lane.high;
                      tLsw ^= lane.low;
                    }

                    // Temporary values
                    var Tx = T[x];
                    Tx.high = tMsw;
                    Tx.low = tLsw;
                  }
                  for (var x = 0; x < 5; x++) {
                    // Shortcuts
                    var Tx4 = T[(x + 4) % 5];
                    var Tx1 = T[(x + 1) % 5];
                    var Tx1Msw = Tx1.high;
                    var Tx1Lsw = Tx1.low;

                    // Mix surrounding columns
                    var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                    var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                    for (var y = 0; y < 5; y++) {
                      var lane = state[x + 5 * y];
                      lane.high ^= tMsw;
                      lane.low ^= tLsw;
                    }
                  }

                  // Rho Pi
                  for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                    var tMsw;
                    var tLsw;

                    // Shortcuts
                    var lane = state[laneIndex];
                    var laneMsw = lane.high;
                    var laneLsw = lane.low;
                    var rhoOffset = RHO_OFFSETS[laneIndex];

                    // Rotate lanes
                    if (rhoOffset < 32) {
                      tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                      tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                    } else /* if (rhoOffset >= 32) */{
                        tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                        tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                      }

                    // Transpose lanes
                    var TPiLane = T[PI_INDEXES[laneIndex]];
                    TPiLane.high = tMsw;
                    TPiLane.low = tLsw;
                  }

                  // Rho pi at x = y = 0
                  var T0 = T[0];
                  var state0 = state[0];
                  T0.high = state0.high;
                  T0.low = state0.low;

                  // Chi
                  for (var x = 0; x < 5; x++) {
                    for (var y = 0; y < 5; y++) {
                      // Shortcuts
                      var laneIndex = x + 5 * y;
                      var lane = state[laneIndex];
                      var TLane = T[laneIndex];
                      var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                      var Tx2Lane = T[(x + 2) % 5 + 5 * y];

                      // Mix rows
                      lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                      lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                    }
                  }

                  // Iota
                  var lane = state[0];
                  var roundConstant = ROUND_CONSTANTS[round];
                  lane.high ^= roundConstant.high;
                  lane.low ^= roundConstant.low;
                }
              },
              _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                var blockSizeBits = this.blockSize * 32;

                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
                dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
                data.sigBytes = dataWords.length * 4;

                // Hash final blocks
                this._process();

                // Shortcuts
                var state = this._state;
                var outputLengthBytes = this.cfg.outputLength / 8;
                var outputLengthLanes = outputLengthBytes / 8;

                // Squeeze
                var hashWords = [];
                for (var i = 0; i < outputLengthLanes; i++) {
                  // Shortcuts
                  var lane = state[i];
                  var laneMsw = lane.high;
                  var laneLsw = lane.low;

                  // Swap endian
                  laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
                  laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;

                  // Squeeze state to retrieve hash
                  hashWords.push(laneLsw);
                  hashWords.push(laneMsw);
                }

                // Return final computed hash
                return new WordArray.init(hashWords, outputLengthBytes);
              },
              clone: function () {
                var clone = Hasher.clone.call(this);
                var state = clone._state = this._state.slice(0);
                for (var i = 0; i < 25; i++) {
                  state[i] = state[i].clone();
                }
                return clone;
              }
            });

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA3('message');
             *     var hash = CryptoJS.SHA3(wordArray);
             */
            C.SHA3 = Hasher._createHelper(SHA3);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacSHA3(message, key);
             */
            C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
          })(Math);
          return CryptoJS.SHA3;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './x64-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/sha384.js", ['./cjs-loader.mjs', './core.js', './x64-core.js', './sha512.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./x64-core", "./sha512"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_x64 = C.x64;
            var X64Word = C_x64.Word;
            var X64WordArray = C_x64.WordArray;
            var C_algo = C.algo;
            var SHA512 = C_algo.SHA512;

            /**
             * SHA-384 hash algorithm.
             */
            var SHA384 = C_algo.SHA384 = SHA512.extend({
              _doReset: function () {
                this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
              },
              _doFinalize: function () {
                var hash = SHA512._doFinalize.call(this);
                hash.sigBytes -= 16;
                return hash;
              }
            });

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA384('message');
             *     var hash = CryptoJS.SHA384(wordArray);
             */
            C.SHA384 = SHA512._createHelper(SHA384);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacSHA384(message, key);
             */
            C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
          })();
          return CryptoJS.SHA384;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './x64-core': __cjsMetaURL$2,
        './sha512': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/sha512.js", ['./cjs-loader.mjs', './core.js', './x64-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./x64-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./x64-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var Hasher = C_lib.Hasher;
            var C_x64 = C.x64;
            var X64Word = C_x64.Word;
            var X64WordArray = C_x64.WordArray;
            var C_algo = C.algo;
            function X64Word_create() {
              return X64Word.create.apply(X64Word, arguments);
            }

            // Constants
            var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];

            // Reusable objects
            var W = [];
            (function () {
              for (var i = 0; i < 80; i++) {
                W[i] = X64Word_create();
              }
            })();

            /**
             * SHA-512 hash algorithm.
             */
            var SHA512 = C_algo.SHA512 = Hasher.extend({
              _doReset: function () {
                this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
              },
              _doProcessBlock: function (M, offset) {
                // Shortcuts
                var H = this._hash.words;
                var H0 = H[0];
                var H1 = H[1];
                var H2 = H[2];
                var H3 = H[3];
                var H4 = H[4];
                var H5 = H[5];
                var H6 = H[6];
                var H7 = H[7];
                var H0h = H0.high;
                var H0l = H0.low;
                var H1h = H1.high;
                var H1l = H1.low;
                var H2h = H2.high;
                var H2l = H2.low;
                var H3h = H3.high;
                var H3l = H3.low;
                var H4h = H4.high;
                var H4l = H4.low;
                var H5h = H5.high;
                var H5l = H5.low;
                var H6h = H6.high;
                var H6l = H6.low;
                var H7h = H7.high;
                var H7l = H7.low;

                // Working variables
                var ah = H0h;
                var al = H0l;
                var bh = H1h;
                var bl = H1l;
                var ch = H2h;
                var cl = H2l;
                var dh = H3h;
                var dl = H3l;
                var eh = H4h;
                var el = H4l;
                var fh = H5h;
                var fl = H5l;
                var gh = H6h;
                var gl = H6l;
                var hh = H7h;
                var hl = H7l;

                // Rounds
                for (var i = 0; i < 80; i++) {
                  var Wil;
                  var Wih;

                  // Shortcut
                  var Wi = W[i];

                  // Extend message
                  if (i < 16) {
                    Wih = Wi.high = M[offset + i * 2] | 0;
                    Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                  } else {
                    // Gamma0
                    var gamma0x = W[i - 15];
                    var gamma0xh = gamma0x.high;
                    var gamma0xl = gamma0x.low;
                    var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                    var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);

                    // Gamma1
                    var gamma1x = W[i - 2];
                    var gamma1xh = gamma1x.high;
                    var gamma1xl = gamma1x.low;
                    var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                    var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);

                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                    var Wi7 = W[i - 7];
                    var Wi7h = Wi7.high;
                    var Wi7l = Wi7.low;
                    var Wi16 = W[i - 16];
                    var Wi16h = Wi16.high;
                    var Wi16l = Wi16.low;
                    Wil = gamma0l + Wi7l;
                    Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                    Wil = Wil + gamma1l;
                    Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                    Wil = Wil + Wi16l;
                    Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                    Wi.high = Wih;
                    Wi.low = Wil;
                  }
                  var chh = eh & fh ^ ~eh & gh;
                  var chl = el & fl ^ ~el & gl;
                  var majh = ah & bh ^ ah & ch ^ bh & ch;
                  var majl = al & bl ^ al & cl ^ bl & cl;
                  var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
                  var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
                  var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
                  var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);

                  // t1 = h + sigma1 + ch + K[i] + W[i]
                  var Ki = K[i];
                  var Kih = Ki.high;
                  var Kil = Ki.low;
                  var t1l = hl + sigma1l;
                  var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                  var t1l = t1l + chl;
                  var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                  var t1l = t1l + Kil;
                  var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                  var t1l = t1l + Wil;
                  var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);

                  // t2 = sigma0 + maj
                  var t2l = sigma0l + majl;
                  var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);

                  // Update working variables
                  hh = gh;
                  hl = gl;
                  gh = fh;
                  gl = fl;
                  fh = eh;
                  fl = el;
                  el = dl + t1l | 0;
                  eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
                  dh = ch;
                  dl = cl;
                  ch = bh;
                  cl = bl;
                  bh = ah;
                  bl = al;
                  al = t1l + t2l | 0;
                  ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
                }

                // Intermediate hash value
                H0l = H0.low = H0l + al;
                H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
                H1l = H1.low = H1l + bl;
                H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
                H2l = H2.low = H2l + cl;
                H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
                H3l = H3.low = H3l + dl;
                H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
                H4l = H4.low = H4l + el;
                H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
                H5l = H5.low = H5l + fl;
                H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
                H6l = H6.low = H6l + gl;
                H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
                H7l = H7.low = H7l + hl;
                H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
              },
              _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;

                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;

                // Hash final blocks
                this._process();

                // Convert hash to 32-bit word array before returning
                var hash = this._hash.toX32();

                // Return final computed hash
                return hash;
              },
              clone: function () {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
              },
              blockSize: 1024 / 32
            });

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA512('message');
             *     var hash = CryptoJS.SHA512(wordArray);
             */
            C.SHA512 = Hasher._createHelper(SHA512);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacSHA512(message, key);
             */
            C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
          })();
          return CryptoJS.SHA512;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './x64-core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/tripledes.js", ['./cjs-loader.mjs', './core.js', './enc-base64.js', './md5.js', './evpkdf.js', './cipher-core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory, undef) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function () {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var BlockCipher = C_lib.BlockCipher;
            var C_algo = C.algo;

            // Permuted Choice 1 constants
            var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];

            // Permuted Choice 2 constants
            var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];

            // Cumulative bit shift constants
            var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

            // SBOXes and round permutation constants
            var SBOX_P = [{
              0x0: 0x808200,
              0x10000000: 0x8000,
              0x20000000: 0x808002,
              0x30000000: 0x2,
              0x40000000: 0x200,
              0x50000000: 0x808202,
              0x60000000: 0x800202,
              0x70000000: 0x800000,
              0x80000000: 0x202,
              0x90000000: 0x800200,
              0xa0000000: 0x8200,
              0xb0000000: 0x808000,
              0xc0000000: 0x8002,
              0xd0000000: 0x800002,
              0xe0000000: 0x0,
              0xf0000000: 0x8202,
              0x8000000: 0x0,
              0x18000000: 0x808202,
              0x28000000: 0x8202,
              0x38000000: 0x8000,
              0x48000000: 0x808200,
              0x58000000: 0x200,
              0x68000000: 0x808002,
              0x78000000: 0x2,
              0x88000000: 0x800200,
              0x98000000: 0x8200,
              0xa8000000: 0x808000,
              0xb8000000: 0x800202,
              0xc8000000: 0x800002,
              0xd8000000: 0x8002,
              0xe8000000: 0x202,
              0xf8000000: 0x800000,
              0x1: 0x8000,
              0x10000001: 0x2,
              0x20000001: 0x808200,
              0x30000001: 0x800000,
              0x40000001: 0x808002,
              0x50000001: 0x8200,
              0x60000001: 0x200,
              0x70000001: 0x800202,
              0x80000001: 0x808202,
              0x90000001: 0x808000,
              0xa0000001: 0x800002,
              0xb0000001: 0x8202,
              0xc0000001: 0x202,
              0xd0000001: 0x800200,
              0xe0000001: 0x8002,
              0xf0000001: 0x0,
              0x8000001: 0x808202,
              0x18000001: 0x808000,
              0x28000001: 0x800000,
              0x38000001: 0x200,
              0x48000001: 0x8000,
              0x58000001: 0x800002,
              0x68000001: 0x2,
              0x78000001: 0x8202,
              0x88000001: 0x8002,
              0x98000001: 0x800202,
              0xa8000001: 0x202,
              0xb8000001: 0x808200,
              0xc8000001: 0x800200,
              0xd8000001: 0x0,
              0xe8000001: 0x8200,
              0xf8000001: 0x808002
            }, {
              0x0: 0x40084010,
              0x1000000: 0x4000,
              0x2000000: 0x80000,
              0x3000000: 0x40080010,
              0x4000000: 0x40000010,
              0x5000000: 0x40084000,
              0x6000000: 0x40004000,
              0x7000000: 0x10,
              0x8000000: 0x84000,
              0x9000000: 0x40004010,
              0xa000000: 0x40000000,
              0xb000000: 0x84010,
              0xc000000: 0x80010,
              0xd000000: 0x0,
              0xe000000: 0x4010,
              0xf000000: 0x40080000,
              0x800000: 0x40004000,
              0x1800000: 0x84010,
              0x2800000: 0x10,
              0x3800000: 0x40004010,
              0x4800000: 0x40084010,
              0x5800000: 0x40000000,
              0x6800000: 0x80000,
              0x7800000: 0x40080010,
              0x8800000: 0x80010,
              0x9800000: 0x0,
              0xa800000: 0x4000,
              0xb800000: 0x40080000,
              0xc800000: 0x40000010,
              0xd800000: 0x84000,
              0xe800000: 0x40084000,
              0xf800000: 0x4010,
              0x10000000: 0x0,
              0x11000000: 0x40080010,
              0x12000000: 0x40004010,
              0x13000000: 0x40084000,
              0x14000000: 0x40080000,
              0x15000000: 0x10,
              0x16000000: 0x84010,
              0x17000000: 0x4000,
              0x18000000: 0x4010,
              0x19000000: 0x80000,
              0x1a000000: 0x80010,
              0x1b000000: 0x40000010,
              0x1c000000: 0x84000,
              0x1d000000: 0x40004000,
              0x1e000000: 0x40000000,
              0x1f000000: 0x40084010,
              0x10800000: 0x84010,
              0x11800000: 0x80000,
              0x12800000: 0x40080000,
              0x13800000: 0x4000,
              0x14800000: 0x40004000,
              0x15800000: 0x40084010,
              0x16800000: 0x10,
              0x17800000: 0x40000000,
              0x18800000: 0x40084000,
              0x19800000: 0x40000010,
              0x1a800000: 0x40004010,
              0x1b800000: 0x80010,
              0x1c800000: 0x0,
              0x1d800000: 0x4010,
              0x1e800000: 0x40080010,
              0x1f800000: 0x84000
            }, {
              0x0: 0x104,
              0x100000: 0x0,
              0x200000: 0x4000100,
              0x300000: 0x10104,
              0x400000: 0x10004,
              0x500000: 0x4000004,
              0x600000: 0x4010104,
              0x700000: 0x4010000,
              0x800000: 0x4000000,
              0x900000: 0x4010100,
              0xa00000: 0x10100,
              0xb00000: 0x4010004,
              0xc00000: 0x4000104,
              0xd00000: 0x10000,
              0xe00000: 0x4,
              0xf00000: 0x100,
              0x80000: 0x4010100,
              0x180000: 0x4010004,
              0x280000: 0x0,
              0x380000: 0x4000100,
              0x480000: 0x4000004,
              0x580000: 0x10000,
              0x680000: 0x10004,
              0x780000: 0x104,
              0x880000: 0x4,
              0x980000: 0x100,
              0xa80000: 0x4010000,
              0xb80000: 0x10104,
              0xc80000: 0x10100,
              0xd80000: 0x4000104,
              0xe80000: 0x4010104,
              0xf80000: 0x4000000,
              0x1000000: 0x4010100,
              0x1100000: 0x10004,
              0x1200000: 0x10000,
              0x1300000: 0x4000100,
              0x1400000: 0x100,
              0x1500000: 0x4010104,
              0x1600000: 0x4000004,
              0x1700000: 0x0,
              0x1800000: 0x4000104,
              0x1900000: 0x4000000,
              0x1a00000: 0x4,
              0x1b00000: 0x10100,
              0x1c00000: 0x4010000,
              0x1d00000: 0x104,
              0x1e00000: 0x10104,
              0x1f00000: 0x4010004,
              0x1080000: 0x4000000,
              0x1180000: 0x104,
              0x1280000: 0x4010100,
              0x1380000: 0x0,
              0x1480000: 0x10004,
              0x1580000: 0x4000100,
              0x1680000: 0x100,
              0x1780000: 0x4010004,
              0x1880000: 0x10000,
              0x1980000: 0x4010104,
              0x1a80000: 0x10104,
              0x1b80000: 0x4000004,
              0x1c80000: 0x4000104,
              0x1d80000: 0x4010000,
              0x1e80000: 0x4,
              0x1f80000: 0x10100
            }, {
              0x0: 0x80401000,
              0x10000: 0x80001040,
              0x20000: 0x401040,
              0x30000: 0x80400000,
              0x40000: 0x0,
              0x50000: 0x401000,
              0x60000: 0x80000040,
              0x70000: 0x400040,
              0x80000: 0x80000000,
              0x90000: 0x400000,
              0xa0000: 0x40,
              0xb0000: 0x80001000,
              0xc0000: 0x80400040,
              0xd0000: 0x1040,
              0xe0000: 0x1000,
              0xf0000: 0x80401040,
              0x8000: 0x80001040,
              0x18000: 0x40,
              0x28000: 0x80400040,
              0x38000: 0x80001000,
              0x48000: 0x401000,
              0x58000: 0x80401040,
              0x68000: 0x0,
              0x78000: 0x80400000,
              0x88000: 0x1000,
              0x98000: 0x80401000,
              0xa8000: 0x400000,
              0xb8000: 0x1040,
              0xc8000: 0x80000000,
              0xd8000: 0x400040,
              0xe8000: 0x401040,
              0xf8000: 0x80000040,
              0x100000: 0x400040,
              0x110000: 0x401000,
              0x120000: 0x80000040,
              0x130000: 0x0,
              0x140000: 0x1040,
              0x150000: 0x80400040,
              0x160000: 0x80401000,
              0x170000: 0x80001040,
              0x180000: 0x80401040,
              0x190000: 0x80000000,
              0x1a0000: 0x80400000,
              0x1b0000: 0x401040,
              0x1c0000: 0x80001000,
              0x1d0000: 0x400000,
              0x1e0000: 0x40,
              0x1f0000: 0x1000,
              0x108000: 0x80400000,
              0x118000: 0x80401040,
              0x128000: 0x0,
              0x138000: 0x401000,
              0x148000: 0x400040,
              0x158000: 0x80000000,
              0x168000: 0x80001040,
              0x178000: 0x40,
              0x188000: 0x80000040,
              0x198000: 0x1000,
              0x1a8000: 0x80001000,
              0x1b8000: 0x80400040,
              0x1c8000: 0x1040,
              0x1d8000: 0x80401000,
              0x1e8000: 0x400000,
              0x1f8000: 0x401040
            }, {
              0x0: 0x80,
              0x1000: 0x1040000,
              0x2000: 0x40000,
              0x3000: 0x20000000,
              0x4000: 0x20040080,
              0x5000: 0x1000080,
              0x6000: 0x21000080,
              0x7000: 0x40080,
              0x8000: 0x1000000,
              0x9000: 0x20040000,
              0xa000: 0x20000080,
              0xb000: 0x21040080,
              0xc000: 0x21040000,
              0xd000: 0x0,
              0xe000: 0x1040080,
              0xf000: 0x21000000,
              0x800: 0x1040080,
              0x1800: 0x21000080,
              0x2800: 0x80,
              0x3800: 0x1040000,
              0x4800: 0x40000,
              0x5800: 0x20040080,
              0x6800: 0x21040000,
              0x7800: 0x20000000,
              0x8800: 0x20040000,
              0x9800: 0x0,
              0xa800: 0x21040080,
              0xb800: 0x1000080,
              0xc800: 0x20000080,
              0xd800: 0x21000000,
              0xe800: 0x1000000,
              0xf800: 0x40080,
              0x10000: 0x40000,
              0x11000: 0x80,
              0x12000: 0x20000000,
              0x13000: 0x21000080,
              0x14000: 0x1000080,
              0x15000: 0x21040000,
              0x16000: 0x20040080,
              0x17000: 0x1000000,
              0x18000: 0x21040080,
              0x19000: 0x21000000,
              0x1a000: 0x1040000,
              0x1b000: 0x20040000,
              0x1c000: 0x40080,
              0x1d000: 0x20000080,
              0x1e000: 0x0,
              0x1f000: 0x1040080,
              0x10800: 0x21000080,
              0x11800: 0x1000000,
              0x12800: 0x1040000,
              0x13800: 0x20040080,
              0x14800: 0x20000000,
              0x15800: 0x1040080,
              0x16800: 0x80,
              0x17800: 0x21040000,
              0x18800: 0x40080,
              0x19800: 0x21040080,
              0x1a800: 0x0,
              0x1b800: 0x21000000,
              0x1c800: 0x1000080,
              0x1d800: 0x40000,
              0x1e800: 0x20040000,
              0x1f800: 0x20000080
            }, {
              0x0: 0x10000008,
              0x100: 0x2000,
              0x200: 0x10200000,
              0x300: 0x10202008,
              0x400: 0x10002000,
              0x500: 0x200000,
              0x600: 0x200008,
              0x700: 0x10000000,
              0x800: 0x0,
              0x900: 0x10002008,
              0xa00: 0x202000,
              0xb00: 0x8,
              0xc00: 0x10200008,
              0xd00: 0x202008,
              0xe00: 0x2008,
              0xf00: 0x10202000,
              0x80: 0x10200000,
              0x180: 0x10202008,
              0x280: 0x8,
              0x380: 0x200000,
              0x480: 0x202008,
              0x580: 0x10000008,
              0x680: 0x10002000,
              0x780: 0x2008,
              0x880: 0x200008,
              0x980: 0x2000,
              0xa80: 0x10002008,
              0xb80: 0x10200008,
              0xc80: 0x0,
              0xd80: 0x10202000,
              0xe80: 0x202000,
              0xf80: 0x10000000,
              0x1000: 0x10002000,
              0x1100: 0x10200008,
              0x1200: 0x10202008,
              0x1300: 0x2008,
              0x1400: 0x200000,
              0x1500: 0x10000000,
              0x1600: 0x10000008,
              0x1700: 0x202000,
              0x1800: 0x202008,
              0x1900: 0x0,
              0x1a00: 0x8,
              0x1b00: 0x10200000,
              0x1c00: 0x2000,
              0x1d00: 0x10002008,
              0x1e00: 0x10202000,
              0x1f00: 0x200008,
              0x1080: 0x8,
              0x1180: 0x202000,
              0x1280: 0x200000,
              0x1380: 0x10000008,
              0x1480: 0x10002000,
              0x1580: 0x2008,
              0x1680: 0x10202008,
              0x1780: 0x10200000,
              0x1880: 0x10202000,
              0x1980: 0x10200008,
              0x1a80: 0x2000,
              0x1b80: 0x202008,
              0x1c80: 0x200008,
              0x1d80: 0x0,
              0x1e80: 0x10000000,
              0x1f80: 0x10002008
            }, {
              0x0: 0x100000,
              0x10: 0x2000401,
              0x20: 0x400,
              0x30: 0x100401,
              0x40: 0x2100401,
              0x50: 0x0,
              0x60: 0x1,
              0x70: 0x2100001,
              0x80: 0x2000400,
              0x90: 0x100001,
              0xa0: 0x2000001,
              0xb0: 0x2100400,
              0xc0: 0x2100000,
              0xd0: 0x401,
              0xe0: 0x100400,
              0xf0: 0x2000000,
              0x8: 0x2100001,
              0x18: 0x0,
              0x28: 0x2000401,
              0x38: 0x2100400,
              0x48: 0x100000,
              0x58: 0x2000001,
              0x68: 0x2000000,
              0x78: 0x401,
              0x88: 0x100401,
              0x98: 0x2000400,
              0xa8: 0x2100000,
              0xb8: 0x100001,
              0xc8: 0x400,
              0xd8: 0x2100401,
              0xe8: 0x1,
              0xf8: 0x100400,
              0x100: 0x2000000,
              0x110: 0x100000,
              0x120: 0x2000401,
              0x130: 0x2100001,
              0x140: 0x100001,
              0x150: 0x2000400,
              0x160: 0x2100400,
              0x170: 0x100401,
              0x180: 0x401,
              0x190: 0x2100401,
              0x1a0: 0x100400,
              0x1b0: 0x1,
              0x1c0: 0x0,
              0x1d0: 0x2100000,
              0x1e0: 0x2000001,
              0x1f0: 0x400,
              0x108: 0x100400,
              0x118: 0x2000401,
              0x128: 0x2100001,
              0x138: 0x1,
              0x148: 0x2000000,
              0x158: 0x100000,
              0x168: 0x401,
              0x178: 0x2100400,
              0x188: 0x2000001,
              0x198: 0x2100000,
              0x1a8: 0x0,
              0x1b8: 0x2100401,
              0x1c8: 0x100401,
              0x1d8: 0x400,
              0x1e8: 0x2000400,
              0x1f8: 0x100001
            }, {
              0x0: 0x8000820,
              0x1: 0x20000,
              0x2: 0x8000000,
              0x3: 0x20,
              0x4: 0x20020,
              0x5: 0x8020820,
              0x6: 0x8020800,
              0x7: 0x800,
              0x8: 0x8020000,
              0x9: 0x8000800,
              0xa: 0x20800,
              0xb: 0x8020020,
              0xc: 0x820,
              0xd: 0x0,
              0xe: 0x8000020,
              0xf: 0x20820,
              0x80000000: 0x800,
              0x80000001: 0x8020820,
              0x80000002: 0x8000820,
              0x80000003: 0x8000000,
              0x80000004: 0x8020000,
              0x80000005: 0x20800,
              0x80000006: 0x20820,
              0x80000007: 0x20,
              0x80000008: 0x8000020,
              0x80000009: 0x820,
              0x8000000a: 0x20020,
              0x8000000b: 0x8020800,
              0x8000000c: 0x0,
              0x8000000d: 0x8020020,
              0x8000000e: 0x8000800,
              0x8000000f: 0x20000,
              0x10: 0x20820,
              0x11: 0x8020800,
              0x12: 0x20,
              0x13: 0x800,
              0x14: 0x8000800,
              0x15: 0x8000020,
              0x16: 0x8020020,
              0x17: 0x20000,
              0x18: 0x0,
              0x19: 0x20020,
              0x1a: 0x8020000,
              0x1b: 0x8000820,
              0x1c: 0x8020820,
              0x1d: 0x20800,
              0x1e: 0x820,
              0x1f: 0x8000000,
              0x80000010: 0x20000,
              0x80000011: 0x800,
              0x80000012: 0x8020020,
              0x80000013: 0x20820,
              0x80000014: 0x20,
              0x80000015: 0x8020000,
              0x80000016: 0x8000000,
              0x80000017: 0x8000820,
              0x80000018: 0x8020820,
              0x80000019: 0x8000020,
              0x8000001a: 0x8000800,
              0x8000001b: 0x0,
              0x8000001c: 0x20800,
              0x8000001d: 0x820,
              0x8000001e: 0x20020,
              0x8000001f: 0x8020800
            }];

            // Masks that select the SBOX input
            var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];

            /**
             * DES block cipher algorithm.
             */
            var DES = C_algo.DES = BlockCipher.extend({
              _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;

                // Select 56 bits according to PC1
                var keyBits = [];
                for (var i = 0; i < 56; i++) {
                  var keyBitPos = PC1[i] - 1;
                  keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
                }

                // Assemble 16 subkeys
                var subKeys = this._subKeys = [];
                for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                  // Create subkey
                  var subKey = subKeys[nSubKey] = [];

                  // Shortcut
                  var bitShift = BIT_SHIFTS[nSubKey];

                  // Select 48 bits according to PC2
                  for (var i = 0; i < 24; i++) {
                    // Select from the left 28 key bits
                    subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;

                    // Select from the right 28 key bits
                    subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
                  }

                  // Since each subkey is applied to an expanded 32-bit input,
                  // the subkey can be broken into 8 values scaled to 32-bits,
                  // which allows the key to be used without expansion
                  subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
                  for (var i = 1; i < 7; i++) {
                    subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
                  }
                  subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
                }

                // Compute inverse subkeys
                var invSubKeys = this._invSubKeys = [];
                for (var i = 0; i < 16; i++) {
                  invSubKeys[i] = subKeys[15 - i];
                }
              },
              encryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._subKeys);
              },
              decryptBlock: function (M, offset) {
                this._doCryptBlock(M, offset, this._invSubKeys);
              },
              _doCryptBlock: function (M, offset, subKeys) {
                // Get input
                this._lBlock = M[offset];
                this._rBlock = M[offset + 1];

                // Initial permutation
                exchangeLR.call(this, 4, 0x0f0f0f0f);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeLR.call(this, 1, 0x55555555);

                // Rounds
                for (var round = 0; round < 16; round++) {
                  // Shortcuts
                  var subKey = subKeys[round];
                  var lBlock = this._lBlock;
                  var rBlock = this._rBlock;

                  // Feistel function
                  var f = 0;
                  for (var i = 0; i < 8; i++) {
                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                  }
                  this._lBlock = rBlock;
                  this._rBlock = lBlock ^ f;
                }

                // Undo swap from last round
                var t = this._lBlock;
                this._lBlock = this._rBlock;
                this._rBlock = t;

                // Final permutation
                exchangeLR.call(this, 1, 0x55555555);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeLR.call(this, 4, 0x0f0f0f0f);

                // Set output
                M[offset] = this._lBlock;
                M[offset + 1] = this._rBlock;
              },
              keySize: 64 / 32,
              ivSize: 64 / 32,
              blockSize: 64 / 32
            });

            // Swap bits across the left and right words
            function exchangeLR(offset, mask) {
              var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
              this._rBlock ^= t;
              this._lBlock ^= t << offset;
            }
            function exchangeRL(offset, mask) {
              var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
              this._lBlock ^= t;
              this._rBlock ^= t << offset;
            }

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
             */
            C.DES = BlockCipher._createHelper(DES);

            /**
             * Triple-DES block cipher algorithm.
             */
            var TripleDES = C_algo.TripleDES = BlockCipher.extend({
              _doReset: function () {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                // Make sure the key length is valid (64, 128 or >= 192 bit)
                if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
                  throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
                }

                // Extend the key according to the keying options defined in 3DES standard
                var key1 = keyWords.slice(0, 2);
                var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
                var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

                // Create DES instances
                this._des1 = DES.createEncryptor(WordArray.create(key1));
                this._des2 = DES.createEncryptor(WordArray.create(key2));
                this._des3 = DES.createEncryptor(WordArray.create(key3));
              },
              encryptBlock: function (M, offset) {
                this._des1.encryptBlock(M, offset);
                this._des2.decryptBlock(M, offset);
                this._des3.encryptBlock(M, offset);
              },
              decryptBlock: function (M, offset) {
                this._des3.decryptBlock(M, offset);
                this._des2.encryptBlock(M, offset);
                this._des1.decryptBlock(M, offset);
              },
              keySize: 192 / 32,
              ivSize: 64 / 32,
              blockSize: 64 / 32
            });

            /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
             */
            C.TripleDES = BlockCipher._createHelper(TripleDES);
          })();
          return CryptoJS.TripleDES;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1,
        './enc-base64': __cjsMetaURL$2,
        './md5': __cjsMetaURL$3,
        './evpkdf': __cjsMetaURL$4,
        './cipher-core': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/x64-core.js", ['./cjs-loader.mjs', './core.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;
  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        (function (root, factory) {
          if (typeof exports === "object") {
            // CommonJS
            module.exports = exports = factory(require("./core"));
          } else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          } else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        })(this, function (CryptoJS) {
          (function (undefined$1) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var Base = C_lib.Base;
            var X32WordArray = C_lib.WordArray;

            /**
             * x64 namespace.
             */
            var C_x64 = C.x64 = {};

            /**
             * A 64-bit word.
             */
            var X64Word = C_x64.Word = Base.extend({
              /**
               * Initializes a newly created 64-bit word.
               *
               * @param {number} high The high 32 bits.
               * @param {number} low The low 32 bits.
               *
               * @example
               *
               *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
               */
              init: function (high, low) {
                this.high = high;
                this.low = low;
              }

              /**
               * Bitwise NOTs this word.
               *
               * @return {X64Word} A new x64-Word object after negating.
               *
               * @example
               *
               *     var negated = x64Word.not();
               */
              // not: function () {
              // var high = ~this.high;
              // var low = ~this.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Bitwise ANDs this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to AND with this word.
               *
               * @return {X64Word} A new x64-Word object after ANDing.
               *
               * @example
               *
               *     var anded = x64Word.and(anotherX64Word);
               */
              // and: function (word) {
              // var high = this.high & word.high;
              // var low = this.low & word.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Bitwise ORs this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to OR with this word.
               *
               * @return {X64Word} A new x64-Word object after ORing.
               *
               * @example
               *
               *     var ored = x64Word.or(anotherX64Word);
               */
              // or: function (word) {
              // var high = this.high | word.high;
              // var low = this.low | word.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Bitwise XORs this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to XOR with this word.
               *
               * @return {X64Word} A new x64-Word object after XORing.
               *
               * @example
               *
               *     var xored = x64Word.xor(anotherX64Word);
               */
              // xor: function (word) {
              // var high = this.high ^ word.high;
              // var low = this.low ^ word.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Shifts this word n bits to the left.
               *
               * @param {number} n The number of bits to shift.
               *
               * @return {X64Word} A new x64-Word object after shifting.
               *
               * @example
               *
               *     var shifted = x64Word.shiftL(25);
               */
              // shiftL: function (n) {
              // if (n < 32) {
              // var high = (this.high << n) | (this.low >>> (32 - n));
              // var low = this.low << n;
              // } else {
              // var high = this.low << (n - 32);
              // var low = 0;
              // }

              // return X64Word.create(high, low);
              // },

              /**
               * Shifts this word n bits to the right.
               *
               * @param {number} n The number of bits to shift.
               *
               * @return {X64Word} A new x64-Word object after shifting.
               *
               * @example
               *
               *     var shifted = x64Word.shiftR(7);
               */
              // shiftR: function (n) {
              // if (n < 32) {
              // var low = (this.low >>> n) | (this.high << (32 - n));
              // var high = this.high >>> n;
              // } else {
              // var low = this.high >>> (n - 32);
              // var high = 0;
              // }

              // return X64Word.create(high, low);
              // },

              /**
               * Rotates this word n bits to the left.
               *
               * @param {number} n The number of bits to rotate.
               *
               * @return {X64Word} A new x64-Word object after rotating.
               *
               * @example
               *
               *     var rotated = x64Word.rotL(25);
               */
              // rotL: function (n) {
              // return this.shiftL(n).or(this.shiftR(64 - n));
              // },

              /**
               * Rotates this word n bits to the right.
               *
               * @param {number} n The number of bits to rotate.
               *
               * @return {X64Word} A new x64-Word object after rotating.
               *
               * @example
               *
               *     var rotated = x64Word.rotR(7);
               */
              // rotR: function (n) {
              // return this.shiftR(n).or(this.shiftL(64 - n));
              // },

              /**
               * Adds this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to add with this word.
               *
               * @return {X64Word} A new x64-Word object after adding.
               *
               * @example
               *
               *     var added = x64Word.add(anotherX64Word);
               */
              // add: function (word) {
              // var low = (this.low + word.low) | 0;
              // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
              // var high = (this.high + word.high + carry) | 0;

              // return X64Word.create(high, low);
              // }
            });

            /**
             * An array of 64-bit words.
             *
             * @property {Array} words The array of CryptoJS.x64.Word objects.
             * @property {number} sigBytes The number of significant bytes in this word array.
             */
            var X64WordArray = C_x64.WordArray = Base.extend({
              /**
               * Initializes a newly created word array.
               *
               * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
               * @param {number} sigBytes (Optional) The number of significant bytes in the words.
               *
               * @example
               *
               *     var wordArray = CryptoJS.x64.WordArray.create();
               *
               *     var wordArray = CryptoJS.x64.WordArray.create([
               *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
               *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
               *     ]);
               *
               *     var wordArray = CryptoJS.x64.WordArray.create([
               *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
               *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
               *     ], 10);
               */
              init: function (words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined$1) {
                  this.sigBytes = sigBytes;
                } else {
                  this.sigBytes = words.length * 8;
                }
              },
              /**
               * Converts this 64-bit word array to a 32-bit word array.
               *
               * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
               *
               * @example
               *
               *     var x32WordArray = x64WordArray.toX32();
               */
              toX32: function () {
                // Shortcuts
                var x64Words = this.words;
                var x64WordsLength = x64Words.length;

                // Convert
                var x32Words = [];
                for (var i = 0; i < x64WordsLength; i++) {
                  var x64Word = x64Words[i];
                  x32Words.push(x64Word.high);
                  x32Words.push(x64Word.low);
                }
                return X32WordArray.create(x32Words, this.sigBytes);
              },
              /**
               * Creates a copy of this word array.
               *
               * @return {X64WordArray} The clone.
               *
               * @example
               *
               *     var clone = x64WordArray.clone();
               */
              clone: function () {
                var clone = Base.clone.call(this);

                // Clone "words" array
                var words = clone.words = this.words.slice(0);

                // Clone each X64Word object
                var wordsLength = words.length;
                for (var i = 0; i < wordsLength; i++) {
                  words[i] = words[i].clone();
                }
                return clone;
              }
            });
          })();
          return CryptoJS;
        });

        // #endregion ORIGINAL CODE

        module.exports;
      }, () => ({
        './core': __cjsMetaURL$1
      }));
    }
  };
});

} }; });